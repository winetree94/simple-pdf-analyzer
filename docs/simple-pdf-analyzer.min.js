/*! For license information please see simple-pdf-analyzer.min.js.LICENSE.txt */
!function(I,g){"object"==typeof exports&&"object"==typeof module?module.exports=g():"function"==typeof define&&define.amd?define([],g):"object"==typeof exports?exports.SimplePdfAnalyzer=g():I.SimplePdfAnalyzer=g()}(self,(function(){return function(){"use strict";var __webpack_modules__={"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/main.scss":function(module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(function(i){return i[1]});\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, "body {\\n  width: 100%;\\n  height: 100vh;\\n  margin: 0;\\n}\\n\\n#root {\\n  width: 100%;\\n  height: 100vh;\\n}\\n\\nul {\\n  list-style: none;\\n  padding-left: 0px;\\n  background-color: #FFFFFF;\\n}\\nul.odd {\\n  background-color: #F4F4F4;\\n}\\n\\nli {\\n  cursor: pointer;\\n}\\nli li {\\n  margin-left: 20px;\\n}", ""]);\n// Exports\n/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3NyYy9tYWluLnNjc3MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TaW1wbGVQZGZBbmFseXplci8uL3NyYy9tYWluLnNjc3M/MTUxYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZnVuY3Rpb24oaSl7cmV0dXJuIGlbMV19KTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImJvZHkge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMHZoO1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4jcm9vdCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwdmg7XFxufVxcblxcbnVsIHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICBwYWRkaW5nLWxlZnQ6IDBweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7XFxufVxcbnVsLm9kZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjRGNEY0O1xcbn1cXG5cXG5saSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbmxpIGxpIHtcXG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xcbn1cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/main.scss\n')},"./node_modules/css-loader/dist/runtime/api.js":function(module){eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item);\n\n      if (item[2]) {\n        return "@media ".concat(item[2], " {").concat(content, "}");\n      }\n\n      return content;\n    }).join("");\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === "string") {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, ""]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vU2ltcGxlUGRmQW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/api.js\n')},"./node_modules/pdfjs-dist/lib/core/annotation.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.getQuadPoints = getQuadPoints;\nexports.MarkupAnnotation = exports.AnnotationFactory = exports.AnnotationBorderStyle = exports.Annotation = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _obj = __webpack_require__(/*! ./obj.js */ "./node_modules/pdfjs-dist/lib/core/obj.js");\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nvar _default_appearance = __webpack_require__(/*! ./default_appearance.js */ "./node_modules/pdfjs-dist/lib/core/default_appearance.js");\n\nvar _primitives = __webpack_require__(/*! ./primitives.js */ "./node_modules/pdfjs-dist/lib/core/primitives.js");\n\nvar _colorspace = __webpack_require__(/*! ./colorspace.js */ "./node_modules/pdfjs-dist/lib/core/colorspace.js");\n\nvar _operator_list = __webpack_require__(/*! ./operator_list.js */ "./node_modules/pdfjs-dist/lib/core/operator_list.js");\n\nvar _stream = __webpack_require__(/*! ./stream.js */ "./node_modules/pdfjs-dist/lib/core/stream.js");\n\nvar _writer = __webpack_require__(/*! ./writer.js */ "./node_modules/pdfjs-dist/lib/core/writer.js");\n\nclass AnnotationFactory {\n  static create(xref, ref, pdfManager, idFactory) {\n    return pdfManager.ensureCatalog("acroForm").then(acroForm => {\n      return pdfManager.ensure(this, "_create", [xref, ref, pdfManager, idFactory, acroForm]);\n    });\n  }\n\n  static _create(xref, ref, pdfManager, idFactory, acroForm) {\n    const dict = xref.fetchIfRef(ref);\n\n    if (!(0, _primitives.isDict)(dict)) {\n      return undefined;\n    }\n\n    const id = (0, _primitives.isRef)(ref) ? ref.toString() : `annot_${idFactory.createObjId()}`;\n    let subtype = dict.get("Subtype");\n    subtype = (0, _primitives.isName)(subtype) ? subtype.name : null;\n    const parameters = {\n      xref,\n      ref,\n      dict,\n      subtype,\n      id,\n      pdfManager,\n      acroForm: acroForm instanceof _primitives.Dict ? acroForm : _primitives.Dict.empty\n    };\n\n    switch (subtype) {\n      case "Link":\n        return new LinkAnnotation(parameters);\n\n      case "Text":\n        return new TextAnnotation(parameters);\n\n      case "Widget":\n        let fieldType = (0, _core_utils.getInheritableProperty)({\n          dict,\n          key: "FT"\n        });\n        fieldType = (0, _primitives.isName)(fieldType) ? fieldType.name : null;\n\n        switch (fieldType) {\n          case "Tx":\n            return new TextWidgetAnnotation(parameters);\n\n          case "Btn":\n            return new ButtonWidgetAnnotation(parameters);\n\n          case "Ch":\n            return new ChoiceWidgetAnnotation(parameters);\n        }\n\n        (0, _util.warn)(\'Unimplemented widget field type "\' + fieldType + \'", \' + "falling back to base field type.");\n        return new WidgetAnnotation(parameters);\n\n      case "Popup":\n        return new PopupAnnotation(parameters);\n\n      case "FreeText":\n        return new FreeTextAnnotation(parameters);\n\n      case "Line":\n        return new LineAnnotation(parameters);\n\n      case "Square":\n        return new SquareAnnotation(parameters);\n\n      case "Circle":\n        return new CircleAnnotation(parameters);\n\n      case "PolyLine":\n        return new PolylineAnnotation(parameters);\n\n      case "Polygon":\n        return new PolygonAnnotation(parameters);\n\n      case "Caret":\n        return new CaretAnnotation(parameters);\n\n      case "Ink":\n        return new InkAnnotation(parameters);\n\n      case "Highlight":\n        return new HighlightAnnotation(parameters);\n\n      case "Underline":\n        return new UnderlineAnnotation(parameters);\n\n      case "Squiggly":\n        return new SquigglyAnnotation(parameters);\n\n      case "StrikeOut":\n        return new StrikeOutAnnotation(parameters);\n\n      case "Stamp":\n        return new StampAnnotation(parameters);\n\n      case "FileAttachment":\n        return new FileAttachmentAnnotation(parameters);\n\n      default:\n        if (!subtype) {\n          (0, _util.warn)("Annotation is missing the required /Subtype.");\n        } else {\n          (0, _util.warn)(\'Unimplemented annotation type "\' + subtype + \'", \' + "falling back to base annotation.");\n        }\n\n        return new Annotation(parameters);\n    }\n  }\n\n}\n\nexports.AnnotationFactory = AnnotationFactory;\n\nfunction getQuadPoints(dict, rect) {\n  if (!dict.has("QuadPoints")) {\n    return null;\n  }\n\n  const quadPoints = dict.getArray("QuadPoints");\n\n  if (!Array.isArray(quadPoints) || quadPoints.length === 0 || quadPoints.length % 8 > 0) {\n    return null;\n  }\n\n  const quadPointsLists = [];\n\n  for (let i = 0, ii = quadPoints.length / 8; i < ii; i++) {\n    quadPointsLists.push([]);\n\n    for (let j = i * 8, jj = i * 8 + 8; j < jj; j += 2) {\n      const x = quadPoints[j];\n      const y = quadPoints[j + 1];\n\n      if (rect !== null && (x < rect[0] || x > rect[2] || y < rect[1] || y > rect[3])) {\n        return null;\n      }\n\n      quadPointsLists[i].push({\n        x,\n        y\n      });\n    }\n  }\n\n  return quadPointsLists.map(quadPointsList => {\n    const [minX, maxX, minY, maxY] = quadPointsList.reduce(([mX, MX, mY, MY], quadPoint) => [Math.min(mX, quadPoint.x), Math.max(MX, quadPoint.x), Math.min(mY, quadPoint.y), Math.max(MY, quadPoint.y)], [Number.MAX_VALUE, Number.MIN_VALUE, Number.MAX_VALUE, Number.MIN_VALUE]);\n    return [{\n      x: minX,\n      y: maxY\n    }, {\n      x: maxX,\n      y: maxY\n    }, {\n      x: minX,\n      y: minY\n    }, {\n      x: maxX,\n      y: minY\n    }];\n  });\n}\n\nfunction getTransformMatrix(rect, bbox, matrix) {\n  const [minX, minY, maxX, maxY] = _util.Util.getAxialAlignedBoundingBox(bbox, matrix);\n\n  if (minX === maxX || minY === maxY) {\n    return [1, 0, 0, 1, rect[0], rect[1]];\n  }\n\n  const xRatio = (rect[2] - rect[0]) / (maxX - minX);\n  const yRatio = (rect[3] - rect[1]) / (maxY - minY);\n  return [xRatio, 0, 0, yRatio, rect[0] - minX * xRatio, rect[1] - minY * yRatio];\n}\n\nclass Annotation {\n  constructor(params) {\n    const dict = params.dict;\n    this.setContents(dict.get("Contents"));\n    this.setModificationDate(dict.get("M"));\n    this.setFlags(dict.get("F"));\n    this.setRectangle(dict.getArray("Rect"));\n    this.setColor(dict.getArray("C"));\n    this.setBorderStyle(dict);\n    this.setAppearance(dict);\n    this._streams = [];\n\n    if (this.appearance) {\n      this._streams.push(this.appearance);\n    }\n\n    this.data = {\n      annotationFlags: this.flags,\n      borderStyle: this.borderStyle,\n      color: this.color,\n      contents: this.contents,\n      hasAppearance: !!this.appearance,\n      id: params.id,\n      modificationDate: this.modificationDate,\n      rect: this.rectangle,\n      subtype: params.subtype\n    };\n    this._fallbackFontDict = null;\n  }\n\n  _hasFlag(flags, flag) {\n    return !!(flags & flag);\n  }\n\n  _isViewable(flags) {\n    return !this._hasFlag(flags, _util.AnnotationFlag.INVISIBLE) && !this._hasFlag(flags, _util.AnnotationFlag.NOVIEW);\n  }\n\n  _isPrintable(flags) {\n    return this._hasFlag(flags, _util.AnnotationFlag.PRINT) && !this._hasFlag(flags, _util.AnnotationFlag.INVISIBLE);\n  }\n\n  isHidden(annotationStorage) {\n    const data = annotationStorage && annotationStorage[this.data.id];\n\n    if (data && "hidden" in data) {\n      return data.hidden;\n    }\n\n    return this._hasFlag(this.flags, _util.AnnotationFlag.HIDDEN);\n  }\n\n  get viewable() {\n    if (this.data.quadPoints === null) {\n      return false;\n    }\n\n    if (this.flags === 0) {\n      return true;\n    }\n\n    return this._isViewable(this.flags);\n  }\n\n  get printable() {\n    if (this.data.quadPoints === null) {\n      return false;\n    }\n\n    if (this.flags === 0) {\n      return false;\n    }\n\n    return this._isPrintable(this.flags);\n  }\n\n  setContents(contents) {\n    this.contents = (0, _util.stringToPDFString)(contents || "");\n  }\n\n  setModificationDate(modificationDate) {\n    this.modificationDate = (0, _util.isString)(modificationDate) ? modificationDate : null;\n  }\n\n  setFlags(flags) {\n    this.flags = Number.isInteger(flags) && flags > 0 ? flags : 0;\n  }\n\n  hasFlag(flag) {\n    return this._hasFlag(this.flags, flag);\n  }\n\n  setRectangle(rectangle) {\n    if (Array.isArray(rectangle) && rectangle.length === 4) {\n      this.rectangle = _util.Util.normalizeRect(rectangle);\n    } else {\n      this.rectangle = [0, 0, 0, 0];\n    }\n  }\n\n  setColor(color) {\n    const rgbColor = new Uint8ClampedArray(3);\n\n    if (!Array.isArray(color)) {\n      this.color = rgbColor;\n      return;\n    }\n\n    switch (color.length) {\n      case 0:\n        this.color = null;\n        break;\n\n      case 1:\n        _colorspace.ColorSpace.singletons.gray.getRgbItem(color, 0, rgbColor, 0);\n\n        this.color = rgbColor;\n        break;\n\n      case 3:\n        _colorspace.ColorSpace.singletons.rgb.getRgbItem(color, 0, rgbColor, 0);\n\n        this.color = rgbColor;\n        break;\n\n      case 4:\n        _colorspace.ColorSpace.singletons.cmyk.getRgbItem(color, 0, rgbColor, 0);\n\n        this.color = rgbColor;\n        break;\n\n      default:\n        this.color = rgbColor;\n        break;\n    }\n  }\n\n  setBorderStyle(borderStyle) {\n    this.borderStyle = new AnnotationBorderStyle();\n\n    if (!(0, _primitives.isDict)(borderStyle)) {\n      return;\n    }\n\n    if (borderStyle.has("BS")) {\n      const dict = borderStyle.get("BS");\n      const dictType = dict.get("Type");\n\n      if (!dictType || (0, _primitives.isName)(dictType, "Border")) {\n        this.borderStyle.setWidth(dict.get("W"), this.rectangle);\n        this.borderStyle.setStyle(dict.get("S"));\n        this.borderStyle.setDashArray(dict.getArray("D"));\n      }\n    } else if (borderStyle.has("Border")) {\n      const array = borderStyle.getArray("Border");\n\n      if (Array.isArray(array) && array.length >= 3) {\n        this.borderStyle.setHorizontalCornerRadius(array[0]);\n        this.borderStyle.setVerticalCornerRadius(array[1]);\n        this.borderStyle.setWidth(array[2], this.rectangle);\n\n        if (array.length === 4) {\n          this.borderStyle.setDashArray(array[3]);\n        }\n      }\n    } else {\n      this.borderStyle.setWidth(0);\n    }\n  }\n\n  setAppearance(dict) {\n    this.appearance = null;\n    const appearanceStates = dict.get("AP");\n\n    if (!(0, _primitives.isDict)(appearanceStates)) {\n      return;\n    }\n\n    const normalAppearanceState = appearanceStates.get("N");\n\n    if ((0, _primitives.isStream)(normalAppearanceState)) {\n      this.appearance = normalAppearanceState;\n      return;\n    }\n\n    if (!(0, _primitives.isDict)(normalAppearanceState)) {\n      return;\n    }\n\n    const as = dict.get("AS");\n\n    if (!(0, _primitives.isName)(as) || !normalAppearanceState.has(as.name)) {\n      return;\n    }\n\n    this.appearance = normalAppearanceState.get(as.name);\n  }\n\n  loadResources(keys) {\n    return this.appearance.dict.getAsync("Resources").then(resources => {\n      if (!resources) {\n        return undefined;\n      }\n\n      const objectLoader = new _obj.ObjectLoader(resources, keys, resources.xref);\n      return objectLoader.load().then(function () {\n        return resources;\n      });\n    });\n  }\n\n  getOperatorList(evaluator, task, renderForms, annotationStorage) {\n    if (!this.appearance) {\n      return Promise.resolve(new _operator_list.OperatorList());\n    }\n\n    const appearance = this.appearance;\n    const data = this.data;\n    const appearanceDict = appearance.dict;\n    const resourcesPromise = this.loadResources(["ExtGState", "ColorSpace", "Pattern", "Shading", "XObject", "Font"]);\n    const bbox = appearanceDict.getArray("BBox") || [0, 0, 1, 1];\n    const matrix = appearanceDict.getArray("Matrix") || [1, 0, 0, 1, 0, 0];\n    const transform = getTransformMatrix(data.rect, bbox, matrix);\n    return resourcesPromise.then(resources => {\n      const opList = new _operator_list.OperatorList();\n      opList.addOp(_util.OPS.beginAnnotation, [data.rect, transform, matrix]);\n      return evaluator.getOperatorList({\n        stream: appearance,\n        task,\n        resources,\n        operatorList: opList,\n        fallbackFontDict: this._fallbackFontDict\n      }).then(() => {\n        opList.addOp(_util.OPS.endAnnotation, []);\n        this.reset();\n        return opList;\n      });\n    });\n  }\n\n  async save(evaluator, task, annotationStorage) {\n    return null;\n  }\n\n  getFieldObject() {\n    return null;\n  }\n\n  reset() {\n    for (const stream of this._streams) {\n      stream.reset();\n    }\n  }\n\n}\n\nexports.Annotation = Annotation;\n\nclass AnnotationBorderStyle {\n  constructor() {\n    this.width = 1;\n    this.style = _util.AnnotationBorderStyleType.SOLID;\n    this.dashArray = [3];\n    this.horizontalCornerRadius = 0;\n    this.verticalCornerRadius = 0;\n  }\n\n  setWidth(width, rect = [0, 0, 0, 0]) {\n    if ((0, _primitives.isName)(width)) {\n      this.width = 0;\n      return;\n    }\n\n    if (Number.isInteger(width)) {\n      if (width > 0) {\n        const maxWidth = (rect[2] - rect[0]) / 2;\n        const maxHeight = (rect[3] - rect[1]) / 2;\n\n        if (maxWidth > 0 && maxHeight > 0 && (width > maxWidth || width > maxHeight)) {\n          (0, _util.warn)(`AnnotationBorderStyle.setWidth - ignoring width: ${width}`);\n          width = 1;\n        }\n      }\n\n      this.width = width;\n    }\n  }\n\n  setStyle(style) {\n    if (!(0, _primitives.isName)(style)) {\n      return;\n    }\n\n    switch (style.name) {\n      case "S":\n        this.style = _util.AnnotationBorderStyleType.SOLID;\n        break;\n\n      case "D":\n        this.style = _util.AnnotationBorderStyleType.DASHED;\n        break;\n\n      case "B":\n        this.style = _util.AnnotationBorderStyleType.BEVELED;\n        break;\n\n      case "I":\n        this.style = _util.AnnotationBorderStyleType.INSET;\n        break;\n\n      case "U":\n        this.style = _util.AnnotationBorderStyleType.UNDERLINE;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  setDashArray(dashArray) {\n    if (Array.isArray(dashArray) && dashArray.length > 0) {\n      let isValid = true;\n      let allZeros = true;\n\n      for (const element of dashArray) {\n        const validNumber = +element >= 0;\n\n        if (!validNumber) {\n          isValid = false;\n          break;\n        } else if (element > 0) {\n          allZeros = false;\n        }\n      }\n\n      if (isValid && !allZeros) {\n        this.dashArray = dashArray;\n      } else {\n        this.width = 0;\n      }\n    } else if (dashArray) {\n      this.width = 0;\n    }\n  }\n\n  setHorizontalCornerRadius(radius) {\n    if (Number.isInteger(radius)) {\n      this.horizontalCornerRadius = radius;\n    }\n  }\n\n  setVerticalCornerRadius(radius) {\n    if (Number.isInteger(radius)) {\n      this.verticalCornerRadius = radius;\n    }\n  }\n\n}\n\nexports.AnnotationBorderStyle = AnnotationBorderStyle;\n\nclass MarkupAnnotation extends Annotation {\n  constructor(parameters) {\n    super(parameters);\n    const dict = parameters.dict;\n\n    if (dict.has("IRT")) {\n      const rawIRT = dict.getRaw("IRT");\n      this.data.inReplyTo = (0, _primitives.isRef)(rawIRT) ? rawIRT.toString() : null;\n      const rt = dict.get("RT");\n      this.data.replyType = (0, _primitives.isName)(rt) ? rt.name : _util.AnnotationReplyType.REPLY;\n    }\n\n    if (this.data.replyType === _util.AnnotationReplyType.GROUP) {\n      const parent = dict.get("IRT");\n      this.data.title = (0, _util.stringToPDFString)(parent.get("T") || "");\n      this.setContents(parent.get("Contents"));\n      this.data.contents = this.contents;\n\n      if (!parent.has("CreationDate")) {\n        this.data.creationDate = null;\n      } else {\n        this.setCreationDate(parent.get("CreationDate"));\n        this.data.creationDate = this.creationDate;\n      }\n\n      if (!parent.has("M")) {\n        this.data.modificationDate = null;\n      } else {\n        this.setModificationDate(parent.get("M"));\n        this.data.modificationDate = this.modificationDate;\n      }\n\n      this.data.hasPopup = parent.has("Popup");\n\n      if (!parent.has("C")) {\n        this.data.color = null;\n      } else {\n        this.setColor(parent.getArray("C"));\n        this.data.color = this.color;\n      }\n    } else {\n      this.data.title = (0, _util.stringToPDFString)(dict.get("T") || "");\n      this.setCreationDate(dict.get("CreationDate"));\n      this.data.creationDate = this.creationDate;\n      this.data.hasPopup = dict.has("Popup");\n\n      if (!dict.has("C")) {\n        this.data.color = null;\n      }\n    }\n  }\n\n  setCreationDate(creationDate) {\n    this.creationDate = (0, _util.isString)(creationDate) ? creationDate : null;\n  }\n\n  _setDefaultAppearance({\n    xref,\n    extra,\n    strokeColor,\n    fillColor,\n    blendMode,\n    pointsCallback\n  }) {\n    let minX = Number.MAX_VALUE;\n    let minY = Number.MAX_VALUE;\n    let maxX = Number.MIN_VALUE;\n    let maxY = Number.MIN_VALUE;\n    const buffer = ["q"];\n\n    if (extra) {\n      buffer.push(extra);\n    }\n\n    if (strokeColor) {\n      buffer.push(`${strokeColor[0]} ${strokeColor[1]} ${strokeColor[2]} RG`);\n    }\n\n    if (fillColor) {\n      buffer.push(`${fillColor[0]} ${fillColor[1]} ${fillColor[2]} rg`);\n    }\n\n    for (const points of this.data.quadPoints) {\n      const [mX, MX, mY, MY] = pointsCallback(buffer, points);\n      minX = Math.min(minX, mX);\n      maxX = Math.max(maxX, MX);\n      minY = Math.min(minY, mY);\n      maxY = Math.max(maxY, MY);\n    }\n\n    buffer.push("Q");\n    const formDict = new _primitives.Dict(xref);\n    const appearanceStreamDict = new _primitives.Dict(xref);\n    appearanceStreamDict.set("Subtype", _primitives.Name.get("Form"));\n    const appearanceStream = new _stream.StringStream(buffer.join(" "));\n    appearanceStream.dict = appearanceStreamDict;\n    formDict.set("Fm0", appearanceStream);\n    const gsDict = new _primitives.Dict(xref);\n\n    if (blendMode) {\n      gsDict.set("BM", _primitives.Name.get(blendMode));\n    }\n\n    const stateDict = new _primitives.Dict(xref);\n    stateDict.set("GS0", gsDict);\n    const resources = new _primitives.Dict(xref);\n    resources.set("ExtGState", stateDict);\n    resources.set("XObject", formDict);\n    const appearanceDict = new _primitives.Dict(xref);\n    appearanceDict.set("Resources", resources);\n    const bbox = this.data.rect = [minX, minY, maxX, maxY];\n    appearanceDict.set("BBox", bbox);\n    this.appearance = new _stream.StringStream("/GS0 gs /Fm0 Do");\n    this.appearance.dict = appearanceDict;\n\n    this._streams.push(this.appearance, appearanceStream);\n  }\n\n}\n\nexports.MarkupAnnotation = MarkupAnnotation;\n\nclass WidgetAnnotation extends Annotation {\n  constructor(params) {\n    super(params);\n    const dict = params.dict;\n    const data = this.data;\n    this.ref = params.ref;\n    data.annotationType = _util.AnnotationType.WIDGET;\n    data.fieldName = this._constructFieldName(dict);\n    data.actions = (0, _core_utils.collectActions)(params.xref, dict, _util.AnnotationActionEventType);\n    const fieldValue = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: "V",\n      getArray: true\n    });\n    data.fieldValue = this._decodeFormValue(fieldValue);\n    const defaultFieldValue = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: "DV",\n      getArray: true\n    });\n    data.defaultFieldValue = this._decodeFormValue(defaultFieldValue);\n    data.alternativeText = (0, _util.stringToPDFString)(dict.get("TU") || "");\n    const defaultAppearance = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: "DA"\n    }) || params.acroForm.get("DA") || "";\n    data.defaultAppearance = (0, _util.isString)(defaultAppearance) ? defaultAppearance : "";\n    data.defaultAppearanceData = (0, _default_appearance.parseDefaultAppearance)(data.defaultAppearance);\n    const fieldType = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: "FT"\n    });\n    data.fieldType = (0, _primitives.isName)(fieldType) ? fieldType.name : null;\n    const localResources = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: "DR"\n    });\n    const acroFormResources = params.acroForm.get("DR");\n    const appearanceResources = this.appearance && this.appearance.dict.get("Resources");\n    this._fieldResources = {\n      localResources,\n      acroFormResources,\n      appearanceResources,\n      mergedResources: _primitives.Dict.merge({\n        xref: params.xref,\n        dictArray: [localResources, appearanceResources, acroFormResources],\n        mergeSubDicts: true\n      })\n    };\n    data.fieldFlags = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: "Ff"\n    });\n\n    if (!Number.isInteger(data.fieldFlags) || data.fieldFlags < 0) {\n      data.fieldFlags = 0;\n    }\n\n    data.readOnly = this.hasFieldFlag(_util.AnnotationFieldFlag.READONLY);\n    data.hidden = this._hasFlag(data.annotationFlags, _util.AnnotationFlag.HIDDEN);\n\n    if (data.fieldType === "Sig") {\n      data.fieldValue = null;\n      this.setFlags(_util.AnnotationFlag.HIDDEN);\n      data.hidden = true;\n    }\n  }\n\n  _constructFieldName(dict) {\n    if (!dict.has("T") && !dict.has("Parent")) {\n      (0, _util.warn)("Unknown field name, falling back to empty field name.");\n      return "";\n    }\n\n    if (!dict.has("Parent")) {\n      return (0, _util.stringToPDFString)(dict.get("T"));\n    }\n\n    const fieldName = [];\n\n    if (dict.has("T")) {\n      fieldName.unshift((0, _util.stringToPDFString)(dict.get("T")));\n    }\n\n    let loopDict = dict;\n\n    while (loopDict.has("Parent")) {\n      loopDict = loopDict.get("Parent");\n\n      if (!(0, _primitives.isDict)(loopDict)) {\n        break;\n      }\n\n      if (loopDict.has("T")) {\n        fieldName.unshift((0, _util.stringToPDFString)(loopDict.get("T")));\n      }\n    }\n\n    return fieldName.join(".");\n  }\n\n  _decodeFormValue(formValue) {\n    if (Array.isArray(formValue)) {\n      return formValue.filter(item => (0, _util.isString)(item)).map(item => (0, _util.stringToPDFString)(item));\n    } else if ((0, _primitives.isName)(formValue)) {\n      return (0, _util.stringToPDFString)(formValue.name);\n    } else if ((0, _util.isString)(formValue)) {\n      return (0, _util.stringToPDFString)(formValue);\n    }\n\n    return null;\n  }\n\n  hasFieldFlag(flag) {\n    return !!(this.data.fieldFlags & flag);\n  }\n\n  getOperatorList(evaluator, task, renderForms, annotationStorage) {\n    if (renderForms) {\n      return Promise.resolve(new _operator_list.OperatorList());\n    }\n\n    if (!this._hasText) {\n      return super.getOperatorList(evaluator, task, renderForms, annotationStorage);\n    }\n\n    return this._getAppearance(evaluator, task, annotationStorage).then(content => {\n      if (this.appearance && content === null) {\n        return super.getOperatorList(evaluator, task, renderForms, annotationStorage);\n      }\n\n      const operatorList = new _operator_list.OperatorList();\n\n      if (!this.data.defaultAppearance || content === null) {\n        return operatorList;\n      }\n\n      const matrix = [1, 0, 0, 1, 0, 0];\n      const bbox = [0, 0, this.data.rect[2] - this.data.rect[0], this.data.rect[3] - this.data.rect[1]];\n      const transform = getTransformMatrix(this.data.rect, bbox, matrix);\n      operatorList.addOp(_util.OPS.beginAnnotation, [this.data.rect, transform, matrix]);\n      const stream = new _stream.StringStream(content);\n      return evaluator.getOperatorList({\n        stream,\n        task,\n        resources: this._fieldResources.mergedResources,\n        operatorList\n      }).then(function () {\n        operatorList.addOp(_util.OPS.endAnnotation, []);\n        return operatorList;\n      });\n    });\n  }\n\n  async save(evaluator, task, annotationStorage) {\n    const value = annotationStorage[this.data.id] && annotationStorage[this.data.id].value;\n\n    if (value === this.data.fieldValue || value === undefined) {\n      return null;\n    }\n\n    let appearance = await this._getAppearance(evaluator, task, annotationStorage);\n\n    if (appearance === null) {\n      return null;\n    }\n\n    const {\n      xref\n    } = evaluator;\n    const dict = xref.fetchIfRef(this.ref);\n\n    if (!(0, _primitives.isDict)(dict)) {\n      return null;\n    }\n\n    const bbox = [0, 0, this.data.rect[2] - this.data.rect[0], this.data.rect[3] - this.data.rect[1]];\n    const xfa = {\n      path: (0, _util.stringToPDFString)(dict.get("T") || ""),\n      value\n    };\n    const newRef = xref.getNewRef();\n    const AP = new _primitives.Dict(xref);\n    AP.set("N", newRef);\n    const encrypt = xref.encrypt;\n    let originalTransform = null;\n    let newTransform = null;\n\n    if (encrypt) {\n      originalTransform = encrypt.createCipherTransform(this.ref.num, this.ref.gen);\n      newTransform = encrypt.createCipherTransform(newRef.num, newRef.gen);\n      appearance = newTransform.encryptString(appearance);\n    }\n\n    dict.set("V", (0, _util.isAscii)(value) ? value : (0, _util.stringToUTF16BEString)(value));\n    dict.set("AP", AP);\n    dict.set("M", `D:${(0, _util.getModificationDate)()}`);\n    const appearanceDict = new _primitives.Dict(xref);\n    appearanceDict.set("Length", appearance.length);\n    appearanceDict.set("Subtype", _primitives.Name.get("Form"));\n    appearanceDict.set("Resources", this._getSaveFieldResources(xref));\n    appearanceDict.set("BBox", bbox);\n    const bufferOriginal = [`${this.ref.num} ${this.ref.gen} obj\\n`];\n    (0, _writer.writeDict)(dict, bufferOriginal, originalTransform);\n    bufferOriginal.push("\\nendobj\\n");\n    const bufferNew = [`${newRef.num} ${newRef.gen} obj\\n`];\n    (0, _writer.writeDict)(appearanceDict, bufferNew, newTransform);\n    bufferNew.push(" stream\\n");\n    bufferNew.push(appearance);\n    bufferNew.push("\\nendstream\\nendobj\\n");\n    return [{\n      ref: this.ref,\n      data: bufferOriginal.join(""),\n      xfa\n    }, {\n      ref: newRef,\n      data: bufferNew.join(""),\n      xfa: null\n    }];\n  }\n\n  async _getAppearance(evaluator, task, annotationStorage) {\n    const isPassword = this.hasFieldFlag(_util.AnnotationFieldFlag.PASSWORD);\n\n    if (!annotationStorage || isPassword) {\n      return null;\n    }\n\n    const value = annotationStorage[this.data.id] && annotationStorage[this.data.id].value;\n\n    if (value === undefined) {\n      return null;\n    }\n\n    if (value === "") {\n      return "";\n    }\n\n    const defaultPadding = 2;\n    const hPadding = defaultPadding;\n    const totalHeight = this.data.rect[3] - this.data.rect[1];\n    const totalWidth = this.data.rect[2] - this.data.rect[0];\n\n    if (!this.data.defaultAppearance) {\n      this.data.defaultAppearance = "/Helvetica 0 Tf 0 g";\n      this.data.defaultAppearanceData = (0, _default_appearance.parseDefaultAppearance)(this.data.defaultAppearance);\n    }\n\n    const font = await this._getFontData(evaluator, task);\n\n    const fontSize = this._computeFontSize(font, totalHeight);\n\n    let descent = font.descent;\n\n    if (isNaN(descent)) {\n      descent = 0;\n    }\n\n    const vPadding = defaultPadding + Math.abs(descent) * fontSize;\n    const defaultAppearance = this.data.defaultAppearance;\n    const alignment = this.data.textAlignment;\n\n    if (this.data.multiLine) {\n      return this._getMultilineAppearance(defaultAppearance, value, font, fontSize, totalWidth, totalHeight, alignment, hPadding, vPadding);\n    }\n\n    const encodedString = font.encodeString(value).join("");\n\n    if (this.data.comb) {\n      return this._getCombAppearance(defaultAppearance, font, encodedString, totalWidth, hPadding, vPadding);\n    }\n\n    if (alignment === 0 || alignment > 2) {\n      return "/Tx BMC q BT " + defaultAppearance + ` 1 0 0 1 ${hPadding} ${vPadding} Tm (${(0, _util.escapeString)(encodedString)}) Tj` + " ET Q EMC";\n    }\n\n    const renderedText = this._renderText(encodedString, font, fontSize, totalWidth, alignment, hPadding, vPadding);\n\n    return "/Tx BMC q BT " + defaultAppearance + ` 1 0 0 1 0 0 Tm ${renderedText}` + " ET Q EMC";\n  }\n\n  async _getFontData(evaluator, task) {\n    const operatorList = new _operator_list.OperatorList();\n    const initialState = {\n      font: null,\n\n      clone() {\n        return this;\n      }\n\n    };\n    const {\n      fontName,\n      fontSize\n    } = this.data.defaultAppearanceData;\n    await evaluator.handleSetFont(this._fieldResources.mergedResources, [fontName, fontSize], null, operatorList, task, initialState, null);\n    return initialState.font;\n  }\n\n  _computeFontSize(font, height) {\n    let fontSize = this.data.defaultAppearanceData.fontSize;\n\n    if (!fontSize) {\n      const {\n        fontColor,\n        fontName\n      } = this.data.defaultAppearanceData;\n      let capHeight;\n\n      if (font.capHeight) {\n        capHeight = font.capHeight;\n      } else {\n        const glyphs = font.charsToGlyphs(font.encodeString("M").join(""));\n\n        if (glyphs.length === 1 && glyphs[0].width) {\n          const em = glyphs[0].width / 1000;\n          capHeight = 0.7 * em;\n        } else {\n          capHeight = 0.7;\n        }\n      }\n\n      fontSize = Math.max(1, Math.floor(height / (1.5 * capHeight)));\n      this.data.defaultAppearance = (0, _default_appearance.createDefaultAppearance)({\n        fontSize,\n        fontName,\n        fontColor\n      });\n    }\n\n    return fontSize;\n  }\n\n  _renderText(text, font, fontSize, totalWidth, alignment, hPadding, vPadding) {\n    const glyphs = font.charsToGlyphs(text);\n    const scale = fontSize / 1000;\n    let width = 0;\n\n    for (const glyph of glyphs) {\n      width += glyph.width * scale;\n    }\n\n    let shift;\n\n    if (alignment === 1) {\n      shift = (totalWidth - width) / 2;\n    } else if (alignment === 2) {\n      shift = totalWidth - width - hPadding;\n    } else {\n      shift = hPadding;\n    }\n\n    shift = shift.toFixed(2);\n    vPadding = vPadding.toFixed(2);\n    return `${shift} ${vPadding} Td (${(0, _util.escapeString)(text)}) Tj`;\n  }\n\n  _getSaveFieldResources(xref) {\n    const {\n      localResources,\n      appearanceResources,\n      acroFormResources\n    } = this._fieldResources;\n    const fontNameStr = this.data.defaultAppearanceData && this.data.defaultAppearanceData.fontName.name;\n\n    if (!fontNameStr) {\n      return localResources || _primitives.Dict.empty;\n    }\n\n    for (const resources of [localResources, appearanceResources]) {\n      if (resources instanceof _primitives.Dict) {\n        const localFont = resources.get("Font");\n\n        if (localFont instanceof _primitives.Dict && localFont.has(fontNameStr)) {\n          return resources;\n        }\n      }\n    }\n\n    if (acroFormResources instanceof _primitives.Dict) {\n      const acroFormFont = acroFormResources.get("Font");\n\n      if (acroFormFont instanceof _primitives.Dict && acroFormFont.has(fontNameStr)) {\n        const subFontDict = new _primitives.Dict(xref);\n        subFontDict.set(fontNameStr, acroFormFont.getRaw(fontNameStr));\n        const subResourcesDict = new _primitives.Dict(xref);\n        subResourcesDict.set("Font", subFontDict);\n        return _primitives.Dict.merge({\n          xref,\n          dictArray: [subResourcesDict, localResources],\n          mergeSubDicts: true\n        });\n      }\n    }\n\n    return localResources || _primitives.Dict.empty;\n  }\n\n  getFieldObject() {\n    if (this.data.fieldType === "Sig") {\n      return {\n        id: this.data.id,\n        value: null,\n        type: "signature"\n      };\n    }\n\n    return null;\n  }\n\n}\n\nclass TextWidgetAnnotation extends WidgetAnnotation {\n  constructor(params) {\n    super(params);\n    this._hasText = true;\n    const dict = params.dict;\n\n    if (!(0, _util.isString)(this.data.fieldValue)) {\n      this.data.fieldValue = "";\n    }\n\n    let alignment = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: "Q"\n    });\n\n    if (!Number.isInteger(alignment) || alignment < 0 || alignment > 2) {\n      alignment = null;\n    }\n\n    this.data.textAlignment = alignment;\n    let maximumLength = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: "MaxLen"\n    });\n\n    if (!Number.isInteger(maximumLength) || maximumLength < 0) {\n      maximumLength = null;\n    }\n\n    this.data.maxLen = maximumLength;\n    this.data.multiLine = this.hasFieldFlag(_util.AnnotationFieldFlag.MULTILINE);\n    this.data.comb = this.hasFieldFlag(_util.AnnotationFieldFlag.COMB) && !this.hasFieldFlag(_util.AnnotationFieldFlag.MULTILINE) && !this.hasFieldFlag(_util.AnnotationFieldFlag.PASSWORD) && !this.hasFieldFlag(_util.AnnotationFieldFlag.FILESELECT) && this.data.maxLen !== null;\n  }\n\n  _getCombAppearance(defaultAppearance, font, text, width, hPadding, vPadding) {\n    const combWidth = (width / this.data.maxLen).toFixed(2);\n    const buf = [];\n    const positions = font.getCharPositions(text);\n\n    for (const [start, end] of positions) {\n      buf.push(`(${(0, _util.escapeString)(text.substring(start, end))}) Tj`);\n    }\n\n    const renderedComb = buf.join(` ${combWidth} 0 Td `);\n    return "/Tx BMC q BT " + defaultAppearance + ` 1 0 0 1 ${hPadding} ${vPadding} Tm ${renderedComb}` + " ET Q EMC";\n  }\n\n  _getMultilineAppearance(defaultAppearance, text, font, fontSize, width, height, alignment, hPadding, vPadding) {\n    const lines = text.split(/\\r\\n|\\r|\\n/);\n    const buf = [];\n    const totalWidth = width - 2 * hPadding;\n\n    for (const line of lines) {\n      const chunks = this._splitLine(line, font, fontSize, totalWidth);\n\n      for (const chunk of chunks) {\n        const padding = buf.length === 0 ? hPadding : 0;\n        buf.push(this._renderText(chunk, font, fontSize, width, alignment, padding, -fontSize));\n      }\n    }\n\n    const renderedText = buf.join("\\n");\n    return "/Tx BMC q BT " + defaultAppearance + ` 1 0 0 1 0 ${height} Tm ${renderedText}` + " ET Q EMC";\n  }\n\n  _splitLine(line, font, fontSize, width) {\n    line = font.encodeString(line).join("");\n    const glyphs = font.charsToGlyphs(line);\n\n    if (glyphs.length <= 1) {\n      return [line];\n    }\n\n    const positions = font.getCharPositions(line);\n    const scale = fontSize / 1000;\n    const chunks = [];\n    let lastSpacePosInStringStart = -1,\n        lastSpacePosInStringEnd = -1,\n        lastSpacePos = -1,\n        startChunk = 0,\n        currentWidth = 0;\n\n    for (let i = 0, ii = glyphs.length; i < ii; i++) {\n      const [start, end] = positions[i];\n      const glyph = glyphs[i];\n      const glyphWidth = glyph.width * scale;\n\n      if (glyph.unicode === " ") {\n        if (currentWidth + glyphWidth > width) {\n          chunks.push(line.substring(startChunk, start));\n          startChunk = start;\n          currentWidth = glyphWidth;\n          lastSpacePosInStringStart = -1;\n          lastSpacePos = -1;\n        } else {\n          currentWidth += glyphWidth;\n          lastSpacePosInStringStart = start;\n          lastSpacePosInStringEnd = end;\n          lastSpacePos = i;\n        }\n      } else {\n        if (currentWidth + glyphWidth > width) {\n          if (lastSpacePosInStringStart !== -1) {\n            chunks.push(line.substring(startChunk, lastSpacePosInStringEnd));\n            startChunk = lastSpacePosInStringEnd;\n            i = lastSpacePos + 1;\n            lastSpacePosInStringStart = -1;\n            currentWidth = 0;\n          } else {\n            chunks.push(line.substring(startChunk, start));\n            startChunk = start;\n            currentWidth = glyphWidth;\n          }\n        } else {\n          currentWidth += glyphWidth;\n        }\n      }\n    }\n\n    if (startChunk < line.length) {\n      chunks.push(line.substring(startChunk, line.length));\n    }\n\n    return chunks;\n  }\n\n  getFieldObject() {\n    return {\n      id: this.data.id,\n      value: this.data.fieldValue,\n      defaultValue: this.data.defaultFieldValue,\n      multiline: this.data.multiLine,\n      password: this.hasFieldFlag(_util.AnnotationFieldFlag.PASSWORD),\n      charLimit: this.data.maxLen,\n      comb: this.data.comb,\n      editable: !this.data.readOnly,\n      hidden: this.data.hidden,\n      name: this.data.fieldName,\n      rect: this.data.rect,\n      actions: this.data.actions,\n      type: "text"\n    };\n  }\n\n}\n\nclass ButtonWidgetAnnotation extends WidgetAnnotation {\n  constructor(params) {\n    super(params);\n    this.checkedAppearance = null;\n    this.uncheckedAppearance = null;\n    this.data.checkBox = !this.hasFieldFlag(_util.AnnotationFieldFlag.RADIO) && !this.hasFieldFlag(_util.AnnotationFieldFlag.PUSHBUTTON);\n    this.data.radioButton = this.hasFieldFlag(_util.AnnotationFieldFlag.RADIO) && !this.hasFieldFlag(_util.AnnotationFieldFlag.PUSHBUTTON);\n    this.data.pushButton = this.hasFieldFlag(_util.AnnotationFieldFlag.PUSHBUTTON);\n    this.data.isTooltipOnly = false;\n\n    if (this.data.checkBox) {\n      this._processCheckBox(params);\n    } else if (this.data.radioButton) {\n      this._processRadioButton(params);\n    } else if (this.data.pushButton) {\n      this._processPushButton(params);\n    } else {\n      (0, _util.warn)("Invalid field flags for button widget annotation");\n    }\n  }\n\n  getOperatorList(evaluator, task, renderForms, annotationStorage) {\n    if (this.data.pushButton) {\n      return super.getOperatorList(evaluator, task, false, annotationStorage);\n    }\n\n    if (annotationStorage) {\n      const value = annotationStorage[this.data.id] && annotationStorage[this.data.id].value;\n\n      if (value === undefined) {\n        return super.getOperatorList(evaluator, task, renderForms, annotationStorage);\n      }\n\n      let appearance;\n\n      if (value) {\n        appearance = this.checkedAppearance;\n      } else {\n        appearance = this.uncheckedAppearance;\n      }\n\n      if (appearance) {\n        const savedAppearance = this.appearance;\n        this.appearance = appearance;\n        const operatorList = super.getOperatorList(evaluator, task, renderForms, annotationStorage);\n        this.appearance = savedAppearance;\n        return operatorList;\n      }\n\n      return Promise.resolve(new _operator_list.OperatorList());\n    }\n\n    return super.getOperatorList(evaluator, task, renderForms, annotationStorage);\n  }\n\n  async save(evaluator, task, annotationStorage) {\n    if (this.data.checkBox) {\n      return this._saveCheckbox(evaluator, task, annotationStorage);\n    }\n\n    if (this.data.radioButton) {\n      return this._saveRadioButton(evaluator, task, annotationStorage);\n    }\n\n    return null;\n  }\n\n  async _saveCheckbox(evaluator, task, annotationStorage) {\n    const value = annotationStorage[this.data.id] && annotationStorage[this.data.id].value;\n\n    if (value === undefined) {\n      return null;\n    }\n\n    const defaultValue = this.data.fieldValue && this.data.fieldValue !== "Off";\n\n    if (defaultValue === value) {\n      return null;\n    }\n\n    const dict = evaluator.xref.fetchIfRef(this.ref);\n\n    if (!(0, _primitives.isDict)(dict)) {\n      return null;\n    }\n\n    const xfa = {\n      path: (0, _util.stringToPDFString)(dict.get("T") || ""),\n      value: value ? this.data.exportValue : ""\n    };\n\n    const name = _primitives.Name.get(value ? this.data.exportValue : "Off");\n\n    dict.set("V", name);\n    dict.set("AS", name);\n    dict.set("M", `D:${(0, _util.getModificationDate)()}`);\n    const encrypt = evaluator.xref.encrypt;\n    let originalTransform = null;\n\n    if (encrypt) {\n      originalTransform = encrypt.createCipherTransform(this.ref.num, this.ref.gen);\n    }\n\n    const buffer = [`${this.ref.num} ${this.ref.gen} obj\\n`];\n    (0, _writer.writeDict)(dict, buffer, originalTransform);\n    buffer.push("\\nendobj\\n");\n    return [{\n      ref: this.ref,\n      data: buffer.join(""),\n      xfa\n    }];\n  }\n\n  async _saveRadioButton(evaluator, task, annotationStorage) {\n    const value = annotationStorage[this.data.id] && annotationStorage[this.data.id].value;\n\n    if (value === undefined) {\n      return null;\n    }\n\n    const defaultValue = this.data.fieldValue === this.data.buttonValue;\n\n    if (defaultValue === value) {\n      return null;\n    }\n\n    const dict = evaluator.xref.fetchIfRef(this.ref);\n\n    if (!(0, _primitives.isDict)(dict)) {\n      return null;\n    }\n\n    const xfa = {\n      path: (0, _util.stringToPDFString)(dict.get("T") || ""),\n      value: value ? this.data.buttonValue : ""\n    };\n\n    const name = _primitives.Name.get(value ? this.data.buttonValue : "Off");\n\n    let parentBuffer = null;\n    const encrypt = evaluator.xref.encrypt;\n\n    if (value) {\n      if ((0, _primitives.isRef)(this.parent)) {\n        const parent = evaluator.xref.fetch(this.parent);\n        let parentTransform = null;\n\n        if (encrypt) {\n          parentTransform = encrypt.createCipherTransform(this.parent.num, this.parent.gen);\n        }\n\n        parent.set("V", name);\n        parentBuffer = [`${this.parent.num} ${this.parent.gen} obj\\n`];\n        (0, _writer.writeDict)(parent, parentBuffer, parentTransform);\n        parentBuffer.push("\\nendobj\\n");\n      } else if ((0, _primitives.isDict)(this.parent)) {\n        this.parent.set("V", name);\n      }\n    }\n\n    dict.set("AS", name);\n    dict.set("M", `D:${(0, _util.getModificationDate)()}`);\n    let originalTransform = null;\n\n    if (encrypt) {\n      originalTransform = encrypt.createCipherTransform(this.ref.num, this.ref.gen);\n    }\n\n    const buffer = [`${this.ref.num} ${this.ref.gen} obj\\n`];\n    (0, _writer.writeDict)(dict, buffer, originalTransform);\n    buffer.push("\\nendobj\\n");\n    const newRefs = [{\n      ref: this.ref,\n      data: buffer.join(""),\n      xfa\n    }];\n\n    if (parentBuffer !== null) {\n      newRefs.push({\n        ref: this.parent,\n        data: parentBuffer.join(""),\n        xfa: null\n      });\n    }\n\n    return newRefs;\n  }\n\n  _processCheckBox(params) {\n    const customAppearance = params.dict.get("AP");\n\n    if (!(0, _primitives.isDict)(customAppearance)) {\n      return;\n    }\n\n    const normalAppearance = customAppearance.get("N");\n\n    if (!(0, _primitives.isDict)(normalAppearance)) {\n      return;\n    }\n\n    const exportValues = normalAppearance.getKeys();\n\n    if (!exportValues.includes("Off")) {\n      exportValues.push("Off");\n    }\n\n    if (exportValues.length !== 2) {\n      return;\n    }\n\n    this.data.exportValue = exportValues[0] === "Off" ? exportValues[1] : exportValues[0];\n    this.checkedAppearance = normalAppearance.get(this.data.exportValue);\n    this.uncheckedAppearance = normalAppearance.get("Off") || null;\n\n    this._streams.push(this.checkedAppearance);\n\n    if (this.uncheckedAppearance) {\n      this._streams.push(this.uncheckedAppearance);\n    }\n\n    this._fallbackFontDict = this.fallbackFontDict;\n  }\n\n  _processRadioButton(params) {\n    this.data.fieldValue = this.data.buttonValue = null;\n    const fieldParent = params.dict.get("Parent");\n\n    if ((0, _primitives.isDict)(fieldParent)) {\n      this.parent = params.dict.getRaw("Parent");\n      const fieldParentValue = fieldParent.get("V");\n\n      if ((0, _primitives.isName)(fieldParentValue)) {\n        this.data.fieldValue = this._decodeFormValue(fieldParentValue);\n      }\n    }\n\n    const appearanceStates = params.dict.get("AP");\n\n    if (!(0, _primitives.isDict)(appearanceStates)) {\n      return;\n    }\n\n    const normalAppearance = appearanceStates.get("N");\n\n    if (!(0, _primitives.isDict)(normalAppearance)) {\n      return;\n    }\n\n    for (const key of normalAppearance.getKeys()) {\n      if (key !== "Off") {\n        this.data.buttonValue = this._decodeFormValue(key);\n        break;\n      }\n    }\n\n    this.checkedAppearance = normalAppearance.get(this.data.buttonValue);\n    this.uncheckedAppearance = normalAppearance.get("Off") || null;\n\n    this._streams.push(this.checkedAppearance);\n\n    if (this.uncheckedAppearance) {\n      this._streams.push(this.uncheckedAppearance);\n    }\n\n    this._fallbackFontDict = this.fallbackFontDict;\n  }\n\n  _processPushButton(params) {\n    if (!params.dict.has("A") && !params.dict.has("AA") && !this.data.alternativeText) {\n      (0, _util.warn)("Push buttons without action dictionaries are not supported");\n      return;\n    }\n\n    this.data.isTooltipOnly = !params.dict.has("A") && !params.dict.has("AA");\n\n    _obj.Catalog.parseDestDictionary({\n      destDict: params.dict,\n      resultObj: this.data,\n      docBaseUrl: params.pdfManager.docBaseUrl\n    });\n  }\n\n  getFieldObject() {\n    let type = "button";\n    let exportValues;\n\n    if (this.data.checkBox) {\n      type = "checkbox";\n      exportValues = this.data.exportValue;\n    } else if (this.data.radioButton) {\n      type = "radiobutton";\n      exportValues = this.data.buttonValue;\n    }\n\n    return {\n      id: this.data.id,\n      value: this.data.fieldValue || "Off",\n      defaultValue: this.data.defaultFieldValue,\n      exportValues,\n      editable: !this.data.readOnly,\n      name: this.data.fieldName,\n      rect: this.data.rect,\n      hidden: this.data.hidden,\n      actions: this.data.actions,\n      type\n    };\n  }\n\n  get fallbackFontDict() {\n    const dict = new _primitives.Dict();\n    dict.set("BaseFont", _primitives.Name.get("ZapfDingbats"));\n    dict.set("Type", _primitives.Name.get("FallbackType"));\n    dict.set("Subtype", _primitives.Name.get("FallbackType"));\n    dict.set("Encoding", _primitives.Name.get("ZapfDingbatsEncoding"));\n    return (0, _util.shadow)(this, "fallbackFontDict", dict);\n  }\n\n}\n\nclass ChoiceWidgetAnnotation extends WidgetAnnotation {\n  constructor(params) {\n    super(params);\n    this.data.options = [];\n    const options = (0, _core_utils.getInheritableProperty)({\n      dict: params.dict,\n      key: "Opt"\n    });\n\n    if (Array.isArray(options)) {\n      const xref = params.xref;\n\n      for (let i = 0, ii = options.length; i < ii; i++) {\n        const option = xref.fetchIfRef(options[i]);\n        const isOptionArray = Array.isArray(option);\n        this.data.options[i] = {\n          exportValue: this._decodeFormValue(isOptionArray ? xref.fetchIfRef(option[0]) : option),\n          displayValue: this._decodeFormValue(isOptionArray ? xref.fetchIfRef(option[1]) : option)\n        };\n      }\n    }\n\n    if ((0, _util.isString)(this.data.fieldValue)) {\n      this.data.fieldValue = [this.data.fieldValue];\n    } else if (!this.data.fieldValue) {\n      this.data.fieldValue = [];\n    }\n\n    this.data.combo = this.hasFieldFlag(_util.AnnotationFieldFlag.COMBO);\n    this.data.multiSelect = this.hasFieldFlag(_util.AnnotationFieldFlag.MULTISELECT);\n    this._hasText = true;\n  }\n\n  getFieldObject() {\n    const type = this.data.combo ? "combobox" : "listbox";\n    const value = this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : null;\n    return {\n      id: this.data.id,\n      value,\n      defaultValue: this.data.defaultFieldValue,\n      editable: !this.data.readOnly,\n      name: this.data.fieldName,\n      rect: this.data.rect,\n      numItems: this.data.fieldValue.length,\n      multipleSelection: this.data.multiSelect,\n      hidden: this.data.hidden,\n      actions: this.data.actions,\n      type\n    };\n  }\n\n}\n\nclass TextAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    const DEFAULT_ICON_SIZE = 22;\n    super(parameters);\n    const dict = parameters.dict;\n    this.data.annotationType = _util.AnnotationType.TEXT;\n\n    if (this.data.hasAppearance) {\n      this.data.name = "NoIcon";\n    } else {\n      this.data.rect[1] = this.data.rect[3] - DEFAULT_ICON_SIZE;\n      this.data.rect[2] = this.data.rect[0] + DEFAULT_ICON_SIZE;\n      this.data.name = dict.has("Name") ? dict.get("Name").name : "Note";\n    }\n\n    if (dict.has("State")) {\n      this.data.state = dict.get("State") || null;\n      this.data.stateModel = dict.get("StateModel") || null;\n    } else {\n      this.data.state = null;\n      this.data.stateModel = null;\n    }\n  }\n\n}\n\nclass LinkAnnotation extends Annotation {\n  constructor(params) {\n    super(params);\n    this.data.annotationType = _util.AnnotationType.LINK;\n    const quadPoints = getQuadPoints(params.dict, this.rectangle);\n\n    if (quadPoints) {\n      this.data.quadPoints = quadPoints;\n    }\n\n    _obj.Catalog.parseDestDictionary({\n      destDict: params.dict,\n      resultObj: this.data,\n      docBaseUrl: params.pdfManager.docBaseUrl\n    });\n  }\n\n}\n\nclass PopupAnnotation extends Annotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.POPUP;\n    let parentItem = parameters.dict.get("Parent");\n\n    if (!parentItem) {\n      (0, _util.warn)("Popup annotation has a missing or invalid parent annotation.");\n      return;\n    }\n\n    const parentSubtype = parentItem.get("Subtype");\n    this.data.parentType = (0, _primitives.isName)(parentSubtype) ? parentSubtype.name : null;\n    const rawParent = parameters.dict.getRaw("Parent");\n    this.data.parentId = (0, _primitives.isRef)(rawParent) ? rawParent.toString() : null;\n    const parentRect = parentItem.getArray("Rect");\n\n    if (Array.isArray(parentRect) && parentRect.length === 4) {\n      this.data.parentRect = _util.Util.normalizeRect(parentRect);\n    } else {\n      this.data.parentRect = [0, 0, 0, 0];\n    }\n\n    const rt = parentItem.get("RT");\n\n    if ((0, _primitives.isName)(rt, _util.AnnotationReplyType.GROUP)) {\n      parentItem = parentItem.get("IRT");\n    }\n\n    if (!parentItem.has("M")) {\n      this.data.modificationDate = null;\n    } else {\n      this.setModificationDate(parentItem.get("M"));\n      this.data.modificationDate = this.modificationDate;\n    }\n\n    if (!parentItem.has("C")) {\n      this.data.color = null;\n    } else {\n      this.setColor(parentItem.getArray("C"));\n      this.data.color = this.color;\n    }\n\n    if (!this.viewable) {\n      const parentFlags = parentItem.get("F");\n\n      if (this._isViewable(parentFlags)) {\n        this.setFlags(parentFlags);\n      }\n    }\n\n    this.data.title = (0, _util.stringToPDFString)(parentItem.get("T") || "");\n    this.data.contents = (0, _util.stringToPDFString)(parentItem.get("Contents") || "");\n  }\n\n}\n\nclass FreeTextAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.FREETEXT;\n  }\n\n}\n\nclass LineAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.LINE;\n    this.data.lineCoordinates = _util.Util.normalizeRect(parameters.dict.getArray("L"));\n  }\n\n}\n\nclass SquareAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.SQUARE;\n  }\n\n}\n\nclass CircleAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.CIRCLE;\n  }\n\n}\n\nclass PolylineAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.POLYLINE;\n    this.data.vertices = [];\n    const rawVertices = parameters.dict.getArray("Vertices");\n\n    if (!Array.isArray(rawVertices)) {\n      return;\n    }\n\n    for (let i = 0, ii = rawVertices.length; i < ii; i += 2) {\n      this.data.vertices.push({\n        x: rawVertices[i],\n        y: rawVertices[i + 1]\n      });\n    }\n  }\n\n}\n\nclass PolygonAnnotation extends PolylineAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.POLYGON;\n  }\n\n}\n\nclass CaretAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.CARET;\n  }\n\n}\n\nclass InkAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.INK;\n    this.data.inkLists = [];\n    const rawInkLists = parameters.dict.getArray("InkList");\n\n    if (!Array.isArray(rawInkLists)) {\n      return;\n    }\n\n    const xref = parameters.xref;\n\n    for (let i = 0, ii = rawInkLists.length; i < ii; ++i) {\n      this.data.inkLists.push([]);\n\n      for (let j = 0, jj = rawInkLists[i].length; j < jj; j += 2) {\n        this.data.inkLists[i].push({\n          x: xref.fetchIfRef(rawInkLists[i][j]),\n          y: xref.fetchIfRef(rawInkLists[i][j + 1])\n        });\n      }\n    }\n  }\n\n}\n\nclass HighlightAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.HIGHLIGHT;\n    const quadPoints = this.data.quadPoints = getQuadPoints(parameters.dict, null);\n\n    if (quadPoints) {\n      if (!this.appearance) {\n        const fillColor = this.color ? Array.from(this.color).map(c => c / 255) : [1, 1, 0];\n\n        this._setDefaultAppearance({\n          xref: parameters.xref,\n          fillColor,\n          blendMode: "Multiply",\n          pointsCallback: (buffer, points) => {\n            buffer.push(`${points[0].x} ${points[0].y} m`);\n            buffer.push(`${points[1].x} ${points[1].y} l`);\n            buffer.push(`${points[3].x} ${points[3].y} l`);\n            buffer.push(`${points[2].x} ${points[2].y} l`);\n            buffer.push("f");\n            return [points[0].x, points[1].x, points[3].y, points[1].y];\n          }\n        });\n      }\n    } else {\n      this.data.hasPopup = false;\n    }\n  }\n\n}\n\nclass UnderlineAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.UNDERLINE;\n    const quadPoints = this.data.quadPoints = getQuadPoints(parameters.dict, null);\n\n    if (quadPoints) {\n      if (!this.appearance) {\n        const strokeColor = this.color ? Array.from(this.color).map(c => c / 255) : [0, 0, 0];\n\n        this._setDefaultAppearance({\n          xref: parameters.xref,\n          extra: "[] 0 d 1 w",\n          strokeColor,\n          pointsCallback: (buffer, points) => {\n            buffer.push(`${points[2].x} ${points[2].y} m`);\n            buffer.push(`${points[3].x} ${points[3].y} l`);\n            buffer.push("S");\n            return [points[0].x, points[1].x, points[3].y, points[1].y];\n          }\n        });\n      }\n    } else {\n      this.data.hasPopup = false;\n    }\n  }\n\n}\n\nclass SquigglyAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.SQUIGGLY;\n    const quadPoints = this.data.quadPoints = getQuadPoints(parameters.dict, null);\n\n    if (quadPoints) {\n      if (!this.appearance) {\n        const strokeColor = this.color ? Array.from(this.color).map(c => c / 255) : [0, 0, 0];\n\n        this._setDefaultAppearance({\n          xref: parameters.xref,\n          extra: "[] 0 d 1 w",\n          strokeColor,\n          pointsCallback: (buffer, points) => {\n            const dy = (points[0].y - points[2].y) / 6;\n            let shift = dy;\n            let x = points[2].x;\n            const y = points[2].y;\n            const xEnd = points[3].x;\n            buffer.push(`${x} ${y + shift} m`);\n\n            do {\n              x += 2;\n              shift = shift === 0 ? dy : 0;\n              buffer.push(`${x} ${y + shift} l`);\n            } while (x < xEnd);\n\n            buffer.push("S");\n            return [points[2].x, xEnd, y - 2 * dy, y + 2 * dy];\n          }\n        });\n      }\n    } else {\n      this.data.hasPopup = false;\n    }\n  }\n\n}\n\nclass StrikeOutAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.STRIKEOUT;\n    const quadPoints = this.data.quadPoints = getQuadPoints(parameters.dict, null);\n\n    if (quadPoints) {\n      if (!this.appearance) {\n        const strokeColor = this.color ? Array.from(this.color).map(c => c / 255) : [0, 0, 0];\n\n        this._setDefaultAppearance({\n          xref: parameters.xref,\n          extra: "[] 0 d 1 w",\n          strokeColor,\n          pointsCallback: (buffer, points) => {\n            buffer.push(`${(points[0].x + points[2].x) / 2}` + ` ${(points[0].y + points[2].y) / 2} m`);\n            buffer.push(`${(points[1].x + points[3].x) / 2}` + ` ${(points[1].y + points[3].y) / 2} l`);\n            buffer.push("S");\n            return [points[0].x, points[1].x, points[3].y, points[1].y];\n          }\n        });\n      }\n    } else {\n      this.data.hasPopup = false;\n    }\n  }\n\n}\n\nclass StampAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.STAMP;\n  }\n\n}\n\nclass FileAttachmentAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    const file = new _obj.FileSpec(parameters.dict.get("FS"), parameters.xref);\n    this.data.annotationType = _util.AnnotationType.FILEATTACHMENT;\n    this.data.file = file.serializable;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/annotation.js\n')},"./node_modules/pdfjs-dist/lib/core/arithmetic_decoder.js":function(__unused_webpack_module,exports){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.ArithmeticDecoder = void 0;\nconst QeTable = [{\n  qe: 0x5601,\n  nmps: 1,\n  nlps: 1,\n  switchFlag: 1\n}, {\n  qe: 0x3401,\n  nmps: 2,\n  nlps: 6,\n  switchFlag: 0\n}, {\n  qe: 0x1801,\n  nmps: 3,\n  nlps: 9,\n  switchFlag: 0\n}, {\n  qe: 0x0ac1,\n  nmps: 4,\n  nlps: 12,\n  switchFlag: 0\n}, {\n  qe: 0x0521,\n  nmps: 5,\n  nlps: 29,\n  switchFlag: 0\n}, {\n  qe: 0x0221,\n  nmps: 38,\n  nlps: 33,\n  switchFlag: 0\n}, {\n  qe: 0x5601,\n  nmps: 7,\n  nlps: 6,\n  switchFlag: 1\n}, {\n  qe: 0x5401,\n  nmps: 8,\n  nlps: 14,\n  switchFlag: 0\n}, {\n  qe: 0x4801,\n  nmps: 9,\n  nlps: 14,\n  switchFlag: 0\n}, {\n  qe: 0x3801,\n  nmps: 10,\n  nlps: 14,\n  switchFlag: 0\n}, {\n  qe: 0x3001,\n  nmps: 11,\n  nlps: 17,\n  switchFlag: 0\n}, {\n  qe: 0x2401,\n  nmps: 12,\n  nlps: 18,\n  switchFlag: 0\n}, {\n  qe: 0x1c01,\n  nmps: 13,\n  nlps: 20,\n  switchFlag: 0\n}, {\n  qe: 0x1601,\n  nmps: 29,\n  nlps: 21,\n  switchFlag: 0\n}, {\n  qe: 0x5601,\n  nmps: 15,\n  nlps: 14,\n  switchFlag: 1\n}, {\n  qe: 0x5401,\n  nmps: 16,\n  nlps: 14,\n  switchFlag: 0\n}, {\n  qe: 0x5101,\n  nmps: 17,\n  nlps: 15,\n  switchFlag: 0\n}, {\n  qe: 0x4801,\n  nmps: 18,\n  nlps: 16,\n  switchFlag: 0\n}, {\n  qe: 0x3801,\n  nmps: 19,\n  nlps: 17,\n  switchFlag: 0\n}, {\n  qe: 0x3401,\n  nmps: 20,\n  nlps: 18,\n  switchFlag: 0\n}, {\n  qe: 0x3001,\n  nmps: 21,\n  nlps: 19,\n  switchFlag: 0\n}, {\n  qe: 0x2801,\n  nmps: 22,\n  nlps: 19,\n  switchFlag: 0\n}, {\n  qe: 0x2401,\n  nmps: 23,\n  nlps: 20,\n  switchFlag: 0\n}, {\n  qe: 0x2201,\n  nmps: 24,\n  nlps: 21,\n  switchFlag: 0\n}, {\n  qe: 0x1c01,\n  nmps: 25,\n  nlps: 22,\n  switchFlag: 0\n}, {\n  qe: 0x1801,\n  nmps: 26,\n  nlps: 23,\n  switchFlag: 0\n}, {\n  qe: 0x1601,\n  nmps: 27,\n  nlps: 24,\n  switchFlag: 0\n}, {\n  qe: 0x1401,\n  nmps: 28,\n  nlps: 25,\n  switchFlag: 0\n}, {\n  qe: 0x1201,\n  nmps: 29,\n  nlps: 26,\n  switchFlag: 0\n}, {\n  qe: 0x1101,\n  nmps: 30,\n  nlps: 27,\n  switchFlag: 0\n}, {\n  qe: 0x0ac1,\n  nmps: 31,\n  nlps: 28,\n  switchFlag: 0\n}, {\n  qe: 0x09c1,\n  nmps: 32,\n  nlps: 29,\n  switchFlag: 0\n}, {\n  qe: 0x08a1,\n  nmps: 33,\n  nlps: 30,\n  switchFlag: 0\n}, {\n  qe: 0x0521,\n  nmps: 34,\n  nlps: 31,\n  switchFlag: 0\n}, {\n  qe: 0x0441,\n  nmps: 35,\n  nlps: 32,\n  switchFlag: 0\n}, {\n  qe: 0x02a1,\n  nmps: 36,\n  nlps: 33,\n  switchFlag: 0\n}, {\n  qe: 0x0221,\n  nmps: 37,\n  nlps: 34,\n  switchFlag: 0\n}, {\n  qe: 0x0141,\n  nmps: 38,\n  nlps: 35,\n  switchFlag: 0\n}, {\n  qe: 0x0111,\n  nmps: 39,\n  nlps: 36,\n  switchFlag: 0\n}, {\n  qe: 0x0085,\n  nmps: 40,\n  nlps: 37,\n  switchFlag: 0\n}, {\n  qe: 0x0049,\n  nmps: 41,\n  nlps: 38,\n  switchFlag: 0\n}, {\n  qe: 0x0025,\n  nmps: 42,\n  nlps: 39,\n  switchFlag: 0\n}, {\n  qe: 0x0015,\n  nmps: 43,\n  nlps: 40,\n  switchFlag: 0\n}, {\n  qe: 0x0009,\n  nmps: 44,\n  nlps: 41,\n  switchFlag: 0\n}, {\n  qe: 0x0005,\n  nmps: 45,\n  nlps: 42,\n  switchFlag: 0\n}, {\n  qe: 0x0001,\n  nmps: 45,\n  nlps: 43,\n  switchFlag: 0\n}, {\n  qe: 0x5601,\n  nmps: 46,\n  nlps: 46,\n  switchFlag: 0\n}];\n\nclass ArithmeticDecoder {\n  constructor(data, start, end) {\n    this.data = data;\n    this.bp = start;\n    this.dataEnd = end;\n    this.chigh = data[start];\n    this.clow = 0;\n    this.byteIn();\n    this.chigh = this.chigh << 7 & 0xffff | this.clow >> 9 & 0x7f;\n    this.clow = this.clow << 7 & 0xffff;\n    this.ct -= 7;\n    this.a = 0x8000;\n  }\n\n  byteIn() {\n    const data = this.data;\n    let bp = this.bp;\n\n    if (data[bp] === 0xff) {\n      if (data[bp + 1] > 0x8f) {\n        this.clow += 0xff00;\n        this.ct = 8;\n      } else {\n        bp++;\n        this.clow += data[bp] << 9;\n        this.ct = 7;\n        this.bp = bp;\n      }\n    } else {\n      bp++;\n      this.clow += bp < this.dataEnd ? data[bp] << 8 : 0xff00;\n      this.ct = 8;\n      this.bp = bp;\n    }\n\n    if (this.clow > 0xffff) {\n      this.chigh += this.clow >> 16;\n      this.clow &= 0xffff;\n    }\n  }\n\n  readBit(contexts, pos) {\n    let cx_index = contexts[pos] >> 1,\n        cx_mps = contexts[pos] & 1;\n    const qeTableIcx = QeTable[cx_index];\n    const qeIcx = qeTableIcx.qe;\n    let d;\n    let a = this.a - qeIcx;\n\n    if (this.chigh < qeIcx) {\n      if (a < qeIcx) {\n        a = qeIcx;\n        d = cx_mps;\n        cx_index = qeTableIcx.nmps;\n      } else {\n        a = qeIcx;\n        d = 1 ^ cx_mps;\n\n        if (qeTableIcx.switchFlag === 1) {\n          cx_mps = d;\n        }\n\n        cx_index = qeTableIcx.nlps;\n      }\n    } else {\n      this.chigh -= qeIcx;\n\n      if ((a & 0x8000) !== 0) {\n        this.a = a;\n        return cx_mps;\n      }\n\n      if (a < qeIcx) {\n        d = 1 ^ cx_mps;\n\n        if (qeTableIcx.switchFlag === 1) {\n          cx_mps = d;\n        }\n\n        cx_index = qeTableIcx.nlps;\n      } else {\n        d = cx_mps;\n        cx_index = qeTableIcx.nmps;\n      }\n    }\n\n    do {\n      if (this.ct === 0) {\n        this.byteIn();\n      }\n\n      a <<= 1;\n      this.chigh = this.chigh << 1 & 0xffff | this.clow >> 15 & 1;\n      this.clow = this.clow << 1 & 0xffff;\n      this.ct--;\n    } while ((a & 0x8000) === 0);\n\n    this.a = a;\n    contexts[pos] = cx_index << 1 | cx_mps;\n    return d;\n  }\n\n}\n\nexports.ArithmeticDecoder = ArithmeticDecoder;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/arithmetic_decoder.js\n')},"./node_modules/pdfjs-dist/lib/core/bidi.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.bidi = bidi;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar baseTypes = ["BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "S", "B", "S", "WS", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "B", "B", "B", "S", "WS", "ON", "ON", "ET", "ET", "ET", "ON", "ON", "ON", "ON", "ON", "ES", "CS", "ES", "CS", "CS", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "CS", "ON", "ON", "ON", "ON", "ON", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "ON", "ON", "ON", "ON", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "ON", "ON", "ON", "BN", "BN", "BN", "BN", "BN", "BN", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "CS", "ON", "ET", "ET", "ET", "ET", "ON", "ON", "ON", "ON", "L", "ON", "ON", "BN", "ON", "ON", "ET", "ET", "EN", "EN", "ON", "L", "ON", "ON", "ON", "EN", "L", "ON", "ON", "ON", "ON", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "L", "L", "L", "L", "L", "L", "L", "L"];\nvar arabicTypes = ["AN", "AN", "AN", "AN", "AN", "AN", "ON", "ON", "AL", "ET", "ET", "AL", "CS", "AL", "ON", "ON", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "ET", "AN", "AN", "AL", "AL", "AL", "NSM", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "ON", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "NSM", "NSM", "ON", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "AL", "AL", "AL", "AL", "AL", "AL"];\n\nfunction isOdd(i) {\n  return (i & 1) !== 0;\n}\n\nfunction isEven(i) {\n  return (i & 1) === 0;\n}\n\nfunction findUnequal(arr, start, value) {\n  for (var j = start, jj = arr.length; j < jj; ++j) {\n    if (arr[j] !== value) {\n      return j;\n    }\n  }\n\n  return j;\n}\n\nfunction setValues(arr, start, end, value) {\n  for (var j = start; j < end; ++j) {\n    arr[j] = value;\n  }\n}\n\nfunction reverseValues(arr, start, end) {\n  for (var i = start, j = end - 1; i < j; ++i, --j) {\n    var temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n}\n\nfunction createBidiText(str, isLTR, vertical = false) {\n  let dir = "ltr";\n\n  if (vertical) {\n    dir = "ttb";\n  } else if (!isLTR) {\n    dir = "rtl";\n  }\n\n  return {\n    str,\n    dir\n  };\n}\n\nvar chars = [];\nvar types = [];\n\nfunction bidi(str, startLevel, vertical) {\n  var isLTR = true;\n  var strLength = str.length;\n\n  if (strLength === 0 || vertical) {\n    return createBidiText(str, isLTR, vertical);\n  }\n\n  chars.length = strLength;\n  types.length = strLength;\n  var numBidi = 0;\n  var i, ii;\n\n  for (i = 0; i < strLength; ++i) {\n    chars[i] = str.charAt(i);\n    var charCode = str.charCodeAt(i);\n    var charType = "L";\n\n    if (charCode <= 0x00ff) {\n      charType = baseTypes[charCode];\n    } else if (0x0590 <= charCode && charCode <= 0x05f4) {\n      charType = "R";\n    } else if (0x0600 <= charCode && charCode <= 0x06ff) {\n      charType = arabicTypes[charCode & 0xff];\n\n      if (!charType) {\n        (0, _util.warn)("Bidi: invalid Unicode character " + charCode.toString(16));\n      }\n    } else if (0x0700 <= charCode && charCode <= 0x08ac) {\n      charType = "AL";\n    }\n\n    if (charType === "R" || charType === "AL" || charType === "AN") {\n      numBidi++;\n    }\n\n    types[i] = charType;\n  }\n\n  if (numBidi === 0) {\n    isLTR = true;\n    return createBidiText(str, isLTR);\n  }\n\n  if (startLevel === -1) {\n    if (numBidi / strLength < 0.3) {\n      isLTR = true;\n      startLevel = 0;\n    } else {\n      isLTR = false;\n      startLevel = 1;\n    }\n  }\n\n  var levels = [];\n\n  for (i = 0; i < strLength; ++i) {\n    levels[i] = startLevel;\n  }\n\n  var e = isOdd(startLevel) ? "R" : "L";\n  var sor = e;\n  var eor = sor;\n  var lastType = sor;\n\n  for (i = 0; i < strLength; ++i) {\n    if (types[i] === "NSM") {\n      types[i] = lastType;\n    } else {\n      lastType = types[i];\n    }\n  }\n\n  lastType = sor;\n  var t;\n\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n\n    if (t === "EN") {\n      types[i] = lastType === "AL" ? "AN" : "EN";\n    } else if (t === "R" || t === "L" || t === "AL") {\n      lastType = t;\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n\n    if (t === "AL") {\n      types[i] = "R";\n    }\n  }\n\n  for (i = 1; i < strLength - 1; ++i) {\n    if (types[i] === "ES" && types[i - 1] === "EN" && types[i + 1] === "EN") {\n      types[i] = "EN";\n    }\n\n    if (types[i] === "CS" && (types[i - 1] === "EN" || types[i - 1] === "AN") && types[i + 1] === types[i - 1]) {\n      types[i] = types[i - 1];\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    if (types[i] === "EN") {\n      var j;\n\n      for (j = i - 1; j >= 0; --j) {\n        if (types[j] !== "ET") {\n          break;\n        }\n\n        types[j] = "EN";\n      }\n\n      for (j = i + 1; j < strLength; ++j) {\n        if (types[j] !== "ET") {\n          break;\n        }\n\n        types[j] = "EN";\n      }\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n\n    if (t === "WS" || t === "ES" || t === "ET" || t === "CS") {\n      types[i] = "ON";\n    }\n  }\n\n  lastType = sor;\n\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n\n    if (t === "EN") {\n      types[i] = lastType === "L" ? "L" : "EN";\n    } else if (t === "R" || t === "L") {\n      lastType = t;\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    if (types[i] === "ON") {\n      var end = findUnequal(types, i + 1, "ON");\n      var before = sor;\n\n      if (i > 0) {\n        before = types[i - 1];\n      }\n\n      var after = eor;\n\n      if (end + 1 < strLength) {\n        after = types[end + 1];\n      }\n\n      if (before !== "L") {\n        before = "R";\n      }\n\n      if (after !== "L") {\n        after = "R";\n      }\n\n      if (before === after) {\n        setValues(types, i, end, before);\n      }\n\n      i = end - 1;\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    if (types[i] === "ON") {\n      types[i] = e;\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n\n    if (isEven(levels[i])) {\n      if (t === "R") {\n        levels[i] += 1;\n      } else if (t === "AN" || t === "EN") {\n        levels[i] += 2;\n      }\n    } else {\n      if (t === "L" || t === "AN" || t === "EN") {\n        levels[i] += 1;\n      }\n    }\n  }\n\n  var highestLevel = -1;\n  var lowestOddLevel = 99;\n  var level;\n\n  for (i = 0, ii = levels.length; i < ii; ++i) {\n    level = levels[i];\n\n    if (highestLevel < level) {\n      highestLevel = level;\n    }\n\n    if (lowestOddLevel > level && isOdd(level)) {\n      lowestOddLevel = level;\n    }\n  }\n\n  for (level = highestLevel; level >= lowestOddLevel; --level) {\n    var start = -1;\n\n    for (i = 0, ii = levels.length; i < ii; ++i) {\n      if (levels[i] < level) {\n        if (start >= 0) {\n          reverseValues(chars, start, i);\n          start = -1;\n        }\n      } else if (start < 0) {\n        start = i;\n      }\n    }\n\n    if (start >= 0) {\n      reverseValues(chars, start, levels.length);\n    }\n  }\n\n  for (i = 0, ii = chars.length; i < ii; ++i) {\n    var ch = chars[i];\n\n    if (ch === "<" || ch === ">") {\n      chars[i] = "";\n    }\n  }\n\n  return createBidiText(chars.join(""), isLTR);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/bidi.js\n')},"./node_modules/pdfjs-dist/lib/core/ccitt.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.CCITTFaxDecoder = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nconst CCITTFaxDecoder = function CCITTFaxDecoder() {\n  const ccittEOL = -2;\n  const ccittEOF = -1;\n  const twoDimPass = 0;\n  const twoDimHoriz = 1;\n  const twoDimVert0 = 2;\n  const twoDimVertR1 = 3;\n  const twoDimVertL1 = 4;\n  const twoDimVertR2 = 5;\n  const twoDimVertL2 = 6;\n  const twoDimVertR3 = 7;\n  const twoDimVertL3 = 8;\n  const twoDimTable = [[-1, -1], [-1, -1], [7, twoDimVertL3], [7, twoDimVertR3], [6, twoDimVertL2], [6, twoDimVertL2], [6, twoDimVertR2], [6, twoDimVertR2], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0]];\n  const whiteTable1 = [[-1, -1], [12, ccittEOL], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [12, 1984], [12, 2048], [12, 2112], [12, 2176], [12, 2240], [12, 2304], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [12, 2368], [12, 2432], [12, 2496], [12, 2560]];\n  const whiteTable2 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [8, 29], [8, 29], [8, 30], [8, 30], [8, 45], [8, 45], [8, 46], [8, 46], [7, 22], [7, 22], [7, 22], [7, 22], [7, 23], [7, 23], [7, 23], [7, 23], [8, 47], [8, 47], [8, 48], [8, 48], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [7, 20], [7, 20], [7, 20], [7, 20], [8, 33], [8, 33], [8, 34], [8, 34], [8, 35], [8, 35], [8, 36], [8, 36], [8, 37], [8, 37], [8, 38], [8, 38], [7, 19], [7, 19], [7, 19], [7, 19], [8, 31], [8, 31], [8, 32], [8, 32], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [8, 53], [8, 53], [8, 54], [8, 54], [7, 26], [7, 26], [7, 26], [7, 26], [8, 39], [8, 39], [8, 40], [8, 40], [8, 41], [8, 41], [8, 42], [8, 42], [8, 43], [8, 43], [8, 44], [8, 44], [7, 21], [7, 21], [7, 21], [7, 21], [7, 28], [7, 28], [7, 28], [7, 28], [8, 61], [8, 61], [8, 62], [8, 62], [8, 63], [8, 63], [8, 0], [8, 0], [8, 320], [8, 320], [8, 384], [8, 384], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [7, 27], [7, 27], [7, 27], [7, 27], [8, 59], [8, 59], [8, 60], [8, 60], [9, 1472], [9, 1536], [9, 1600], [9, 1728], [7, 18], [7, 18], [7, 18], [7, 18], [7, 24], [7, 24], [7, 24], [7, 24], [8, 49], [8, 49], [8, 50], [8, 50], [8, 51], [8, 51], [8, 52], [8, 52], [7, 25], [7, 25], [7, 25], [7, 25], [8, 55], [8, 55], [8, 56], [8, 56], [8, 57], [8, 57], [8, 58], [8, 58], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [8, 448], [8, 448], [8, 512], [8, 512], [9, 704], [9, 768], [8, 640], [8, 640], [8, 576], [8, 576], [9, 832], [9, 896], [9, 960], [9, 1024], [9, 1088], [9, 1152], [9, 1216], [9, 1280], [9, 1344], [9, 1408], [7, 256], [7, 256], [7, 256], [7, 256], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7]];\n  const blackTable1 = [[-1, -1], [-1, -1], [12, ccittEOL], [12, ccittEOL], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [11, 1792], [11, 1792], [12, 1984], [12, 1984], [12, 2048], [12, 2048], [12, 2112], [12, 2112], [12, 2176], [12, 2176], [12, 2240], [12, 2240], [12, 2304], [12, 2304], [11, 1856], [11, 1856], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [11, 1920], [11, 1920], [12, 2368], [12, 2368], [12, 2432], [12, 2432], [12, 2496], [12, 2496], [12, 2560], [12, 2560], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [12, 52], [12, 52], [13, 640], [13, 704], [13, 768], [13, 832], [12, 55], [12, 55], [12, 56], [12, 56], [13, 1280], [13, 1344], [13, 1408], [13, 1472], [12, 59], [12, 59], [12, 60], [12, 60], [13, 1536], [13, 1600], [11, 24], [11, 24], [11, 24], [11, 24], [11, 25], [11, 25], [11, 25], [11, 25], [13, 1664], [13, 1728], [12, 320], [12, 320], [12, 384], [12, 384], [12, 448], [12, 448], [13, 512], [13, 576], [12, 53], [12, 53], [12, 54], [12, 54], [13, 896], [13, 960], [13, 1024], [13, 1088], [13, 1152], [13, 1216], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64]];\n  const blackTable2 = [[8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [11, 23], [11, 23], [12, 50], [12, 51], [12, 44], [12, 45], [12, 46], [12, 47], [12, 57], [12, 58], [12, 61], [12, 256], [10, 16], [10, 16], [10, 16], [10, 16], [10, 17], [10, 17], [10, 17], [10, 17], [12, 48], [12, 49], [12, 62], [12, 63], [12, 30], [12, 31], [12, 32], [12, 33], [12, 40], [12, 41], [11, 22], [11, 22], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [12, 128], [12, 192], [12, 26], [12, 27], [12, 28], [12, 29], [11, 19], [11, 19], [11, 20], [11, 20], [12, 34], [12, 35], [12, 36], [12, 37], [12, 38], [12, 39], [11, 21], [11, 21], [12, 42], [12, 43], [10, 0], [10, 0], [10, 0], [10, 0], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12]];\n  const blackTable3 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [6, 9], [6, 8], [5, 7], [5, 7], [4, 6], [4, 6], [4, 6], [4, 6], [4, 5], [4, 5], [4, 5], [4, 5], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2]];\n\n  function CCITTFaxDecoder(source, options = {}) {\n    if (!source || typeof source.next !== "function") {\n      throw new Error(\'CCITTFaxDecoder - invalid "source" parameter.\');\n    }\n\n    this.source = source;\n    this.eof = false;\n    this.encoding = options.K || 0;\n    this.eoline = options.EndOfLine || false;\n    this.byteAlign = options.EncodedByteAlign || false;\n    this.columns = options.Columns || 1728;\n    this.rows = options.Rows || 0;\n    let eoblock = options.EndOfBlock;\n\n    if (eoblock === null || eoblock === undefined) {\n      eoblock = true;\n    }\n\n    this.eoblock = eoblock;\n    this.black = options.BlackIs1 || false;\n    this.codingLine = new Uint32Array(this.columns + 1);\n    this.refLine = new Uint32Array(this.columns + 2);\n    this.codingLine[0] = this.columns;\n    this.codingPos = 0;\n    this.row = 0;\n    this.nextLine2D = this.encoding < 0;\n    this.inputBits = 0;\n    this.inputBuf = 0;\n    this.outputBits = 0;\n    this.rowsDone = false;\n    let code1;\n\n    while ((code1 = this._lookBits(12)) === 0) {\n      this._eatBits(1);\n    }\n\n    if (code1 === 1) {\n      this._eatBits(12);\n    }\n\n    if (this.encoding > 0) {\n      this.nextLine2D = !this._lookBits(1);\n\n      this._eatBits(1);\n    }\n  }\n\n  CCITTFaxDecoder.prototype = {\n    readNextChar() {\n      if (this.eof) {\n        return -1;\n      }\n\n      const refLine = this.refLine;\n      const codingLine = this.codingLine;\n      const columns = this.columns;\n      let refPos, blackPixels, bits, i;\n\n      if (this.outputBits === 0) {\n        if (this.rowsDone) {\n          this.eof = true;\n        }\n\n        if (this.eof) {\n          return -1;\n        }\n\n        this.err = false;\n        let code1, code2, code3;\n\n        if (this.nextLine2D) {\n          for (i = 0; codingLine[i] < columns; ++i) {\n            refLine[i] = codingLine[i];\n          }\n\n          refLine[i++] = columns;\n          refLine[i] = columns;\n          codingLine[0] = 0;\n          this.codingPos = 0;\n          refPos = 0;\n          blackPixels = 0;\n\n          while (codingLine[this.codingPos] < columns) {\n            code1 = this._getTwoDimCode();\n\n            switch (code1) {\n              case twoDimPass:\n                this._addPixels(refLine[refPos + 1], blackPixels);\n\n                if (refLine[refPos + 1] < columns) {\n                  refPos += 2;\n                }\n\n                break;\n\n              case twoDimHoriz:\n                code1 = code2 = 0;\n\n                if (blackPixels) {\n                  do {\n                    code1 += code3 = this._getBlackCode();\n                  } while (code3 >= 64);\n\n                  do {\n                    code2 += code3 = this._getWhiteCode();\n                  } while (code3 >= 64);\n                } else {\n                  do {\n                    code1 += code3 = this._getWhiteCode();\n                  } while (code3 >= 64);\n\n                  do {\n                    code2 += code3 = this._getBlackCode();\n                  } while (code3 >= 64);\n                }\n\n                this._addPixels(codingLine[this.codingPos] + code1, blackPixels);\n\n                if (codingLine[this.codingPos] < columns) {\n                  this._addPixels(codingLine[this.codingPos] + code2, blackPixels ^ 1);\n                }\n\n                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                  refPos += 2;\n                }\n\n                break;\n\n              case twoDimVertR3:\n                this._addPixels(refLine[refPos] + 3, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  ++refPos;\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVertR2:\n                this._addPixels(refLine[refPos] + 2, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  ++refPos;\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVertR1:\n                this._addPixels(refLine[refPos] + 1, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  ++refPos;\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVert0:\n                this._addPixels(refLine[refPos], blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  ++refPos;\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVertL3:\n                this._addPixelsNeg(refLine[refPos] - 3, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  if (refPos > 0) {\n                    --refPos;\n                  } else {\n                    ++refPos;\n                  }\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVertL2:\n                this._addPixelsNeg(refLine[refPos] - 2, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  if (refPos > 0) {\n                    --refPos;\n                  } else {\n                    ++refPos;\n                  }\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVertL1:\n                this._addPixelsNeg(refLine[refPos] - 1, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  if (refPos > 0) {\n                    --refPos;\n                  } else {\n                    ++refPos;\n                  }\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case ccittEOF:\n                this._addPixels(columns, 0);\n\n                this.eof = true;\n                break;\n\n              default:\n                (0, _util.info)("bad 2d code");\n\n                this._addPixels(columns, 0);\n\n                this.err = true;\n            }\n          }\n        } else {\n          codingLine[0] = 0;\n          this.codingPos = 0;\n          blackPixels = 0;\n\n          while (codingLine[this.codingPos] < columns) {\n            code1 = 0;\n\n            if (blackPixels) {\n              do {\n                code1 += code3 = this._getBlackCode();\n              } while (code3 >= 64);\n            } else {\n              do {\n                code1 += code3 = this._getWhiteCode();\n              } while (code3 >= 64);\n            }\n\n            this._addPixels(codingLine[this.codingPos] + code1, blackPixels);\n\n            blackPixels ^= 1;\n          }\n        }\n\n        let gotEOL = false;\n\n        if (this.byteAlign) {\n          this.inputBits &= ~7;\n        }\n\n        if (!this.eoblock && this.row === this.rows - 1) {\n          this.rowsDone = true;\n        } else {\n          code1 = this._lookBits(12);\n\n          if (this.eoline) {\n            while (code1 !== ccittEOF && code1 !== 1) {\n              this._eatBits(1);\n\n              code1 = this._lookBits(12);\n            }\n          } else {\n            while (code1 === 0) {\n              this._eatBits(1);\n\n              code1 = this._lookBits(12);\n            }\n          }\n\n          if (code1 === 1) {\n            this._eatBits(12);\n\n            gotEOL = true;\n          } else if (code1 === ccittEOF) {\n            this.eof = true;\n          }\n        }\n\n        if (!this.eof && this.encoding > 0 && !this.rowsDone) {\n          this.nextLine2D = !this._lookBits(1);\n\n          this._eatBits(1);\n        }\n\n        if (this.eoblock && gotEOL && this.byteAlign) {\n          code1 = this._lookBits(12);\n\n          if (code1 === 1) {\n            this._eatBits(12);\n\n            if (this.encoding > 0) {\n              this._lookBits(1);\n\n              this._eatBits(1);\n            }\n\n            if (this.encoding >= 0) {\n              for (i = 0; i < 4; ++i) {\n                code1 = this._lookBits(12);\n\n                if (code1 !== 1) {\n                  (0, _util.info)("bad rtc code: " + code1);\n                }\n\n                this._eatBits(12);\n\n                if (this.encoding > 0) {\n                  this._lookBits(1);\n\n                  this._eatBits(1);\n                }\n              }\n            }\n\n            this.eof = true;\n          }\n        } else if (this.err && this.eoline) {\n          while (true) {\n            code1 = this._lookBits(13);\n\n            if (code1 === ccittEOF) {\n              this.eof = true;\n              return -1;\n            }\n\n            if (code1 >> 1 === 1) {\n              break;\n            }\n\n            this._eatBits(1);\n          }\n\n          this._eatBits(12);\n\n          if (this.encoding > 0) {\n            this._eatBits(1);\n\n            this.nextLine2D = !(code1 & 1);\n          }\n        }\n\n        if (codingLine[0] > 0) {\n          this.outputBits = codingLine[this.codingPos = 0];\n        } else {\n          this.outputBits = codingLine[this.codingPos = 1];\n        }\n\n        this.row++;\n      }\n\n      let c;\n\n      if (this.outputBits >= 8) {\n        c = this.codingPos & 1 ? 0 : 0xff;\n        this.outputBits -= 8;\n\n        if (this.outputBits === 0 && codingLine[this.codingPos] < columns) {\n          this.codingPos++;\n          this.outputBits = codingLine[this.codingPos] - codingLine[this.codingPos - 1];\n        }\n      } else {\n        bits = 8;\n        c = 0;\n\n        do {\n          if (this.outputBits > bits) {\n            c <<= bits;\n\n            if (!(this.codingPos & 1)) {\n              c |= 0xff >> 8 - bits;\n            }\n\n            this.outputBits -= bits;\n            bits = 0;\n          } else {\n            c <<= this.outputBits;\n\n            if (!(this.codingPos & 1)) {\n              c |= 0xff >> 8 - this.outputBits;\n            }\n\n            bits -= this.outputBits;\n            this.outputBits = 0;\n\n            if (codingLine[this.codingPos] < columns) {\n              this.codingPos++;\n              this.outputBits = codingLine[this.codingPos] - codingLine[this.codingPos - 1];\n            } else if (bits > 0) {\n              c <<= bits;\n              bits = 0;\n            }\n          }\n        } while (bits);\n      }\n\n      if (this.black) {\n        c ^= 0xff;\n      }\n\n      return c;\n    },\n\n    _addPixels(a1, blackPixels) {\n      const codingLine = this.codingLine;\n      let codingPos = this.codingPos;\n\n      if (a1 > codingLine[codingPos]) {\n        if (a1 > this.columns) {\n          (0, _util.info)("row is wrong length");\n          this.err = true;\n          a1 = this.columns;\n        }\n\n        if (codingPos & 1 ^ blackPixels) {\n          ++codingPos;\n        }\n\n        codingLine[codingPos] = a1;\n      }\n\n      this.codingPos = codingPos;\n    },\n\n    _addPixelsNeg(a1, blackPixels) {\n      const codingLine = this.codingLine;\n      let codingPos = this.codingPos;\n\n      if (a1 > codingLine[codingPos]) {\n        if (a1 > this.columns) {\n          (0, _util.info)("row is wrong length");\n          this.err = true;\n          a1 = this.columns;\n        }\n\n        if (codingPos & 1 ^ blackPixels) {\n          ++codingPos;\n        }\n\n        codingLine[codingPos] = a1;\n      } else if (a1 < codingLine[codingPos]) {\n        if (a1 < 0) {\n          (0, _util.info)("invalid code");\n          this.err = true;\n          a1 = 0;\n        }\n\n        while (codingPos > 0 && a1 < codingLine[codingPos - 1]) {\n          --codingPos;\n        }\n\n        codingLine[codingPos] = a1;\n      }\n\n      this.codingPos = codingPos;\n    },\n\n    _findTableCode(start, end, table, limit) {\n      const limitValue = limit || 0;\n\n      for (let i = start; i <= end; ++i) {\n        let code = this._lookBits(i);\n\n        if (code === ccittEOF) {\n          return [true, 1, false];\n        }\n\n        if (i < end) {\n          code <<= end - i;\n        }\n\n        if (!limitValue || code >= limitValue) {\n          const p = table[code - limitValue];\n\n          if (p[0] === i) {\n            this._eatBits(i);\n\n            return [true, p[1], true];\n          }\n        }\n      }\n\n      return [false, 0, false];\n    },\n\n    _getTwoDimCode() {\n      let code = 0;\n      let p;\n\n      if (this.eoblock) {\n        code = this._lookBits(7);\n        p = twoDimTable[code];\n\n        if (p && p[0] > 0) {\n          this._eatBits(p[0]);\n\n          return p[1];\n        }\n      } else {\n        const result = this._findTableCode(1, 7, twoDimTable);\n\n        if (result[0] && result[2]) {\n          return result[1];\n        }\n      }\n\n      (0, _util.info)("Bad two dim code");\n      return ccittEOF;\n    },\n\n    _getWhiteCode() {\n      let code = 0;\n      let p;\n\n      if (this.eoblock) {\n        code = this._lookBits(12);\n\n        if (code === ccittEOF) {\n          return 1;\n        }\n\n        if (code >> 5 === 0) {\n          p = whiteTable1[code];\n        } else {\n          p = whiteTable2[code >> 3];\n        }\n\n        if (p[0] > 0) {\n          this._eatBits(p[0]);\n\n          return p[1];\n        }\n      } else {\n        let result = this._findTableCode(1, 9, whiteTable2);\n\n        if (result[0]) {\n          return result[1];\n        }\n\n        result = this._findTableCode(11, 12, whiteTable1);\n\n        if (result[0]) {\n          return result[1];\n        }\n      }\n\n      (0, _util.info)("bad white code");\n\n      this._eatBits(1);\n\n      return 1;\n    },\n\n    _getBlackCode() {\n      let code, p;\n\n      if (this.eoblock) {\n        code = this._lookBits(13);\n\n        if (code === ccittEOF) {\n          return 1;\n        }\n\n        if (code >> 7 === 0) {\n          p = blackTable1[code];\n        } else if (code >> 9 === 0 && code >> 7 !== 0) {\n          p = blackTable2[(code >> 1) - 64];\n        } else {\n          p = blackTable3[code >> 7];\n        }\n\n        if (p[0] > 0) {\n          this._eatBits(p[0]);\n\n          return p[1];\n        }\n      } else {\n        let result = this._findTableCode(2, 6, blackTable3);\n\n        if (result[0]) {\n          return result[1];\n        }\n\n        result = this._findTableCode(7, 12, blackTable2, 64);\n\n        if (result[0]) {\n          return result[1];\n        }\n\n        result = this._findTableCode(10, 13, blackTable1);\n\n        if (result[0]) {\n          return result[1];\n        }\n      }\n\n      (0, _util.info)("bad black code");\n\n      this._eatBits(1);\n\n      return 1;\n    },\n\n    _lookBits(n) {\n      let c;\n\n      while (this.inputBits < n) {\n        if ((c = this.source.next()) === -1) {\n          if (this.inputBits === 0) {\n            return ccittEOF;\n          }\n\n          return this.inputBuf << n - this.inputBits & 0xffff >> 16 - n;\n        }\n\n        this.inputBuf = this.inputBuf << 8 | c;\n        this.inputBits += 8;\n      }\n\n      return this.inputBuf >> this.inputBits - n & 0xffff >> 16 - n;\n    },\n\n    _eatBits(n) {\n      if ((this.inputBits -= n) < 0) {\n        this.inputBits = 0;\n      }\n    }\n\n  };\n  return CCITTFaxDecoder;\n}();\n\nexports.CCITTFaxDecoder = CCITTFaxDecoder;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/ccitt.js\n')},"./node_modules/pdfjs-dist/lib/core/ccitt_stream.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.CCITTFaxStream = void 0;\n\nvar _primitives = __webpack_require__(/*! ./primitives.js */ "./node_modules/pdfjs-dist/lib/core/primitives.js");\n\nvar _ccitt = __webpack_require__(/*! ./ccitt.js */ "./node_modules/pdfjs-dist/lib/core/ccitt.js");\n\nvar _stream = __webpack_require__(/*! ./stream.js */ "./node_modules/pdfjs-dist/lib/core/stream.js");\n\nvar CCITTFaxStream = function CCITTFaxStreamClosure() {\n  function CCITTFaxStream(str, maybeLength, params) {\n    this.str = str;\n    this.dict = str.dict;\n\n    if (!(0, _primitives.isDict)(params)) {\n      params = _primitives.Dict.empty;\n    }\n\n    const source = {\n      next() {\n        return str.getByte();\n      }\n\n    };\n    this.ccittFaxDecoder = new _ccitt.CCITTFaxDecoder(source, {\n      K: params.get("K"),\n      EndOfLine: params.get("EndOfLine"),\n      EncodedByteAlign: params.get("EncodedByteAlign"),\n      Columns: params.get("Columns"),\n      Rows: params.get("Rows"),\n      EndOfBlock: params.get("EndOfBlock"),\n      BlackIs1: params.get("BlackIs1")\n    });\n\n    _stream.DecodeStream.call(this, maybeLength);\n  }\n\n  CCITTFaxStream.prototype = Object.create(_stream.DecodeStream.prototype);\n\n  CCITTFaxStream.prototype.readBlock = function () {\n    while (!this.eof) {\n      const c = this.ccittFaxDecoder.readNextChar();\n\n      if (c === -1) {\n        this.eof = true;\n        return;\n      }\n\n      this.ensureBuffer(this.bufferLength + 1);\n      this.buffer[this.bufferLength++] = c;\n    }\n  };\n\n  return CCITTFaxStream;\n}();\n\nexports.CCITTFaxStream = CCITTFaxStream;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGRmanMtZGlzdC9saWIvY29yZS9jY2l0dF9zdHJlYW0uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TaW1wbGVQZGZBbmFseXplci8uL25vZGVfbW9kdWxlcy9wZGZqcy1kaXN0L2xpYi9jb3JlL2NjaXR0X3N0cmVhbS5qcz9hMTFhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY3N0YXJ0IFRoZSBmb2xsb3dpbmcgaXMgdGhlIGVudGlyZSBsaWNlbnNlIG5vdGljZSBmb3IgdGhlXG4gKiBKYXZhc2NyaXB0IGNvZGUgaW4gdGhpcyBwYWdlXG4gKlxuICogQ29weXJpZ2h0IDIwMjAgTW96aWxsYSBGb3VuZGF0aW9uXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqIEBsaWNlbmQgVGhlIGFib3ZlIGlzIHRoZSBlbnRpcmUgbGljZW5zZSBub3RpY2UgZm9yIHRoZVxuICogSmF2YXNjcmlwdCBjb2RlIGluIHRoaXMgcGFnZVxuICovXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQ0NJVFRGYXhTdHJlYW0gPSB2b2lkIDA7XG5cbnZhciBfcHJpbWl0aXZlcyA9IHJlcXVpcmUoXCIuL3ByaW1pdGl2ZXMuanNcIik7XG5cbnZhciBfY2NpdHQgPSByZXF1aXJlKFwiLi9jY2l0dC5qc1wiKTtcblxudmFyIF9zdHJlYW0gPSByZXF1aXJlKFwiLi9zdHJlYW0uanNcIik7XG5cbnZhciBDQ0lUVEZheFN0cmVhbSA9IGZ1bmN0aW9uIENDSVRURmF4U3RyZWFtQ2xvc3VyZSgpIHtcbiAgZnVuY3Rpb24gQ0NJVFRGYXhTdHJlYW0oc3RyLCBtYXliZUxlbmd0aCwgcGFyYW1zKSB7XG4gICAgdGhpcy5zdHIgPSBzdHI7XG4gICAgdGhpcy5kaWN0ID0gc3RyLmRpY3Q7XG5cbiAgICBpZiAoISgwLCBfcHJpbWl0aXZlcy5pc0RpY3QpKHBhcmFtcykpIHtcbiAgICAgIHBhcmFtcyA9IF9wcmltaXRpdmVzLkRpY3QuZW1wdHk7XG4gICAgfVxuXG4gICAgY29uc3Qgc291cmNlID0ge1xuICAgICAgbmV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHN0ci5nZXRCeXRlKCk7XG4gICAgICB9XG5cbiAgICB9O1xuICAgIHRoaXMuY2NpdHRGYXhEZWNvZGVyID0gbmV3IF9jY2l0dC5DQ0lUVEZheERlY29kZXIoc291cmNlLCB7XG4gICAgICBLOiBwYXJhbXMuZ2V0KFwiS1wiKSxcbiAgICAgIEVuZE9mTGluZTogcGFyYW1zLmdldChcIkVuZE9mTGluZVwiKSxcbiAgICAgIEVuY29kZWRCeXRlQWxpZ246IHBhcmFtcy5nZXQoXCJFbmNvZGVkQnl0ZUFsaWduXCIpLFxuICAgICAgQ29sdW1uczogcGFyYW1zLmdldChcIkNvbHVtbnNcIiksXG4gICAgICBSb3dzOiBwYXJhbXMuZ2V0KFwiUm93c1wiKSxcbiAgICAgIEVuZE9mQmxvY2s6IHBhcmFtcy5nZXQoXCJFbmRPZkJsb2NrXCIpLFxuICAgICAgQmxhY2tJczE6IHBhcmFtcy5nZXQoXCJCbGFja0lzMVwiKVxuICAgIH0pO1xuXG4gICAgX3N0cmVhbS5EZWNvZGVTdHJlYW0uY2FsbCh0aGlzLCBtYXliZUxlbmd0aCk7XG4gIH1cblxuICBDQ0lUVEZheFN0cmVhbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKF9zdHJlYW0uRGVjb2RlU3RyZWFtLnByb3RvdHlwZSk7XG5cbiAgQ0NJVFRGYXhTdHJlYW0ucHJvdG90eXBlLnJlYWRCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICB3aGlsZSAoIXRoaXMuZW9mKSB7XG4gICAgICBjb25zdCBjID0gdGhpcy5jY2l0dEZheERlY29kZXIucmVhZE5leHRDaGFyKCk7XG5cbiAgICAgIGlmIChjID09PSAtMSkge1xuICAgICAgICB0aGlzLmVvZiA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbnN1cmVCdWZmZXIodGhpcy5idWZmZXJMZW5ndGggKyAxKTtcbiAgICAgIHRoaXMuYnVmZmVyW3RoaXMuYnVmZmVyTGVuZ3RoKytdID0gYztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIENDSVRURmF4U3RyZWFtO1xufSgpO1xuXG5leHBvcnRzLkNDSVRURmF4U3RyZWFtID0gQ0NJVFRGYXhTdHJlYW07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/ccitt_stream.js\n')},"./node_modules/pdfjs-dist/lib/core/cff_parser.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.CFFTopDict = exports.CFFStrings = exports.CFFStandardStrings = exports.CFFPrivateDict = exports.CFFParser = exports.CFFIndex = exports.CFFHeader = exports.CFFFDSelect = exports.CFFCompiler = exports.CFFCharset = exports.CFF = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _charsets = __webpack_require__(/*! ./charsets.js */ "./node_modules/pdfjs-dist/lib/core/charsets.js");\n\nvar _encodings = __webpack_require__(/*! ./encodings.js */ "./node_modules/pdfjs-dist/lib/core/encodings.js");\n\nvar MAX_SUBR_NESTING = 10;\nvar CFFStandardStrings = [".notdef", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "endash", "dagger", "daggerdbl", "periodcentered", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "questiondown", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "emdash", "AE", "ordfeminine", "Lslash", "Oslash", "OE", "ordmasculine", "ae", "dotlessi", "lslash", "oslash", "oe", "germandbls", "onesuperior", "logicalnot", "mu", "trademark", "Eth", "onehalf", "plusminus", "Thorn", "onequarter", "divide", "brokenbar", "degree", "thorn", "threequarters", "twosuperior", "registered", "minus", "eth", "multiply", "threesuperior", "copyright", "Aacute", "Acircumflex", "Adieresis", "Agrave", "Aring", "Atilde", "Ccedilla", "Eacute", "Ecircumflex", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Ntilde", "Oacute", "Ocircumflex", "Odieresis", "Ograve", "Otilde", "Scaron", "Uacute", "Ucircumflex", "Udieresis", "Ugrave", "Yacute", "Ydieresis", "Zcaron", "aacute", "acircumflex", "adieresis", "agrave", "aring", "atilde", "ccedilla", "eacute", "ecircumflex", "edieresis", "egrave", "iacute", "icircumflex", "idieresis", "igrave", "ntilde", "oacute", "ocircumflex", "odieresis", "ograve", "otilde", "scaron", "uacute", "ucircumflex", "udieresis", "ugrave", "yacute", "ydieresis", "zcaron", "exclamsmall", "Hungarumlautsmall", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "exclamdownsmall", "centoldstyle", "Lslashsmall", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "Dotaccentsmall", "Macronsmall", "figuredash", "hypheninferior", "Ogoneksmall", "Ringsmall", "Cedillasmall", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall", "001.000", "001.001", "001.002", "001.003", "Black", "Bold", "Book", "Light", "Medium", "Regular", "Roman", "Semibold"];\nexports.CFFStandardStrings = CFFStandardStrings;\nconst NUM_STANDARD_CFF_STRINGS = 391;\n\nvar CFFParser = function CFFParserClosure() {\n  var CharstringValidationData = [null, {\n    id: "hstem",\n    min: 2,\n    stackClearing: true,\n    stem: true\n  }, null, {\n    id: "vstem",\n    min: 2,\n    stackClearing: true,\n    stem: true\n  }, {\n    id: "vmoveto",\n    min: 1,\n    stackClearing: true\n  }, {\n    id: "rlineto",\n    min: 2,\n    resetStack: true\n  }, {\n    id: "hlineto",\n    min: 1,\n    resetStack: true\n  }, {\n    id: "vlineto",\n    min: 1,\n    resetStack: true\n  }, {\n    id: "rrcurveto",\n    min: 6,\n    resetStack: true\n  }, null, {\n    id: "callsubr",\n    min: 1,\n    undefStack: true\n  }, {\n    id: "return",\n    min: 0,\n    undefStack: true\n  }, null, null, {\n    id: "endchar",\n    min: 0,\n    stackClearing: true\n  }, null, null, null, {\n    id: "hstemhm",\n    min: 2,\n    stackClearing: true,\n    stem: true\n  }, {\n    id: "hintmask",\n    min: 0,\n    stackClearing: true\n  }, {\n    id: "cntrmask",\n    min: 0,\n    stackClearing: true\n  }, {\n    id: "rmoveto",\n    min: 2,\n    stackClearing: true\n  }, {\n    id: "hmoveto",\n    min: 1,\n    stackClearing: true\n  }, {\n    id: "vstemhm",\n    min: 2,\n    stackClearing: true,\n    stem: true\n  }, {\n    id: "rcurveline",\n    min: 8,\n    resetStack: true\n  }, {\n    id: "rlinecurve",\n    min: 8,\n    resetStack: true\n  }, {\n    id: "vvcurveto",\n    min: 4,\n    resetStack: true\n  }, {\n    id: "hhcurveto",\n    min: 4,\n    resetStack: true\n  }, null, {\n    id: "callgsubr",\n    min: 1,\n    undefStack: true\n  }, {\n    id: "vhcurveto",\n    min: 4,\n    resetStack: true\n  }, {\n    id: "hvcurveto",\n    min: 4,\n    resetStack: true\n  }];\n  var CharstringValidationData12 = [null, null, null, {\n    id: "and",\n    min: 2,\n    stackDelta: -1\n  }, {\n    id: "or",\n    min: 2,\n    stackDelta: -1\n  }, {\n    id: "not",\n    min: 1,\n    stackDelta: 0\n  }, null, null, null, {\n    id: "abs",\n    min: 1,\n    stackDelta: 0\n  }, {\n    id: "add",\n    min: 2,\n    stackDelta: -1,\n    stackFn: function stack_div(stack, index) {\n      stack[index - 2] = stack[index - 2] + stack[index - 1];\n    }\n  }, {\n    id: "sub",\n    min: 2,\n    stackDelta: -1,\n    stackFn: function stack_div(stack, index) {\n      stack[index - 2] = stack[index - 2] - stack[index - 1];\n    }\n  }, {\n    id: "div",\n    min: 2,\n    stackDelta: -1,\n    stackFn: function stack_div(stack, index) {\n      stack[index - 2] = stack[index - 2] / stack[index - 1];\n    }\n  }, null, {\n    id: "neg",\n    min: 1,\n    stackDelta: 0,\n    stackFn: function stack_div(stack, index) {\n      stack[index - 1] = -stack[index - 1];\n    }\n  }, {\n    id: "eq",\n    min: 2,\n    stackDelta: -1\n  }, null, null, {\n    id: "drop",\n    min: 1,\n    stackDelta: -1\n  }, null, {\n    id: "put",\n    min: 2,\n    stackDelta: -2\n  }, {\n    id: "get",\n    min: 1,\n    stackDelta: 0\n  }, {\n    id: "ifelse",\n    min: 4,\n    stackDelta: -3\n  }, {\n    id: "random",\n    min: 0,\n    stackDelta: 1\n  }, {\n    id: "mul",\n    min: 2,\n    stackDelta: -1,\n    stackFn: function stack_div(stack, index) {\n      stack[index - 2] = stack[index - 2] * stack[index - 1];\n    }\n  }, null, {\n    id: "sqrt",\n    min: 1,\n    stackDelta: 0\n  }, {\n    id: "dup",\n    min: 1,\n    stackDelta: 1\n  }, {\n    id: "exch",\n    min: 2,\n    stackDelta: 0\n  }, {\n    id: "index",\n    min: 2,\n    stackDelta: 0\n  }, {\n    id: "roll",\n    min: 3,\n    stackDelta: -2\n  }, null, null, null, {\n    id: "hflex",\n    min: 7,\n    resetStack: true\n  }, {\n    id: "flex",\n    min: 13,\n    resetStack: true\n  }, {\n    id: "hflex1",\n    min: 9,\n    resetStack: true\n  }, {\n    id: "flex1",\n    min: 11,\n    resetStack: true\n  }];\n\n  class CFFParser {\n    constructor(file, properties, seacAnalysisEnabled) {\n      this.bytes = file.getBytes();\n      this.properties = properties;\n      this.seacAnalysisEnabled = !!seacAnalysisEnabled;\n    }\n\n    parse() {\n      var properties = this.properties;\n      var cff = new CFF();\n      this.cff = cff;\n      var header = this.parseHeader();\n      var nameIndex = this.parseIndex(header.endPos);\n      var topDictIndex = this.parseIndex(nameIndex.endPos);\n      var stringIndex = this.parseIndex(topDictIndex.endPos);\n      var globalSubrIndex = this.parseIndex(stringIndex.endPos);\n      var topDictParsed = this.parseDict(topDictIndex.obj.get(0));\n      var topDict = this.createDict(CFFTopDict, topDictParsed, cff.strings);\n      cff.header = header.obj;\n      cff.names = this.parseNameIndex(nameIndex.obj);\n      cff.strings = this.parseStringIndex(stringIndex.obj);\n      cff.topDict = topDict;\n      cff.globalSubrIndex = globalSubrIndex.obj;\n      this.parsePrivateDict(cff.topDict);\n      cff.isCIDFont = topDict.hasName("ROS");\n      var charStringOffset = topDict.getByName("CharStrings");\n      var charStringIndex = this.parseIndex(charStringOffset).obj;\n      var fontMatrix = topDict.getByName("FontMatrix");\n\n      if (fontMatrix) {\n        properties.fontMatrix = fontMatrix;\n      }\n\n      var fontBBox = topDict.getByName("FontBBox");\n\n      if (fontBBox) {\n        properties.ascent = Math.max(fontBBox[3], fontBBox[1]);\n        properties.descent = Math.min(fontBBox[1], fontBBox[3]);\n        properties.ascentScaled = true;\n      }\n\n      var charset, encoding;\n\n      if (cff.isCIDFont) {\n        var fdArrayIndex = this.parseIndex(topDict.getByName("FDArray")).obj;\n\n        for (var i = 0, ii = fdArrayIndex.count; i < ii; ++i) {\n          var dictRaw = fdArrayIndex.get(i);\n          var fontDict = this.createDict(CFFTopDict, this.parseDict(dictRaw), cff.strings);\n          this.parsePrivateDict(fontDict);\n          cff.fdArray.push(fontDict);\n        }\n\n        encoding = null;\n        charset = this.parseCharsets(topDict.getByName("charset"), charStringIndex.count, cff.strings, true);\n        cff.fdSelect = this.parseFDSelect(topDict.getByName("FDSelect"), charStringIndex.count);\n      } else {\n        charset = this.parseCharsets(topDict.getByName("charset"), charStringIndex.count, cff.strings, false);\n        encoding = this.parseEncoding(topDict.getByName("Encoding"), properties, cff.strings, charset.charset);\n      }\n\n      cff.charset = charset;\n      cff.encoding = encoding;\n      var charStringsAndSeacs = this.parseCharStrings({\n        charStrings: charStringIndex,\n        localSubrIndex: topDict.privateDict.subrsIndex,\n        globalSubrIndex: globalSubrIndex.obj,\n        fdSelect: cff.fdSelect,\n        fdArray: cff.fdArray,\n        privateDict: topDict.privateDict\n      });\n      cff.charStrings = charStringsAndSeacs.charStrings;\n      cff.seacs = charStringsAndSeacs.seacs;\n      cff.widths = charStringsAndSeacs.widths;\n      return cff;\n    }\n\n    parseHeader() {\n      var bytes = this.bytes;\n      var bytesLength = bytes.length;\n      var offset = 0;\n\n      while (offset < bytesLength && bytes[offset] !== 1) {\n        ++offset;\n      }\n\n      if (offset >= bytesLength) {\n        throw new _util.FormatError("Invalid CFF header");\n      }\n\n      if (offset !== 0) {\n        (0, _util.info)("cff data is shifted");\n        bytes = bytes.subarray(offset);\n        this.bytes = bytes;\n      }\n\n      var major = bytes[0];\n      var minor = bytes[1];\n      var hdrSize = bytes[2];\n      var offSize = bytes[3];\n      var header = new CFFHeader(major, minor, hdrSize, offSize);\n      return {\n        obj: header,\n        endPos: hdrSize\n      };\n    }\n\n    parseDict(dict) {\n      var pos = 0;\n\n      function parseOperand() {\n        var value = dict[pos++];\n\n        if (value === 30) {\n          return parseFloatOperand();\n        } else if (value === 28) {\n          value = dict[pos++];\n          value = (value << 24 | dict[pos++] << 16) >> 16;\n          return value;\n        } else if (value === 29) {\n          value = dict[pos++];\n          value = value << 8 | dict[pos++];\n          value = value << 8 | dict[pos++];\n          value = value << 8 | dict[pos++];\n          return value;\n        } else if (value >= 32 && value <= 246) {\n          return value - 139;\n        } else if (value >= 247 && value <= 250) {\n          return (value - 247) * 256 + dict[pos++] + 108;\n        } else if (value >= 251 && value <= 254) {\n          return -((value - 251) * 256) - dict[pos++] - 108;\n        }\n\n        (0, _util.warn)(\'CFFParser_parseDict: "\' + value + \'" is a reserved command.\');\n        return NaN;\n      }\n\n      function parseFloatOperand() {\n        var str = "";\n        var eof = 15;\n        const lookup = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "E", "E-", null, "-"];\n        var length = dict.length;\n\n        while (pos < length) {\n          var b = dict[pos++];\n          var b1 = b >> 4;\n          var b2 = b & 15;\n\n          if (b1 === eof) {\n            break;\n          }\n\n          str += lookup[b1];\n\n          if (b2 === eof) {\n            break;\n          }\n\n          str += lookup[b2];\n        }\n\n        return parseFloat(str);\n      }\n\n      var operands = [];\n      var entries = [];\n      pos = 0;\n      var end = dict.length;\n\n      while (pos < end) {\n        var b = dict[pos];\n\n        if (b <= 21) {\n          if (b === 12) {\n            b = b << 8 | dict[++pos];\n          }\n\n          entries.push([b, operands]);\n          operands = [];\n          ++pos;\n        } else {\n          operands.push(parseOperand());\n        }\n      }\n\n      return entries;\n    }\n\n    parseIndex(pos) {\n      var cffIndex = new CFFIndex();\n      var bytes = this.bytes;\n      var count = bytes[pos++] << 8 | bytes[pos++];\n      var offsets = [];\n      var end = pos;\n      var i, ii;\n\n      if (count !== 0) {\n        var offsetSize = bytes[pos++];\n        var startPos = pos + (count + 1) * offsetSize - 1;\n\n        for (i = 0, ii = count + 1; i < ii; ++i) {\n          var offset = 0;\n\n          for (var j = 0; j < offsetSize; ++j) {\n            offset <<= 8;\n            offset += bytes[pos++];\n          }\n\n          offsets.push(startPos + offset);\n        }\n\n        end = offsets[count];\n      }\n\n      for (i = 0, ii = offsets.length - 1; i < ii; ++i) {\n        var offsetStart = offsets[i];\n        var offsetEnd = offsets[i + 1];\n        cffIndex.add(bytes.subarray(offsetStart, offsetEnd));\n      }\n\n      return {\n        obj: cffIndex,\n        endPos: end\n      };\n    }\n\n    parseNameIndex(index) {\n      var names = [];\n\n      for (var i = 0, ii = index.count; i < ii; ++i) {\n        var name = index.get(i);\n        names.push((0, _util.bytesToString)(name));\n      }\n\n      return names;\n    }\n\n    parseStringIndex(index) {\n      var strings = new CFFStrings();\n\n      for (var i = 0, ii = index.count; i < ii; ++i) {\n        var data = index.get(i);\n        strings.add((0, _util.bytesToString)(data));\n      }\n\n      return strings;\n    }\n\n    createDict(Type, dict, strings) {\n      var cffDict = new Type(strings);\n\n      for (var i = 0, ii = dict.length; i < ii; ++i) {\n        var pair = dict[i];\n        var key = pair[0];\n        var value = pair[1];\n        cffDict.setByKey(key, value);\n      }\n\n      return cffDict;\n    }\n\n    parseCharString(state, data, localSubrIndex, globalSubrIndex) {\n      if (!data || state.callDepth > MAX_SUBR_NESTING) {\n        return false;\n      }\n\n      var stackSize = state.stackSize;\n      var stack = state.stack;\n      var length = data.length;\n\n      for (var j = 0; j < length;) {\n        var value = data[j++];\n        var validationCommand = null;\n\n        if (value === 12) {\n          var q = data[j++];\n\n          if (q === 0) {\n            data[j - 2] = 139;\n            data[j - 1] = 22;\n            stackSize = 0;\n          } else {\n            validationCommand = CharstringValidationData12[q];\n          }\n        } else if (value === 28) {\n          stack[stackSize] = (data[j] << 24 | data[j + 1] << 16) >> 16;\n          j += 2;\n          stackSize++;\n        } else if (value === 14) {\n          if (stackSize >= 4) {\n            stackSize -= 4;\n\n            if (this.seacAnalysisEnabled) {\n              state.seac = stack.slice(stackSize, stackSize + 4);\n              return false;\n            }\n          }\n\n          validationCommand = CharstringValidationData[value];\n        } else if (value >= 32 && value <= 246) {\n          stack[stackSize] = value - 139;\n          stackSize++;\n        } else if (value >= 247 && value <= 254) {\n          stack[stackSize] = value < 251 ? (value - 247 << 8) + data[j] + 108 : -(value - 251 << 8) - data[j] - 108;\n          j++;\n          stackSize++;\n        } else if (value === 255) {\n          stack[stackSize] = (data[j] << 24 | data[j + 1] << 16 | data[j + 2] << 8 | data[j + 3]) / 65536;\n          j += 4;\n          stackSize++;\n        } else if (value === 19 || value === 20) {\n          state.hints += stackSize >> 1;\n          j += state.hints + 7 >> 3;\n          stackSize %= 2;\n          validationCommand = CharstringValidationData[value];\n        } else if (value === 10 || value === 29) {\n          var subrsIndex;\n\n          if (value === 10) {\n            subrsIndex = localSubrIndex;\n          } else {\n            subrsIndex = globalSubrIndex;\n          }\n\n          if (!subrsIndex) {\n            validationCommand = CharstringValidationData[value];\n            (0, _util.warn)("Missing subrsIndex for " + validationCommand.id);\n            return false;\n          }\n\n          var bias = 32768;\n\n          if (subrsIndex.count < 1240) {\n            bias = 107;\n          } else if (subrsIndex.count < 33900) {\n            bias = 1131;\n          }\n\n          var subrNumber = stack[--stackSize] + bias;\n\n          if (subrNumber < 0 || subrNumber >= subrsIndex.count || isNaN(subrNumber)) {\n            validationCommand = CharstringValidationData[value];\n            (0, _util.warn)("Out of bounds subrIndex for " + validationCommand.id);\n            return false;\n          }\n\n          state.stackSize = stackSize;\n          state.callDepth++;\n          var valid = this.parseCharString(state, subrsIndex.get(subrNumber), localSubrIndex, globalSubrIndex);\n\n          if (!valid) {\n            return false;\n          }\n\n          state.callDepth--;\n          stackSize = state.stackSize;\n          continue;\n        } else if (value === 11) {\n          state.stackSize = stackSize;\n          return true;\n        } else {\n          validationCommand = CharstringValidationData[value];\n        }\n\n        if (validationCommand) {\n          if (validationCommand.stem) {\n            state.hints += stackSize >> 1;\n\n            if (value === 3 || value === 23) {\n              state.hasVStems = true;\n            } else if (state.hasVStems && (value === 1 || value === 18)) {\n              (0, _util.warn)("CFF stem hints are in wrong order");\n              data[j - 1] = value === 1 ? 3 : 23;\n            }\n          }\n\n          if ("min" in validationCommand) {\n            if (!state.undefStack && stackSize < validationCommand.min) {\n              (0, _util.warn)("Not enough parameters for " + validationCommand.id + "; actual: " + stackSize + ", expected: " + validationCommand.min);\n              return false;\n            }\n          }\n\n          if (state.firstStackClearing && validationCommand.stackClearing) {\n            state.firstStackClearing = false;\n            stackSize -= validationCommand.min;\n\n            if (stackSize >= 2 && validationCommand.stem) {\n              stackSize %= 2;\n            } else if (stackSize > 1) {\n              (0, _util.warn)("Found too many parameters for stack-clearing command");\n            }\n\n            if (stackSize > 0 && stack[stackSize - 1] >= 0) {\n              state.width = stack[stackSize - 1];\n            }\n          }\n\n          if ("stackDelta" in validationCommand) {\n            if ("stackFn" in validationCommand) {\n              validationCommand.stackFn(stack, stackSize);\n            }\n\n            stackSize += validationCommand.stackDelta;\n          } else if (validationCommand.stackClearing) {\n            stackSize = 0;\n          } else if (validationCommand.resetStack) {\n            stackSize = 0;\n            state.undefStack = false;\n          } else if (validationCommand.undefStack) {\n            stackSize = 0;\n            state.undefStack = true;\n            state.firstStackClearing = false;\n          }\n        }\n      }\n\n      state.stackSize = stackSize;\n      return true;\n    }\n\n    parseCharStrings({\n      charStrings,\n      localSubrIndex,\n      globalSubrIndex,\n      fdSelect,\n      fdArray,\n      privateDict\n    }) {\n      var seacs = [];\n      var widths = [];\n      var count = charStrings.count;\n\n      for (var i = 0; i < count; i++) {\n        var charstring = charStrings.get(i);\n        var state = {\n          callDepth: 0,\n          stackSize: 0,\n          stack: [],\n          undefStack: true,\n          hints: 0,\n          firstStackClearing: true,\n          seac: null,\n          width: null,\n          hasVStems: false\n        };\n        var valid = true;\n        var localSubrToUse = null;\n        var privateDictToUse = privateDict;\n\n        if (fdSelect && fdArray.length) {\n          var fdIndex = fdSelect.getFDIndex(i);\n\n          if (fdIndex === -1) {\n            (0, _util.warn)("Glyph index is not in fd select.");\n            valid = false;\n          }\n\n          if (fdIndex >= fdArray.length) {\n            (0, _util.warn)("Invalid fd index for glyph index.");\n            valid = false;\n          }\n\n          if (valid) {\n            privateDictToUse = fdArray[fdIndex].privateDict;\n            localSubrToUse = privateDictToUse.subrsIndex;\n          }\n        } else if (localSubrIndex) {\n          localSubrToUse = localSubrIndex;\n        }\n\n        if (valid) {\n          valid = this.parseCharString(state, charstring, localSubrToUse, globalSubrIndex);\n        }\n\n        if (state.width !== null) {\n          const nominalWidth = privateDictToUse.getByName("nominalWidthX");\n          widths[i] = nominalWidth + state.width;\n        } else {\n          const defaultWidth = privateDictToUse.getByName("defaultWidthX");\n          widths[i] = defaultWidth;\n        }\n\n        if (state.seac !== null) {\n          seacs[i] = state.seac;\n        }\n\n        if (!valid) {\n          charStrings.set(i, new Uint8Array([14]));\n        }\n      }\n\n      return {\n        charStrings,\n        seacs,\n        widths\n      };\n    }\n\n    emptyPrivateDictionary(parentDict) {\n      var privateDict = this.createDict(CFFPrivateDict, [], parentDict.strings);\n      parentDict.setByKey(18, [0, 0]);\n      parentDict.privateDict = privateDict;\n    }\n\n    parsePrivateDict(parentDict) {\n      if (!parentDict.hasName("Private")) {\n        this.emptyPrivateDictionary(parentDict);\n        return;\n      }\n\n      var privateOffset = parentDict.getByName("Private");\n\n      if (!Array.isArray(privateOffset) || privateOffset.length !== 2) {\n        parentDict.removeByName("Private");\n        return;\n      }\n\n      var size = privateOffset[0];\n      var offset = privateOffset[1];\n\n      if (size === 0 || offset >= this.bytes.length) {\n        this.emptyPrivateDictionary(parentDict);\n        return;\n      }\n\n      var privateDictEnd = offset + size;\n      var dictData = this.bytes.subarray(offset, privateDictEnd);\n      var dict = this.parseDict(dictData);\n      var privateDict = this.createDict(CFFPrivateDict, dict, parentDict.strings);\n      parentDict.privateDict = privateDict;\n\n      if (!privateDict.getByName("Subrs")) {\n        return;\n      }\n\n      var subrsOffset = privateDict.getByName("Subrs");\n      var relativeOffset = offset + subrsOffset;\n\n      if (subrsOffset === 0 || relativeOffset >= this.bytes.length) {\n        this.emptyPrivateDictionary(parentDict);\n        return;\n      }\n\n      var subrsIndex = this.parseIndex(relativeOffset);\n      privateDict.subrsIndex = subrsIndex.obj;\n    }\n\n    parseCharsets(pos, length, strings, cid) {\n      if (pos === 0) {\n        return new CFFCharset(true, CFFCharsetPredefinedTypes.ISO_ADOBE, _charsets.ISOAdobeCharset);\n      } else if (pos === 1) {\n        return new CFFCharset(true, CFFCharsetPredefinedTypes.EXPERT, _charsets.ExpertCharset);\n      } else if (pos === 2) {\n        return new CFFCharset(true, CFFCharsetPredefinedTypes.EXPERT_SUBSET, _charsets.ExpertSubsetCharset);\n      }\n\n      var bytes = this.bytes;\n      var start = pos;\n      var format = bytes[pos++];\n      const charset = [cid ? 0 : ".notdef"];\n      var id, count, i;\n      length -= 1;\n\n      switch (format) {\n        case 0:\n          for (i = 0; i < length; i++) {\n            id = bytes[pos++] << 8 | bytes[pos++];\n            charset.push(cid ? id : strings.get(id));\n          }\n\n          break;\n\n        case 1:\n          while (charset.length <= length) {\n            id = bytes[pos++] << 8 | bytes[pos++];\n            count = bytes[pos++];\n\n            for (i = 0; i <= count; i++) {\n              charset.push(cid ? id++ : strings.get(id++));\n            }\n          }\n\n          break;\n\n        case 2:\n          while (charset.length <= length) {\n            id = bytes[pos++] << 8 | bytes[pos++];\n            count = bytes[pos++] << 8 | bytes[pos++];\n\n            for (i = 0; i <= count; i++) {\n              charset.push(cid ? id++ : strings.get(id++));\n            }\n          }\n\n          break;\n\n        default:\n          throw new _util.FormatError("Unknown charset format");\n      }\n\n      var end = pos;\n      var raw = bytes.subarray(start, end);\n      return new CFFCharset(false, format, charset, raw);\n    }\n\n    parseEncoding(pos, properties, strings, charset) {\n      var encoding = Object.create(null);\n      var bytes = this.bytes;\n      var predefined = false;\n      var format, i, ii;\n      var raw = null;\n\n      function readSupplement() {\n        var supplementsCount = bytes[pos++];\n\n        for (i = 0; i < supplementsCount; i++) {\n          var code = bytes[pos++];\n          var sid = (bytes[pos++] << 8) + (bytes[pos++] & 0xff);\n          encoding[code] = charset.indexOf(strings.get(sid));\n        }\n      }\n\n      if (pos === 0 || pos === 1) {\n        predefined = true;\n        format = pos;\n        var baseEncoding = pos ? _encodings.ExpertEncoding : _encodings.StandardEncoding;\n\n        for (i = 0, ii = charset.length; i < ii; i++) {\n          var index = baseEncoding.indexOf(charset[i]);\n\n          if (index !== -1) {\n            encoding[index] = i;\n          }\n        }\n      } else {\n        var dataStart = pos;\n        format = bytes[pos++];\n\n        switch (format & 0x7f) {\n          case 0:\n            var glyphsCount = bytes[pos++];\n\n            for (i = 1; i <= glyphsCount; i++) {\n              encoding[bytes[pos++]] = i;\n            }\n\n            break;\n\n          case 1:\n            var rangesCount = bytes[pos++];\n            var gid = 1;\n\n            for (i = 0; i < rangesCount; i++) {\n              var start = bytes[pos++];\n              var left = bytes[pos++];\n\n              for (var j = start; j <= start + left; j++) {\n                encoding[j] = gid++;\n              }\n            }\n\n            break;\n\n          default:\n            throw new _util.FormatError(`Unknown encoding format: ${format} in CFF`);\n        }\n\n        var dataEnd = pos;\n\n        if (format & 0x80) {\n          bytes[dataStart] &= 0x7f;\n          readSupplement();\n        }\n\n        raw = bytes.subarray(dataStart, dataEnd);\n      }\n\n      format = format & 0x7f;\n      return new CFFEncoding(predefined, format, encoding, raw);\n    }\n\n    parseFDSelect(pos, length) {\n      var bytes = this.bytes;\n      var format = bytes[pos++];\n      var fdSelect = [];\n      var i;\n\n      switch (format) {\n        case 0:\n          for (i = 0; i < length; ++i) {\n            var id = bytes[pos++];\n            fdSelect.push(id);\n          }\n\n          break;\n\n        case 3:\n          var rangesCount = bytes[pos++] << 8 | bytes[pos++];\n\n          for (i = 0; i < rangesCount; ++i) {\n            var first = bytes[pos++] << 8 | bytes[pos++];\n\n            if (i === 0 && first !== 0) {\n              (0, _util.warn)("parseFDSelect: The first range must have a first GID of 0" + " -- trying to recover.");\n              first = 0;\n            }\n\n            var fdIndex = bytes[pos++];\n            var next = bytes[pos] << 8 | bytes[pos + 1];\n\n            for (var j = first; j < next; ++j) {\n              fdSelect.push(fdIndex);\n            }\n          }\n\n          pos += 2;\n          break;\n\n        default:\n          throw new _util.FormatError(`parseFDSelect: Unknown format "${format}".`);\n      }\n\n      if (fdSelect.length !== length) {\n        throw new _util.FormatError("parseFDSelect: Invalid font data.");\n      }\n\n      return new CFFFDSelect(format, fdSelect);\n    }\n\n  }\n\n  return CFFParser;\n}();\n\nexports.CFFParser = CFFParser;\n\nclass CFF {\n  constructor() {\n    this.header = null;\n    this.names = [];\n    this.topDict = null;\n    this.strings = new CFFStrings();\n    this.globalSubrIndex = null;\n    this.encoding = null;\n    this.charset = null;\n    this.charStrings = null;\n    this.fdArray = [];\n    this.fdSelect = null;\n    this.isCIDFont = false;\n  }\n\n  duplicateFirstGlyph() {\n    if (this.charStrings.count >= 65535) {\n      (0, _util.warn)("Not enough space in charstrings to duplicate first glyph.");\n      return;\n    }\n\n    var glyphZero = this.charStrings.get(0);\n    this.charStrings.add(glyphZero);\n\n    if (this.isCIDFont) {\n      this.fdSelect.fdSelect.push(this.fdSelect.fdSelect[0]);\n    }\n  }\n\n  hasGlyphId(id) {\n    if (id < 0 || id >= this.charStrings.count) {\n      return false;\n    }\n\n    var glyph = this.charStrings.get(id);\n    return glyph.length > 0;\n  }\n\n}\n\nexports.CFF = CFF;\n\nclass CFFHeader {\n  constructor(major, minor, hdrSize, offSize) {\n    this.major = major;\n    this.minor = minor;\n    this.hdrSize = hdrSize;\n    this.offSize = offSize;\n  }\n\n}\n\nexports.CFFHeader = CFFHeader;\n\nclass CFFStrings {\n  constructor() {\n    this.strings = [];\n  }\n\n  get(index) {\n    if (index >= 0 && index <= NUM_STANDARD_CFF_STRINGS - 1) {\n      return CFFStandardStrings[index];\n    }\n\n    if (index - NUM_STANDARD_CFF_STRINGS <= this.strings.length) {\n      return this.strings[index - NUM_STANDARD_CFF_STRINGS];\n    }\n\n    return CFFStandardStrings[0];\n  }\n\n  getSID(str) {\n    let index = CFFStandardStrings.indexOf(str);\n\n    if (index !== -1) {\n      return index;\n    }\n\n    index = this.strings.indexOf(str);\n\n    if (index !== -1) {\n      return index + NUM_STANDARD_CFF_STRINGS;\n    }\n\n    return -1;\n  }\n\n  add(value) {\n    this.strings.push(value);\n  }\n\n  get count() {\n    return this.strings.length;\n  }\n\n}\n\nexports.CFFStrings = CFFStrings;\n\nclass CFFIndex {\n  constructor() {\n    this.objects = [];\n    this.length = 0;\n  }\n\n  add(data) {\n    this.length += data.length;\n    this.objects.push(data);\n  }\n\n  set(index, data) {\n    this.length += data.length - this.objects[index].length;\n    this.objects[index] = data;\n  }\n\n  get(index) {\n    return this.objects[index];\n  }\n\n  get count() {\n    return this.objects.length;\n  }\n\n}\n\nexports.CFFIndex = CFFIndex;\n\nclass CFFDict {\n  constructor(tables, strings) {\n    this.keyToNameMap = tables.keyToNameMap;\n    this.nameToKeyMap = tables.nameToKeyMap;\n    this.defaults = tables.defaults;\n    this.types = tables.types;\n    this.opcodes = tables.opcodes;\n    this.order = tables.order;\n    this.strings = strings;\n    this.values = Object.create(null);\n  }\n\n  setByKey(key, value) {\n    if (!(key in this.keyToNameMap)) {\n      return false;\n    }\n\n    var valueLength = value.length;\n\n    if (valueLength === 0) {\n      return true;\n    }\n\n    for (var i = 0; i < valueLength; i++) {\n      if (isNaN(value[i])) {\n        (0, _util.warn)(\'Invalid CFFDict value: "\' + value + \'" for key "\' + key + \'".\');\n        return true;\n      }\n    }\n\n    var type = this.types[key];\n\n    if (type === "num" || type === "sid" || type === "offset") {\n      value = value[0];\n    }\n\n    this.values[key] = value;\n    return true;\n  }\n\n  setByName(name, value) {\n    if (!(name in this.nameToKeyMap)) {\n      throw new _util.FormatError(`Invalid dictionary name "${name}"`);\n    }\n\n    this.values[this.nameToKeyMap[name]] = value;\n  }\n\n  hasName(name) {\n    return this.nameToKeyMap[name] in this.values;\n  }\n\n  getByName(name) {\n    if (!(name in this.nameToKeyMap)) {\n      throw new _util.FormatError(`Invalid dictionary name ${name}"`);\n    }\n\n    var key = this.nameToKeyMap[name];\n\n    if (!(key in this.values)) {\n      return this.defaults[key];\n    }\n\n    return this.values[key];\n  }\n\n  removeByName(name) {\n    delete this.values[this.nameToKeyMap[name]];\n  }\n\n  static createTables(layout) {\n    var tables = {\n      keyToNameMap: {},\n      nameToKeyMap: {},\n      defaults: {},\n      types: {},\n      opcodes: {},\n      order: []\n    };\n\n    for (var i = 0, ii = layout.length; i < ii; ++i) {\n      var entry = layout[i];\n      var key = Array.isArray(entry[0]) ? (entry[0][0] << 8) + entry[0][1] : entry[0];\n      tables.keyToNameMap[key] = entry[1];\n      tables.nameToKeyMap[entry[1]] = key;\n      tables.types[key] = entry[2];\n      tables.defaults[key] = entry[3];\n      tables.opcodes[key] = Array.isArray(entry[0]) ? entry[0] : [entry[0]];\n      tables.order.push(key);\n    }\n\n    return tables;\n  }\n\n}\n\nvar CFFTopDict = function CFFTopDictClosure() {\n  var layout = [[[12, 30], "ROS", ["sid", "sid", "num"], null], [[12, 20], "SyntheticBase", "num", null], [0, "version", "sid", null], [1, "Notice", "sid", null], [[12, 0], "Copyright", "sid", null], [2, "FullName", "sid", null], [3, "FamilyName", "sid", null], [4, "Weight", "sid", null], [[12, 1], "isFixedPitch", "num", 0], [[12, 2], "ItalicAngle", "num", 0], [[12, 3], "UnderlinePosition", "num", -100], [[12, 4], "UnderlineThickness", "num", 50], [[12, 5], "PaintType", "num", 0], [[12, 6], "CharstringType", "num", 2], [[12, 7], "FontMatrix", ["num", "num", "num", "num", "num", "num"], [0.001, 0, 0, 0.001, 0, 0]], [13, "UniqueID", "num", null], [5, "FontBBox", ["num", "num", "num", "num"], [0, 0, 0, 0]], [[12, 8], "StrokeWidth", "num", 0], [14, "XUID", "array", null], [15, "charset", "offset", 0], [16, "Encoding", "offset", 0], [17, "CharStrings", "offset", 0], [18, "Private", ["offset", "offset"], null], [[12, 21], "PostScript", "sid", null], [[12, 22], "BaseFontName", "sid", null], [[12, 23], "BaseFontBlend", "delta", null], [[12, 31], "CIDFontVersion", "num", 0], [[12, 32], "CIDFontRevision", "num", 0], [[12, 33], "CIDFontType", "num", 0], [[12, 34], "CIDCount", "num", 8720], [[12, 35], "UIDBase", "num", null], [[12, 37], "FDSelect", "offset", null], [[12, 36], "FDArray", "offset", null], [[12, 38], "FontName", "sid", null]];\n  var tables = null;\n\n  class CFFTopDict extends CFFDict {\n    constructor(strings) {\n      if (tables === null) {\n        tables = CFFDict.createTables(layout);\n      }\n\n      super(tables, strings);\n      this.privateDict = null;\n    }\n\n  }\n\n  return CFFTopDict;\n}();\n\nexports.CFFTopDict = CFFTopDict;\n\nvar CFFPrivateDict = function CFFPrivateDictClosure() {\n  var layout = [[6, "BlueValues", "delta", null], [7, "OtherBlues", "delta", null], [8, "FamilyBlues", "delta", null], [9, "FamilyOtherBlues", "delta", null], [[12, 9], "BlueScale", "num", 0.039625], [[12, 10], "BlueShift", "num", 7], [[12, 11], "BlueFuzz", "num", 1], [10, "StdHW", "num", null], [11, "StdVW", "num", null], [[12, 12], "StemSnapH", "delta", null], [[12, 13], "StemSnapV", "delta", null], [[12, 14], "ForceBold", "num", 0], [[12, 17], "LanguageGroup", "num", 0], [[12, 18], "ExpansionFactor", "num", 0.06], [[12, 19], "initialRandomSeed", "num", 0], [20, "defaultWidthX", "num", 0], [21, "nominalWidthX", "num", 0], [19, "Subrs", "offset", null]];\n  var tables = null;\n\n  class CFFPrivateDict extends CFFDict {\n    constructor(strings) {\n      if (tables === null) {\n        tables = CFFDict.createTables(layout);\n      }\n\n      super(tables, strings);\n      this.subrsIndex = null;\n    }\n\n  }\n\n  return CFFPrivateDict;\n}();\n\nexports.CFFPrivateDict = CFFPrivateDict;\nvar CFFCharsetPredefinedTypes = {\n  ISO_ADOBE: 0,\n  EXPERT: 1,\n  EXPERT_SUBSET: 2\n};\n\nclass CFFCharset {\n  constructor(predefined, format, charset, raw) {\n    this.predefined = predefined;\n    this.format = format;\n    this.charset = charset;\n    this.raw = raw;\n  }\n\n}\n\nexports.CFFCharset = CFFCharset;\n\nclass CFFEncoding {\n  constructor(predefined, format, encoding, raw) {\n    this.predefined = predefined;\n    this.format = format;\n    this.encoding = encoding;\n    this.raw = raw;\n  }\n\n}\n\nclass CFFFDSelect {\n  constructor(format, fdSelect) {\n    this.format = format;\n    this.fdSelect = fdSelect;\n  }\n\n  getFDIndex(glyphIndex) {\n    if (glyphIndex < 0 || glyphIndex >= this.fdSelect.length) {\n      return -1;\n    }\n\n    return this.fdSelect[glyphIndex];\n  }\n\n}\n\nexports.CFFFDSelect = CFFFDSelect;\n\nclass CFFOffsetTracker {\n  constructor() {\n    this.offsets = Object.create(null);\n  }\n\n  isTracking(key) {\n    return key in this.offsets;\n  }\n\n  track(key, location) {\n    if (key in this.offsets) {\n      throw new _util.FormatError(`Already tracking location of ${key}`);\n    }\n\n    this.offsets[key] = location;\n  }\n\n  offset(value) {\n    for (var key in this.offsets) {\n      this.offsets[key] += value;\n    }\n  }\n\n  setEntryLocation(key, values, output) {\n    if (!(key in this.offsets)) {\n      throw new _util.FormatError(`Not tracking location of ${key}`);\n    }\n\n    var data = output.data;\n    var dataOffset = this.offsets[key];\n    var size = 5;\n\n    for (var i = 0, ii = values.length; i < ii; ++i) {\n      var offset0 = i * size + dataOffset;\n      var offset1 = offset0 + 1;\n      var offset2 = offset0 + 2;\n      var offset3 = offset0 + 3;\n      var offset4 = offset0 + 4;\n\n      if (data[offset0] !== 0x1d || data[offset1] !== 0 || data[offset2] !== 0 || data[offset3] !== 0 || data[offset4] !== 0) {\n        throw new _util.FormatError("writing to an offset that is not empty");\n      }\n\n      var value = values[i];\n      data[offset0] = 0x1d;\n      data[offset1] = value >> 24 & 0xff;\n      data[offset2] = value >> 16 & 0xff;\n      data[offset3] = value >> 8 & 0xff;\n      data[offset4] = value & 0xff;\n    }\n  }\n\n}\n\nclass CFFCompiler {\n  constructor(cff) {\n    this.cff = cff;\n  }\n\n  compile() {\n    var cff = this.cff;\n    var output = {\n      data: [],\n      length: 0,\n      add: function CFFCompiler_add(data) {\n        this.data = this.data.concat(data);\n        this.length = this.data.length;\n      }\n    };\n    var header = this.compileHeader(cff.header);\n    output.add(header);\n    var nameIndex = this.compileNameIndex(cff.names);\n    output.add(nameIndex);\n\n    if (cff.isCIDFont) {\n      if (cff.topDict.hasName("FontMatrix")) {\n        var base = cff.topDict.getByName("FontMatrix");\n        cff.topDict.removeByName("FontMatrix");\n\n        for (var i = 0, ii = cff.fdArray.length; i < ii; i++) {\n          var subDict = cff.fdArray[i];\n          var matrix = base.slice(0);\n\n          if (subDict.hasName("FontMatrix")) {\n            matrix = _util.Util.transform(matrix, subDict.getByName("FontMatrix"));\n          }\n\n          subDict.setByName("FontMatrix", matrix);\n        }\n      }\n    }\n\n    const xuid = cff.topDict.getByName("XUID");\n\n    if (xuid && xuid.length > 16) {\n      cff.topDict.removeByName("XUID");\n    }\n\n    cff.topDict.setByName("charset", 0);\n    var compiled = this.compileTopDicts([cff.topDict], output.length, cff.isCIDFont);\n    output.add(compiled.output);\n    var topDictTracker = compiled.trackers[0];\n    var stringIndex = this.compileStringIndex(cff.strings.strings);\n    output.add(stringIndex);\n    var globalSubrIndex = this.compileIndex(cff.globalSubrIndex);\n    output.add(globalSubrIndex);\n\n    if (cff.encoding && cff.topDict.hasName("Encoding")) {\n      if (cff.encoding.predefined) {\n        topDictTracker.setEntryLocation("Encoding", [cff.encoding.format], output);\n      } else {\n        var encoding = this.compileEncoding(cff.encoding);\n        topDictTracker.setEntryLocation("Encoding", [output.length], output);\n        output.add(encoding);\n      }\n    }\n\n    var charset = this.compileCharset(cff.charset, cff.charStrings.count, cff.strings, cff.isCIDFont);\n    topDictTracker.setEntryLocation("charset", [output.length], output);\n    output.add(charset);\n    var charStrings = this.compileCharStrings(cff.charStrings);\n    topDictTracker.setEntryLocation("CharStrings", [output.length], output);\n    output.add(charStrings);\n\n    if (cff.isCIDFont) {\n      topDictTracker.setEntryLocation("FDSelect", [output.length], output);\n      var fdSelect = this.compileFDSelect(cff.fdSelect);\n      output.add(fdSelect);\n      compiled = this.compileTopDicts(cff.fdArray, output.length, true);\n      topDictTracker.setEntryLocation("FDArray", [output.length], output);\n      output.add(compiled.output);\n      var fontDictTrackers = compiled.trackers;\n      this.compilePrivateDicts(cff.fdArray, fontDictTrackers, output);\n    }\n\n    this.compilePrivateDicts([cff.topDict], [topDictTracker], output);\n    output.add([0]);\n    return output.data;\n  }\n\n  encodeNumber(value) {\n    if (Number.isInteger(value)) {\n      return this.encodeInteger(value);\n    }\n\n    return this.encodeFloat(value);\n  }\n\n  static get EncodeFloatRegExp() {\n    return (0, _util.shadow)(this, "EncodeFloatRegExp", /\\.(\\d*?)(?:9{5,20}|0{5,20})\\d{0,2}(?:e(.+)|$)/);\n  }\n\n  encodeFloat(num) {\n    var value = num.toString();\n    var m = CFFCompiler.EncodeFloatRegExp.exec(value);\n\n    if (m) {\n      var epsilon = parseFloat("1e" + ((m[2] ? +m[2] : 0) + m[1].length));\n      value = (Math.round(num * epsilon) / epsilon).toString();\n    }\n\n    var nibbles = "";\n    var i, ii;\n\n    for (i = 0, ii = value.length; i < ii; ++i) {\n      var a = value[i];\n\n      if (a === "e") {\n        nibbles += value[++i] === "-" ? "c" : "b";\n      } else if (a === ".") {\n        nibbles += "a";\n      } else if (a === "-") {\n        nibbles += "e";\n      } else {\n        nibbles += a;\n      }\n    }\n\n    nibbles += nibbles.length & 1 ? "f" : "ff";\n    var out = [30];\n\n    for (i = 0, ii = nibbles.length; i < ii; i += 2) {\n      out.push(parseInt(nibbles.substring(i, i + 2), 16));\n    }\n\n    return out;\n  }\n\n  encodeInteger(value) {\n    var code;\n\n    if (value >= -107 && value <= 107) {\n      code = [value + 139];\n    } else if (value >= 108 && value <= 1131) {\n      value = value - 108;\n      code = [(value >> 8) + 247, value & 0xff];\n    } else if (value >= -1131 && value <= -108) {\n      value = -value - 108;\n      code = [(value >> 8) + 251, value & 0xff];\n    } else if (value >= -32768 && value <= 32767) {\n      code = [0x1c, value >> 8 & 0xff, value & 0xff];\n    } else {\n      code = [0x1d, value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff];\n    }\n\n    return code;\n  }\n\n  compileHeader(header) {\n    return [header.major, header.minor, header.hdrSize, header.offSize];\n  }\n\n  compileNameIndex(names) {\n    var nameIndex = new CFFIndex();\n\n    for (var i = 0, ii = names.length; i < ii; ++i) {\n      var name = names[i];\n      var length = Math.min(name.length, 127);\n      var sanitizedName = new Array(length);\n\n      for (var j = 0; j < length; j++) {\n        var char = name[j];\n\n        if (char < "!" || char > "~" || char === "[" || char === "]" || char === "(" || char === ")" || char === "{" || char === "}" || char === "<" || char === ">" || char === "/" || char === "%") {\n          char = "_";\n        }\n\n        sanitizedName[j] = char;\n      }\n\n      sanitizedName = sanitizedName.join("");\n\n      if (sanitizedName === "") {\n        sanitizedName = "Bad_Font_Name";\n      }\n\n      nameIndex.add((0, _util.stringToBytes)(sanitizedName));\n    }\n\n    return this.compileIndex(nameIndex);\n  }\n\n  compileTopDicts(dicts, length, removeCidKeys) {\n    var fontDictTrackers = [];\n    var fdArrayIndex = new CFFIndex();\n\n    for (var i = 0, ii = dicts.length; i < ii; ++i) {\n      var fontDict = dicts[i];\n\n      if (removeCidKeys) {\n        fontDict.removeByName("CIDFontVersion");\n        fontDict.removeByName("CIDFontRevision");\n        fontDict.removeByName("CIDFontType");\n        fontDict.removeByName("CIDCount");\n        fontDict.removeByName("UIDBase");\n      }\n\n      var fontDictTracker = new CFFOffsetTracker();\n      var fontDictData = this.compileDict(fontDict, fontDictTracker);\n      fontDictTrackers.push(fontDictTracker);\n      fdArrayIndex.add(fontDictData);\n      fontDictTracker.offset(length);\n    }\n\n    fdArrayIndex = this.compileIndex(fdArrayIndex, fontDictTrackers);\n    return {\n      trackers: fontDictTrackers,\n      output: fdArrayIndex\n    };\n  }\n\n  compilePrivateDicts(dicts, trackers, output) {\n    for (var i = 0, ii = dicts.length; i < ii; ++i) {\n      var fontDict = dicts[i];\n      var privateDict = fontDict.privateDict;\n\n      if (!privateDict || !fontDict.hasName("Private")) {\n        throw new _util.FormatError("There must be a private dictionary.");\n      }\n\n      var privateDictTracker = new CFFOffsetTracker();\n      var privateDictData = this.compileDict(privateDict, privateDictTracker);\n      var outputLength = output.length;\n      privateDictTracker.offset(outputLength);\n\n      if (!privateDictData.length) {\n        outputLength = 0;\n      }\n\n      trackers[i].setEntryLocation("Private", [privateDictData.length, outputLength], output);\n      output.add(privateDictData);\n\n      if (privateDict.subrsIndex && privateDict.hasName("Subrs")) {\n        var subrs = this.compileIndex(privateDict.subrsIndex);\n        privateDictTracker.setEntryLocation("Subrs", [privateDictData.length], output);\n        output.add(subrs);\n      }\n    }\n  }\n\n  compileDict(dict, offsetTracker) {\n    var out = [];\n    var order = dict.order;\n\n    for (var i = 0; i < order.length; ++i) {\n      var key = order[i];\n\n      if (!(key in dict.values)) {\n        continue;\n      }\n\n      var values = dict.values[key];\n      var types = dict.types[key];\n\n      if (!Array.isArray(types)) {\n        types = [types];\n      }\n\n      if (!Array.isArray(values)) {\n        values = [values];\n      }\n\n      if (values.length === 0) {\n        continue;\n      }\n\n      for (var j = 0, jj = types.length; j < jj; ++j) {\n        var type = types[j];\n        var value = values[j];\n\n        switch (type) {\n          case "num":\n          case "sid":\n            out = out.concat(this.encodeNumber(value));\n            break;\n\n          case "offset":\n            var name = dict.keyToNameMap[key];\n\n            if (!offsetTracker.isTracking(name)) {\n              offsetTracker.track(name, out.length);\n            }\n\n            out = out.concat([0x1d, 0, 0, 0, 0]);\n            break;\n\n          case "array":\n          case "delta":\n            out = out.concat(this.encodeNumber(value));\n\n            for (var k = 1, kk = values.length; k < kk; ++k) {\n              out = out.concat(this.encodeNumber(values[k]));\n            }\n\n            break;\n\n          default:\n            throw new _util.FormatError(`Unknown data type of ${type}`);\n        }\n      }\n\n      out = out.concat(dict.opcodes[key]);\n    }\n\n    return out;\n  }\n\n  compileStringIndex(strings) {\n    var stringIndex = new CFFIndex();\n\n    for (var i = 0, ii = strings.length; i < ii; ++i) {\n      stringIndex.add((0, _util.stringToBytes)(strings[i]));\n    }\n\n    return this.compileIndex(stringIndex);\n  }\n\n  compileGlobalSubrIndex() {\n    var globalSubrIndex = this.cff.globalSubrIndex;\n    this.out.writeByteArray(this.compileIndex(globalSubrIndex));\n  }\n\n  compileCharStrings(charStrings) {\n    var charStringsIndex = new CFFIndex();\n\n    for (var i = 0; i < charStrings.count; i++) {\n      var glyph = charStrings.get(i);\n\n      if (glyph.length === 0) {\n        charStringsIndex.add(new Uint8Array([0x8b, 0x0e]));\n        continue;\n      }\n\n      charStringsIndex.add(glyph);\n    }\n\n    return this.compileIndex(charStringsIndex);\n  }\n\n  compileCharset(charset, numGlyphs, strings, isCIDFont) {\n    let out;\n    const numGlyphsLessNotDef = numGlyphs - 1;\n\n    if (isCIDFont) {\n      out = new Uint8Array([2, 0, 0, numGlyphsLessNotDef >> 8 & 0xff, numGlyphsLessNotDef & 0xff]);\n    } else {\n      const length = 1 + numGlyphsLessNotDef * 2;\n      out = new Uint8Array(length);\n      out[0] = 0;\n      let charsetIndex = 0;\n      const numCharsets = charset.charset.length;\n      let warned = false;\n\n      for (let i = 1; i < out.length; i += 2) {\n        let sid = 0;\n\n        if (charsetIndex < numCharsets) {\n          const name = charset.charset[charsetIndex++];\n          sid = strings.getSID(name);\n\n          if (sid === -1) {\n            sid = 0;\n\n            if (!warned) {\n              warned = true;\n              (0, _util.warn)(`Couldn\'t find ${name} in CFF strings`);\n            }\n          }\n        }\n\n        out[i] = sid >> 8 & 0xff;\n        out[i + 1] = sid & 0xff;\n      }\n    }\n\n    return this.compileTypedArray(out);\n  }\n\n  compileEncoding(encoding) {\n    return this.compileTypedArray(encoding.raw);\n  }\n\n  compileFDSelect(fdSelect) {\n    const format = fdSelect.format;\n    let out, i;\n\n    switch (format) {\n      case 0:\n        out = new Uint8Array(1 + fdSelect.fdSelect.length);\n        out[0] = format;\n\n        for (i = 0; i < fdSelect.fdSelect.length; i++) {\n          out[i + 1] = fdSelect.fdSelect[i];\n        }\n\n        break;\n\n      case 3:\n        const start = 0;\n        let lastFD = fdSelect.fdSelect[0];\n        const ranges = [format, 0, 0, start >> 8 & 0xff, start & 0xff, lastFD];\n\n        for (i = 1; i < fdSelect.fdSelect.length; i++) {\n          const currentFD = fdSelect.fdSelect[i];\n\n          if (currentFD !== lastFD) {\n            ranges.push(i >> 8 & 0xff, i & 0xff, currentFD);\n            lastFD = currentFD;\n          }\n        }\n\n        const numRanges = (ranges.length - 3) / 3;\n        ranges[1] = numRanges >> 8 & 0xff;\n        ranges[2] = numRanges & 0xff;\n        ranges.push(i >> 8 & 0xff, i & 0xff);\n        out = new Uint8Array(ranges);\n        break;\n    }\n\n    return this.compileTypedArray(out);\n  }\n\n  compileTypedArray(data) {\n    var out = [];\n\n    for (var i = 0, ii = data.length; i < ii; ++i) {\n      out[i] = data[i];\n    }\n\n    return out;\n  }\n\n  compileIndex(index, trackers = []) {\n    var objects = index.objects;\n    var count = objects.length;\n\n    if (count === 0) {\n      return [0, 0, 0];\n    }\n\n    var data = [count >> 8 & 0xff, count & 0xff];\n    var lastOffset = 1,\n        i;\n\n    for (i = 0; i < count; ++i) {\n      lastOffset += objects[i].length;\n    }\n\n    var offsetSize;\n\n    if (lastOffset < 0x100) {\n      offsetSize = 1;\n    } else if (lastOffset < 0x10000) {\n      offsetSize = 2;\n    } else if (lastOffset < 0x1000000) {\n      offsetSize = 3;\n    } else {\n      offsetSize = 4;\n    }\n\n    data.push(offsetSize);\n    var relativeOffset = 1;\n\n    for (i = 0; i < count + 1; i++) {\n      if (offsetSize === 1) {\n        data.push(relativeOffset & 0xff);\n      } else if (offsetSize === 2) {\n        data.push(relativeOffset >> 8 & 0xff, relativeOffset & 0xff);\n      } else if (offsetSize === 3) {\n        data.push(relativeOffset >> 16 & 0xff, relativeOffset >> 8 & 0xff, relativeOffset & 0xff);\n      } else {\n        data.push(relativeOffset >>> 24 & 0xff, relativeOffset >> 16 & 0xff, relativeOffset >> 8 & 0xff, relativeOffset & 0xff);\n      }\n\n      if (objects[i]) {\n        relativeOffset += objects[i].length;\n      }\n    }\n\n    for (i = 0; i < count; i++) {\n      if (trackers[i]) {\n        trackers[i].offset(data.length);\n      }\n\n      for (var j = 0, jj = objects[i].length; j < jj; j++) {\n        data.push(objects[i][j]);\n      }\n    }\n\n    return data;\n  }\n\n}\n\nexports.CFFCompiler = CFFCompiler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/cff_parser.js\n')},"./node_modules/pdfjs-dist/lib/core/charsets.js":function(__unused_webpack_module,exports){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.ISOAdobeCharset = exports.ExpertSubsetCharset = exports.ExpertCharset = void 0;\nconst ISOAdobeCharset = [".notdef", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "endash", "dagger", "daggerdbl", "periodcentered", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "questiondown", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "emdash", "AE", "ordfeminine", "Lslash", "Oslash", "OE", "ordmasculine", "ae", "dotlessi", "lslash", "oslash", "oe", "germandbls", "onesuperior", "logicalnot", "mu", "trademark", "Eth", "onehalf", "plusminus", "Thorn", "onequarter", "divide", "brokenbar", "degree", "thorn", "threequarters", "twosuperior", "registered", "minus", "eth", "multiply", "threesuperior", "copyright", "Aacute", "Acircumflex", "Adieresis", "Agrave", "Aring", "Atilde", "Ccedilla", "Eacute", "Ecircumflex", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Ntilde", "Oacute", "Ocircumflex", "Odieresis", "Ograve", "Otilde", "Scaron", "Uacute", "Ucircumflex", "Udieresis", "Ugrave", "Yacute", "Ydieresis", "Zcaron", "aacute", "acircumflex", "adieresis", "agrave", "aring", "atilde", "ccedilla", "eacute", "ecircumflex", "edieresis", "egrave", "iacute", "icircumflex", "idieresis", "igrave", "ntilde", "oacute", "ocircumflex", "odieresis", "ograve", "otilde", "scaron", "uacute", "ucircumflex", "udieresis", "ugrave", "yacute", "ydieresis", "zcaron"];\nexports.ISOAdobeCharset = ISOAdobeCharset;\nconst ExpertCharset = [".notdef", "space", "exclamsmall", "Hungarumlautsmall", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "exclamdownsmall", "centoldstyle", "Lslashsmall", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "Dotaccentsmall", "Macronsmall", "figuredash", "hypheninferior", "Ogoneksmall", "Ringsmall", "Cedillasmall", "onequarter", "onehalf", "threequarters", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall"];\nexports.ExpertCharset = ExpertCharset;\nconst ExpertSubsetCharset = [".notdef", "space", "dollaroldstyle", "dollarsuperior", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "commasuperior", "threequartersemdash", "periodsuperior", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "hyphensuperior", "colonmonetary", "onefitted", "rupiah", "centoldstyle", "figuredash", "hypheninferior", "onequarter", "onehalf", "threequarters", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior"];\nexports.ExpertSubsetCharset = ExpertSubsetCharset;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/charsets.js\n')},"./node_modules/pdfjs-dist/lib/core/chunked_stream.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.ChunkedStreamManager = exports.ChunkedStream = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nclass ChunkedStream {\n  constructor(length, chunkSize, manager) {\n    this.bytes = new Uint8Array(length);\n    this.start = 0;\n    this.pos = 0;\n    this.end = length;\n    this.chunkSize = chunkSize;\n    this._loadedChunks = new Set();\n    this.numChunks = Math.ceil(length / chunkSize);\n    this.manager = manager;\n    this.progressiveDataLength = 0;\n    this.lastSuccessfulEnsureByteChunk = -1;\n  }\n\n  getMissingChunks() {\n    const chunks = [];\n\n    for (let chunk = 0, n = this.numChunks; chunk < n; ++chunk) {\n      if (!this._loadedChunks.has(chunk)) {\n        chunks.push(chunk);\n      }\n    }\n\n    return chunks;\n  }\n\n  getBaseStreams() {\n    return [this];\n  }\n\n  get numChunksLoaded() {\n    return this._loadedChunks.size;\n  }\n\n  allChunksLoaded() {\n    return this.numChunksLoaded === this.numChunks;\n  }\n\n  onReceiveData(begin, chunk) {\n    const chunkSize = this.chunkSize;\n\n    if (begin % chunkSize !== 0) {\n      throw new Error(`Bad begin offset: ${begin}`);\n    }\n\n    const end = begin + chunk.byteLength;\n\n    if (end % chunkSize !== 0 && end !== this.bytes.length) {\n      throw new Error(`Bad end offset: ${end}`);\n    }\n\n    this.bytes.set(new Uint8Array(chunk), begin);\n    const beginChunk = Math.floor(begin / chunkSize);\n    const endChunk = Math.floor((end - 1) / chunkSize) + 1;\n\n    for (let curChunk = beginChunk; curChunk < endChunk; ++curChunk) {\n      this._loadedChunks.add(curChunk);\n    }\n  }\n\n  onReceiveProgressiveData(data) {\n    let position = this.progressiveDataLength;\n    const beginChunk = Math.floor(position / this.chunkSize);\n    this.bytes.set(new Uint8Array(data), position);\n    position += data.byteLength;\n    this.progressiveDataLength = position;\n    const endChunk = position >= this.end ? this.numChunks : Math.floor(position / this.chunkSize);\n\n    for (let curChunk = beginChunk; curChunk < endChunk; ++curChunk) {\n      this._loadedChunks.add(curChunk);\n    }\n  }\n\n  ensureByte(pos) {\n    if (pos < this.progressiveDataLength) {\n      return;\n    }\n\n    const chunk = Math.floor(pos / this.chunkSize);\n\n    if (chunk === this.lastSuccessfulEnsureByteChunk) {\n      return;\n    }\n\n    if (!this._loadedChunks.has(chunk)) {\n      throw new _core_utils.MissingDataException(pos, pos + 1);\n    }\n\n    this.lastSuccessfulEnsureByteChunk = chunk;\n  }\n\n  ensureRange(begin, end) {\n    if (begin >= end) {\n      return;\n    }\n\n    if (end <= this.progressiveDataLength) {\n      return;\n    }\n\n    const chunkSize = this.chunkSize;\n    const beginChunk = Math.floor(begin / chunkSize);\n    const endChunk = Math.floor((end - 1) / chunkSize) + 1;\n\n    for (let chunk = beginChunk; chunk < endChunk; ++chunk) {\n      if (!this._loadedChunks.has(chunk)) {\n        throw new _core_utils.MissingDataException(begin, end);\n      }\n    }\n  }\n\n  nextEmptyChunk(beginChunk) {\n    const numChunks = this.numChunks;\n\n    for (let i = 0; i < numChunks; ++i) {\n      const chunk = (beginChunk + i) % numChunks;\n\n      if (!this._loadedChunks.has(chunk)) {\n        return chunk;\n      }\n    }\n\n    return null;\n  }\n\n  hasChunk(chunk) {\n    return this._loadedChunks.has(chunk);\n  }\n\n  get length() {\n    return this.end - this.start;\n  }\n\n  get isEmpty() {\n    return this.length === 0;\n  }\n\n  getByte() {\n    const pos = this.pos;\n\n    if (pos >= this.end) {\n      return -1;\n    }\n\n    if (pos >= this.progressiveDataLength) {\n      this.ensureByte(pos);\n    }\n\n    return this.bytes[this.pos++];\n  }\n\n  getUint16() {\n    const b0 = this.getByte();\n    const b1 = this.getByte();\n\n    if (b0 === -1 || b1 === -1) {\n      return -1;\n    }\n\n    return (b0 << 8) + b1;\n  }\n\n  getInt32() {\n    const b0 = this.getByte();\n    const b1 = this.getByte();\n    const b2 = this.getByte();\n    const b3 = this.getByte();\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n  }\n\n  getBytes(length, forceClamped = false) {\n    const bytes = this.bytes;\n    const pos = this.pos;\n    const strEnd = this.end;\n\n    if (!length) {\n      if (strEnd > this.progressiveDataLength) {\n        this.ensureRange(pos, strEnd);\n      }\n\n      const subarray = bytes.subarray(pos, strEnd);\n      return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n    }\n\n    let end = pos + length;\n\n    if (end > strEnd) {\n      end = strEnd;\n    }\n\n    if (end > this.progressiveDataLength) {\n      this.ensureRange(pos, end);\n    }\n\n    this.pos = end;\n    const subarray = bytes.subarray(pos, end);\n    return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n  }\n\n  peekByte() {\n    const peekedByte = this.getByte();\n\n    if (peekedByte !== -1) {\n      this.pos--;\n    }\n\n    return peekedByte;\n  }\n\n  peekBytes(length, forceClamped = false) {\n    const bytes = this.getBytes(length, forceClamped);\n    this.pos -= bytes.length;\n    return bytes;\n  }\n\n  getByteRange(begin, end) {\n    if (begin < 0) {\n      begin = 0;\n    }\n\n    if (end > this.end) {\n      end = this.end;\n    }\n\n    if (end > this.progressiveDataLength) {\n      this.ensureRange(begin, end);\n    }\n\n    return this.bytes.subarray(begin, end);\n  }\n\n  skip(n) {\n    if (!n) {\n      n = 1;\n    }\n\n    this.pos += n;\n  }\n\n  reset() {\n    this.pos = this.start;\n  }\n\n  moveStart() {\n    this.start = this.pos;\n  }\n\n  makeSubStream(start, length, dict) {\n    if (length) {\n      if (start + length > this.progressiveDataLength) {\n        this.ensureRange(start, start + length);\n      }\n    } else {\n      if (start >= this.progressiveDataLength) {\n        this.ensureByte(start);\n      }\n    }\n\n    function ChunkedStreamSubstream() {}\n\n    ChunkedStreamSubstream.prototype = Object.create(this);\n\n    ChunkedStreamSubstream.prototype.getMissingChunks = function () {\n      const chunkSize = this.chunkSize;\n      const beginChunk = Math.floor(this.start / chunkSize);\n      const endChunk = Math.floor((this.end - 1) / chunkSize) + 1;\n      const missingChunks = [];\n\n      for (let chunk = beginChunk; chunk < endChunk; ++chunk) {\n        if (!this._loadedChunks.has(chunk)) {\n          missingChunks.push(chunk);\n        }\n      }\n\n      return missingChunks;\n    };\n\n    ChunkedStreamSubstream.prototype.allChunksLoaded = function () {\n      if (this.numChunksLoaded === this.numChunks) {\n        return true;\n      }\n\n      return this.getMissingChunks().length === 0;\n    };\n\n    const subStream = new ChunkedStreamSubstream();\n    subStream.pos = subStream.start = start;\n    subStream.end = start + length || this.end;\n    subStream.dict = dict;\n    return subStream;\n  }\n\n}\n\nexports.ChunkedStream = ChunkedStream;\n\nclass ChunkedStreamManager {\n  constructor(pdfNetworkStream, args) {\n    this.length = args.length;\n    this.chunkSize = args.rangeChunkSize;\n    this.stream = new ChunkedStream(this.length, this.chunkSize, this);\n    this.pdfNetworkStream = pdfNetworkStream;\n    this.disableAutoFetch = args.disableAutoFetch;\n    this.msgHandler = args.msgHandler;\n    this.currRequestId = 0;\n    this._chunksNeededByRequest = new Map();\n    this._requestsByChunk = new Map();\n    this._promisesByRequest = new Map();\n    this.progressiveDataLength = 0;\n    this.aborted = false;\n    this._loadedStreamCapability = (0, _util.createPromiseCapability)();\n  }\n\n  onLoadedStream() {\n    return this._loadedStreamCapability.promise;\n  }\n\n  sendRequest(begin, end) {\n    const rangeReader = this.pdfNetworkStream.getRangeReader(begin, end);\n\n    if (!rangeReader.isStreamingSupported) {\n      rangeReader.onProgress = this.onProgress.bind(this);\n    }\n\n    let chunks = [],\n        loaded = 0;\n    const promise = new Promise((resolve, reject) => {\n      const readChunk = chunk => {\n        try {\n          if (!chunk.done) {\n            const data = chunk.value;\n            chunks.push(data);\n            loaded += (0, _util.arrayByteLength)(data);\n\n            if (rangeReader.isStreamingSupported) {\n              this.onProgress({\n                loaded\n              });\n            }\n\n            rangeReader.read().then(readChunk, reject);\n            return;\n          }\n\n          const chunkData = (0, _util.arraysToBytes)(chunks);\n          chunks = null;\n          resolve(chunkData);\n        } catch (e) {\n          reject(e);\n        }\n      };\n\n      rangeReader.read().then(readChunk, reject);\n    });\n    promise.then(data => {\n      if (this.aborted) {\n        return;\n      }\n\n      this.onReceiveData({\n        chunk: data,\n        begin\n      });\n    });\n  }\n\n  requestAllChunks() {\n    const missingChunks = this.stream.getMissingChunks();\n\n    this._requestChunks(missingChunks);\n\n    return this._loadedStreamCapability.promise;\n  }\n\n  _requestChunks(chunks) {\n    const requestId = this.currRequestId++;\n    const chunksNeeded = new Set();\n\n    this._chunksNeededByRequest.set(requestId, chunksNeeded);\n\n    for (const chunk of chunks) {\n      if (!this.stream.hasChunk(chunk)) {\n        chunksNeeded.add(chunk);\n      }\n    }\n\n    if (chunksNeeded.size === 0) {\n      return Promise.resolve();\n    }\n\n    const capability = (0, _util.createPromiseCapability)();\n\n    this._promisesByRequest.set(requestId, capability);\n\n    const chunksToRequest = [];\n\n    for (const chunk of chunksNeeded) {\n      let requestIds = this._requestsByChunk.get(chunk);\n\n      if (!requestIds) {\n        requestIds = [];\n\n        this._requestsByChunk.set(chunk, requestIds);\n\n        chunksToRequest.push(chunk);\n      }\n\n      requestIds.push(requestId);\n    }\n\n    if (chunksToRequest.length > 0) {\n      const groupedChunksToRequest = this.groupChunks(chunksToRequest);\n\n      for (const groupedChunk of groupedChunksToRequest) {\n        const begin = groupedChunk.beginChunk * this.chunkSize;\n        const end = Math.min(groupedChunk.endChunk * this.chunkSize, this.length);\n        this.sendRequest(begin, end);\n      }\n    }\n\n    return capability.promise.catch(reason => {\n      if (this.aborted) {\n        return;\n      }\n\n      throw reason;\n    });\n  }\n\n  getStream() {\n    return this.stream;\n  }\n\n  requestRange(begin, end) {\n    end = Math.min(end, this.length);\n    const beginChunk = this.getBeginChunk(begin);\n    const endChunk = this.getEndChunk(end);\n    const chunks = [];\n\n    for (let chunk = beginChunk; chunk < endChunk; ++chunk) {\n      chunks.push(chunk);\n    }\n\n    return this._requestChunks(chunks);\n  }\n\n  requestRanges(ranges = []) {\n    const chunksToRequest = [];\n\n    for (const range of ranges) {\n      const beginChunk = this.getBeginChunk(range.begin);\n      const endChunk = this.getEndChunk(range.end);\n\n      for (let chunk = beginChunk; chunk < endChunk; ++chunk) {\n        if (!chunksToRequest.includes(chunk)) {\n          chunksToRequest.push(chunk);\n        }\n      }\n    }\n\n    chunksToRequest.sort(function (a, b) {\n      return a - b;\n    });\n    return this._requestChunks(chunksToRequest);\n  }\n\n  groupChunks(chunks) {\n    const groupedChunks = [];\n    let beginChunk = -1;\n    let prevChunk = -1;\n\n    for (let i = 0, ii = chunks.length; i < ii; ++i) {\n      const chunk = chunks[i];\n\n      if (beginChunk < 0) {\n        beginChunk = chunk;\n      }\n\n      if (prevChunk >= 0 && prevChunk + 1 !== chunk) {\n        groupedChunks.push({\n          beginChunk,\n          endChunk: prevChunk + 1\n        });\n        beginChunk = chunk;\n      }\n\n      if (i + 1 === chunks.length) {\n        groupedChunks.push({\n          beginChunk,\n          endChunk: chunk + 1\n        });\n      }\n\n      prevChunk = chunk;\n    }\n\n    return groupedChunks;\n  }\n\n  onProgress(args) {\n    this.msgHandler.send("DocProgress", {\n      loaded: this.stream.numChunksLoaded * this.chunkSize + args.loaded,\n      total: this.length\n    });\n  }\n\n  onReceiveData(args) {\n    const chunk = args.chunk;\n    const isProgressive = args.begin === undefined;\n    const begin = isProgressive ? this.progressiveDataLength : args.begin;\n    const end = begin + chunk.byteLength;\n    const beginChunk = Math.floor(begin / this.chunkSize);\n    const endChunk = end < this.length ? Math.floor(end / this.chunkSize) : Math.ceil(end / this.chunkSize);\n\n    if (isProgressive) {\n      this.stream.onReceiveProgressiveData(chunk);\n      this.progressiveDataLength = end;\n    } else {\n      this.stream.onReceiveData(begin, chunk);\n    }\n\n    if (this.stream.allChunksLoaded()) {\n      this._loadedStreamCapability.resolve(this.stream);\n    }\n\n    const loadedRequests = [];\n\n    for (let curChunk = beginChunk; curChunk < endChunk; ++curChunk) {\n      const requestIds = this._requestsByChunk.get(curChunk);\n\n      if (!requestIds) {\n        continue;\n      }\n\n      this._requestsByChunk.delete(curChunk);\n\n      for (const requestId of requestIds) {\n        const chunksNeeded = this._chunksNeededByRequest.get(requestId);\n\n        if (chunksNeeded.has(curChunk)) {\n          chunksNeeded.delete(curChunk);\n        }\n\n        if (chunksNeeded.size > 0) {\n          continue;\n        }\n\n        loadedRequests.push(requestId);\n      }\n    }\n\n    if (!this.disableAutoFetch && this._requestsByChunk.size === 0) {\n      let nextEmptyChunk;\n\n      if (this.stream.numChunksLoaded === 1) {\n        const lastChunk = this.stream.numChunks - 1;\n\n        if (!this.stream.hasChunk(lastChunk)) {\n          nextEmptyChunk = lastChunk;\n        }\n      } else {\n        nextEmptyChunk = this.stream.nextEmptyChunk(endChunk);\n      }\n\n      if (Number.isInteger(nextEmptyChunk)) {\n        this._requestChunks([nextEmptyChunk]);\n      }\n    }\n\n    for (const requestId of loadedRequests) {\n      const capability = this._promisesByRequest.get(requestId);\n\n      this._promisesByRequest.delete(requestId);\n\n      capability.resolve();\n    }\n\n    this.msgHandler.send("DocProgress", {\n      loaded: this.stream.numChunksLoaded * this.chunkSize,\n      total: this.length\n    });\n  }\n\n  onError(err) {\n    this._loadedStreamCapability.reject(err);\n  }\n\n  getBeginChunk(begin) {\n    return Math.floor(begin / this.chunkSize);\n  }\n\n  getEndChunk(end) {\n    return Math.floor((end - 1) / this.chunkSize) + 1;\n  }\n\n  abort(reason) {\n    this.aborted = true;\n\n    if (this.pdfNetworkStream) {\n      this.pdfNetworkStream.cancelAllRequests(reason);\n    }\n\n    for (const capability of this._promisesByRequest.values()) {\n      capability.reject(reason);\n    }\n  }\n\n}\n\nexports.ChunkedStreamManager = ChunkedStreamManager;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGRmanMtZGlzdC9saWIvY29yZS9jaHVua2VkX3N0cmVhbS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1NpbXBsZVBkZkFuYWx5emVyLy4vbm9kZV9tb2R1bGVzL3BkZmpzLWRpc3QvbGliL2NvcmUvY2h1bmtlZF9zdHJlYW0uanM/NjljMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNzdGFydCBUaGUgZm9sbG93aW5nIGlzIHRoZSBlbnRpcmUgbGljZW5zZSBub3RpY2UgZm9yIHRoZVxuICogSmF2YXNjcmlwdCBjb2RlIGluIHRoaXMgcGFnZVxuICpcbiAqIENvcHlyaWdodCAyMDIwIE1vemlsbGEgRm91bmRhdGlvblxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBAbGljZW5kIFRoZSBhYm92ZSBpcyB0aGUgZW50aXJlIGxpY2Vuc2Ugbm90aWNlIGZvciB0aGVcbiAqIEphdmFzY3JpcHQgY29kZSBpbiB0aGlzIHBhZ2VcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkNodW5rZWRTdHJlYW1NYW5hZ2VyID0gZXhwb3J0cy5DaHVua2VkU3RyZWFtID0gdm9pZCAwO1xuXG52YXIgX3V0aWwgPSByZXF1aXJlKFwiLi4vc2hhcmVkL3V0aWwuanNcIik7XG5cbnZhciBfY29yZV91dGlscyA9IHJlcXVpcmUoXCIuL2NvcmVfdXRpbHMuanNcIik7XG5cbmNsYXNzIENodW5rZWRTdHJlYW0ge1xuICBjb25zdHJ1Y3RvcihsZW5ndGgsIGNodW5rU2l6ZSwgbWFuYWdlcikge1xuICAgIHRoaXMuYnl0ZXMgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIHRoaXMuc3RhcnQgPSAwO1xuICAgIHRoaXMucG9zID0gMDtcbiAgICB0aGlzLmVuZCA9IGxlbmd0aDtcbiAgICB0aGlzLmNodW5rU2l6ZSA9IGNodW5rU2l6ZTtcbiAgICB0aGlzLl9sb2FkZWRDaHVua3MgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5udW1DaHVua3MgPSBNYXRoLmNlaWwobGVuZ3RoIC8gY2h1bmtTaXplKTtcbiAgICB0aGlzLm1hbmFnZXIgPSBtYW5hZ2VyO1xuICAgIHRoaXMucHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoID0gMDtcbiAgICB0aGlzLmxhc3RTdWNjZXNzZnVsRW5zdXJlQnl0ZUNodW5rID0gLTE7XG4gIH1cblxuICBnZXRNaXNzaW5nQ2h1bmtzKCkge1xuICAgIGNvbnN0IGNodW5rcyA9IFtdO1xuXG4gICAgZm9yIChsZXQgY2h1bmsgPSAwLCBuID0gdGhpcy5udW1DaHVua3M7IGNodW5rIDwgbjsgKytjaHVuaykge1xuICAgICAgaWYgKCF0aGlzLl9sb2FkZWRDaHVua3MuaGFzKGNodW5rKSkge1xuICAgICAgICBjaHVua3MucHVzaChjaHVuayk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNodW5rcztcbiAgfVxuXG4gIGdldEJhc2VTdHJlYW1zKCkge1xuICAgIHJldHVybiBbdGhpc107XG4gIH1cblxuICBnZXQgbnVtQ2h1bmtzTG9hZGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9sb2FkZWRDaHVua3Muc2l6ZTtcbiAgfVxuXG4gIGFsbENodW5rc0xvYWRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5udW1DaHVua3NMb2FkZWQgPT09IHRoaXMubnVtQ2h1bmtzO1xuICB9XG5cbiAgb25SZWNlaXZlRGF0YShiZWdpbiwgY2h1bmspIHtcbiAgICBjb25zdCBjaHVua1NpemUgPSB0aGlzLmNodW5rU2l6ZTtcblxuICAgIGlmIChiZWdpbiAlIGNodW5rU2l6ZSAhPT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBCYWQgYmVnaW4gb2Zmc2V0OiAke2JlZ2lufWApO1xuICAgIH1cblxuICAgIGNvbnN0IGVuZCA9IGJlZ2luICsgY2h1bmsuYnl0ZUxlbmd0aDtcblxuICAgIGlmIChlbmQgJSBjaHVua1NpemUgIT09IDAgJiYgZW5kICE9PSB0aGlzLmJ5dGVzLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBCYWQgZW5kIG9mZnNldDogJHtlbmR9YCk7XG4gICAgfVxuXG4gICAgdGhpcy5ieXRlcy5zZXQobmV3IFVpbnQ4QXJyYXkoY2h1bmspLCBiZWdpbik7XG4gICAgY29uc3QgYmVnaW5DaHVuayA9IE1hdGguZmxvb3IoYmVnaW4gLyBjaHVua1NpemUpO1xuICAgIGNvbnN0IGVuZENodW5rID0gTWF0aC5mbG9vcigoZW5kIC0gMSkgLyBjaHVua1NpemUpICsgMTtcblxuICAgIGZvciAobGV0IGN1ckNodW5rID0gYmVnaW5DaHVuazsgY3VyQ2h1bmsgPCBlbmRDaHVuazsgKytjdXJDaHVuaykge1xuICAgICAgdGhpcy5fbG9hZGVkQ2h1bmtzLmFkZChjdXJDaHVuayk7XG4gICAgfVxuICB9XG5cbiAgb25SZWNlaXZlUHJvZ3Jlc3NpdmVEYXRhKGRhdGEpIHtcbiAgICBsZXQgcG9zaXRpb24gPSB0aGlzLnByb2dyZXNzaXZlRGF0YUxlbmd0aDtcbiAgICBjb25zdCBiZWdpbkNodW5rID0gTWF0aC5mbG9vcihwb3NpdGlvbiAvIHRoaXMuY2h1bmtTaXplKTtcbiAgICB0aGlzLmJ5dGVzLnNldChuZXcgVWludDhBcnJheShkYXRhKSwgcG9zaXRpb24pO1xuICAgIHBvc2l0aW9uICs9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICB0aGlzLnByb2dyZXNzaXZlRGF0YUxlbmd0aCA9IHBvc2l0aW9uO1xuICAgIGNvbnN0IGVuZENodW5rID0gcG9zaXRpb24gPj0gdGhpcy5lbmQgPyB0aGlzLm51bUNodW5rcyA6IE1hdGguZmxvb3IocG9zaXRpb24gLyB0aGlzLmNodW5rU2l6ZSk7XG5cbiAgICBmb3IgKGxldCBjdXJDaHVuayA9IGJlZ2luQ2h1bms7IGN1ckNodW5rIDwgZW5kQ2h1bms7ICsrY3VyQ2h1bmspIHtcbiAgICAgIHRoaXMuX2xvYWRlZENodW5rcy5hZGQoY3VyQ2h1bmspO1xuICAgIH1cbiAgfVxuXG4gIGVuc3VyZUJ5dGUocG9zKSB7XG4gICAgaWYgKHBvcyA8IHRoaXMucHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY2h1bmsgPSBNYXRoLmZsb29yKHBvcyAvIHRoaXMuY2h1bmtTaXplKTtcblxuICAgIGlmIChjaHVuayA9PT0gdGhpcy5sYXN0U3VjY2Vzc2Z1bEVuc3VyZUJ5dGVDaHVuaykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5fbG9hZGVkQ2h1bmtzLmhhcyhjaHVuaykpIHtcbiAgICAgIHRocm93IG5ldyBfY29yZV91dGlscy5NaXNzaW5nRGF0YUV4Y2VwdGlvbihwb3MsIHBvcyArIDEpO1xuICAgIH1cblxuICAgIHRoaXMubGFzdFN1Y2Nlc3NmdWxFbnN1cmVCeXRlQ2h1bmsgPSBjaHVuaztcbiAgfVxuXG4gIGVuc3VyZVJhbmdlKGJlZ2luLCBlbmQpIHtcbiAgICBpZiAoYmVnaW4gPj0gZW5kKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGVuZCA8PSB0aGlzLnByb2dyZXNzaXZlRGF0YUxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNodW5rU2l6ZSA9IHRoaXMuY2h1bmtTaXplO1xuICAgIGNvbnN0IGJlZ2luQ2h1bmsgPSBNYXRoLmZsb29yKGJlZ2luIC8gY2h1bmtTaXplKTtcbiAgICBjb25zdCBlbmRDaHVuayA9IE1hdGguZmxvb3IoKGVuZCAtIDEpIC8gY2h1bmtTaXplKSArIDE7XG5cbiAgICBmb3IgKGxldCBjaHVuayA9IGJlZ2luQ2h1bms7IGNodW5rIDwgZW5kQ2h1bms7ICsrY2h1bmspIHtcbiAgICAgIGlmICghdGhpcy5fbG9hZGVkQ2h1bmtzLmhhcyhjaHVuaykpIHtcbiAgICAgICAgdGhyb3cgbmV3IF9jb3JlX3V0aWxzLk1pc3NpbmdEYXRhRXhjZXB0aW9uKGJlZ2luLCBlbmQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG5leHRFbXB0eUNodW5rKGJlZ2luQ2h1bmspIHtcbiAgICBjb25zdCBudW1DaHVua3MgPSB0aGlzLm51bUNodW5rcztcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQ2h1bmtzOyArK2kpIHtcbiAgICAgIGNvbnN0IGNodW5rID0gKGJlZ2luQ2h1bmsgKyBpKSAlIG51bUNodW5rcztcblxuICAgICAgaWYgKCF0aGlzLl9sb2FkZWRDaHVua3MuaGFzKGNodW5rKSkge1xuICAgICAgICByZXR1cm4gY2h1bms7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBoYXNDaHVuayhjaHVuaykge1xuICAgIHJldHVybiB0aGlzLl9sb2FkZWRDaHVua3MuaGFzKGNodW5rKTtcbiAgfVxuXG4gIGdldCBsZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5kIC0gdGhpcy5zdGFydDtcbiAgfVxuXG4gIGdldCBpc0VtcHR5KCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMDtcbiAgfVxuXG4gIGdldEJ5dGUoKSB7XG4gICAgY29uc3QgcG9zID0gdGhpcy5wb3M7XG5cbiAgICBpZiAocG9zID49IHRoaXMuZW5kKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgaWYgKHBvcyA+PSB0aGlzLnByb2dyZXNzaXZlRGF0YUxlbmd0aCkge1xuICAgICAgdGhpcy5lbnN1cmVCeXRlKHBvcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuYnl0ZXNbdGhpcy5wb3MrK107XG4gIH1cblxuICBnZXRVaW50MTYoKSB7XG4gICAgY29uc3QgYjAgPSB0aGlzLmdldEJ5dGUoKTtcbiAgICBjb25zdCBiMSA9IHRoaXMuZ2V0Qnl0ZSgpO1xuXG4gICAgaWYgKGIwID09PSAtMSB8fCBiMSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICByZXR1cm4gKGIwIDw8IDgpICsgYjE7XG4gIH1cblxuICBnZXRJbnQzMigpIHtcbiAgICBjb25zdCBiMCA9IHRoaXMuZ2V0Qnl0ZSgpO1xuICAgIGNvbnN0IGIxID0gdGhpcy5nZXRCeXRlKCk7XG4gICAgY29uc3QgYjIgPSB0aGlzLmdldEJ5dGUoKTtcbiAgICBjb25zdCBiMyA9IHRoaXMuZ2V0Qnl0ZSgpO1xuICAgIHJldHVybiAoYjAgPDwgMjQpICsgKGIxIDw8IDE2KSArIChiMiA8PCA4KSArIGIzO1xuICB9XG5cbiAgZ2V0Qnl0ZXMobGVuZ3RoLCBmb3JjZUNsYW1wZWQgPSBmYWxzZSkge1xuICAgIGNvbnN0IGJ5dGVzID0gdGhpcy5ieXRlcztcbiAgICBjb25zdCBwb3MgPSB0aGlzLnBvcztcbiAgICBjb25zdCBzdHJFbmQgPSB0aGlzLmVuZDtcblxuICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICBpZiAoc3RyRW5kID4gdGhpcy5wcm9ncmVzc2l2ZURhdGFMZW5ndGgpIHtcbiAgICAgICAgdGhpcy5lbnN1cmVSYW5nZShwb3MsIHN0ckVuZCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHN1YmFycmF5ID0gYnl0ZXMuc3ViYXJyYXkocG9zLCBzdHJFbmQpO1xuICAgICAgcmV0dXJuIGZvcmNlQ2xhbXBlZCA/IG5ldyBVaW50OENsYW1wZWRBcnJheShzdWJhcnJheSkgOiBzdWJhcnJheTtcbiAgICB9XG5cbiAgICBsZXQgZW5kID0gcG9zICsgbGVuZ3RoO1xuXG4gICAgaWYgKGVuZCA+IHN0ckVuZCkge1xuICAgICAgZW5kID0gc3RyRW5kO1xuICAgIH1cblxuICAgIGlmIChlbmQgPiB0aGlzLnByb2dyZXNzaXZlRGF0YUxlbmd0aCkge1xuICAgICAgdGhpcy5lbnN1cmVSYW5nZShwb3MsIGVuZCk7XG4gICAgfVxuXG4gICAgdGhpcy5wb3MgPSBlbmQ7XG4gICAgY29uc3Qgc3ViYXJyYXkgPSBieXRlcy5zdWJhcnJheShwb3MsIGVuZCk7XG4gICAgcmV0dXJuIGZvcmNlQ2xhbXBlZCA/IG5ldyBVaW50OENsYW1wZWRBcnJheShzdWJhcnJheSkgOiBzdWJhcnJheTtcbiAgfVxuXG4gIHBlZWtCeXRlKCkge1xuICAgIGNvbnN0IHBlZWtlZEJ5dGUgPSB0aGlzLmdldEJ5dGUoKTtcblxuICAgIGlmIChwZWVrZWRCeXRlICE9PSAtMSkge1xuICAgICAgdGhpcy5wb3MtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGVla2VkQnl0ZTtcbiAgfVxuXG4gIHBlZWtCeXRlcyhsZW5ndGgsIGZvcmNlQ2xhbXBlZCA9IGZhbHNlKSB7XG4gICAgY29uc3QgYnl0ZXMgPSB0aGlzLmdldEJ5dGVzKGxlbmd0aCwgZm9yY2VDbGFtcGVkKTtcbiAgICB0aGlzLnBvcyAtPSBieXRlcy5sZW5ndGg7XG4gICAgcmV0dXJuIGJ5dGVzO1xuICB9XG5cbiAgZ2V0Qnl0ZVJhbmdlKGJlZ2luLCBlbmQpIHtcbiAgICBpZiAoYmVnaW4gPCAwKSB7XG4gICAgICBiZWdpbiA9IDA7XG4gICAgfVxuXG4gICAgaWYgKGVuZCA+IHRoaXMuZW5kKSB7XG4gICAgICBlbmQgPSB0aGlzLmVuZDtcbiAgICB9XG5cbiAgICBpZiAoZW5kID4gdGhpcy5wcm9ncmVzc2l2ZURhdGFMZW5ndGgpIHtcbiAgICAgIHRoaXMuZW5zdXJlUmFuZ2UoYmVnaW4sIGVuZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuYnl0ZXMuc3ViYXJyYXkoYmVnaW4sIGVuZCk7XG4gIH1cblxuICBza2lwKG4pIHtcbiAgICBpZiAoIW4pIHtcbiAgICAgIG4gPSAxO1xuICAgIH1cblxuICAgIHRoaXMucG9zICs9IG47XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnBvcyA9IHRoaXMuc3RhcnQ7XG4gIH1cblxuICBtb3ZlU3RhcnQoKSB7XG4gICAgdGhpcy5zdGFydCA9IHRoaXMucG9zO1xuICB9XG5cbiAgbWFrZVN1YlN0cmVhbShzdGFydCwgbGVuZ3RoLCBkaWN0KSB7XG4gICAgaWYgKGxlbmd0aCkge1xuICAgICAgaWYgKHN0YXJ0ICsgbGVuZ3RoID4gdGhpcy5wcm9ncmVzc2l2ZURhdGFMZW5ndGgpIHtcbiAgICAgICAgdGhpcy5lbnN1cmVSYW5nZShzdGFydCwgc3RhcnQgKyBsZW5ndGgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3RhcnQgPj0gdGhpcy5wcm9ncmVzc2l2ZURhdGFMZW5ndGgpIHtcbiAgICAgICAgdGhpcy5lbnN1cmVCeXRlKHN0YXJ0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBDaHVua2VkU3RyZWFtU3Vic3RyZWFtKCkge31cblxuICAgIENodW5rZWRTdHJlYW1TdWJzdHJlYW0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcblxuICAgIENodW5rZWRTdHJlYW1TdWJzdHJlYW0ucHJvdG90eXBlLmdldE1pc3NpbmdDaHVua3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBjaHVua1NpemUgPSB0aGlzLmNodW5rU2l6ZTtcbiAgICAgIGNvbnN0IGJlZ2luQ2h1bmsgPSBNYXRoLmZsb29yKHRoaXMuc3RhcnQgLyBjaHVua1NpemUpO1xuICAgICAgY29uc3QgZW5kQ2h1bmsgPSBNYXRoLmZsb29yKCh0aGlzLmVuZCAtIDEpIC8gY2h1bmtTaXplKSArIDE7XG4gICAgICBjb25zdCBtaXNzaW5nQ2h1bmtzID0gW107XG5cbiAgICAgIGZvciAobGV0IGNodW5rID0gYmVnaW5DaHVuazsgY2h1bmsgPCBlbmRDaHVuazsgKytjaHVuaykge1xuICAgICAgICBpZiAoIXRoaXMuX2xvYWRlZENodW5rcy5oYXMoY2h1bmspKSB7XG4gICAgICAgICAgbWlzc2luZ0NodW5rcy5wdXNoKGNodW5rKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWlzc2luZ0NodW5rcztcbiAgICB9O1xuXG4gICAgQ2h1bmtlZFN0cmVhbVN1YnN0cmVhbS5wcm90b3R5cGUuYWxsQ2h1bmtzTG9hZGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMubnVtQ2h1bmtzTG9hZGVkID09PSB0aGlzLm51bUNodW5rcykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZ2V0TWlzc2luZ0NodW5rcygpLmxlbmd0aCA9PT0gMDtcbiAgICB9O1xuXG4gICAgY29uc3Qgc3ViU3RyZWFtID0gbmV3IENodW5rZWRTdHJlYW1TdWJzdHJlYW0oKTtcbiAgICBzdWJTdHJlYW0ucG9zID0gc3ViU3RyZWFtLnN0YXJ0ID0gc3RhcnQ7XG4gICAgc3ViU3RyZWFtLmVuZCA9IHN0YXJ0ICsgbGVuZ3RoIHx8IHRoaXMuZW5kO1xuICAgIHN1YlN0cmVhbS5kaWN0ID0gZGljdDtcbiAgICByZXR1cm4gc3ViU3RyZWFtO1xuICB9XG5cbn1cblxuZXhwb3J0cy5DaHVua2VkU3RyZWFtID0gQ2h1bmtlZFN0cmVhbTtcblxuY2xhc3MgQ2h1bmtlZFN0cmVhbU1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcihwZGZOZXR3b3JrU3RyZWFtLCBhcmdzKSB7XG4gICAgdGhpcy5sZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgICB0aGlzLmNodW5rU2l6ZSA9IGFyZ3MucmFuZ2VDaHVua1NpemU7XG4gICAgdGhpcy5zdHJlYW0gPSBuZXcgQ2h1bmtlZFN0cmVhbSh0aGlzLmxlbmd0aCwgdGhpcy5jaHVua1NpemUsIHRoaXMpO1xuICAgIHRoaXMucGRmTmV0d29ya1N0cmVhbSA9IHBkZk5ldHdvcmtTdHJlYW07XG4gICAgdGhpcy5kaXNhYmxlQXV0b0ZldGNoID0gYXJncy5kaXNhYmxlQXV0b0ZldGNoO1xuICAgIHRoaXMubXNnSGFuZGxlciA9IGFyZ3MubXNnSGFuZGxlcjtcbiAgICB0aGlzLmN1cnJSZXF1ZXN0SWQgPSAwO1xuICAgIHRoaXMuX2NodW5rc05lZWRlZEJ5UmVxdWVzdCA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9yZXF1ZXN0c0J5Q2h1bmsgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fcHJvbWlzZXNCeVJlcXVlc3QgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5wcm9ncmVzc2l2ZURhdGFMZW5ndGggPSAwO1xuICAgIHRoaXMuYWJvcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2xvYWRlZFN0cmVhbUNhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG4gIH1cblxuICBvbkxvYWRlZFN0cmVhbSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbG9hZGVkU3RyZWFtQ2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG5cbiAgc2VuZFJlcXVlc3QoYmVnaW4sIGVuZCkge1xuICAgIGNvbnN0IHJhbmdlUmVhZGVyID0gdGhpcy5wZGZOZXR3b3JrU3RyZWFtLmdldFJhbmdlUmVhZGVyKGJlZ2luLCBlbmQpO1xuXG4gICAgaWYgKCFyYW5nZVJlYWRlci5pc1N0cmVhbWluZ1N1cHBvcnRlZCkge1xuICAgICAgcmFuZ2VSZWFkZXIub25Qcm9ncmVzcyA9IHRoaXMub25Qcm9ncmVzcy5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIGxldCBjaHVua3MgPSBbXSxcbiAgICAgICAgbG9hZGVkID0gMDtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgcmVhZENodW5rID0gY2h1bmsgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghY2h1bmsuZG9uZSkge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGNodW5rLnZhbHVlO1xuICAgICAgICAgICAgY2h1bmtzLnB1c2goZGF0YSk7XG4gICAgICAgICAgICBsb2FkZWQgKz0gKDAsIF91dGlsLmFycmF5Qnl0ZUxlbmd0aCkoZGF0YSk7XG5cbiAgICAgICAgICAgIGlmIChyYW5nZVJlYWRlci5pc1N0cmVhbWluZ1N1cHBvcnRlZCkge1xuICAgICAgICAgICAgICB0aGlzLm9uUHJvZ3Jlc3Moe1xuICAgICAgICAgICAgICAgIGxvYWRlZFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmFuZ2VSZWFkZXIucmVhZCgpLnRoZW4ocmVhZENodW5rLCByZWplY3QpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGNodW5rRGF0YSA9ICgwLCBfdXRpbC5hcnJheXNUb0J5dGVzKShjaHVua3MpO1xuICAgICAgICAgIGNodW5rcyA9IG51bGw7XG4gICAgICAgICAgcmVzb2x2ZShjaHVua0RhdGEpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByYW5nZVJlYWRlci5yZWFkKCkudGhlbihyZWFkQ2h1bmssIHJlamVjdCk7XG4gICAgfSk7XG4gICAgcHJvbWlzZS50aGVuKGRhdGEgPT4ge1xuICAgICAgaWYgKHRoaXMuYWJvcnRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMub25SZWNlaXZlRGF0YSh7XG4gICAgICAgIGNodW5rOiBkYXRhLFxuICAgICAgICBiZWdpblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICByZXF1ZXN0QWxsQ2h1bmtzKCkge1xuICAgIGNvbnN0IG1pc3NpbmdDaHVua3MgPSB0aGlzLnN0cmVhbS5nZXRNaXNzaW5nQ2h1bmtzKCk7XG5cbiAgICB0aGlzLl9yZXF1ZXN0Q2h1bmtzKG1pc3NpbmdDaHVua3MpO1xuXG4gICAgcmV0dXJuIHRoaXMuX2xvYWRlZFN0cmVhbUNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxuXG4gIF9yZXF1ZXN0Q2h1bmtzKGNodW5rcykge1xuICAgIGNvbnN0IHJlcXVlc3RJZCA9IHRoaXMuY3VyclJlcXVlc3RJZCsrO1xuICAgIGNvbnN0IGNodW5rc05lZWRlZCA9IG5ldyBTZXQoKTtcblxuICAgIHRoaXMuX2NodW5rc05lZWRlZEJ5UmVxdWVzdC5zZXQocmVxdWVzdElkLCBjaHVua3NOZWVkZWQpO1xuXG4gICAgZm9yIChjb25zdCBjaHVuayBvZiBjaHVua3MpIHtcbiAgICAgIGlmICghdGhpcy5zdHJlYW0uaGFzQ2h1bmsoY2h1bmspKSB7XG4gICAgICAgIGNodW5rc05lZWRlZC5hZGQoY2h1bmspO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjaHVua3NOZWVkZWQuc2l6ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIGNvbnN0IGNhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG5cbiAgICB0aGlzLl9wcm9taXNlc0J5UmVxdWVzdC5zZXQocmVxdWVzdElkLCBjYXBhYmlsaXR5KTtcblxuICAgIGNvbnN0IGNodW5rc1RvUmVxdWVzdCA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBjaHVuayBvZiBjaHVua3NOZWVkZWQpIHtcbiAgICAgIGxldCByZXF1ZXN0SWRzID0gdGhpcy5fcmVxdWVzdHNCeUNodW5rLmdldChjaHVuayk7XG5cbiAgICAgIGlmICghcmVxdWVzdElkcykge1xuICAgICAgICByZXF1ZXN0SWRzID0gW107XG5cbiAgICAgICAgdGhpcy5fcmVxdWVzdHNCeUNodW5rLnNldChjaHVuaywgcmVxdWVzdElkcyk7XG5cbiAgICAgICAgY2h1bmtzVG9SZXF1ZXN0LnB1c2goY2h1bmspO1xuICAgICAgfVxuXG4gICAgICByZXF1ZXN0SWRzLnB1c2gocmVxdWVzdElkKTtcbiAgICB9XG5cbiAgICBpZiAoY2h1bmtzVG9SZXF1ZXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGdyb3VwZWRDaHVua3NUb1JlcXVlc3QgPSB0aGlzLmdyb3VwQ2h1bmtzKGNodW5rc1RvUmVxdWVzdCk7XG5cbiAgICAgIGZvciAoY29uc3QgZ3JvdXBlZENodW5rIG9mIGdyb3VwZWRDaHVua3NUb1JlcXVlc3QpIHtcbiAgICAgICAgY29uc3QgYmVnaW4gPSBncm91cGVkQ2h1bmsuYmVnaW5DaHVuayAqIHRoaXMuY2h1bmtTaXplO1xuICAgICAgICBjb25zdCBlbmQgPSBNYXRoLm1pbihncm91cGVkQ2h1bmsuZW5kQ2h1bmsgKiB0aGlzLmNodW5rU2l6ZSwgdGhpcy5sZW5ndGgpO1xuICAgICAgICB0aGlzLnNlbmRSZXF1ZXN0KGJlZ2luLCBlbmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2UuY2F0Y2gocmVhc29uID0+IHtcbiAgICAgIGlmICh0aGlzLmFib3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyByZWFzb247XG4gICAgfSk7XG4gIH1cblxuICBnZXRTdHJlYW0oKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RyZWFtO1xuICB9XG5cbiAgcmVxdWVzdFJhbmdlKGJlZ2luLCBlbmQpIHtcbiAgICBlbmQgPSBNYXRoLm1pbihlbmQsIHRoaXMubGVuZ3RoKTtcbiAgICBjb25zdCBiZWdpbkNodW5rID0gdGhpcy5nZXRCZWdpbkNodW5rKGJlZ2luKTtcbiAgICBjb25zdCBlbmRDaHVuayA9IHRoaXMuZ2V0RW5kQ2h1bmsoZW5kKTtcbiAgICBjb25zdCBjaHVua3MgPSBbXTtcblxuICAgIGZvciAobGV0IGNodW5rID0gYmVnaW5DaHVuazsgY2h1bmsgPCBlbmRDaHVuazsgKytjaHVuaykge1xuICAgICAgY2h1bmtzLnB1c2goY2h1bmspO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0Q2h1bmtzKGNodW5rcyk7XG4gIH1cblxuICByZXF1ZXN0UmFuZ2VzKHJhbmdlcyA9IFtdKSB7XG4gICAgY29uc3QgY2h1bmtzVG9SZXF1ZXN0ID0gW107XG5cbiAgICBmb3IgKGNvbnN0IHJhbmdlIG9mIHJhbmdlcykge1xuICAgICAgY29uc3QgYmVnaW5DaHVuayA9IHRoaXMuZ2V0QmVnaW5DaHVuayhyYW5nZS5iZWdpbik7XG4gICAgICBjb25zdCBlbmRDaHVuayA9IHRoaXMuZ2V0RW5kQ2h1bmsocmFuZ2UuZW5kKTtcblxuICAgICAgZm9yIChsZXQgY2h1bmsgPSBiZWdpbkNodW5rOyBjaHVuayA8IGVuZENodW5rOyArK2NodW5rKSB7XG4gICAgICAgIGlmICghY2h1bmtzVG9SZXF1ZXN0LmluY2x1ZGVzKGNodW5rKSkge1xuICAgICAgICAgIGNodW5rc1RvUmVxdWVzdC5wdXNoKGNodW5rKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNodW5rc1RvUmVxdWVzdC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYSAtIGI7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3RDaHVua3MoY2h1bmtzVG9SZXF1ZXN0KTtcbiAgfVxuXG4gIGdyb3VwQ2h1bmtzKGNodW5rcykge1xuICAgIGNvbnN0IGdyb3VwZWRDaHVua3MgPSBbXTtcbiAgICBsZXQgYmVnaW5DaHVuayA9IC0xO1xuICAgIGxldCBwcmV2Q2h1bmsgPSAtMTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGNodW5rcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICBjb25zdCBjaHVuayA9IGNodW5rc1tpXTtcblxuICAgICAgaWYgKGJlZ2luQ2h1bmsgPCAwKSB7XG4gICAgICAgIGJlZ2luQ2h1bmsgPSBjaHVuaztcbiAgICAgIH1cblxuICAgICAgaWYgKHByZXZDaHVuayA+PSAwICYmIHByZXZDaHVuayArIDEgIT09IGNodW5rKSB7XG4gICAgICAgIGdyb3VwZWRDaHVua3MucHVzaCh7XG4gICAgICAgICAgYmVnaW5DaHVuayxcbiAgICAgICAgICBlbmRDaHVuazogcHJldkNodW5rICsgMVxuICAgICAgICB9KTtcbiAgICAgICAgYmVnaW5DaHVuayA9IGNodW5rO1xuICAgICAgfVxuXG4gICAgICBpZiAoaSArIDEgPT09IGNodW5rcy5sZW5ndGgpIHtcbiAgICAgICAgZ3JvdXBlZENodW5rcy5wdXNoKHtcbiAgICAgICAgICBiZWdpbkNodW5rLFxuICAgICAgICAgIGVuZENodW5rOiBjaHVuayArIDFcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHByZXZDaHVuayA9IGNodW5rO1xuICAgIH1cblxuICAgIHJldHVybiBncm91cGVkQ2h1bmtzO1xuICB9XG5cbiAgb25Qcm9ncmVzcyhhcmdzKSB7XG4gICAgdGhpcy5tc2dIYW5kbGVyLnNlbmQoXCJEb2NQcm9ncmVzc1wiLCB7XG4gICAgICBsb2FkZWQ6IHRoaXMuc3RyZWFtLm51bUNodW5rc0xvYWRlZCAqIHRoaXMuY2h1bmtTaXplICsgYXJncy5sb2FkZWQsXG4gICAgICB0b3RhbDogdGhpcy5sZW5ndGhcbiAgICB9KTtcbiAgfVxuXG4gIG9uUmVjZWl2ZURhdGEoYXJncykge1xuICAgIGNvbnN0IGNodW5rID0gYXJncy5jaHVuaztcbiAgICBjb25zdCBpc1Byb2dyZXNzaXZlID0gYXJncy5iZWdpbiA9PT0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IGJlZ2luID0gaXNQcm9ncmVzc2l2ZSA/IHRoaXMucHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoIDogYXJncy5iZWdpbjtcbiAgICBjb25zdCBlbmQgPSBiZWdpbiArIGNodW5rLmJ5dGVMZW5ndGg7XG4gICAgY29uc3QgYmVnaW5DaHVuayA9IE1hdGguZmxvb3IoYmVnaW4gLyB0aGlzLmNodW5rU2l6ZSk7XG4gICAgY29uc3QgZW5kQ2h1bmsgPSBlbmQgPCB0aGlzLmxlbmd0aCA/IE1hdGguZmxvb3IoZW5kIC8gdGhpcy5jaHVua1NpemUpIDogTWF0aC5jZWlsKGVuZCAvIHRoaXMuY2h1bmtTaXplKTtcblxuICAgIGlmIChpc1Byb2dyZXNzaXZlKSB7XG4gICAgICB0aGlzLnN0cmVhbS5vblJlY2VpdmVQcm9ncmVzc2l2ZURhdGEoY2h1bmspO1xuICAgICAgdGhpcy5wcm9ncmVzc2l2ZURhdGFMZW5ndGggPSBlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RyZWFtLm9uUmVjZWl2ZURhdGEoYmVnaW4sIGNodW5rKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zdHJlYW0uYWxsQ2h1bmtzTG9hZGVkKCkpIHtcbiAgICAgIHRoaXMuX2xvYWRlZFN0cmVhbUNhcGFiaWxpdHkucmVzb2x2ZSh0aGlzLnN0cmVhbSk7XG4gICAgfVxuXG4gICAgY29uc3QgbG9hZGVkUmVxdWVzdHMgPSBbXTtcblxuICAgIGZvciAobGV0IGN1ckNodW5rID0gYmVnaW5DaHVuazsgY3VyQ2h1bmsgPCBlbmRDaHVuazsgKytjdXJDaHVuaykge1xuICAgICAgY29uc3QgcmVxdWVzdElkcyA9IHRoaXMuX3JlcXVlc3RzQnlDaHVuay5nZXQoY3VyQ2h1bmspO1xuXG4gICAgICBpZiAoIXJlcXVlc3RJZHMpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3JlcXVlc3RzQnlDaHVuay5kZWxldGUoY3VyQ2h1bmspO1xuXG4gICAgICBmb3IgKGNvbnN0IHJlcXVlc3RJZCBvZiByZXF1ZXN0SWRzKSB7XG4gICAgICAgIGNvbnN0IGNodW5rc05lZWRlZCA9IHRoaXMuX2NodW5rc05lZWRlZEJ5UmVxdWVzdC5nZXQocmVxdWVzdElkKTtcblxuICAgICAgICBpZiAoY2h1bmtzTmVlZGVkLmhhcyhjdXJDaHVuaykpIHtcbiAgICAgICAgICBjaHVua3NOZWVkZWQuZGVsZXRlKGN1ckNodW5rKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaHVua3NOZWVkZWQuc2l6ZSA+IDApIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvYWRlZFJlcXVlc3RzLnB1c2gocmVxdWVzdElkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZGlzYWJsZUF1dG9GZXRjaCAmJiB0aGlzLl9yZXF1ZXN0c0J5Q2h1bmsuc2l6ZSA9PT0gMCkge1xuICAgICAgbGV0IG5leHRFbXB0eUNodW5rO1xuXG4gICAgICBpZiAodGhpcy5zdHJlYW0ubnVtQ2h1bmtzTG9hZGVkID09PSAxKSB7XG4gICAgICAgIGNvbnN0IGxhc3RDaHVuayA9IHRoaXMuc3RyZWFtLm51bUNodW5rcyAtIDE7XG5cbiAgICAgICAgaWYgKCF0aGlzLnN0cmVhbS5oYXNDaHVuayhsYXN0Q2h1bmspKSB7XG4gICAgICAgICAgbmV4dEVtcHR5Q2h1bmsgPSBsYXN0Q2h1bms7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbXB0eUNodW5rID0gdGhpcy5zdHJlYW0ubmV4dEVtcHR5Q2h1bmsoZW5kQ2h1bmspO1xuICAgICAgfVxuXG4gICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihuZXh0RW1wdHlDaHVuaykpIHtcbiAgICAgICAgdGhpcy5fcmVxdWVzdENodW5rcyhbbmV4dEVtcHR5Q2h1bmtdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHJlcXVlc3RJZCBvZiBsb2FkZWRSZXF1ZXN0cykge1xuICAgICAgY29uc3QgY2FwYWJpbGl0eSA9IHRoaXMuX3Byb21pc2VzQnlSZXF1ZXN0LmdldChyZXF1ZXN0SWQpO1xuXG4gICAgICB0aGlzLl9wcm9taXNlc0J5UmVxdWVzdC5kZWxldGUocmVxdWVzdElkKTtcblxuICAgICAgY2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5tc2dIYW5kbGVyLnNlbmQoXCJEb2NQcm9ncmVzc1wiLCB7XG4gICAgICBsb2FkZWQ6IHRoaXMuc3RyZWFtLm51bUNodW5rc0xvYWRlZCAqIHRoaXMuY2h1bmtTaXplLFxuICAgICAgdG90YWw6IHRoaXMubGVuZ3RoXG4gICAgfSk7XG4gIH1cblxuICBvbkVycm9yKGVycikge1xuICAgIHRoaXMuX2xvYWRlZFN0cmVhbUNhcGFiaWxpdHkucmVqZWN0KGVycik7XG4gIH1cblxuICBnZXRCZWdpbkNodW5rKGJlZ2luKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoYmVnaW4gLyB0aGlzLmNodW5rU2l6ZSk7XG4gIH1cblxuICBnZXRFbmRDaHVuayhlbmQpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcigoZW5kIC0gMSkgLyB0aGlzLmNodW5rU2l6ZSkgKyAxO1xuICB9XG5cbiAgYWJvcnQocmVhc29uKSB7XG4gICAgdGhpcy5hYm9ydGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLnBkZk5ldHdvcmtTdHJlYW0pIHtcbiAgICAgIHRoaXMucGRmTmV0d29ya1N0cmVhbS5jYW5jZWxBbGxSZXF1ZXN0cyhyZWFzb24pO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgY2FwYWJpbGl0eSBvZiB0aGlzLl9wcm9taXNlc0J5UmVxdWVzdC52YWx1ZXMoKSkge1xuICAgICAgY2FwYWJpbGl0eS5yZWplY3QocmVhc29uKTtcbiAgICB9XG4gIH1cblxufVxuXG5leHBvcnRzLkNodW5rZWRTdHJlYW1NYW5hZ2VyID0gQ2h1bmtlZFN0cmVhbU1hbmFnZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/chunked_stream.js\n')},"./node_modules/pdfjs-dist/lib/core/cmap.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.IdentityCMap = exports.CMapFactory = exports.CMap = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _primitives = __webpack_require__(/*! ./primitives.js */ "./node_modules/pdfjs-dist/lib/core/primitives.js");\n\nvar _parser = __webpack_require__(/*! ./parser.js */ "./node_modules/pdfjs-dist/lib/core/parser.js");\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nvar _stream = __webpack_require__(/*! ./stream.js */ "./node_modules/pdfjs-dist/lib/core/stream.js");\n\nvar BUILT_IN_CMAPS = ["Adobe-GB1-UCS2", "Adobe-CNS1-UCS2", "Adobe-Japan1-UCS2", "Adobe-Korea1-UCS2", "78-EUC-H", "78-EUC-V", "78-H", "78-RKSJ-H", "78-RKSJ-V", "78-V", "78ms-RKSJ-H", "78ms-RKSJ-V", "83pv-RKSJ-H", "90ms-RKSJ-H", "90ms-RKSJ-V", "90msp-RKSJ-H", "90msp-RKSJ-V", "90pv-RKSJ-H", "90pv-RKSJ-V", "Add-H", "Add-RKSJ-H", "Add-RKSJ-V", "Add-V", "Adobe-CNS1-0", "Adobe-CNS1-1", "Adobe-CNS1-2", "Adobe-CNS1-3", "Adobe-CNS1-4", "Adobe-CNS1-5", "Adobe-CNS1-6", "Adobe-GB1-0", "Adobe-GB1-1", "Adobe-GB1-2", "Adobe-GB1-3", "Adobe-GB1-4", "Adobe-GB1-5", "Adobe-Japan1-0", "Adobe-Japan1-1", "Adobe-Japan1-2", "Adobe-Japan1-3", "Adobe-Japan1-4", "Adobe-Japan1-5", "Adobe-Japan1-6", "Adobe-Korea1-0", "Adobe-Korea1-1", "Adobe-Korea1-2", "B5-H", "B5-V", "B5pc-H", "B5pc-V", "CNS-EUC-H", "CNS-EUC-V", "CNS1-H", "CNS1-V", "CNS2-H", "CNS2-V", "ETHK-B5-H", "ETHK-B5-V", "ETen-B5-H", "ETen-B5-V", "ETenms-B5-H", "ETenms-B5-V", "EUC-H", "EUC-V", "Ext-H", "Ext-RKSJ-H", "Ext-RKSJ-V", "Ext-V", "GB-EUC-H", "GB-EUC-V", "GB-H", "GB-V", "GBK-EUC-H", "GBK-EUC-V", "GBK2K-H", "GBK2K-V", "GBKp-EUC-H", "GBKp-EUC-V", "GBT-EUC-H", "GBT-EUC-V", "GBT-H", "GBT-V", "GBTpc-EUC-H", "GBTpc-EUC-V", "GBpc-EUC-H", "GBpc-EUC-V", "H", "HKdla-B5-H", "HKdla-B5-V", "HKdlb-B5-H", "HKdlb-B5-V", "HKgccs-B5-H", "HKgccs-B5-V", "HKm314-B5-H", "HKm314-B5-V", "HKm471-B5-H", "HKm471-B5-V", "HKscs-B5-H", "HKscs-B5-V", "Hankaku", "Hiragana", "KSC-EUC-H", "KSC-EUC-V", "KSC-H", "KSC-Johab-H", "KSC-Johab-V", "KSC-V", "KSCms-UHC-H", "KSCms-UHC-HW-H", "KSCms-UHC-HW-V", "KSCms-UHC-V", "KSCpc-EUC-H", "KSCpc-EUC-V", "Katakana", "NWP-H", "NWP-V", "RKSJ-H", "RKSJ-V", "Roman", "UniCNS-UCS2-H", "UniCNS-UCS2-V", "UniCNS-UTF16-H", "UniCNS-UTF16-V", "UniCNS-UTF32-H", "UniCNS-UTF32-V", "UniCNS-UTF8-H", "UniCNS-UTF8-V", "UniGB-UCS2-H", "UniGB-UCS2-V", "UniGB-UTF16-H", "UniGB-UTF16-V", "UniGB-UTF32-H", "UniGB-UTF32-V", "UniGB-UTF8-H", "UniGB-UTF8-V", "UniJIS-UCS2-H", "UniJIS-UCS2-HW-H", "UniJIS-UCS2-HW-V", "UniJIS-UCS2-V", "UniJIS-UTF16-H", "UniJIS-UTF16-V", "UniJIS-UTF32-H", "UniJIS-UTF32-V", "UniJIS-UTF8-H", "UniJIS-UTF8-V", "UniJIS2004-UTF16-H", "UniJIS2004-UTF16-V", "UniJIS2004-UTF32-H", "UniJIS2004-UTF32-V", "UniJIS2004-UTF8-H", "UniJIS2004-UTF8-V", "UniJISPro-UCS2-HW-V", "UniJISPro-UCS2-V", "UniJISPro-UTF8-V", "UniJISX0213-UTF32-H", "UniJISX0213-UTF32-V", "UniJISX02132004-UTF32-H", "UniJISX02132004-UTF32-V", "UniKS-UCS2-H", "UniKS-UCS2-V", "UniKS-UTF16-H", "UniKS-UTF16-V", "UniKS-UTF32-H", "UniKS-UTF32-V", "UniKS-UTF8-H", "UniKS-UTF8-V", "V", "WP-Symbol"];\nconst MAX_MAP_RANGE = 2 ** 24 - 1;\n\nclass CMap {\n  constructor(builtInCMap = false) {\n    this.codespaceRanges = [[], [], [], []];\n    this.numCodespaceRanges = 0;\n    this._map = [];\n    this.name = "";\n    this.vertical = false;\n    this.useCMap = null;\n    this.builtInCMap = builtInCMap;\n  }\n\n  addCodespaceRange(n, low, high) {\n    this.codespaceRanges[n - 1].push(low, high);\n    this.numCodespaceRanges++;\n  }\n\n  mapCidRange(low, high, dstLow) {\n    if (high - low > MAX_MAP_RANGE) {\n      throw new Error("mapCidRange - ignoring data above MAX_MAP_RANGE.");\n    }\n\n    while (low <= high) {\n      this._map[low++] = dstLow++;\n    }\n  }\n\n  mapBfRange(low, high, dstLow) {\n    if (high - low > MAX_MAP_RANGE) {\n      throw new Error("mapBfRange - ignoring data above MAX_MAP_RANGE.");\n    }\n\n    var lastByte = dstLow.length - 1;\n\n    while (low <= high) {\n      this._map[low++] = dstLow;\n      dstLow = dstLow.substring(0, lastByte) + String.fromCharCode(dstLow.charCodeAt(lastByte) + 1);\n    }\n  }\n\n  mapBfRangeToArray(low, high, array) {\n    if (high - low > MAX_MAP_RANGE) {\n      throw new Error("mapBfRangeToArray - ignoring data above MAX_MAP_RANGE.");\n    }\n\n    const ii = array.length;\n    let i = 0;\n\n    while (low <= high && i < ii) {\n      this._map[low] = array[i++];\n      ++low;\n    }\n  }\n\n  mapOne(src, dst) {\n    this._map[src] = dst;\n  }\n\n  lookup(code) {\n    return this._map[code];\n  }\n\n  contains(code) {\n    return this._map[code] !== undefined;\n  }\n\n  forEach(callback) {\n    const map = this._map;\n    const length = map.length;\n\n    if (length <= 0x10000) {\n      for (let i = 0; i < length; i++) {\n        if (map[i] !== undefined) {\n          callback(i, map[i]);\n        }\n      }\n    } else {\n      for (const i in map) {\n        callback(i, map[i]);\n      }\n    }\n  }\n\n  charCodeOf(value) {\n    const map = this._map;\n\n    if (map.length <= 0x10000) {\n      return map.indexOf(value);\n    }\n\n    for (const charCode in map) {\n      if (map[charCode] === value) {\n        return charCode | 0;\n      }\n    }\n\n    return -1;\n  }\n\n  getMap() {\n    return this._map;\n  }\n\n  readCharCode(str, offset, out) {\n    let c = 0;\n    const codespaceRanges = this.codespaceRanges;\n\n    for (let n = 0, nn = codespaceRanges.length; n < nn; n++) {\n      c = (c << 8 | str.charCodeAt(offset + n)) >>> 0;\n      const codespaceRange = codespaceRanges[n];\n\n      for (let k = 0, kk = codespaceRange.length; k < kk;) {\n        const low = codespaceRange[k++];\n        const high = codespaceRange[k++];\n\n        if (c >= low && c <= high) {\n          out.charcode = c;\n          out.length = n + 1;\n          return;\n        }\n      }\n    }\n\n    out.charcode = 0;\n    out.length = 1;\n  }\n\n  getCharCodeLength(charCode) {\n    const codespaceRanges = this.codespaceRanges;\n\n    for (let n = 0, nn = codespaceRanges.length; n < nn; n++) {\n      const codespaceRange = codespaceRanges[n];\n\n      for (let k = 0, kk = codespaceRange.length; k < kk;) {\n        const low = codespaceRange[k++];\n        const high = codespaceRange[k++];\n\n        if (charCode >= low && charCode <= high) {\n          return n + 1;\n        }\n      }\n    }\n\n    return 1;\n  }\n\n  get length() {\n    return this._map.length;\n  }\n\n  get isIdentityCMap() {\n    if (!(this.name === "Identity-H" || this.name === "Identity-V")) {\n      return false;\n    }\n\n    if (this._map.length !== 0x10000) {\n      return false;\n    }\n\n    for (let i = 0; i < 0x10000; i++) {\n      if (this._map[i] !== i) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n\nexports.CMap = CMap;\n\nclass IdentityCMap extends CMap {\n  constructor(vertical, n) {\n    super();\n    this.vertical = vertical;\n    this.addCodespaceRange(n, 0, 0xffff);\n  }\n\n  mapCidRange(low, high, dstLow) {\n    (0, _util.unreachable)("should not call mapCidRange");\n  }\n\n  mapBfRange(low, high, dstLow) {\n    (0, _util.unreachable)("should not call mapBfRange");\n  }\n\n  mapBfRangeToArray(low, high, array) {\n    (0, _util.unreachable)("should not call mapBfRangeToArray");\n  }\n\n  mapOne(src, dst) {\n    (0, _util.unreachable)("should not call mapCidOne");\n  }\n\n  lookup(code) {\n    return Number.isInteger(code) && code <= 0xffff ? code : undefined;\n  }\n\n  contains(code) {\n    return Number.isInteger(code) && code <= 0xffff;\n  }\n\n  forEach(callback) {\n    for (let i = 0; i <= 0xffff; i++) {\n      callback(i, i);\n    }\n  }\n\n  charCodeOf(value) {\n    return Number.isInteger(value) && value <= 0xffff ? value : -1;\n  }\n\n  getMap() {\n    const map = new Array(0x10000);\n\n    for (let i = 0; i <= 0xffff; i++) {\n      map[i] = i;\n    }\n\n    return map;\n  }\n\n  get length() {\n    return 0x10000;\n  }\n\n  get isIdentityCMap() {\n    (0, _util.unreachable)("should not access .isIdentityCMap");\n  }\n\n}\n\nexports.IdentityCMap = IdentityCMap;\n\nvar BinaryCMapReader = function BinaryCMapReaderClosure() {\n  function hexToInt(a, size) {\n    var n = 0;\n\n    for (var i = 0; i <= size; i++) {\n      n = n << 8 | a[i];\n    }\n\n    return n >>> 0;\n  }\n\n  function hexToStr(a, size) {\n    if (size === 1) {\n      return String.fromCharCode(a[0], a[1]);\n    }\n\n    if (size === 3) {\n      return String.fromCharCode(a[0], a[1], a[2], a[3]);\n    }\n\n    return String.fromCharCode.apply(null, a.subarray(0, size + 1));\n  }\n\n  function addHex(a, b, size) {\n    var c = 0;\n\n    for (var i = size; i >= 0; i--) {\n      c += a[i] + b[i];\n      a[i] = c & 255;\n      c >>= 8;\n    }\n  }\n\n  function incHex(a, size) {\n    var c = 1;\n\n    for (var i = size; i >= 0 && c > 0; i--) {\n      c += a[i];\n      a[i] = c & 255;\n      c >>= 8;\n    }\n  }\n\n  var MAX_NUM_SIZE = 16;\n  var MAX_ENCODED_NUM_SIZE = 19;\n\n  function BinaryCMapStream(data) {\n    this.buffer = data;\n    this.pos = 0;\n    this.end = data.length;\n    this.tmpBuf = new Uint8Array(MAX_ENCODED_NUM_SIZE);\n  }\n\n  BinaryCMapStream.prototype = {\n    readByte() {\n      if (this.pos >= this.end) {\n        return -1;\n      }\n\n      return this.buffer[this.pos++];\n    },\n\n    readNumber() {\n      var n = 0;\n      var last;\n\n      do {\n        var b = this.readByte();\n\n        if (b < 0) {\n          throw new _util.FormatError("unexpected EOF in bcmap");\n        }\n\n        last = !(b & 0x80);\n        n = n << 7 | b & 0x7f;\n      } while (!last);\n\n      return n;\n    },\n\n    readSigned() {\n      var n = this.readNumber();\n      return n & 1 ? ~(n >>> 1) : n >>> 1;\n    },\n\n    readHex(num, size) {\n      num.set(this.buffer.subarray(this.pos, this.pos + size + 1));\n      this.pos += size + 1;\n    },\n\n    readHexNumber(num, size) {\n      var last;\n      var stack = this.tmpBuf,\n          sp = 0;\n\n      do {\n        var b = this.readByte();\n\n        if (b < 0) {\n          throw new _util.FormatError("unexpected EOF in bcmap");\n        }\n\n        last = !(b & 0x80);\n        stack[sp++] = b & 0x7f;\n      } while (!last);\n\n      var i = size,\n          buffer = 0,\n          bufferSize = 0;\n\n      while (i >= 0) {\n        while (bufferSize < 8 && stack.length > 0) {\n          buffer = stack[--sp] << bufferSize | buffer;\n          bufferSize += 7;\n        }\n\n        num[i] = buffer & 255;\n        i--;\n        buffer >>= 8;\n        bufferSize -= 8;\n      }\n    },\n\n    readHexSigned(num, size) {\n      this.readHexNumber(num, size);\n      var sign = num[size] & 1 ? 255 : 0;\n      var c = 0;\n\n      for (var i = 0; i <= size; i++) {\n        c = (c & 1) << 8 | num[i];\n        num[i] = c >> 1 ^ sign;\n      }\n    },\n\n    readString() {\n      var len = this.readNumber();\n      var s = "";\n\n      for (var i = 0; i < len; i++) {\n        s += String.fromCharCode(this.readNumber());\n      }\n\n      return s;\n    }\n\n  };\n\n  function processBinaryCMap(data, cMap, extend) {\n    return new Promise(function (resolve, reject) {\n      var stream = new BinaryCMapStream(data);\n      var header = stream.readByte();\n      cMap.vertical = !!(header & 1);\n      var useCMap = null;\n      var start = new Uint8Array(MAX_NUM_SIZE);\n      var end = new Uint8Array(MAX_NUM_SIZE);\n      var char = new Uint8Array(MAX_NUM_SIZE);\n      var charCode = new Uint8Array(MAX_NUM_SIZE);\n      var tmp = new Uint8Array(MAX_NUM_SIZE);\n      var code;\n      var b;\n\n      while ((b = stream.readByte()) >= 0) {\n        var type = b >> 5;\n\n        if (type === 7) {\n          switch (b & 0x1f) {\n            case 0:\n              stream.readString();\n              break;\n\n            case 1:\n              useCMap = stream.readString();\n              break;\n          }\n\n          continue;\n        }\n\n        var sequence = !!(b & 0x10);\n        var dataSize = b & 15;\n\n        if (dataSize + 1 > MAX_NUM_SIZE) {\n          throw new Error("processBinaryCMap: Invalid dataSize.");\n        }\n\n        var ucs2DataSize = 1;\n        var subitemsCount = stream.readNumber();\n        var i;\n\n        switch (type) {\n          case 0:\n            stream.readHex(start, dataSize);\n            stream.readHexNumber(end, dataSize);\n            addHex(end, start, dataSize);\n            cMap.addCodespaceRange(dataSize + 1, hexToInt(start, dataSize), hexToInt(end, dataSize));\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(end, dataSize);\n              stream.readHexNumber(start, dataSize);\n              addHex(start, end, dataSize);\n              stream.readHexNumber(end, dataSize);\n              addHex(end, start, dataSize);\n              cMap.addCodespaceRange(dataSize + 1, hexToInt(start, dataSize), hexToInt(end, dataSize));\n            }\n\n            break;\n\n          case 1:\n            stream.readHex(start, dataSize);\n            stream.readHexNumber(end, dataSize);\n            addHex(end, start, dataSize);\n            stream.readNumber();\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(end, dataSize);\n              stream.readHexNumber(start, dataSize);\n              addHex(start, end, dataSize);\n              stream.readHexNumber(end, dataSize);\n              addHex(end, start, dataSize);\n              stream.readNumber();\n            }\n\n            break;\n\n          case 2:\n            stream.readHex(char, dataSize);\n            code = stream.readNumber();\n            cMap.mapOne(hexToInt(char, dataSize), code);\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(char, dataSize);\n\n              if (!sequence) {\n                stream.readHexNumber(tmp, dataSize);\n                addHex(char, tmp, dataSize);\n              }\n\n              code = stream.readSigned() + (code + 1);\n              cMap.mapOne(hexToInt(char, dataSize), code);\n            }\n\n            break;\n\n          case 3:\n            stream.readHex(start, dataSize);\n            stream.readHexNumber(end, dataSize);\n            addHex(end, start, dataSize);\n            code = stream.readNumber();\n            cMap.mapCidRange(hexToInt(start, dataSize), hexToInt(end, dataSize), code);\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(end, dataSize);\n\n              if (!sequence) {\n                stream.readHexNumber(start, dataSize);\n                addHex(start, end, dataSize);\n              } else {\n                start.set(end);\n              }\n\n              stream.readHexNumber(end, dataSize);\n              addHex(end, start, dataSize);\n              code = stream.readNumber();\n              cMap.mapCidRange(hexToInt(start, dataSize), hexToInt(end, dataSize), code);\n            }\n\n            break;\n\n          case 4:\n            stream.readHex(char, ucs2DataSize);\n            stream.readHex(charCode, dataSize);\n            cMap.mapOne(hexToInt(char, ucs2DataSize), hexToStr(charCode, dataSize));\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(char, ucs2DataSize);\n\n              if (!sequence) {\n                stream.readHexNumber(tmp, ucs2DataSize);\n                addHex(char, tmp, ucs2DataSize);\n              }\n\n              incHex(charCode, dataSize);\n              stream.readHexSigned(tmp, dataSize);\n              addHex(charCode, tmp, dataSize);\n              cMap.mapOne(hexToInt(char, ucs2DataSize), hexToStr(charCode, dataSize));\n            }\n\n            break;\n\n          case 5:\n            stream.readHex(start, ucs2DataSize);\n            stream.readHexNumber(end, ucs2DataSize);\n            addHex(end, start, ucs2DataSize);\n            stream.readHex(charCode, dataSize);\n            cMap.mapBfRange(hexToInt(start, ucs2DataSize), hexToInt(end, ucs2DataSize), hexToStr(charCode, dataSize));\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(end, ucs2DataSize);\n\n              if (!sequence) {\n                stream.readHexNumber(start, ucs2DataSize);\n                addHex(start, end, ucs2DataSize);\n              } else {\n                start.set(end);\n              }\n\n              stream.readHexNumber(end, ucs2DataSize);\n              addHex(end, start, ucs2DataSize);\n              stream.readHex(charCode, dataSize);\n              cMap.mapBfRange(hexToInt(start, ucs2DataSize), hexToInt(end, ucs2DataSize), hexToStr(charCode, dataSize));\n            }\n\n            break;\n\n          default:\n            reject(new Error("processBinaryCMap: Unknown type: " + type));\n            return;\n        }\n      }\n\n      if (useCMap) {\n        resolve(extend(useCMap));\n        return;\n      }\n\n      resolve(cMap);\n    });\n  }\n\n  function BinaryCMapReader() {}\n\n  BinaryCMapReader.prototype = {\n    process: processBinaryCMap\n  };\n  return BinaryCMapReader;\n}();\n\nvar CMapFactory = function CMapFactoryClosure() {\n  function strToInt(str) {\n    var a = 0;\n\n    for (var i = 0; i < str.length; i++) {\n      a = a << 8 | str.charCodeAt(i);\n    }\n\n    return a >>> 0;\n  }\n\n  function expectString(obj) {\n    if (!(0, _util.isString)(obj)) {\n      throw new _util.FormatError("Malformed CMap: expected string.");\n    }\n  }\n\n  function expectInt(obj) {\n    if (!Number.isInteger(obj)) {\n      throw new _util.FormatError("Malformed CMap: expected int.");\n    }\n  }\n\n  function parseBfChar(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n\n      if ((0, _primitives.isEOF)(obj)) {\n        break;\n      }\n\n      if ((0, _primitives.isCmd)(obj, "endbfchar")) {\n        return;\n      }\n\n      expectString(obj);\n      var src = strToInt(obj);\n      obj = lexer.getObj();\n      expectString(obj);\n      var dst = obj;\n      cMap.mapOne(src, dst);\n    }\n  }\n\n  function parseBfRange(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n\n      if ((0, _primitives.isEOF)(obj)) {\n        break;\n      }\n\n      if ((0, _primitives.isCmd)(obj, "endbfrange")) {\n        return;\n      }\n\n      expectString(obj);\n      var low = strToInt(obj);\n      obj = lexer.getObj();\n      expectString(obj);\n      var high = strToInt(obj);\n      obj = lexer.getObj();\n\n      if (Number.isInteger(obj) || (0, _util.isString)(obj)) {\n        var dstLow = Number.isInteger(obj) ? String.fromCharCode(obj) : obj;\n        cMap.mapBfRange(low, high, dstLow);\n      } else if ((0, _primitives.isCmd)(obj, "[")) {\n        obj = lexer.getObj();\n        var array = [];\n\n        while (!(0, _primitives.isCmd)(obj, "]") && !(0, _primitives.isEOF)(obj)) {\n          array.push(obj);\n          obj = lexer.getObj();\n        }\n\n        cMap.mapBfRangeToArray(low, high, array);\n      } else {\n        break;\n      }\n    }\n\n    throw new _util.FormatError("Invalid bf range.");\n  }\n\n  function parseCidChar(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n\n      if ((0, _primitives.isEOF)(obj)) {\n        break;\n      }\n\n      if ((0, _primitives.isCmd)(obj, "endcidchar")) {\n        return;\n      }\n\n      expectString(obj);\n      var src = strToInt(obj);\n      obj = lexer.getObj();\n      expectInt(obj);\n      var dst = obj;\n      cMap.mapOne(src, dst);\n    }\n  }\n\n  function parseCidRange(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n\n      if ((0, _primitives.isEOF)(obj)) {\n        break;\n      }\n\n      if ((0, _primitives.isCmd)(obj, "endcidrange")) {\n        return;\n      }\n\n      expectString(obj);\n      var low = strToInt(obj);\n      obj = lexer.getObj();\n      expectString(obj);\n      var high = strToInt(obj);\n      obj = lexer.getObj();\n      expectInt(obj);\n      var dstLow = obj;\n      cMap.mapCidRange(low, high, dstLow);\n    }\n  }\n\n  function parseCodespaceRange(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n\n      if ((0, _primitives.isEOF)(obj)) {\n        break;\n      }\n\n      if ((0, _primitives.isCmd)(obj, "endcodespacerange")) {\n        return;\n      }\n\n      if (!(0, _util.isString)(obj)) {\n        break;\n      }\n\n      var low = strToInt(obj);\n      obj = lexer.getObj();\n\n      if (!(0, _util.isString)(obj)) {\n        break;\n      }\n\n      var high = strToInt(obj);\n      cMap.addCodespaceRange(obj.length, low, high);\n    }\n\n    throw new _util.FormatError("Invalid codespace range.");\n  }\n\n  function parseWMode(cMap, lexer) {\n    var obj = lexer.getObj();\n\n    if (Number.isInteger(obj)) {\n      cMap.vertical = !!obj;\n    }\n  }\n\n  function parseCMapName(cMap, lexer) {\n    var obj = lexer.getObj();\n\n    if ((0, _primitives.isName)(obj) && (0, _util.isString)(obj.name)) {\n      cMap.name = obj.name;\n    }\n  }\n\n  function parseCMap(cMap, lexer, fetchBuiltInCMap, useCMap) {\n    var previous;\n    var embeddedUseCMap;\n\n    objLoop: while (true) {\n      try {\n        var obj = lexer.getObj();\n\n        if ((0, _primitives.isEOF)(obj)) {\n          break;\n        } else if ((0, _primitives.isName)(obj)) {\n          if (obj.name === "WMode") {\n            parseWMode(cMap, lexer);\n          } else if (obj.name === "CMapName") {\n            parseCMapName(cMap, lexer);\n          }\n\n          previous = obj;\n        } else if ((0, _primitives.isCmd)(obj)) {\n          switch (obj.cmd) {\n            case "endcmap":\n              break objLoop;\n\n            case "usecmap":\n              if ((0, _primitives.isName)(previous)) {\n                embeddedUseCMap = previous.name;\n              }\n\n              break;\n\n            case "begincodespacerange":\n              parseCodespaceRange(cMap, lexer);\n              break;\n\n            case "beginbfchar":\n              parseBfChar(cMap, lexer);\n              break;\n\n            case "begincidchar":\n              parseCidChar(cMap, lexer);\n              break;\n\n            case "beginbfrange":\n              parseBfRange(cMap, lexer);\n              break;\n\n            case "begincidrange":\n              parseCidRange(cMap, lexer);\n              break;\n          }\n        }\n      } catch (ex) {\n        if (ex instanceof _core_utils.MissingDataException) {\n          throw ex;\n        }\n\n        (0, _util.warn)("Invalid cMap data: " + ex);\n        continue;\n      }\n    }\n\n    if (!useCMap && embeddedUseCMap) {\n      useCMap = embeddedUseCMap;\n    }\n\n    if (useCMap) {\n      return extendCMap(cMap, fetchBuiltInCMap, useCMap);\n    }\n\n    return Promise.resolve(cMap);\n  }\n\n  function extendCMap(cMap, fetchBuiltInCMap, useCMap) {\n    return createBuiltInCMap(useCMap, fetchBuiltInCMap).then(function (newCMap) {\n      cMap.useCMap = newCMap;\n\n      if (cMap.numCodespaceRanges === 0) {\n        var useCodespaceRanges = cMap.useCMap.codespaceRanges;\n\n        for (var i = 0; i < useCodespaceRanges.length; i++) {\n          cMap.codespaceRanges[i] = useCodespaceRanges[i].slice();\n        }\n\n        cMap.numCodespaceRanges = cMap.useCMap.numCodespaceRanges;\n      }\n\n      cMap.useCMap.forEach(function (key, value) {\n        if (!cMap.contains(key)) {\n          cMap.mapOne(key, cMap.useCMap.lookup(key));\n        }\n      });\n      return cMap;\n    });\n  }\n\n  function createBuiltInCMap(name, fetchBuiltInCMap) {\n    if (name === "Identity-H") {\n      return Promise.resolve(new IdentityCMap(false, 2));\n    } else if (name === "Identity-V") {\n      return Promise.resolve(new IdentityCMap(true, 2));\n    }\n\n    if (!BUILT_IN_CMAPS.includes(name)) {\n      return Promise.reject(new Error("Unknown CMap name: " + name));\n    }\n\n    if (!fetchBuiltInCMap) {\n      return Promise.reject(new Error("Built-in CMap parameters are not provided."));\n    }\n\n    return fetchBuiltInCMap(name).then(function (data) {\n      var cMapData = data.cMapData,\n          compressionType = data.compressionType;\n      var cMap = new CMap(true);\n\n      if (compressionType === _util.CMapCompressionType.BINARY) {\n        return new BinaryCMapReader().process(cMapData, cMap, function (useCMap) {\n          return extendCMap(cMap, fetchBuiltInCMap, useCMap);\n        });\n      }\n\n      if (compressionType === _util.CMapCompressionType.NONE) {\n        var lexer = new _parser.Lexer(new _stream.Stream(cMapData));\n        return parseCMap(cMap, lexer, fetchBuiltInCMap, null);\n      }\n\n      return Promise.reject(new Error("TODO: Only BINARY/NONE CMap compression is currently supported."));\n    });\n  }\n\n  return {\n    async create(params) {\n      var encoding = params.encoding;\n      var fetchBuiltInCMap = params.fetchBuiltInCMap;\n      var useCMap = params.useCMap;\n\n      if ((0, _primitives.isName)(encoding)) {\n        return createBuiltInCMap(encoding.name, fetchBuiltInCMap);\n      } else if ((0, _primitives.isStream)(encoding)) {\n        var cMap = new CMap();\n        var lexer = new _parser.Lexer(encoding);\n        return parseCMap(cMap, lexer, fetchBuiltInCMap, useCMap).then(function (parsedCMap) {\n          if (parsedCMap.isIdentityCMap) {\n            return createBuiltInCMap(parsedCMap.name, fetchBuiltInCMap);\n          }\n\n          return parsedCMap;\n        });\n      }\n\n      throw new Error("Encoding required.");\n    }\n\n  };\n}();\n\nexports.CMapFactory = CMapFactory;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/cmap.js\n')},"./node_modules/pdfjs-dist/lib/core/colorspace.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.ColorSpace = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _primitives = __webpack_require__(/*! ./primitives.js */ "./node_modules/pdfjs-dist/lib/core/primitives.js");\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nfunction resizeRgbImage(src, dest, w1, h1, w2, h2, alpha01) {\n  const COMPONENTS = 3;\n  alpha01 = alpha01 !== 1 ? 0 : alpha01;\n  const xRatio = w1 / w2;\n  const yRatio = h1 / h2;\n  let newIndex = 0,\n      oldIndex;\n  const xScaled = new Uint16Array(w2);\n  const w1Scanline = w1 * COMPONENTS;\n\n  for (let i = 0; i < w2; i++) {\n    xScaled[i] = Math.floor(i * xRatio) * COMPONENTS;\n  }\n\n  for (let i = 0; i < h2; i++) {\n    const py = Math.floor(i * yRatio) * w1Scanline;\n\n    for (let j = 0; j < w2; j++) {\n      oldIndex = py + xScaled[j];\n      dest[newIndex++] = src[oldIndex++];\n      dest[newIndex++] = src[oldIndex++];\n      dest[newIndex++] = src[oldIndex++];\n      newIndex += alpha01;\n    }\n  }\n}\n\nclass ColorSpace {\n  constructor(name, numComps) {\n    if (this.constructor === ColorSpace) {\n      (0, _util.unreachable)("Cannot initialize ColorSpace.");\n    }\n\n    this.name = name;\n    this.numComps = numComps;\n  }\n\n  getRgb(src, srcOffset) {\n    const rgb = new Uint8ClampedArray(3);\n    this.getRgbItem(src, srcOffset, rgb, 0);\n    return rgb;\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    (0, _util.unreachable)("Should not call ColorSpace.getRgbItem");\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    (0, _util.unreachable)("Should not call ColorSpace.getRgbBuffer");\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    (0, _util.unreachable)("Should not call ColorSpace.getOutputLength");\n  }\n\n  isPassthrough(bits) {\n    return false;\n  }\n\n  isDefaultDecode(decodeMap, bpc) {\n    return ColorSpace.isDefaultDecode(decodeMap, this.numComps);\n  }\n\n  fillRgb(dest, originalWidth, originalHeight, width, height, actualHeight, bpc, comps, alpha01) {\n    const count = originalWidth * originalHeight;\n    let rgbBuf = null;\n    const numComponentColors = 1 << bpc;\n    const needsResizing = originalHeight !== height || originalWidth !== width;\n\n    if (this.isPassthrough(bpc)) {\n      rgbBuf = comps;\n    } else if (this.numComps === 1 && count > numComponentColors && this.name !== "DeviceGray" && this.name !== "DeviceRGB") {\n      const allColors = bpc <= 8 ? new Uint8Array(numComponentColors) : new Uint16Array(numComponentColors);\n\n      for (let i = 0; i < numComponentColors; i++) {\n        allColors[i] = i;\n      }\n\n      const colorMap = new Uint8ClampedArray(numComponentColors * 3);\n      this.getRgbBuffer(allColors, 0, numComponentColors, colorMap, 0, bpc, 0);\n\n      if (!needsResizing) {\n        let destPos = 0;\n\n        for (let i = 0; i < count; ++i) {\n          const key = comps[i] * 3;\n          dest[destPos++] = colorMap[key];\n          dest[destPos++] = colorMap[key + 1];\n          dest[destPos++] = colorMap[key + 2];\n          destPos += alpha01;\n        }\n      } else {\n        rgbBuf = new Uint8Array(count * 3);\n        let rgbPos = 0;\n\n        for (let i = 0; i < count; ++i) {\n          const key = comps[i] * 3;\n          rgbBuf[rgbPos++] = colorMap[key];\n          rgbBuf[rgbPos++] = colorMap[key + 1];\n          rgbBuf[rgbPos++] = colorMap[key + 2];\n        }\n      }\n    } else {\n      if (!needsResizing) {\n        this.getRgbBuffer(comps, 0, width * actualHeight, dest, 0, bpc, alpha01);\n      } else {\n        rgbBuf = new Uint8ClampedArray(count * 3);\n        this.getRgbBuffer(comps, 0, count, rgbBuf, 0, bpc, 0);\n      }\n    }\n\n    if (rgbBuf) {\n      if (needsResizing) {\n        resizeRgbImage(rgbBuf, dest, originalWidth, originalHeight, width, height, alpha01);\n      } else {\n        let destPos = 0,\n            rgbPos = 0;\n\n        for (let i = 0, ii = width * actualHeight; i < ii; i++) {\n          dest[destPos++] = rgbBuf[rgbPos++];\n          dest[destPos++] = rgbBuf[rgbPos++];\n          dest[destPos++] = rgbBuf[rgbPos++];\n          destPos += alpha01;\n        }\n      }\n    }\n  }\n\n  get usesZeroToOneRange() {\n    return (0, _util.shadow)(this, "usesZeroToOneRange", true);\n  }\n\n  static _cache(cacheKey, xref, localColorSpaceCache, parsedColorSpace) {\n    if (!localColorSpaceCache) {\n      throw new Error(\'ColorSpace._cache - expected "localColorSpaceCache" argument.\');\n    }\n\n    if (!parsedColorSpace) {\n      throw new Error(\'ColorSpace._cache - expected "parsedColorSpace" argument.\');\n    }\n\n    let csName, csRef;\n\n    if (cacheKey instanceof _primitives.Ref) {\n      csRef = cacheKey;\n      cacheKey = xref.fetch(cacheKey);\n    }\n\n    if (cacheKey instanceof _primitives.Name) {\n      csName = cacheKey.name;\n    }\n\n    if (csName || csRef) {\n      localColorSpaceCache.set(csName, csRef, parsedColorSpace);\n    }\n  }\n\n  static getCached(cacheKey, xref, localColorSpaceCache) {\n    if (!localColorSpaceCache) {\n      throw new Error(\'ColorSpace.getCached - expected "localColorSpaceCache" argument.\');\n    }\n\n    if (cacheKey instanceof _primitives.Ref) {\n      const localColorSpace = localColorSpaceCache.getByRef(cacheKey);\n\n      if (localColorSpace) {\n        return localColorSpace;\n      }\n\n      try {\n        cacheKey = xref.fetch(cacheKey);\n      } catch (ex) {\n        if (ex instanceof _core_utils.MissingDataException) {\n          throw ex;\n        }\n      }\n    }\n\n    if (cacheKey instanceof _primitives.Name) {\n      const localColorSpace = localColorSpaceCache.getByName(cacheKey.name);\n\n      if (localColorSpace) {\n        return localColorSpace;\n      }\n    }\n\n    return null;\n  }\n\n  static async parseAsync({\n    cs,\n    xref,\n    resources = null,\n    pdfFunctionFactory,\n    localColorSpaceCache\n  }) {\n    const parsedColorSpace = this._parse(cs, xref, resources, pdfFunctionFactory);\n\n    this._cache(cs, xref, localColorSpaceCache, parsedColorSpace);\n\n    return parsedColorSpace;\n  }\n\n  static parse({\n    cs,\n    xref,\n    resources = null,\n    pdfFunctionFactory,\n    localColorSpaceCache\n  }) {\n    const cachedColorSpace = this.getCached(cs, xref, localColorSpaceCache);\n\n    if (cachedColorSpace) {\n      return cachedColorSpace;\n    }\n\n    const parsedColorSpace = this._parse(cs, xref, resources, pdfFunctionFactory);\n\n    this._cache(cs, xref, localColorSpaceCache, parsedColorSpace);\n\n    return parsedColorSpace;\n  }\n\n  static _parse(cs, xref, resources = null, pdfFunctionFactory) {\n    cs = xref.fetchIfRef(cs);\n\n    if ((0, _primitives.isName)(cs)) {\n      switch (cs.name) {\n        case "DeviceGray":\n        case "G":\n          return this.singletons.gray;\n\n        case "DeviceRGB":\n        case "RGB":\n          return this.singletons.rgb;\n\n        case "DeviceCMYK":\n        case "CMYK":\n          return this.singletons.cmyk;\n\n        case "Pattern":\n          return new PatternCS(null);\n\n        default:\n          if ((0, _primitives.isDict)(resources)) {\n            const colorSpaces = resources.get("ColorSpace");\n\n            if ((0, _primitives.isDict)(colorSpaces)) {\n              const resourcesCS = colorSpaces.get(cs.name);\n\n              if (resourcesCS) {\n                if ((0, _primitives.isName)(resourcesCS)) {\n                  return this._parse(resourcesCS, xref, resources, pdfFunctionFactory);\n                }\n\n                cs = resourcesCS;\n                break;\n              }\n            }\n          }\n\n          throw new _util.FormatError(`Unrecognized ColorSpace: ${cs.name}`);\n      }\n    }\n\n    if (Array.isArray(cs)) {\n      const mode = xref.fetchIfRef(cs[0]).name;\n      let params, numComps, baseCS, whitePoint, blackPoint, gamma;\n\n      switch (mode) {\n        case "DeviceGray":\n        case "G":\n          return this.singletons.gray;\n\n        case "DeviceRGB":\n        case "RGB":\n          return this.singletons.rgb;\n\n        case "DeviceCMYK":\n        case "CMYK":\n          return this.singletons.cmyk;\n\n        case "CalGray":\n          params = xref.fetchIfRef(cs[1]);\n          whitePoint = params.getArray("WhitePoint");\n          blackPoint = params.getArray("BlackPoint");\n          gamma = params.get("Gamma");\n          return new CalGrayCS(whitePoint, blackPoint, gamma);\n\n        case "CalRGB":\n          params = xref.fetchIfRef(cs[1]);\n          whitePoint = params.getArray("WhitePoint");\n          blackPoint = params.getArray("BlackPoint");\n          gamma = params.getArray("Gamma");\n          const matrix = params.getArray("Matrix");\n          return new CalRGBCS(whitePoint, blackPoint, gamma, matrix);\n\n        case "ICCBased":\n          const stream = xref.fetchIfRef(cs[1]);\n          const dict = stream.dict;\n          numComps = dict.get("N");\n          const alt = dict.get("Alternate");\n\n          if (alt) {\n            const altCS = this._parse(alt, xref, resources, pdfFunctionFactory);\n\n            if (altCS.numComps === numComps) {\n              return altCS;\n            }\n\n            (0, _util.warn)("ICCBased color space: Ignoring incorrect /Alternate entry.");\n          }\n\n          if (numComps === 1) {\n            return this.singletons.gray;\n          } else if (numComps === 3) {\n            return this.singletons.rgb;\n          } else if (numComps === 4) {\n            return this.singletons.cmyk;\n          }\n\n          break;\n\n        case "Pattern":\n          baseCS = cs[1] || null;\n\n          if (baseCS) {\n            baseCS = this._parse(baseCS, xref, resources, pdfFunctionFactory);\n          }\n\n          return new PatternCS(baseCS);\n\n        case "Indexed":\n        case "I":\n          baseCS = this._parse(cs[1], xref, resources, pdfFunctionFactory);\n          const hiVal = xref.fetchIfRef(cs[2]) + 1;\n          const lookup = xref.fetchIfRef(cs[3]);\n          return new IndexedCS(baseCS, hiVal, lookup);\n\n        case "Separation":\n        case "DeviceN":\n          const name = xref.fetchIfRef(cs[1]);\n          numComps = Array.isArray(name) ? name.length : 1;\n          baseCS = this._parse(cs[2], xref, resources, pdfFunctionFactory);\n          const tintFn = pdfFunctionFactory.create(cs[3]);\n          return new AlternateCS(numComps, baseCS, tintFn);\n\n        case "Lab":\n          params = xref.fetchIfRef(cs[1]);\n          whitePoint = params.getArray("WhitePoint");\n          blackPoint = params.getArray("BlackPoint");\n          const range = params.getArray("Range");\n          return new LabCS(whitePoint, blackPoint, range);\n\n        default:\n          throw new _util.FormatError(`Unimplemented ColorSpace object: ${mode}`);\n      }\n    }\n\n    throw new _util.FormatError(`Unrecognized ColorSpace object: ${cs}`);\n  }\n\n  static isDefaultDecode(decode, numComps) {\n    if (!Array.isArray(decode)) {\n      return true;\n    }\n\n    if (numComps * 2 !== decode.length) {\n      (0, _util.warn)("The decode map is not the correct length");\n      return true;\n    }\n\n    for (let i = 0, ii = decode.length; i < ii; i += 2) {\n      if (decode[i] !== 0 || decode[i + 1] !== 1) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  static get singletons() {\n    return (0, _util.shadow)(this, "singletons", {\n      get gray() {\n        return (0, _util.shadow)(this, "gray", new DeviceGrayCS());\n      },\n\n      get rgb() {\n        return (0, _util.shadow)(this, "rgb", new DeviceRgbCS());\n      },\n\n      get cmyk() {\n        return (0, _util.shadow)(this, "cmyk", new DeviceCmykCS());\n      }\n\n    });\n  }\n\n}\n\nexports.ColorSpace = ColorSpace;\n\nclass AlternateCS extends ColorSpace {\n  constructor(numComps, base, tintFn) {\n    super("Alternate", numComps);\n    this.base = base;\n    this.tintFn = tintFn;\n    this.tmpBuf = new Float32Array(base.numComps);\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    const tmpBuf = this.tmpBuf;\n    this.tintFn(src, srcOffset, tmpBuf, 0);\n    this.base.getRgbItem(tmpBuf, 0, dest, destOffset);\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    const tintFn = this.tintFn;\n    const base = this.base;\n    const scale = 1 / ((1 << bits) - 1);\n    const baseNumComps = base.numComps;\n    const usesZeroToOneRange = base.usesZeroToOneRange;\n    const isPassthrough = (base.isPassthrough(8) || !usesZeroToOneRange) && alpha01 === 0;\n    let pos = isPassthrough ? destOffset : 0;\n    const baseBuf = isPassthrough ? dest : new Uint8ClampedArray(baseNumComps * count);\n    const numComps = this.numComps;\n    const scaled = new Float32Array(numComps);\n    const tinted = new Float32Array(baseNumComps);\n    let i, j;\n\n    for (i = 0; i < count; i++) {\n      for (j = 0; j < numComps; j++) {\n        scaled[j] = src[srcOffset++] * scale;\n      }\n\n      tintFn(scaled, 0, tinted, 0);\n\n      if (usesZeroToOneRange) {\n        for (j = 0; j < baseNumComps; j++) {\n          baseBuf[pos++] = tinted[j] * 255;\n        }\n      } else {\n        base.getRgbItem(tinted, 0, baseBuf, pos);\n        pos += baseNumComps;\n      }\n    }\n\n    if (!isPassthrough) {\n      base.getRgbBuffer(baseBuf, 0, count, dest, destOffset, 8, alpha01);\n    }\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    return this.base.getOutputLength(inputLength * this.base.numComps / this.numComps, alpha01);\n  }\n\n}\n\nclass PatternCS extends ColorSpace {\n  constructor(baseCS) {\n    super("Pattern", null);\n    this.base = baseCS;\n  }\n\n  isDefaultDecode(decodeMap, bpc) {\n    (0, _util.unreachable)("Should not call PatternCS.isDefaultDecode");\n  }\n\n}\n\nclass IndexedCS extends ColorSpace {\n  constructor(base, highVal, lookup) {\n    super("Indexed", 1);\n    this.base = base;\n    this.highVal = highVal;\n    const length = base.numComps * highVal;\n    this.lookup = new Uint8Array(length);\n\n    if ((0, _primitives.isStream)(lookup)) {\n      const bytes = lookup.getBytes(length);\n      this.lookup.set(bytes);\n    } else if (typeof lookup === "string") {\n      for (let i = 0; i < length; ++i) {\n        this.lookup[i] = lookup.charCodeAt(i) & 0xff;\n      }\n    } else {\n      throw new _util.FormatError(`IndexedCS - unrecognized lookup table: ${lookup}`);\n    }\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    const numComps = this.base.numComps;\n    const start = src[srcOffset] * numComps;\n    this.base.getRgbBuffer(this.lookup, start, 1, dest, destOffset, 8, 0);\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    const base = this.base;\n    const numComps = base.numComps;\n    const outputDelta = base.getOutputLength(numComps, alpha01);\n    const lookup = this.lookup;\n\n    for (let i = 0; i < count; ++i) {\n      const lookupPos = src[srcOffset++] * numComps;\n      base.getRgbBuffer(lookup, lookupPos, 1, dest, destOffset, 8, alpha01);\n      destOffset += outputDelta;\n    }\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    return this.base.getOutputLength(inputLength * this.base.numComps, alpha01);\n  }\n\n  isDefaultDecode(decodeMap, bpc) {\n    if (!Array.isArray(decodeMap)) {\n      return true;\n    }\n\n    if (decodeMap.length !== 2) {\n      (0, _util.warn)("Decode map length is not correct");\n      return true;\n    }\n\n    if (!Number.isInteger(bpc) || bpc < 1) {\n      (0, _util.warn)("Bits per component is not correct");\n      return true;\n    }\n\n    return decodeMap[0] === 0 && decodeMap[1] === (1 << bpc) - 1;\n  }\n\n}\n\nclass DeviceGrayCS extends ColorSpace {\n  constructor() {\n    super("DeviceGray", 1);\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    const c = src[srcOffset] * 255;\n    dest[destOffset] = dest[destOffset + 1] = dest[destOffset + 2] = c;\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    const scale = 255 / ((1 << bits) - 1);\n    let j = srcOffset,\n        q = destOffset;\n\n    for (let i = 0; i < count; ++i) {\n      const c = scale * src[j++];\n      dest[q++] = c;\n      dest[q++] = c;\n      dest[q++] = c;\n      q += alpha01;\n    }\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    return inputLength * (3 + alpha01);\n  }\n\n}\n\nclass DeviceRgbCS extends ColorSpace {\n  constructor() {\n    super("DeviceRGB", 3);\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    dest[destOffset] = src[srcOffset] * 255;\n    dest[destOffset + 1] = src[srcOffset + 1] * 255;\n    dest[destOffset + 2] = src[srcOffset + 2] * 255;\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    if (bits === 8 && alpha01 === 0) {\n      dest.set(src.subarray(srcOffset, srcOffset + count * 3), destOffset);\n      return;\n    }\n\n    const scale = 255 / ((1 << bits) - 1);\n    let j = srcOffset,\n        q = destOffset;\n\n    for (let i = 0; i < count; ++i) {\n      dest[q++] = scale * src[j++];\n      dest[q++] = scale * src[j++];\n      dest[q++] = scale * src[j++];\n      q += alpha01;\n    }\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    return inputLength * (3 + alpha01) / 3 | 0;\n  }\n\n  isPassthrough(bits) {\n    return bits === 8;\n  }\n\n}\n\nconst DeviceCmykCS = function DeviceCmykCSClosure() {\n  function convertToRgb(src, srcOffset, srcScale, dest, destOffset) {\n    const c = src[srcOffset] * srcScale;\n    const m = src[srcOffset + 1] * srcScale;\n    const y = src[srcOffset + 2] * srcScale;\n    const k = src[srcOffset + 3] * srcScale;\n    dest[destOffset] = 255 + c * (-4.387332384609988 * c + 54.48615194189176 * m + 18.82290502165302 * y + 212.25662451639585 * k + -285.2331026137004) + m * (1.7149763477362134 * m - 5.6096736904047315 * y + -17.873870861415444 * k - 5.497006427196366) + y * (-2.5217340131683033 * y - 21.248923337353073 * k + 17.5119270841813) + k * (-21.86122147463605 * k - 189.48180835922747);\n    dest[destOffset + 1] = 255 + c * (8.841041422036149 * c + 60.118027045597366 * m + 6.871425592049007 * y + 31.159100130055922 * k + -79.2970844816548) + m * (-15.310361306967817 * m + 17.575251261109482 * y + 131.35250912493976 * k - 190.9453302588951) + y * (4.444339102852739 * y + 9.8632861493405 * k - 24.86741582555878) + k * (-20.737325471181034 * k - 187.80453709719578);\n    dest[destOffset + 2] = 255 + c * (0.8842522430003296 * c + 8.078677503112928 * m + 30.89978309703729 * y - 0.23883238689178934 * k + -14.183576799673286) + m * (10.49593273432072 * m + 63.02378494754052 * y + 50.606957656360734 * k - 112.23884253719248) + y * (0.03296041114873217 * y + 115.60384449646641 * k + -193.58209356861505) + k * (-22.33816807309886 * k - 180.12613974708367);\n  }\n\n  class DeviceCmykCS extends ColorSpace {\n    constructor() {\n      super("DeviceCMYK", 4);\n    }\n\n    getRgbItem(src, srcOffset, dest, destOffset) {\n      convertToRgb(src, srcOffset, 1, dest, destOffset);\n    }\n\n    getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n      const scale = 1 / ((1 << bits) - 1);\n\n      for (let i = 0; i < count; i++) {\n        convertToRgb(src, srcOffset, scale, dest, destOffset);\n        srcOffset += 4;\n        destOffset += 3 + alpha01;\n      }\n    }\n\n    getOutputLength(inputLength, alpha01) {\n      return inputLength / 4 * (3 + alpha01) | 0;\n    }\n\n  }\n\n  return DeviceCmykCS;\n}();\n\nconst CalGrayCS = function CalGrayCSClosure() {\n  function convertToRgb(cs, src, srcOffset, dest, destOffset, scale) {\n    const A = src[srcOffset] * scale;\n    const AG = A ** cs.G;\n    const L = cs.YW * AG;\n    const val = Math.max(295.8 * L ** 0.333333333333333333 - 40.8, 0);\n    dest[destOffset] = val;\n    dest[destOffset + 1] = val;\n    dest[destOffset + 2] = val;\n  }\n\n  class CalGrayCS extends ColorSpace {\n    constructor(whitePoint, blackPoint, gamma) {\n      super("CalGray", 1);\n\n      if (!whitePoint) {\n        throw new _util.FormatError("WhitePoint missing - required for color space CalGray");\n      }\n\n      blackPoint = blackPoint || [0, 0, 0];\n      gamma = gamma || 1;\n      this.XW = whitePoint[0];\n      this.YW = whitePoint[1];\n      this.ZW = whitePoint[2];\n      this.XB = blackPoint[0];\n      this.YB = blackPoint[1];\n      this.ZB = blackPoint[2];\n      this.G = gamma;\n\n      if (this.XW < 0 || this.ZW < 0 || this.YW !== 1) {\n        throw new _util.FormatError(`Invalid WhitePoint components for ${this.name}` + ", no fallback available");\n      }\n\n      if (this.XB < 0 || this.YB < 0 || this.ZB < 0) {\n        (0, _util.info)(`Invalid BlackPoint for ${this.name}, falling back to default.`);\n        this.XB = this.YB = this.ZB = 0;\n      }\n\n      if (this.XB !== 0 || this.YB !== 0 || this.ZB !== 0) {\n        (0, _util.warn)(`${this.name}, BlackPoint: XB: ${this.XB}, YB: ${this.YB}, ` + `ZB: ${this.ZB}, only default values are supported.`);\n      }\n\n      if (this.G < 1) {\n        (0, _util.info)(`Invalid Gamma: ${this.G} for ${this.name}, ` + "falling back to default.");\n        this.G = 1;\n      }\n    }\n\n    getRgbItem(src, srcOffset, dest, destOffset) {\n      convertToRgb(this, src, srcOffset, dest, destOffset, 1);\n    }\n\n    getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n      const scale = 1 / ((1 << bits) - 1);\n\n      for (let i = 0; i < count; ++i) {\n        convertToRgb(this, src, srcOffset, dest, destOffset, scale);\n        srcOffset += 1;\n        destOffset += 3 + alpha01;\n      }\n    }\n\n    getOutputLength(inputLength, alpha01) {\n      return inputLength * (3 + alpha01);\n    }\n\n  }\n\n  return CalGrayCS;\n}();\n\nconst CalRGBCS = function CalRGBCSClosure() {\n  const BRADFORD_SCALE_MATRIX = new Float32Array([0.8951, 0.2664, -0.1614, -0.7502, 1.7135, 0.0367, 0.0389, -0.0685, 1.0296]);\n  const BRADFORD_SCALE_INVERSE_MATRIX = new Float32Array([0.9869929, -0.1470543, 0.1599627, 0.4323053, 0.5183603, 0.0492912, -0.0085287, 0.0400428, 0.9684867]);\n  const SRGB_D65_XYZ_TO_RGB_MATRIX = new Float32Array([3.2404542, -1.5371385, -0.4985314, -0.9692660, 1.8760108, 0.0415560, 0.0556434, -0.2040259, 1.0572252]);\n  const FLAT_WHITEPOINT_MATRIX = new Float32Array([1, 1, 1]);\n  const tempNormalizeMatrix = new Float32Array(3);\n  const tempConvertMatrix1 = new Float32Array(3);\n  const tempConvertMatrix2 = new Float32Array(3);\n  const DECODE_L_CONSTANT = ((8 + 16) / 116) ** 3 / 8.0;\n\n  function matrixProduct(a, b, result) {\n    result[0] = a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n    result[1] = a[3] * b[0] + a[4] * b[1] + a[5] * b[2];\n    result[2] = a[6] * b[0] + a[7] * b[1] + a[8] * b[2];\n  }\n\n  function convertToFlat(sourceWhitePoint, LMS, result) {\n    result[0] = LMS[0] * 1 / sourceWhitePoint[0];\n    result[1] = LMS[1] * 1 / sourceWhitePoint[1];\n    result[2] = LMS[2] * 1 / sourceWhitePoint[2];\n  }\n\n  function convertToD65(sourceWhitePoint, LMS, result) {\n    const D65X = 0.95047;\n    const D65Y = 1;\n    const D65Z = 1.08883;\n    result[0] = LMS[0] * D65X / sourceWhitePoint[0];\n    result[1] = LMS[1] * D65Y / sourceWhitePoint[1];\n    result[2] = LMS[2] * D65Z / sourceWhitePoint[2];\n  }\n\n  function sRGBTransferFunction(color) {\n    if (color <= 0.0031308) {\n      return adjustToRange(0, 1, 12.92 * color);\n    }\n\n    if (color >= 0.99554525) {\n      return 1;\n    }\n\n    return adjustToRange(0, 1, (1 + 0.055) * color ** (1 / 2.4) - 0.055);\n  }\n\n  function adjustToRange(min, max, value) {\n    return Math.max(min, Math.min(max, value));\n  }\n\n  function decodeL(L) {\n    if (L < 0) {\n      return -decodeL(-L);\n    }\n\n    if (L > 8.0) {\n      return ((L + 16) / 116) ** 3;\n    }\n\n    return L * DECODE_L_CONSTANT;\n  }\n\n  function compensateBlackPoint(sourceBlackPoint, XYZ_Flat, result) {\n    if (sourceBlackPoint[0] === 0 && sourceBlackPoint[1] === 0 && sourceBlackPoint[2] === 0) {\n      result[0] = XYZ_Flat[0];\n      result[1] = XYZ_Flat[1];\n      result[2] = XYZ_Flat[2];\n      return;\n    }\n\n    const zeroDecodeL = decodeL(0);\n    const X_DST = zeroDecodeL;\n    const X_SRC = decodeL(sourceBlackPoint[0]);\n    const Y_DST = zeroDecodeL;\n    const Y_SRC = decodeL(sourceBlackPoint[1]);\n    const Z_DST = zeroDecodeL;\n    const Z_SRC = decodeL(sourceBlackPoint[2]);\n    const X_Scale = (1 - X_DST) / (1 - X_SRC);\n    const X_Offset = 1 - X_Scale;\n    const Y_Scale = (1 - Y_DST) / (1 - Y_SRC);\n    const Y_Offset = 1 - Y_Scale;\n    const Z_Scale = (1 - Z_DST) / (1 - Z_SRC);\n    const Z_Offset = 1 - Z_Scale;\n    result[0] = XYZ_Flat[0] * X_Scale + X_Offset;\n    result[1] = XYZ_Flat[1] * Y_Scale + Y_Offset;\n    result[2] = XYZ_Flat[2] * Z_Scale + Z_Offset;\n  }\n\n  function normalizeWhitePointToFlat(sourceWhitePoint, XYZ_In, result) {\n    if (sourceWhitePoint[0] === 1 && sourceWhitePoint[2] === 1) {\n      result[0] = XYZ_In[0];\n      result[1] = XYZ_In[1];\n      result[2] = XYZ_In[2];\n      return;\n    }\n\n    const LMS = result;\n    matrixProduct(BRADFORD_SCALE_MATRIX, XYZ_In, LMS);\n    const LMS_Flat = tempNormalizeMatrix;\n    convertToFlat(sourceWhitePoint, LMS, LMS_Flat);\n    matrixProduct(BRADFORD_SCALE_INVERSE_MATRIX, LMS_Flat, result);\n  }\n\n  function normalizeWhitePointToD65(sourceWhitePoint, XYZ_In, result) {\n    const LMS = result;\n    matrixProduct(BRADFORD_SCALE_MATRIX, XYZ_In, LMS);\n    const LMS_D65 = tempNormalizeMatrix;\n    convertToD65(sourceWhitePoint, LMS, LMS_D65);\n    matrixProduct(BRADFORD_SCALE_INVERSE_MATRIX, LMS_D65, result);\n  }\n\n  function convertToRgb(cs, src, srcOffset, dest, destOffset, scale) {\n    const A = adjustToRange(0, 1, src[srcOffset] * scale);\n    const B = adjustToRange(0, 1, src[srcOffset + 1] * scale);\n    const C = adjustToRange(0, 1, src[srcOffset + 2] * scale);\n    const AGR = A === 1 ? 1 : A ** cs.GR;\n    const BGG = B === 1 ? 1 : B ** cs.GG;\n    const CGB = C === 1 ? 1 : C ** cs.GB;\n    const X = cs.MXA * AGR + cs.MXB * BGG + cs.MXC * CGB;\n    const Y = cs.MYA * AGR + cs.MYB * BGG + cs.MYC * CGB;\n    const Z = cs.MZA * AGR + cs.MZB * BGG + cs.MZC * CGB;\n    const XYZ = tempConvertMatrix1;\n    XYZ[0] = X;\n    XYZ[1] = Y;\n    XYZ[2] = Z;\n    const XYZ_Flat = tempConvertMatrix2;\n    normalizeWhitePointToFlat(cs.whitePoint, XYZ, XYZ_Flat);\n    const XYZ_Black = tempConvertMatrix1;\n    compensateBlackPoint(cs.blackPoint, XYZ_Flat, XYZ_Black);\n    const XYZ_D65 = tempConvertMatrix2;\n    normalizeWhitePointToD65(FLAT_WHITEPOINT_MATRIX, XYZ_Black, XYZ_D65);\n    const SRGB = tempConvertMatrix1;\n    matrixProduct(SRGB_D65_XYZ_TO_RGB_MATRIX, XYZ_D65, SRGB);\n    dest[destOffset] = sRGBTransferFunction(SRGB[0]) * 255;\n    dest[destOffset + 1] = sRGBTransferFunction(SRGB[1]) * 255;\n    dest[destOffset + 2] = sRGBTransferFunction(SRGB[2]) * 255;\n  }\n\n  class CalRGBCS extends ColorSpace {\n    constructor(whitePoint, blackPoint, gamma, matrix) {\n      super("CalRGB", 3);\n\n      if (!whitePoint) {\n        throw new _util.FormatError("WhitePoint missing - required for color space CalRGB");\n      }\n\n      blackPoint = blackPoint || new Float32Array(3);\n      gamma = gamma || new Float32Array([1, 1, 1]);\n      matrix = matrix || new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n      const XW = whitePoint[0];\n      const YW = whitePoint[1];\n      const ZW = whitePoint[2];\n      this.whitePoint = whitePoint;\n      const XB = blackPoint[0];\n      const YB = blackPoint[1];\n      const ZB = blackPoint[2];\n      this.blackPoint = blackPoint;\n      this.GR = gamma[0];\n      this.GG = gamma[1];\n      this.GB = gamma[2];\n      this.MXA = matrix[0];\n      this.MYA = matrix[1];\n      this.MZA = matrix[2];\n      this.MXB = matrix[3];\n      this.MYB = matrix[4];\n      this.MZB = matrix[5];\n      this.MXC = matrix[6];\n      this.MYC = matrix[7];\n      this.MZC = matrix[8];\n\n      if (XW < 0 || ZW < 0 || YW !== 1) {\n        throw new _util.FormatError(`Invalid WhitePoint components for ${this.name}` + ", no fallback available");\n      }\n\n      if (XB < 0 || YB < 0 || ZB < 0) {\n        (0, _util.info)(`Invalid BlackPoint for ${this.name} [${XB}, ${YB}, ${ZB}], ` + "falling back to default.");\n        this.blackPoint = new Float32Array(3);\n      }\n\n      if (this.GR < 0 || this.GG < 0 || this.GB < 0) {\n        (0, _util.info)(`Invalid Gamma [${this.GR}, ${this.GG}, ${this.GB}] for ` + `${this.name}, falling back to default.`);\n        this.GR = this.GG = this.GB = 1;\n      }\n    }\n\n    getRgbItem(src, srcOffset, dest, destOffset) {\n      convertToRgb(this, src, srcOffset, dest, destOffset, 1);\n    }\n\n    getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n      const scale = 1 / ((1 << bits) - 1);\n\n      for (let i = 0; i < count; ++i) {\n        convertToRgb(this, src, srcOffset, dest, destOffset, scale);\n        srcOffset += 3;\n        destOffset += 3 + alpha01;\n      }\n    }\n\n    getOutputLength(inputLength, alpha01) {\n      return inputLength * (3 + alpha01) / 3 | 0;\n    }\n\n  }\n\n  return CalRGBCS;\n}();\n\nconst LabCS = function LabCSClosure() {\n  function fn_g(x) {\n    let result;\n\n    if (x >= 6 / 29) {\n      result = x * x * x;\n    } else {\n      result = 108 / 841 * (x - 4 / 29);\n    }\n\n    return result;\n  }\n\n  function decode(value, high1, low2, high2) {\n    return low2 + value * (high2 - low2) / high1;\n  }\n\n  function convertToRgb(cs, src, srcOffset, maxVal, dest, destOffset) {\n    let Ls = src[srcOffset];\n    let as = src[srcOffset + 1];\n    let bs = src[srcOffset + 2];\n\n    if (maxVal !== false) {\n      Ls = decode(Ls, maxVal, 0, 100);\n      as = decode(as, maxVal, cs.amin, cs.amax);\n      bs = decode(bs, maxVal, cs.bmin, cs.bmax);\n    }\n\n    if (as > cs.amax) {\n      as = cs.amax;\n    } else if (as < cs.amin) {\n      as = cs.amin;\n    }\n\n    if (bs > cs.bmax) {\n      bs = cs.bmax;\n    } else if (bs < cs.bmin) {\n      bs = cs.bmin;\n    }\n\n    const M = (Ls + 16) / 116;\n    const L = M + as / 500;\n    const N = M - bs / 200;\n    const X = cs.XW * fn_g(L);\n    const Y = cs.YW * fn_g(M);\n    const Z = cs.ZW * fn_g(N);\n    let r, g, b;\n\n    if (cs.ZW < 1) {\n      r = X * 3.1339 + Y * -1.617 + Z * -0.4906;\n      g = X * -0.9785 + Y * 1.916 + Z * 0.0333;\n      b = X * 0.072 + Y * -0.229 + Z * 1.4057;\n    } else {\n      r = X * 3.2406 + Y * -1.5372 + Z * -0.4986;\n      g = X * -0.9689 + Y * 1.8758 + Z * 0.0415;\n      b = X * 0.0557 + Y * -0.204 + Z * 1.057;\n    }\n\n    dest[destOffset] = Math.sqrt(r) * 255;\n    dest[destOffset + 1] = Math.sqrt(g) * 255;\n    dest[destOffset + 2] = Math.sqrt(b) * 255;\n  }\n\n  class LabCS extends ColorSpace {\n    constructor(whitePoint, blackPoint, range) {\n      super("Lab", 3);\n\n      if (!whitePoint) {\n        throw new _util.FormatError("WhitePoint missing - required for color space Lab");\n      }\n\n      blackPoint = blackPoint || [0, 0, 0];\n      range = range || [-100, 100, -100, 100];\n      this.XW = whitePoint[0];\n      this.YW = whitePoint[1];\n      this.ZW = whitePoint[2];\n      this.amin = range[0];\n      this.amax = range[1];\n      this.bmin = range[2];\n      this.bmax = range[3];\n      this.XB = blackPoint[0];\n      this.YB = blackPoint[1];\n      this.ZB = blackPoint[2];\n\n      if (this.XW < 0 || this.ZW < 0 || this.YW !== 1) {\n        throw new _util.FormatError("Invalid WhitePoint components, no fallback available");\n      }\n\n      if (this.XB < 0 || this.YB < 0 || this.ZB < 0) {\n        (0, _util.info)("Invalid BlackPoint, falling back to default");\n        this.XB = this.YB = this.ZB = 0;\n      }\n\n      if (this.amin > this.amax || this.bmin > this.bmax) {\n        (0, _util.info)("Invalid Range, falling back to defaults");\n        this.amin = -100;\n        this.amax = 100;\n        this.bmin = -100;\n        this.bmax = 100;\n      }\n    }\n\n    getRgbItem(src, srcOffset, dest, destOffset) {\n      convertToRgb(this, src, srcOffset, false, dest, destOffset);\n    }\n\n    getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n      const maxVal = (1 << bits) - 1;\n\n      for (let i = 0; i < count; i++) {\n        convertToRgb(this, src, srcOffset, maxVal, dest, destOffset);\n        srcOffset += 3;\n        destOffset += 3 + alpha01;\n      }\n    }\n\n    getOutputLength(inputLength, alpha01) {\n      return inputLength * (3 + alpha01) / 3 | 0;\n    }\n\n    isDefaultDecode(decodeMap, bpc) {\n      return true;\n    }\n\n    get usesZeroToOneRange() {\n      return (0, _util.shadow)(this, "usesZeroToOneRange", false);\n    }\n\n  }\n\n  return LabCS;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/colorspace.js\n')},"./node_modules/pdfjs-dist/lib/core/core_utils.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.collectActions = collectActions;\nexports.escapePDFName = escapePDFName;\nexports.getArrayLookupTableFactory = getArrayLookupTableFactory;\nexports.getInheritableProperty = getInheritableProperty;\nexports.getLookupTableFactory = getLookupTableFactory;\nexports.isWhiteSpace = isWhiteSpace;\nexports.log2 = log2;\nexports.parseXFAPath = parseXFAPath;\nexports.readInt8 = readInt8;\nexports.readUint16 = readUint16;\nexports.readUint32 = readUint32;\nexports.toRomanNumerals = toRomanNumerals;\nexports.XRefParseException = exports.XRefEntryException = exports.MissingDataException = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _primitives = __webpack_require__(/*! ./primitives.js */ "./node_modules/pdfjs-dist/lib/core/primitives.js");\n\nfunction getLookupTableFactory(initializer) {\n  let lookup;\n  return function () {\n    if (initializer) {\n      lookup = Object.create(null);\n      initializer(lookup);\n      initializer = null;\n    }\n\n    return lookup;\n  };\n}\n\nfunction getArrayLookupTableFactory(initializer) {\n  let lookup;\n  return function () {\n    if (initializer) {\n      let arr = initializer();\n      initializer = null;\n      lookup = Object.create(null);\n\n      for (let i = 0, ii = arr.length; i < ii; i += 2) {\n        lookup[arr[i]] = arr[i + 1];\n      }\n\n      arr = null;\n    }\n\n    return lookup;\n  };\n}\n\nclass MissingDataException extends _util.BaseException {\n  constructor(begin, end) {\n    super(`Missing data [${begin}, ${end})`);\n    this.begin = begin;\n    this.end = end;\n  }\n\n}\n\nexports.MissingDataException = MissingDataException;\n\nclass XRefEntryException extends _util.BaseException {}\n\nexports.XRefEntryException = XRefEntryException;\n\nclass XRefParseException extends _util.BaseException {}\n\nexports.XRefParseException = XRefParseException;\n\nfunction getInheritableProperty({\n  dict,\n  key,\n  getArray = false,\n  stopWhenFound = true\n}) {\n  const LOOP_LIMIT = 100;\n  let loopCount = 0;\n  let values;\n\n  while (dict) {\n    const value = getArray ? dict.getArray(key) : dict.get(key);\n\n    if (value !== undefined) {\n      if (stopWhenFound) {\n        return value;\n      }\n\n      if (!values) {\n        values = [];\n      }\n\n      values.push(value);\n    }\n\n    if (++loopCount > LOOP_LIMIT) {\n      (0, _util.warn)(`getInheritableProperty: maximum loop count exceeded for "${key}"`);\n      break;\n    }\n\n    dict = dict.get("Parent");\n  }\n\n  return values;\n}\n\nconst ROMAN_NUMBER_MAP = ["", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM", "", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC", "", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"];\n\nfunction toRomanNumerals(number, lowerCase = false) {\n  (0, _util.assert)(Number.isInteger(number) && number > 0, "The number should be a positive integer.");\n  const romanBuf = [];\n  let pos;\n\n  while (number >= 1000) {\n    number -= 1000;\n    romanBuf.push("M");\n  }\n\n  pos = number / 100 | 0;\n  number %= 100;\n  romanBuf.push(ROMAN_NUMBER_MAP[pos]);\n  pos = number / 10 | 0;\n  number %= 10;\n  romanBuf.push(ROMAN_NUMBER_MAP[10 + pos]);\n  romanBuf.push(ROMAN_NUMBER_MAP[20 + number]);\n  const romanStr = romanBuf.join("");\n  return lowerCase ? romanStr.toLowerCase() : romanStr;\n}\n\nfunction log2(x) {\n  if (x <= 0) {\n    return 0;\n  }\n\n  return Math.ceil(Math.log2(x));\n}\n\nfunction readInt8(data, offset) {\n  return data[offset] << 24 >> 24;\n}\n\nfunction readUint16(data, offset) {\n  return data[offset] << 8 | data[offset + 1];\n}\n\nfunction readUint32(data, offset) {\n  return (data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3]) >>> 0;\n}\n\nfunction isWhiteSpace(ch) {\n  return ch === 0x20 || ch === 0x09 || ch === 0x0d || ch === 0x0a;\n}\n\nfunction parseXFAPath(path) {\n  const positionPattern = /(.+)\\[([0-9]+)\\]$/;\n  return path.split(".").map(component => {\n    const m = component.match(positionPattern);\n\n    if (m) {\n      return {\n        name: m[1],\n        pos: parseInt(m[2], 10)\n      };\n    }\n\n    return {\n      name: component,\n      pos: 0\n    };\n  });\n}\n\nfunction escapePDFName(str) {\n  const buffer = [];\n  let start = 0;\n\n  for (let i = 0, ii = str.length; i < ii; i++) {\n    const char = str.charCodeAt(i);\n\n    if (char < 0x21 || char > 0x7e || char === 0x23 || char === 0x28 || char === 0x29 || char === 0x3c || char === 0x3e || char === 0x5b || char === 0x5d || char === 0x7b || char === 0x7d || char === 0x2f || char === 0x25) {\n      if (start < i) {\n        buffer.push(str.substring(start, i));\n      }\n\n      buffer.push(`#${char.toString(16)}`);\n      start = i + 1;\n    }\n  }\n\n  if (buffer.length === 0) {\n    return str;\n  }\n\n  if (start < str.length) {\n    buffer.push(str.substring(start, str.length));\n  }\n\n  return buffer.join("");\n}\n\nfunction _collectJS(entry, xref, list, parents) {\n  if (!entry) {\n    return;\n  }\n\n  let parent = null;\n\n  if ((0, _primitives.isRef)(entry)) {\n    if (parents.has(entry)) {\n      return;\n    }\n\n    parent = entry;\n    parents.put(parent);\n    entry = xref.fetch(entry);\n  }\n\n  if (Array.isArray(entry)) {\n    for (const element of entry) {\n      _collectJS(element, xref, list, parents);\n    }\n  } else if (entry instanceof _primitives.Dict) {\n    if ((0, _primitives.isName)(entry.get("S"), "JavaScript") && entry.has("JS")) {\n      const js = entry.get("JS");\n      let code;\n\n      if ((0, _primitives.isStream)(js)) {\n        code = (0, _util.bytesToString)(js.getBytes());\n      } else {\n        code = js;\n      }\n\n      code = (0, _util.stringToPDFString)(code);\n\n      if (code) {\n        list.push(code);\n      }\n    }\n\n    _collectJS(entry.getRaw("Next"), xref, list, parents);\n  }\n\n  if (parent) {\n    parents.remove(parent);\n  }\n}\n\nfunction collectActions(xref, dict, eventType) {\n  const actions = Object.create(null);\n\n  if (dict.has("AA")) {\n    const additionalActions = dict.get("AA");\n\n    for (const key of additionalActions.getKeys()) {\n      const action = eventType[key];\n\n      if (!action) {\n        continue;\n      }\n\n      const actionDict = additionalActions.getRaw(key);\n      const parents = new _primitives.RefSet();\n      const list = [];\n\n      _collectJS(actionDict, xref, list, parents);\n\n      if (list.length > 0) {\n        actions[action] = list;\n      }\n    }\n  }\n\n  if (dict.has("A")) {\n    const actionDict = dict.get("A");\n    const parents = new _primitives.RefSet();\n    const list = [];\n\n    _collectJS(actionDict, xref, list, parents);\n\n    if (list.length > 0) {\n      actions.Action = list;\n    }\n  }\n\n  return (0, _util.objectSize)(actions) > 0 ? actions : null;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/core_utils.js\n')},"./node_modules/pdfjs-dist/lib/core/crypto.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.PDF20 = exports.PDF17 = exports.CipherTransformFactory = exports.calculateSHA512 = exports.calculateSHA384 = exports.calculateSHA256 = exports.calculateMD5 = exports.ARCFourCipher = exports.AES256Cipher = exports.AES128Cipher = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _primitives = __webpack_require__(/*! ./primitives.js */ "./node_modules/pdfjs-dist/lib/core/primitives.js");\n\nvar _stream = __webpack_require__(/*! ./stream.js */ "./node_modules/pdfjs-dist/lib/core/stream.js");\n\nvar ARCFourCipher = function ARCFourCipherClosure() {\n  function ARCFourCipher(key) {\n    this.a = 0;\n    this.b = 0;\n    var s = new Uint8Array(256);\n    var i,\n        j = 0,\n        tmp,\n        keyLength = key.length;\n\n    for (i = 0; i < 256; ++i) {\n      s[i] = i;\n    }\n\n    for (i = 0; i < 256; ++i) {\n      tmp = s[i];\n      j = j + tmp + key[i % keyLength] & 0xff;\n      s[i] = s[j];\n      s[j] = tmp;\n    }\n\n    this.s = s;\n  }\n\n  ARCFourCipher.prototype = {\n    encryptBlock: function ARCFourCipher_encryptBlock(data) {\n      var i,\n          n = data.length,\n          tmp,\n          tmp2;\n      var a = this.a,\n          b = this.b,\n          s = this.s;\n      var output = new Uint8Array(n);\n\n      for (i = 0; i < n; ++i) {\n        a = a + 1 & 0xff;\n        tmp = s[a];\n        b = b + tmp & 0xff;\n        tmp2 = s[b];\n        s[a] = tmp2;\n        s[b] = tmp;\n        output[i] = data[i] ^ s[tmp + tmp2 & 0xff];\n      }\n\n      this.a = a;\n      this.b = b;\n      return output;\n    }\n  };\n  ARCFourCipher.prototype.decryptBlock = ARCFourCipher.prototype.encryptBlock;\n  ARCFourCipher.prototype.encrypt = ARCFourCipher.prototype.encryptBlock;\n  return ARCFourCipher;\n}();\n\nexports.ARCFourCipher = ARCFourCipher;\n\nvar calculateMD5 = function calculateMD5Closure() {\n  var r = new Uint8Array([7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]);\n  var k = new Int32Array([-680876936, -389564586, 606105819, -1044525330, -176418897, 1200080426, -1473231341, -45705983, 1770035416, -1958414417, -42063, -1990404162, 1804603682, -40341101, -1502002290, 1236535329, -165796510, -1069501632, 643717713, -373897302, -701558691, 38016083, -660478335, -405537848, 568446438, -1019803690, -187363961, 1163531501, -1444681467, -51403784, 1735328473, -1926607734, -378558, -2022574463, 1839030562, -35309556, -1530992060, 1272893353, -155497632, -1094730640, 681279174, -358537222, -722521979, 76029189, -640364487, -421815835, 530742520, -995338651, -198630844, 1126891415, -1416354905, -57434055, 1700485571, -1894986606, -1051523, -2054922799, 1873313359, -30611744, -1560198380, 1309151649, -145523070, -1120210379, 718787259, -343485551]);\n\n  function hash(data, offset, length) {\n    var h0 = 1732584193,\n        h1 = -271733879,\n        h2 = -1732584194,\n        h3 = 271733878;\n    var paddedLength = length + 72 & ~63;\n    var padded = new Uint8Array(paddedLength);\n    var i, j, n;\n\n    for (i = 0; i < length; ++i) {\n      padded[i] = data[offset++];\n    }\n\n    padded[i++] = 0x80;\n    n = paddedLength - 8;\n\n    while (i < n) {\n      padded[i++] = 0;\n    }\n\n    padded[i++] = length << 3 & 0xff;\n    padded[i++] = length >> 5 & 0xff;\n    padded[i++] = length >> 13 & 0xff;\n    padded[i++] = length >> 21 & 0xff;\n    padded[i++] = length >>> 29 & 0xff;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    var w = new Int32Array(16);\n\n    for (i = 0; i < paddedLength;) {\n      for (j = 0; j < 16; ++j, i += 4) {\n        w[j] = padded[i] | padded[i + 1] << 8 | padded[i + 2] << 16 | padded[i + 3] << 24;\n      }\n\n      var a = h0,\n          b = h1,\n          c = h2,\n          d = h3,\n          f,\n          g;\n\n      for (j = 0; j < 64; ++j) {\n        if (j < 16) {\n          f = b & c | ~b & d;\n          g = j;\n        } else if (j < 32) {\n          f = d & b | ~d & c;\n          g = 5 * j + 1 & 15;\n        } else if (j < 48) {\n          f = b ^ c ^ d;\n          g = 3 * j + 5 & 15;\n        } else {\n          f = c ^ (b | ~d);\n          g = 7 * j & 15;\n        }\n\n        var tmp = d,\n            rotateArg = a + f + k[j] + w[g] | 0,\n            rotate = r[j];\n        d = c;\n        c = b;\n        b = b + (rotateArg << rotate | rotateArg >>> 32 - rotate) | 0;\n        a = tmp;\n      }\n\n      h0 = h0 + a | 0;\n      h1 = h1 + b | 0;\n      h2 = h2 + c | 0;\n      h3 = h3 + d | 0;\n    }\n\n    return new Uint8Array([h0 & 0xFF, h0 >> 8 & 0xFF, h0 >> 16 & 0xFF, h0 >>> 24 & 0xFF, h1 & 0xFF, h1 >> 8 & 0xFF, h1 >> 16 & 0xFF, h1 >>> 24 & 0xFF, h2 & 0xFF, h2 >> 8 & 0xFF, h2 >> 16 & 0xFF, h2 >>> 24 & 0xFF, h3 & 0xFF, h3 >> 8 & 0xFF, h3 >> 16 & 0xFF, h3 >>> 24 & 0xFF]);\n  }\n\n  return hash;\n}();\n\nexports.calculateMD5 = calculateMD5;\n\nvar Word64 = function Word64Closure() {\n  function Word64(highInteger, lowInteger) {\n    this.high = highInteger | 0;\n    this.low = lowInteger | 0;\n  }\n\n  Word64.prototype = {\n    and: function Word64_and(word) {\n      this.high &= word.high;\n      this.low &= word.low;\n    },\n    xor: function Word64_xor(word) {\n      this.high ^= word.high;\n      this.low ^= word.low;\n    },\n    or: function Word64_or(word) {\n      this.high |= word.high;\n      this.low |= word.low;\n    },\n    shiftRight: function Word64_shiftRight(places) {\n      if (places >= 32) {\n        this.low = this.high >>> places - 32 | 0;\n        this.high = 0;\n      } else {\n        this.low = this.low >>> places | this.high << 32 - places;\n        this.high = this.high >>> places | 0;\n      }\n    },\n    shiftLeft: function Word64_shiftLeft(places) {\n      if (places >= 32) {\n        this.high = this.low << places - 32;\n        this.low = 0;\n      } else {\n        this.high = this.high << places | this.low >>> 32 - places;\n        this.low = this.low << places;\n      }\n    },\n    rotateRight: function Word64_rotateRight(places) {\n      var low, high;\n\n      if (places & 32) {\n        high = this.low;\n        low = this.high;\n      } else {\n        low = this.low;\n        high = this.high;\n      }\n\n      places &= 31;\n      this.low = low >>> places | high << 32 - places;\n      this.high = high >>> places | low << 32 - places;\n    },\n    not: function Word64_not() {\n      this.high = ~this.high;\n      this.low = ~this.low;\n    },\n    add: function Word64_add(word) {\n      var lowAdd = (this.low >>> 0) + (word.low >>> 0);\n      var highAdd = (this.high >>> 0) + (word.high >>> 0);\n\n      if (lowAdd > 0xffffffff) {\n        highAdd += 1;\n      }\n\n      this.low = lowAdd | 0;\n      this.high = highAdd | 0;\n    },\n    copyTo: function Word64_copyTo(bytes, offset) {\n      bytes[offset] = this.high >>> 24 & 0xff;\n      bytes[offset + 1] = this.high >> 16 & 0xff;\n      bytes[offset + 2] = this.high >> 8 & 0xff;\n      bytes[offset + 3] = this.high & 0xff;\n      bytes[offset + 4] = this.low >>> 24 & 0xff;\n      bytes[offset + 5] = this.low >> 16 & 0xff;\n      bytes[offset + 6] = this.low >> 8 & 0xff;\n      bytes[offset + 7] = this.low & 0xff;\n    },\n    assign: function Word64_assign(word) {\n      this.high = word.high;\n      this.low = word.low;\n    }\n  };\n  return Word64;\n}();\n\nvar calculateSHA256 = function calculateSHA256Closure() {\n  function rotr(x, n) {\n    return x >>> n | x << 32 - n;\n  }\n\n  function ch(x, y, z) {\n    return x & y ^ ~x & z;\n  }\n\n  function maj(x, y, z) {\n    return x & y ^ x & z ^ y & z;\n  }\n\n  function sigma(x) {\n    return rotr(x, 2) ^ rotr(x, 13) ^ rotr(x, 22);\n  }\n\n  function sigmaPrime(x) {\n    return rotr(x, 6) ^ rotr(x, 11) ^ rotr(x, 25);\n  }\n\n  function littleSigma(x) {\n    return rotr(x, 7) ^ rotr(x, 18) ^ x >>> 3;\n  }\n\n  function littleSigmaPrime(x) {\n    return rotr(x, 17) ^ rotr(x, 19) ^ x >>> 10;\n  }\n\n  var k = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\n  function hash(data, offset, length) {\n    var h0 = 0x6a09e667,\n        h1 = 0xbb67ae85,\n        h2 = 0x3c6ef372,\n        h3 = 0xa54ff53a,\n        h4 = 0x510e527f,\n        h5 = 0x9b05688c,\n        h6 = 0x1f83d9ab,\n        h7 = 0x5be0cd19;\n    var paddedLength = Math.ceil((length + 9) / 64) * 64;\n    var padded = new Uint8Array(paddedLength);\n    var i, j, n;\n\n    for (i = 0; i < length; ++i) {\n      padded[i] = data[offset++];\n    }\n\n    padded[i++] = 0x80;\n    n = paddedLength - 8;\n\n    while (i < n) {\n      padded[i++] = 0;\n    }\n\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = length >>> 29 & 0xff;\n    padded[i++] = length >> 21 & 0xff;\n    padded[i++] = length >> 13 & 0xff;\n    padded[i++] = length >> 5 & 0xff;\n    padded[i++] = length << 3 & 0xff;\n    var w = new Uint32Array(64);\n\n    for (i = 0; i < paddedLength;) {\n      for (j = 0; j < 16; ++j) {\n        w[j] = padded[i] << 24 | padded[i + 1] << 16 | padded[i + 2] << 8 | padded[i + 3];\n        i += 4;\n      }\n\n      for (j = 16; j < 64; ++j) {\n        w[j] = littleSigmaPrime(w[j - 2]) + w[j - 7] + littleSigma(w[j - 15]) + w[j - 16] | 0;\n      }\n\n      var a = h0,\n          b = h1,\n          c = h2,\n          d = h3,\n          e = h4,\n          f = h5,\n          g = h6,\n          h = h7,\n          t1,\n          t2;\n\n      for (j = 0; j < 64; ++j) {\n        t1 = h + sigmaPrime(e) + ch(e, f, g) + k[j] + w[j];\n        t2 = sigma(a) + maj(a, b, c);\n        h = g;\n        g = f;\n        f = e;\n        e = d + t1 | 0;\n        d = c;\n        c = b;\n        b = a;\n        a = t1 + t2 | 0;\n      }\n\n      h0 = h0 + a | 0;\n      h1 = h1 + b | 0;\n      h2 = h2 + c | 0;\n      h3 = h3 + d | 0;\n      h4 = h4 + e | 0;\n      h5 = h5 + f | 0;\n      h6 = h6 + g | 0;\n      h7 = h7 + h | 0;\n    }\n\n    return new Uint8Array([h0 >> 24 & 0xFF, h0 >> 16 & 0xFF, h0 >> 8 & 0xFF, h0 & 0xFF, h1 >> 24 & 0xFF, h1 >> 16 & 0xFF, h1 >> 8 & 0xFF, h1 & 0xFF, h2 >> 24 & 0xFF, h2 >> 16 & 0xFF, h2 >> 8 & 0xFF, h2 & 0xFF, h3 >> 24 & 0xFF, h3 >> 16 & 0xFF, h3 >> 8 & 0xFF, h3 & 0xFF, h4 >> 24 & 0xFF, h4 >> 16 & 0xFF, h4 >> 8 & 0xFF, h4 & 0xFF, h5 >> 24 & 0xFF, h5 >> 16 & 0xFF, h5 >> 8 & 0xFF, h5 & 0xFF, h6 >> 24 & 0xFF, h6 >> 16 & 0xFF, h6 >> 8 & 0xFF, h6 & 0xFF, h7 >> 24 & 0xFF, h7 >> 16 & 0xFF, h7 >> 8 & 0xFF, h7 & 0xFF]);\n  }\n\n  return hash;\n}();\n\nexports.calculateSHA256 = calculateSHA256;\n\nvar calculateSHA512 = function calculateSHA512Closure() {\n  function ch(result, x, y, z, tmp) {\n    result.assign(x);\n    result.and(y);\n    tmp.assign(x);\n    tmp.not();\n    tmp.and(z);\n    result.xor(tmp);\n  }\n\n  function maj(result, x, y, z, tmp) {\n    result.assign(x);\n    result.and(y);\n    tmp.assign(x);\n    tmp.and(z);\n    result.xor(tmp);\n    tmp.assign(y);\n    tmp.and(z);\n    result.xor(tmp);\n  }\n\n  function sigma(result, x, tmp) {\n    result.assign(x);\n    result.rotateRight(28);\n    tmp.assign(x);\n    tmp.rotateRight(34);\n    result.xor(tmp);\n    tmp.assign(x);\n    tmp.rotateRight(39);\n    result.xor(tmp);\n  }\n\n  function sigmaPrime(result, x, tmp) {\n    result.assign(x);\n    result.rotateRight(14);\n    tmp.assign(x);\n    tmp.rotateRight(18);\n    result.xor(tmp);\n    tmp.assign(x);\n    tmp.rotateRight(41);\n    result.xor(tmp);\n  }\n\n  function littleSigma(result, x, tmp) {\n    result.assign(x);\n    result.rotateRight(1);\n    tmp.assign(x);\n    tmp.rotateRight(8);\n    result.xor(tmp);\n    tmp.assign(x);\n    tmp.shiftRight(7);\n    result.xor(tmp);\n  }\n\n  function littleSigmaPrime(result, x, tmp) {\n    result.assign(x);\n    result.rotateRight(19);\n    tmp.assign(x);\n    tmp.rotateRight(61);\n    result.xor(tmp);\n    tmp.assign(x);\n    tmp.shiftRight(6);\n    result.xor(tmp);\n  }\n\n  var k = [new Word64(0x428a2f98, 0xd728ae22), new Word64(0x71374491, 0x23ef65cd), new Word64(0xb5c0fbcf, 0xec4d3b2f), new Word64(0xe9b5dba5, 0x8189dbbc), new Word64(0x3956c25b, 0xf348b538), new Word64(0x59f111f1, 0xb605d019), new Word64(0x923f82a4, 0xaf194f9b), new Word64(0xab1c5ed5, 0xda6d8118), new Word64(0xd807aa98, 0xa3030242), new Word64(0x12835b01, 0x45706fbe), new Word64(0x243185be, 0x4ee4b28c), new Word64(0x550c7dc3, 0xd5ffb4e2), new Word64(0x72be5d74, 0xf27b896f), new Word64(0x80deb1fe, 0x3b1696b1), new Word64(0x9bdc06a7, 0x25c71235), new Word64(0xc19bf174, 0xcf692694), new Word64(0xe49b69c1, 0x9ef14ad2), new Word64(0xefbe4786, 0x384f25e3), new Word64(0x0fc19dc6, 0x8b8cd5b5), new Word64(0x240ca1cc, 0x77ac9c65), new Word64(0x2de92c6f, 0x592b0275), new Word64(0x4a7484aa, 0x6ea6e483), new Word64(0x5cb0a9dc, 0xbd41fbd4), new Word64(0x76f988da, 0x831153b5), new Word64(0x983e5152, 0xee66dfab), new Word64(0xa831c66d, 0x2db43210), new Word64(0xb00327c8, 0x98fb213f), new Word64(0xbf597fc7, 0xbeef0ee4), new Word64(0xc6e00bf3, 0x3da88fc2), new Word64(0xd5a79147, 0x930aa725), new Word64(0x06ca6351, 0xe003826f), new Word64(0x14292967, 0x0a0e6e70), new Word64(0x27b70a85, 0x46d22ffc), new Word64(0x2e1b2138, 0x5c26c926), new Word64(0x4d2c6dfc, 0x5ac42aed), new Word64(0x53380d13, 0x9d95b3df), new Word64(0x650a7354, 0x8baf63de), new Word64(0x766a0abb, 0x3c77b2a8), new Word64(0x81c2c92e, 0x47edaee6), new Word64(0x92722c85, 0x1482353b), new Word64(0xa2bfe8a1, 0x4cf10364), new Word64(0xa81a664b, 0xbc423001), new Word64(0xc24b8b70, 0xd0f89791), new Word64(0xc76c51a3, 0x0654be30), new Word64(0xd192e819, 0xd6ef5218), new Word64(0xd6990624, 0x5565a910), new Word64(0xf40e3585, 0x5771202a), new Word64(0x106aa070, 0x32bbd1b8), new Word64(0x19a4c116, 0xb8d2d0c8), new Word64(0x1e376c08, 0x5141ab53), new Word64(0x2748774c, 0xdf8eeb99), new Word64(0x34b0bcb5, 0xe19b48a8), new Word64(0x391c0cb3, 0xc5c95a63), new Word64(0x4ed8aa4a, 0xe3418acb), new Word64(0x5b9cca4f, 0x7763e373), new Word64(0x682e6ff3, 0xd6b2b8a3), new Word64(0x748f82ee, 0x5defb2fc), new Word64(0x78a5636f, 0x43172f60), new Word64(0x84c87814, 0xa1f0ab72), new Word64(0x8cc70208, 0x1a6439ec), new Word64(0x90befffa, 0x23631e28), new Word64(0xa4506ceb, 0xde82bde9), new Word64(0xbef9a3f7, 0xb2c67915), new Word64(0xc67178f2, 0xe372532b), new Word64(0xca273ece, 0xea26619c), new Word64(0xd186b8c7, 0x21c0c207), new Word64(0xeada7dd6, 0xcde0eb1e), new Word64(0xf57d4f7f, 0xee6ed178), new Word64(0x06f067aa, 0x72176fba), new Word64(0x0a637dc5, 0xa2c898a6), new Word64(0x113f9804, 0xbef90dae), new Word64(0x1b710b35, 0x131c471b), new Word64(0x28db77f5, 0x23047d84), new Word64(0x32caab7b, 0x40c72493), new Word64(0x3c9ebe0a, 0x15c9bebc), new Word64(0x431d67c4, 0x9c100d4c), new Word64(0x4cc5d4be, 0xcb3e42b6), new Word64(0x597f299c, 0xfc657e2a), new Word64(0x5fcb6fab, 0x3ad6faec), new Word64(0x6c44198c, 0x4a475817)];\n\n  function hash(data, offset, length, mode384) {\n    mode384 = !!mode384;\n    var h0, h1, h2, h3, h4, h5, h6, h7;\n\n    if (!mode384) {\n      h0 = new Word64(0x6a09e667, 0xf3bcc908);\n      h1 = new Word64(0xbb67ae85, 0x84caa73b);\n      h2 = new Word64(0x3c6ef372, 0xfe94f82b);\n      h3 = new Word64(0xa54ff53a, 0x5f1d36f1);\n      h4 = new Word64(0x510e527f, 0xade682d1);\n      h5 = new Word64(0x9b05688c, 0x2b3e6c1f);\n      h6 = new Word64(0x1f83d9ab, 0xfb41bd6b);\n      h7 = new Word64(0x5be0cd19, 0x137e2179);\n    } else {\n      h0 = new Word64(0xcbbb9d5d, 0xc1059ed8);\n      h1 = new Word64(0x629a292a, 0x367cd507);\n      h2 = new Word64(0x9159015a, 0x3070dd17);\n      h3 = new Word64(0x152fecd8, 0xf70e5939);\n      h4 = new Word64(0x67332667, 0xffc00b31);\n      h5 = new Word64(0x8eb44a87, 0x68581511);\n      h6 = new Word64(0xdb0c2e0d, 0x64f98fa7);\n      h7 = new Word64(0x47b5481d, 0xbefa4fa4);\n    }\n\n    var paddedLength = Math.ceil((length + 17) / 128) * 128;\n    var padded = new Uint8Array(paddedLength);\n    var i, j, n;\n\n    for (i = 0; i < length; ++i) {\n      padded[i] = data[offset++];\n    }\n\n    padded[i++] = 0x80;\n    n = paddedLength - 16;\n\n    while (i < n) {\n      padded[i++] = 0;\n    }\n\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = length >>> 29 & 0xff;\n    padded[i++] = length >> 21 & 0xff;\n    padded[i++] = length >> 13 & 0xff;\n    padded[i++] = length >> 5 & 0xff;\n    padded[i++] = length << 3 & 0xff;\n    var w = new Array(80);\n\n    for (i = 0; i < 80; i++) {\n      w[i] = new Word64(0, 0);\n    }\n\n    var a = new Word64(0, 0),\n        b = new Word64(0, 0),\n        c = new Word64(0, 0);\n    var d = new Word64(0, 0),\n        e = new Word64(0, 0),\n        f = new Word64(0, 0);\n    var g = new Word64(0, 0),\n        h = new Word64(0, 0);\n    var t1 = new Word64(0, 0),\n        t2 = new Word64(0, 0);\n    var tmp1 = new Word64(0, 0),\n        tmp2 = new Word64(0, 0),\n        tmp3;\n\n    for (i = 0; i < paddedLength;) {\n      for (j = 0; j < 16; ++j) {\n        w[j].high = padded[i] << 24 | padded[i + 1] << 16 | padded[i + 2] << 8 | padded[i + 3];\n        w[j].low = padded[i + 4] << 24 | padded[i + 5] << 16 | padded[i + 6] << 8 | padded[i + 7];\n        i += 8;\n      }\n\n      for (j = 16; j < 80; ++j) {\n        tmp3 = w[j];\n        littleSigmaPrime(tmp3, w[j - 2], tmp2);\n        tmp3.add(w[j - 7]);\n        littleSigma(tmp1, w[j - 15], tmp2);\n        tmp3.add(tmp1);\n        tmp3.add(w[j - 16]);\n      }\n\n      a.assign(h0);\n      b.assign(h1);\n      c.assign(h2);\n      d.assign(h3);\n      e.assign(h4);\n      f.assign(h5);\n      g.assign(h6);\n      h.assign(h7);\n\n      for (j = 0; j < 80; ++j) {\n        t1.assign(h);\n        sigmaPrime(tmp1, e, tmp2);\n        t1.add(tmp1);\n        ch(tmp1, e, f, g, tmp2);\n        t1.add(tmp1);\n        t1.add(k[j]);\n        t1.add(w[j]);\n        sigma(t2, a, tmp2);\n        maj(tmp1, a, b, c, tmp2);\n        t2.add(tmp1);\n        tmp3 = h;\n        h = g;\n        g = f;\n        f = e;\n        d.add(t1);\n        e = d;\n        d = c;\n        c = b;\n        b = a;\n        tmp3.assign(t1);\n        tmp3.add(t2);\n        a = tmp3;\n      }\n\n      h0.add(a);\n      h1.add(b);\n      h2.add(c);\n      h3.add(d);\n      h4.add(e);\n      h5.add(f);\n      h6.add(g);\n      h7.add(h);\n    }\n\n    var result;\n\n    if (!mode384) {\n      result = new Uint8Array(64);\n      h0.copyTo(result, 0);\n      h1.copyTo(result, 8);\n      h2.copyTo(result, 16);\n      h3.copyTo(result, 24);\n      h4.copyTo(result, 32);\n      h5.copyTo(result, 40);\n      h6.copyTo(result, 48);\n      h7.copyTo(result, 56);\n    } else {\n      result = new Uint8Array(48);\n      h0.copyTo(result, 0);\n      h1.copyTo(result, 8);\n      h2.copyTo(result, 16);\n      h3.copyTo(result, 24);\n      h4.copyTo(result, 32);\n      h5.copyTo(result, 40);\n    }\n\n    return result;\n  }\n\n  return hash;\n}();\n\nexports.calculateSHA512 = calculateSHA512;\n\nvar calculateSHA384 = function calculateSHA384Closure() {\n  function hash(data, offset, length) {\n    return calculateSHA512(data, offset, length, true);\n  }\n\n  return hash;\n}();\n\nexports.calculateSHA384 = calculateSHA384;\n\nvar NullCipher = function NullCipherClosure() {\n  function NullCipher() {}\n\n  NullCipher.prototype = {\n    decryptBlock: function NullCipher_decryptBlock(data) {\n      return data;\n    },\n    encrypt: function NullCipher_encrypt(data) {\n      return data;\n    }\n  };\n  return NullCipher;\n}();\n\nclass AESBaseCipher {\n  constructor() {\n    if (this.constructor === AESBaseCipher) {\n      (0, _util.unreachable)("Cannot initialize AESBaseCipher.");\n    }\n\n    this._s = new Uint8Array([0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]);\n    this._inv_s = new Uint8Array([0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]);\n    this._mix = new Uint32Array([0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3]);\n    this._mixCol = new Uint8Array(256);\n\n    for (let i = 0; i < 256; i++) {\n      if (i < 128) {\n        this._mixCol[i] = i << 1;\n      } else {\n        this._mixCol[i] = i << 1 ^ 0x1b;\n      }\n    }\n\n    this.buffer = new Uint8Array(16);\n    this.bufferPosition = 0;\n  }\n\n  _expandKey(cipherKey) {\n    (0, _util.unreachable)("Cannot call `_expandKey` on the base class");\n  }\n\n  _decrypt(input, key) {\n    let t, u, v;\n    const state = new Uint8Array(16);\n    state.set(input);\n\n    for (let j = 0, k = this._keySize; j < 16; ++j, ++k) {\n      state[j] ^= key[k];\n    }\n\n    for (let i = this._cyclesOfRepetition - 1; i >= 1; --i) {\n      t = state[13];\n      state[13] = state[9];\n      state[9] = state[5];\n      state[5] = state[1];\n      state[1] = t;\n      t = state[14];\n      u = state[10];\n      state[14] = state[6];\n      state[10] = state[2];\n      state[6] = t;\n      state[2] = u;\n      t = state[15];\n      u = state[11];\n      v = state[7];\n      state[15] = state[3];\n      state[11] = t;\n      state[7] = u;\n      state[3] = v;\n\n      for (let j = 0; j < 16; ++j) {\n        state[j] = this._inv_s[state[j]];\n      }\n\n      for (let j = 0, k = i * 16; j < 16; ++j, ++k) {\n        state[j] ^= key[k];\n      }\n\n      for (let j = 0; j < 16; j += 4) {\n        const s0 = this._mix[state[j]];\n        const s1 = this._mix[state[j + 1]];\n        const s2 = this._mix[state[j + 2]];\n        const s3 = this._mix[state[j + 3]];\n        t = s0 ^ s1 >>> 8 ^ s1 << 24 ^ s2 >>> 16 ^ s2 << 16 ^ s3 >>> 24 ^ s3 << 8;\n        state[j] = t >>> 24 & 0xff;\n        state[j + 1] = t >> 16 & 0xff;\n        state[j + 2] = t >> 8 & 0xff;\n        state[j + 3] = t & 0xff;\n      }\n    }\n\n    t = state[13];\n    state[13] = state[9];\n    state[9] = state[5];\n    state[5] = state[1];\n    state[1] = t;\n    t = state[14];\n    u = state[10];\n    state[14] = state[6];\n    state[10] = state[2];\n    state[6] = t;\n    state[2] = u;\n    t = state[15];\n    u = state[11];\n    v = state[7];\n    state[15] = state[3];\n    state[11] = t;\n    state[7] = u;\n    state[3] = v;\n\n    for (let j = 0; j < 16; ++j) {\n      state[j] = this._inv_s[state[j]];\n      state[j] ^= key[j];\n    }\n\n    return state;\n  }\n\n  _encrypt(input, key) {\n    const s = this._s;\n    let t, u, v;\n    const state = new Uint8Array(16);\n    state.set(input);\n\n    for (let j = 0; j < 16; ++j) {\n      state[j] ^= key[j];\n    }\n\n    for (let i = 1; i < this._cyclesOfRepetition; i++) {\n      for (let j = 0; j < 16; ++j) {\n        state[j] = s[state[j]];\n      }\n\n      v = state[1];\n      state[1] = state[5];\n      state[5] = state[9];\n      state[9] = state[13];\n      state[13] = v;\n      v = state[2];\n      u = state[6];\n      state[2] = state[10];\n      state[6] = state[14];\n      state[10] = v;\n      state[14] = u;\n      v = state[3];\n      u = state[7];\n      t = state[11];\n      state[3] = state[15];\n      state[7] = v;\n      state[11] = u;\n      state[15] = t;\n\n      for (let j = 0; j < 16; j += 4) {\n        const s0 = state[j + 0];\n        const s1 = state[j + 1];\n        const s2 = state[j + 2];\n        const s3 = state[j + 3];\n        t = s0 ^ s1 ^ s2 ^ s3;\n        state[j + 0] ^= t ^ this._mixCol[s0 ^ s1];\n        state[j + 1] ^= t ^ this._mixCol[s1 ^ s2];\n        state[j + 2] ^= t ^ this._mixCol[s2 ^ s3];\n        state[j + 3] ^= t ^ this._mixCol[s3 ^ s0];\n      }\n\n      for (let j = 0, k = i * 16; j < 16; ++j, ++k) {\n        state[j] ^= key[k];\n      }\n    }\n\n    for (let j = 0; j < 16; ++j) {\n      state[j] = s[state[j]];\n    }\n\n    v = state[1];\n    state[1] = state[5];\n    state[5] = state[9];\n    state[9] = state[13];\n    state[13] = v;\n    v = state[2];\n    u = state[6];\n    state[2] = state[10];\n    state[6] = state[14];\n    state[10] = v;\n    state[14] = u;\n    v = state[3];\n    u = state[7];\n    t = state[11];\n    state[3] = state[15];\n    state[7] = v;\n    state[11] = u;\n    state[15] = t;\n\n    for (let j = 0, k = this._keySize; j < 16; ++j, ++k) {\n      state[j] ^= key[k];\n    }\n\n    return state;\n  }\n\n  _decryptBlock2(data, finalize) {\n    const sourceLength = data.length;\n    let buffer = this.buffer,\n        bufferLength = this.bufferPosition;\n    const result = [];\n    let iv = this.iv;\n\n    for (let i = 0; i < sourceLength; ++i) {\n      buffer[bufferLength] = data[i];\n      ++bufferLength;\n\n      if (bufferLength < 16) {\n        continue;\n      }\n\n      const plain = this._decrypt(buffer, this._key);\n\n      for (let j = 0; j < 16; ++j) {\n        plain[j] ^= iv[j];\n      }\n\n      iv = buffer;\n      result.push(plain);\n      buffer = new Uint8Array(16);\n      bufferLength = 0;\n    }\n\n    this.buffer = buffer;\n    this.bufferLength = bufferLength;\n    this.iv = iv;\n\n    if (result.length === 0) {\n      return new Uint8Array(0);\n    }\n\n    let outputLength = 16 * result.length;\n\n    if (finalize) {\n      const lastBlock = result[result.length - 1];\n      let psLen = lastBlock[15];\n\n      if (psLen <= 16) {\n        for (let i = 15, ii = 16 - psLen; i >= ii; --i) {\n          if (lastBlock[i] !== psLen) {\n            psLen = 0;\n            break;\n          }\n        }\n\n        outputLength -= psLen;\n        result[result.length - 1] = lastBlock.subarray(0, 16 - psLen);\n      }\n    }\n\n    const output = new Uint8Array(outputLength);\n\n    for (let i = 0, j = 0, ii = result.length; i < ii; ++i, j += 16) {\n      output.set(result[i], j);\n    }\n\n    return output;\n  }\n\n  decryptBlock(data, finalize, iv = null) {\n    const sourceLength = data.length;\n    const buffer = this.buffer;\n    let bufferLength = this.bufferPosition;\n\n    if (iv) {\n      this.iv = iv;\n    } else {\n      for (let i = 0; bufferLength < 16 && i < sourceLength; ++i, ++bufferLength) {\n        buffer[bufferLength] = data[i];\n      }\n\n      if (bufferLength < 16) {\n        this.bufferLength = bufferLength;\n        return new Uint8Array(0);\n      }\n\n      this.iv = buffer;\n      data = data.subarray(16);\n    }\n\n    this.buffer = new Uint8Array(16);\n    this.bufferLength = 0;\n    this.decryptBlock = this._decryptBlock2;\n    return this.decryptBlock(data, finalize);\n  }\n\n  encrypt(data, iv) {\n    const sourceLength = data.length;\n    let buffer = this.buffer,\n        bufferLength = this.bufferPosition;\n    const result = [];\n\n    if (!iv) {\n      iv = new Uint8Array(16);\n    }\n\n    for (let i = 0; i < sourceLength; ++i) {\n      buffer[bufferLength] = data[i];\n      ++bufferLength;\n\n      if (bufferLength < 16) {\n        continue;\n      }\n\n      for (let j = 0; j < 16; ++j) {\n        buffer[j] ^= iv[j];\n      }\n\n      const cipher = this._encrypt(buffer, this._key);\n\n      iv = cipher;\n      result.push(cipher);\n      buffer = new Uint8Array(16);\n      bufferLength = 0;\n    }\n\n    this.buffer = buffer;\n    this.bufferLength = bufferLength;\n    this.iv = iv;\n\n    if (result.length === 0) {\n      return new Uint8Array(0);\n    }\n\n    const outputLength = 16 * result.length;\n    const output = new Uint8Array(outputLength);\n\n    for (let i = 0, j = 0, ii = result.length; i < ii; ++i, j += 16) {\n      output.set(result[i], j);\n    }\n\n    return output;\n  }\n\n}\n\nclass AES128Cipher extends AESBaseCipher {\n  constructor(key) {\n    super();\n    this._cyclesOfRepetition = 10;\n    this._keySize = 160;\n    this._rcon = new Uint8Array([0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d]);\n    this._key = this._expandKey(key);\n  }\n\n  _expandKey(cipherKey) {\n    const b = 176;\n    const s = this._s;\n    const rcon = this._rcon;\n    const result = new Uint8Array(b);\n    result.set(cipherKey);\n\n    for (let j = 16, i = 1; j < b; ++i) {\n      let t1 = result[j - 3];\n      let t2 = result[j - 2];\n      let t3 = result[j - 1];\n      let t4 = result[j - 4];\n      t1 = s[t1];\n      t2 = s[t2];\n      t3 = s[t3];\n      t4 = s[t4];\n      t1 = t1 ^ rcon[i];\n\n      for (let n = 0; n < 4; ++n) {\n        result[j] = t1 ^= result[j - 16];\n        j++;\n        result[j] = t2 ^= result[j - 16];\n        j++;\n        result[j] = t3 ^= result[j - 16];\n        j++;\n        result[j] = t4 ^= result[j - 16];\n        j++;\n      }\n    }\n\n    return result;\n  }\n\n}\n\nexports.AES128Cipher = AES128Cipher;\n\nclass AES256Cipher extends AESBaseCipher {\n  constructor(key) {\n    super();\n    this._cyclesOfRepetition = 14;\n    this._keySize = 224;\n    this._key = this._expandKey(key);\n  }\n\n  _expandKey(cipherKey) {\n    const b = 240;\n    const s = this._s;\n    const result = new Uint8Array(b);\n    result.set(cipherKey);\n    let r = 1;\n    let t1, t2, t3, t4;\n\n    for (let j = 32, i = 1; j < b; ++i) {\n      if (j % 32 === 16) {\n        t1 = s[t1];\n        t2 = s[t2];\n        t3 = s[t3];\n        t4 = s[t4];\n      } else if (j % 32 === 0) {\n        t1 = result[j - 3];\n        t2 = result[j - 2];\n        t3 = result[j - 1];\n        t4 = result[j - 4];\n        t1 = s[t1];\n        t2 = s[t2];\n        t3 = s[t3];\n        t4 = s[t4];\n        t1 = t1 ^ r;\n\n        if ((r <<= 1) >= 256) {\n          r = (r ^ 0x1b) & 0xff;\n        }\n      }\n\n      for (let n = 0; n < 4; ++n) {\n        result[j] = t1 ^= result[j - 32];\n        j++;\n        result[j] = t2 ^= result[j - 32];\n        j++;\n        result[j] = t3 ^= result[j - 32];\n        j++;\n        result[j] = t4 ^= result[j - 32];\n        j++;\n      }\n    }\n\n    return result;\n  }\n\n}\n\nexports.AES256Cipher = AES256Cipher;\n\nvar PDF17 = function PDF17Closure() {\n  function compareByteArrays(array1, array2) {\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    for (var i = 0; i < array1.length; i++) {\n      if (array1[i] !== array2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function PDF17() {}\n\n  PDF17.prototype = {\n    checkOwnerPassword: function PDF17_checkOwnerPassword(password, ownerValidationSalt, userBytes, ownerPassword) {\n      var hashData = new Uint8Array(password.length + 56);\n      hashData.set(password, 0);\n      hashData.set(ownerValidationSalt, password.length);\n      hashData.set(userBytes, password.length + ownerValidationSalt.length);\n      var result = calculateSHA256(hashData, 0, hashData.length);\n      return compareByteArrays(result, ownerPassword);\n    },\n    checkUserPassword: function PDF17_checkUserPassword(password, userValidationSalt, userPassword) {\n      var hashData = new Uint8Array(password.length + 8);\n      hashData.set(password, 0);\n      hashData.set(userValidationSalt, password.length);\n      var result = calculateSHA256(hashData, 0, hashData.length);\n      return compareByteArrays(result, userPassword);\n    },\n    getOwnerKey: function PDF17_getOwnerKey(password, ownerKeySalt, userBytes, ownerEncryption) {\n      var hashData = new Uint8Array(password.length + 56);\n      hashData.set(password, 0);\n      hashData.set(ownerKeySalt, password.length);\n      hashData.set(userBytes, password.length + ownerKeySalt.length);\n      var key = calculateSHA256(hashData, 0, hashData.length);\n      var cipher = new AES256Cipher(key);\n      return cipher.decryptBlock(ownerEncryption, false, new Uint8Array(16));\n    },\n    getUserKey: function PDF17_getUserKey(password, userKeySalt, userEncryption) {\n      var hashData = new Uint8Array(password.length + 8);\n      hashData.set(password, 0);\n      hashData.set(userKeySalt, password.length);\n      var key = calculateSHA256(hashData, 0, hashData.length);\n      var cipher = new AES256Cipher(key);\n      return cipher.decryptBlock(userEncryption, false, new Uint8Array(16));\n    }\n  };\n  return PDF17;\n}();\n\nexports.PDF17 = PDF17;\n\nvar PDF20 = function PDF20Closure() {\n  function concatArrays(array1, array2) {\n    var t = new Uint8Array(array1.length + array2.length);\n    t.set(array1, 0);\n    t.set(array2, array1.length);\n    return t;\n  }\n\n  function calculatePDF20Hash(password, input, userBytes) {\n    var k = calculateSHA256(input, 0, input.length).subarray(0, 32);\n    var e = [0];\n    var i = 0;\n\n    while (i < 64 || e[e.length - 1] > i - 32) {\n      var arrayLength = password.length + k.length + userBytes.length;\n      var k1 = new Uint8Array(arrayLength * 64);\n      var array = concatArrays(password, k);\n      array = concatArrays(array, userBytes);\n\n      for (var j = 0, pos = 0; j < 64; j++, pos += arrayLength) {\n        k1.set(array, pos);\n      }\n\n      var cipher = new AES128Cipher(k.subarray(0, 16));\n      e = cipher.encrypt(k1, k.subarray(16, 32));\n      var remainder = 0;\n\n      for (var z = 0; z < 16; z++) {\n        remainder *= 256 % 3;\n        remainder %= 3;\n        remainder += (e[z] >>> 0) % 3;\n        remainder %= 3;\n      }\n\n      if (remainder === 0) {\n        k = calculateSHA256(e, 0, e.length);\n      } else if (remainder === 1) {\n        k = calculateSHA384(e, 0, e.length);\n      } else if (remainder === 2) {\n        k = calculateSHA512(e, 0, e.length);\n      }\n\n      i++;\n    }\n\n    return k.subarray(0, 32);\n  }\n\n  function PDF20() {}\n\n  function compareByteArrays(array1, array2) {\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    for (var i = 0; i < array1.length; i++) {\n      if (array1[i] !== array2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  PDF20.prototype = {\n    hash: function PDF20_hash(password, concatBytes, userBytes) {\n      return calculatePDF20Hash(password, concatBytes, userBytes);\n    },\n    checkOwnerPassword: function PDF20_checkOwnerPassword(password, ownerValidationSalt, userBytes, ownerPassword) {\n      var hashData = new Uint8Array(password.length + 56);\n      hashData.set(password, 0);\n      hashData.set(ownerValidationSalt, password.length);\n      hashData.set(userBytes, password.length + ownerValidationSalt.length);\n      var result = calculatePDF20Hash(password, hashData, userBytes);\n      return compareByteArrays(result, ownerPassword);\n    },\n    checkUserPassword: function PDF20_checkUserPassword(password, userValidationSalt, userPassword) {\n      var hashData = new Uint8Array(password.length + 8);\n      hashData.set(password, 0);\n      hashData.set(userValidationSalt, password.length);\n      var result = calculatePDF20Hash(password, hashData, []);\n      return compareByteArrays(result, userPassword);\n    },\n    getOwnerKey: function PDF20_getOwnerKey(password, ownerKeySalt, userBytes, ownerEncryption) {\n      var hashData = new Uint8Array(password.length + 56);\n      hashData.set(password, 0);\n      hashData.set(ownerKeySalt, password.length);\n      hashData.set(userBytes, password.length + ownerKeySalt.length);\n      var key = calculatePDF20Hash(password, hashData, userBytes);\n      var cipher = new AES256Cipher(key);\n      return cipher.decryptBlock(ownerEncryption, false, new Uint8Array(16));\n    },\n    getUserKey: function PDF20_getUserKey(password, userKeySalt, userEncryption) {\n      var hashData = new Uint8Array(password.length + 8);\n      hashData.set(password, 0);\n      hashData.set(userKeySalt, password.length);\n      var key = calculatePDF20Hash(password, hashData, []);\n      var cipher = new AES256Cipher(key);\n      return cipher.decryptBlock(userEncryption, false, new Uint8Array(16));\n    }\n  };\n  return PDF20;\n}();\n\nexports.PDF20 = PDF20;\n\nvar CipherTransform = function CipherTransformClosure() {\n  function CipherTransform(stringCipherConstructor, streamCipherConstructor) {\n    this.StringCipherConstructor = stringCipherConstructor;\n    this.StreamCipherConstructor = streamCipherConstructor;\n  }\n\n  CipherTransform.prototype = {\n    createStream: function CipherTransform_createStream(stream, length) {\n      var cipher = new this.StreamCipherConstructor();\n      return new _stream.DecryptStream(stream, length, function cipherTransformDecryptStream(data, finalize) {\n        return cipher.decryptBlock(data, finalize);\n      });\n    },\n    decryptString: function CipherTransform_decryptString(s) {\n      var cipher = new this.StringCipherConstructor();\n      var data = (0, _util.stringToBytes)(s);\n      data = cipher.decryptBlock(data, true);\n      return (0, _util.bytesToString)(data);\n    },\n    encryptString: function CipherTransform_encryptString(s) {\n      const cipher = new this.StringCipherConstructor();\n\n      if (cipher instanceof AESBaseCipher) {\n        const strLen = s.length;\n        const pad = 16 - strLen % 16;\n\n        if (pad !== 16) {\n          s = s.padEnd(16 * Math.ceil(strLen / 16), String.fromCharCode(pad));\n        }\n\n        const iv = new Uint8Array(16);\n\n        if (typeof crypto !== "undefined") {\n          crypto.getRandomValues(iv);\n        } else {\n          for (let i = 0; i < 16; i++) {\n            iv[i] = Math.floor(256 * Math.random());\n          }\n        }\n\n        let data = (0, _util.stringToBytes)(s);\n        data = cipher.encrypt(data, iv);\n        const buf = new Uint8Array(16 + data.length);\n        buf.set(iv);\n        buf.set(data, 16);\n        return (0, _util.bytesToString)(buf);\n      }\n\n      let data = (0, _util.stringToBytes)(s);\n      data = cipher.encrypt(data);\n      return (0, _util.bytesToString)(data);\n    }\n  };\n  return CipherTransform;\n}();\n\nvar CipherTransformFactory = function CipherTransformFactoryClosure() {\n  var defaultPasswordBytes = new Uint8Array([0x28, 0xBF, 0x4E, 0x5E, 0x4E, 0x75, 0x8A, 0x41, 0x64, 0x00, 0x4E, 0x56, 0xFF, 0xFA, 0x01, 0x08, 0x2E, 0x2E, 0x00, 0xB6, 0xD0, 0x68, 0x3E, 0x80, 0x2F, 0x0C, 0xA9, 0xFE, 0x64, 0x53, 0x69, 0x7A]);\n\n  function createEncryptionKey20(revision, password, ownerPassword, ownerValidationSalt, ownerKeySalt, uBytes, userPassword, userValidationSalt, userKeySalt, ownerEncryption, userEncryption, perms) {\n    if (password) {\n      var passwordLength = Math.min(127, password.length);\n      password = password.subarray(0, passwordLength);\n    } else {\n      password = [];\n    }\n\n    var pdfAlgorithm;\n\n    if (revision === 6) {\n      pdfAlgorithm = new PDF20();\n    } else {\n      pdfAlgorithm = new PDF17();\n    }\n\n    if (pdfAlgorithm.checkUserPassword(password, userValidationSalt, userPassword)) {\n      return pdfAlgorithm.getUserKey(password, userKeySalt, userEncryption);\n    } else if (password.length && pdfAlgorithm.checkOwnerPassword(password, ownerValidationSalt, uBytes, ownerPassword)) {\n      return pdfAlgorithm.getOwnerKey(password, ownerKeySalt, uBytes, ownerEncryption);\n    }\n\n    return null;\n  }\n\n  function prepareKeyData(fileId, password, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata) {\n    var hashDataSize = 40 + ownerPassword.length + fileId.length;\n    var hashData = new Uint8Array(hashDataSize),\n        i = 0,\n        j,\n        n;\n\n    if (password) {\n      n = Math.min(32, password.length);\n\n      for (; i < n; ++i) {\n        hashData[i] = password[i];\n      }\n    }\n\n    j = 0;\n\n    while (i < 32) {\n      hashData[i++] = defaultPasswordBytes[j++];\n    }\n\n    for (j = 0, n = ownerPassword.length; j < n; ++j) {\n      hashData[i++] = ownerPassword[j];\n    }\n\n    hashData[i++] = flags & 0xff;\n    hashData[i++] = flags >> 8 & 0xff;\n    hashData[i++] = flags >> 16 & 0xff;\n    hashData[i++] = flags >>> 24 & 0xff;\n\n    for (j = 0, n = fileId.length; j < n; ++j) {\n      hashData[i++] = fileId[j];\n    }\n\n    if (revision >= 4 && !encryptMetadata) {\n      hashData[i++] = 0xff;\n      hashData[i++] = 0xff;\n      hashData[i++] = 0xff;\n      hashData[i++] = 0xff;\n    }\n\n    var hash = calculateMD5(hashData, 0, i);\n    var keyLengthInBytes = keyLength >> 3;\n\n    if (revision >= 3) {\n      for (j = 0; j < 50; ++j) {\n        hash = calculateMD5(hash, 0, keyLengthInBytes);\n      }\n    }\n\n    var encryptionKey = hash.subarray(0, keyLengthInBytes);\n    var cipher, checkData;\n\n    if (revision >= 3) {\n      for (i = 0; i < 32; ++i) {\n        hashData[i] = defaultPasswordBytes[i];\n      }\n\n      for (j = 0, n = fileId.length; j < n; ++j) {\n        hashData[i++] = fileId[j];\n      }\n\n      cipher = new ARCFourCipher(encryptionKey);\n      checkData = cipher.encryptBlock(calculateMD5(hashData, 0, i));\n      n = encryptionKey.length;\n      var derivedKey = new Uint8Array(n),\n          k;\n\n      for (j = 1; j <= 19; ++j) {\n        for (k = 0; k < n; ++k) {\n          derivedKey[k] = encryptionKey[k] ^ j;\n        }\n\n        cipher = new ARCFourCipher(derivedKey);\n        checkData = cipher.encryptBlock(checkData);\n      }\n\n      for (j = 0, n = checkData.length; j < n; ++j) {\n        if (userPassword[j] !== checkData[j]) {\n          return null;\n        }\n      }\n    } else {\n      cipher = new ARCFourCipher(encryptionKey);\n      checkData = cipher.encryptBlock(defaultPasswordBytes);\n\n      for (j = 0, n = checkData.length; j < n; ++j) {\n        if (userPassword[j] !== checkData[j]) {\n          return null;\n        }\n      }\n    }\n\n    return encryptionKey;\n  }\n\n  function decodeUserPassword(password, ownerPassword, revision, keyLength) {\n    var hashData = new Uint8Array(32),\n        i = 0,\n        j,\n        n;\n    n = Math.min(32, password.length);\n\n    for (; i < n; ++i) {\n      hashData[i] = password[i];\n    }\n\n    j = 0;\n\n    while (i < 32) {\n      hashData[i++] = defaultPasswordBytes[j++];\n    }\n\n    var hash = calculateMD5(hashData, 0, i);\n    var keyLengthInBytes = keyLength >> 3;\n\n    if (revision >= 3) {\n      for (j = 0; j < 50; ++j) {\n        hash = calculateMD5(hash, 0, hash.length);\n      }\n    }\n\n    var cipher, userPassword;\n\n    if (revision >= 3) {\n      userPassword = ownerPassword;\n      var derivedKey = new Uint8Array(keyLengthInBytes),\n          k;\n\n      for (j = 19; j >= 0; j--) {\n        for (k = 0; k < keyLengthInBytes; ++k) {\n          derivedKey[k] = hash[k] ^ j;\n        }\n\n        cipher = new ARCFourCipher(derivedKey);\n        userPassword = cipher.encryptBlock(userPassword);\n      }\n    } else {\n      cipher = new ARCFourCipher(hash.subarray(0, keyLengthInBytes));\n      userPassword = cipher.encryptBlock(ownerPassword);\n    }\n\n    return userPassword;\n  }\n\n  var identityName = _primitives.Name.get("Identity");\n\n  function CipherTransformFactory(dict, fileId, password) {\n    var filter = dict.get("Filter");\n\n    if (!(0, _primitives.isName)(filter, "Standard")) {\n      throw new _util.FormatError("unknown encryption method");\n    }\n\n    this.dict = dict;\n    var algorithm = dict.get("V");\n\n    if (!Number.isInteger(algorithm) || algorithm !== 1 && algorithm !== 2 && algorithm !== 4 && algorithm !== 5) {\n      throw new _util.FormatError("unsupported encryption algorithm");\n    }\n\n    this.algorithm = algorithm;\n    var keyLength = dict.get("Length");\n\n    if (!keyLength) {\n      if (algorithm <= 3) {\n        keyLength = 40;\n      } else {\n        var cfDict = dict.get("CF");\n        var streamCryptoName = dict.get("StmF");\n\n        if ((0, _primitives.isDict)(cfDict) && (0, _primitives.isName)(streamCryptoName)) {\n          cfDict.suppressEncryption = true;\n          var handlerDict = cfDict.get(streamCryptoName.name);\n          keyLength = handlerDict && handlerDict.get("Length") || 128;\n\n          if (keyLength < 40) {\n            keyLength <<= 3;\n          }\n        }\n      }\n    }\n\n    if (!Number.isInteger(keyLength) || keyLength < 40 || keyLength % 8 !== 0) {\n      throw new _util.FormatError("invalid key length");\n    }\n\n    var ownerPassword = (0, _util.stringToBytes)(dict.get("O")).subarray(0, 32);\n    var userPassword = (0, _util.stringToBytes)(dict.get("U")).subarray(0, 32);\n    var flags = dict.get("P");\n    var revision = dict.get("R");\n    var encryptMetadata = (algorithm === 4 || algorithm === 5) && dict.get("EncryptMetadata") !== false;\n    this.encryptMetadata = encryptMetadata;\n    var fileIdBytes = (0, _util.stringToBytes)(fileId);\n    var passwordBytes;\n\n    if (password) {\n      if (revision === 6) {\n        try {\n          password = (0, _util.utf8StringToString)(password);\n        } catch (ex) {\n          (0, _util.warn)("CipherTransformFactory: " + "Unable to convert UTF8 encoded password.");\n        }\n      }\n\n      passwordBytes = (0, _util.stringToBytes)(password);\n    }\n\n    var encryptionKey;\n\n    if (algorithm !== 5) {\n      encryptionKey = prepareKeyData(fileIdBytes, passwordBytes, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata);\n    } else {\n      var ownerValidationSalt = (0, _util.stringToBytes)(dict.get("O")).subarray(32, 40);\n      var ownerKeySalt = (0, _util.stringToBytes)(dict.get("O")).subarray(40, 48);\n      var uBytes = (0, _util.stringToBytes)(dict.get("U")).subarray(0, 48);\n      var userValidationSalt = (0, _util.stringToBytes)(dict.get("U")).subarray(32, 40);\n      var userKeySalt = (0, _util.stringToBytes)(dict.get("U")).subarray(40, 48);\n      var ownerEncryption = (0, _util.stringToBytes)(dict.get("OE"));\n      var userEncryption = (0, _util.stringToBytes)(dict.get("UE"));\n      var perms = (0, _util.stringToBytes)(dict.get("Perms"));\n      encryptionKey = createEncryptionKey20(revision, passwordBytes, ownerPassword, ownerValidationSalt, ownerKeySalt, uBytes, userPassword, userValidationSalt, userKeySalt, ownerEncryption, userEncryption, perms);\n    }\n\n    if (!encryptionKey && !password) {\n      throw new _util.PasswordException("No password given", _util.PasswordResponses.NEED_PASSWORD);\n    } else if (!encryptionKey && password) {\n      var decodedPassword = decodeUserPassword(passwordBytes, ownerPassword, revision, keyLength);\n      encryptionKey = prepareKeyData(fileIdBytes, decodedPassword, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata);\n    }\n\n    if (!encryptionKey) {\n      throw new _util.PasswordException("Incorrect Password", _util.PasswordResponses.INCORRECT_PASSWORD);\n    }\n\n    this.encryptionKey = encryptionKey;\n\n    if (algorithm >= 4) {\n      var cf = dict.get("CF");\n\n      if ((0, _primitives.isDict)(cf)) {\n        cf.suppressEncryption = true;\n      }\n\n      this.cf = cf;\n      this.stmf = dict.get("StmF") || identityName;\n      this.strf = dict.get("StrF") || identityName;\n      this.eff = dict.get("EFF") || this.stmf;\n    }\n  }\n\n  function buildObjectKey(num, gen, encryptionKey, isAes) {\n    var key = new Uint8Array(encryptionKey.length + 9),\n        i,\n        n;\n\n    for (i = 0, n = encryptionKey.length; i < n; ++i) {\n      key[i] = encryptionKey[i];\n    }\n\n    key[i++] = num & 0xff;\n    key[i++] = num >> 8 & 0xff;\n    key[i++] = num >> 16 & 0xff;\n    key[i++] = gen & 0xff;\n    key[i++] = gen >> 8 & 0xff;\n\n    if (isAes) {\n      key[i++] = 0x73;\n      key[i++] = 0x41;\n      key[i++] = 0x6c;\n      key[i++] = 0x54;\n    }\n\n    var hash = calculateMD5(key, 0, i);\n    return hash.subarray(0, Math.min(encryptionKey.length + 5, 16));\n  }\n\n  function buildCipherConstructor(cf, name, num, gen, key) {\n    if (!(0, _primitives.isName)(name)) {\n      throw new _util.FormatError("Invalid crypt filter name.");\n    }\n\n    var cryptFilter = cf.get(name.name);\n    var cfm;\n\n    if (cryptFilter !== null && cryptFilter !== undefined) {\n      cfm = cryptFilter.get("CFM");\n    }\n\n    if (!cfm || cfm.name === "None") {\n      return function cipherTransformFactoryBuildCipherConstructorNone() {\n        return new NullCipher();\n      };\n    }\n\n    if (cfm.name === "V2") {\n      return function cipherTransformFactoryBuildCipherConstructorV2() {\n        return new ARCFourCipher(buildObjectKey(num, gen, key, false));\n      };\n    }\n\n    if (cfm.name === "AESV2") {\n      return function cipherTransformFactoryBuildCipherConstructorAESV2() {\n        return new AES128Cipher(buildObjectKey(num, gen, key, true));\n      };\n    }\n\n    if (cfm.name === "AESV3") {\n      return function cipherTransformFactoryBuildCipherConstructorAESV3() {\n        return new AES256Cipher(key);\n      };\n    }\n\n    throw new _util.FormatError("Unknown crypto method");\n  }\n\n  CipherTransformFactory.prototype = {\n    createCipherTransform: function CipherTransformFactory_createCipherTransform(num, gen) {\n      if (this.algorithm === 4 || this.algorithm === 5) {\n        return new CipherTransform(buildCipherConstructor(this.cf, this.stmf, num, gen, this.encryptionKey), buildCipherConstructor(this.cf, this.strf, num, gen, this.encryptionKey));\n      }\n\n      var key = buildObjectKey(num, gen, this.encryptionKey, false);\n\n      var cipherConstructor = function buildCipherCipherConstructor() {\n        return new ARCFourCipher(key);\n      };\n\n      return new CipherTransform(cipherConstructor, cipherConstructor);\n    }\n  };\n  return CipherTransformFactory;\n}();\n\nexports.CipherTransformFactory = CipherTransformFactory;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/crypto.js\n')},"./node_modules/pdfjs-dist/lib/core/default_appearance.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.createDefaultAppearance = createDefaultAppearance;\nexports.parseDefaultAppearance = parseDefaultAppearance;\n\nvar _primitives = __webpack_require__(/*! ./primitives.js */ "./node_modules/pdfjs-dist/lib/core/primitives.js");\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _colorspace = __webpack_require__(/*! ./colorspace.js */ "./node_modules/pdfjs-dist/lib/core/colorspace.js");\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nvar _evaluator = __webpack_require__(/*! ./evaluator.js */ "./node_modules/pdfjs-dist/lib/core/evaluator.js");\n\nvar _stream = __webpack_require__(/*! ./stream.js */ "./node_modules/pdfjs-dist/lib/core/stream.js");\n\nclass DefaultAppearanceEvaluator extends _evaluator.EvaluatorPreprocessor {\n  constructor(str) {\n    super(new _stream.StringStream(str));\n  }\n\n  parse() {\n    const operation = {\n      fn: 0,\n      args: []\n    };\n    const result = {\n      fontSize: 0,\n      fontName: _primitives.Name.get(""),\n      fontColor: new Uint8ClampedArray([0, 0, 0])\n    };\n\n    try {\n      while (true) {\n        operation.args.length = 0;\n\n        if (!this.read(operation)) {\n          break;\n        }\n\n        if (this.savedStatesDepth !== 0) {\n          continue;\n        }\n\n        const {\n          fn,\n          args\n        } = operation;\n\n        switch (fn | 0) {\n          case _util.OPS.setFont:\n            const [fontName, fontSize] = args;\n\n            if ((0, _primitives.isName)(fontName)) {\n              result.fontName = fontName;\n            }\n\n            if (typeof fontSize === "number" && fontSize > 0) {\n              result.fontSize = fontSize;\n            }\n\n            break;\n\n          case _util.OPS.setFillRGBColor:\n            _colorspace.ColorSpace.singletons.rgb.getRgbItem(args, 0, result.fontColor, 0);\n\n            break;\n\n          case _util.OPS.setFillGray:\n            _colorspace.ColorSpace.singletons.gray.getRgbItem(args, 0, result.fontColor, 0);\n\n            break;\n\n          case _util.OPS.setFillColorSpace:\n            _colorspace.ColorSpace.singletons.cmyk.getRgbItem(args, 0, result.fontColor, 0);\n\n            break;\n        }\n      }\n    } catch (reason) {\n      (0, _util.warn)(`parseDefaultAppearance - ignoring errors: "${reason}".`);\n    }\n\n    return result;\n  }\n\n}\n\nfunction parseDefaultAppearance(str) {\n  return new DefaultAppearanceEvaluator(str).parse();\n}\n\nfunction createDefaultAppearance({\n  fontSize,\n  fontName,\n  fontColor\n}) {\n  let colorCmd;\n\n  if (fontColor.every(c => c === 0)) {\n    colorCmd = "0 g";\n  } else {\n    colorCmd = Array.from(fontColor).map(c => (c / 255).toFixed(2)).join(" ") + " rg";\n  }\n\n  return `/${(0, _core_utils.escapePDFName)(fontName.name)} ${fontSize} Tf ${colorCmd}`;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGRmanMtZGlzdC9saWIvY29yZS9kZWZhdWx0X2FwcGVhcmFuY2UuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TaW1wbGVQZGZBbmFseXplci8uL25vZGVfbW9kdWxlcy9wZGZqcy1kaXN0L2xpYi9jb3JlL2RlZmF1bHRfYXBwZWFyYW5jZS5qcz9mNWEzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY3N0YXJ0IFRoZSBmb2xsb3dpbmcgaXMgdGhlIGVudGlyZSBsaWNlbnNlIG5vdGljZSBmb3IgdGhlXG4gKiBKYXZhc2NyaXB0IGNvZGUgaW4gdGhpcyBwYWdlXG4gKlxuICogQ29weXJpZ2h0IDIwMjAgTW96aWxsYSBGb3VuZGF0aW9uXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqIEBsaWNlbmQgVGhlIGFib3ZlIGlzIHRoZSBlbnRpcmUgbGljZW5zZSBub3RpY2UgZm9yIHRoZVxuICogSmF2YXNjcmlwdCBjb2RlIGluIHRoaXMgcGFnZVxuICovXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY3JlYXRlRGVmYXVsdEFwcGVhcmFuY2UgPSBjcmVhdGVEZWZhdWx0QXBwZWFyYW5jZTtcbmV4cG9ydHMucGFyc2VEZWZhdWx0QXBwZWFyYW5jZSA9IHBhcnNlRGVmYXVsdEFwcGVhcmFuY2U7XG5cbnZhciBfcHJpbWl0aXZlcyA9IHJlcXVpcmUoXCIuL3ByaW1pdGl2ZXMuanNcIik7XG5cbnZhciBfdXRpbCA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvdXRpbC5qc1wiKTtcblxudmFyIF9jb2xvcnNwYWNlID0gcmVxdWlyZShcIi4vY29sb3JzcGFjZS5qc1wiKTtcblxudmFyIF9jb3JlX3V0aWxzID0gcmVxdWlyZShcIi4vY29yZV91dGlscy5qc1wiKTtcblxudmFyIF9ldmFsdWF0b3IgPSByZXF1aXJlKFwiLi9ldmFsdWF0b3IuanNcIik7XG5cbnZhciBfc3RyZWFtID0gcmVxdWlyZShcIi4vc3RyZWFtLmpzXCIpO1xuXG5jbGFzcyBEZWZhdWx0QXBwZWFyYW5jZUV2YWx1YXRvciBleHRlbmRzIF9ldmFsdWF0b3IuRXZhbHVhdG9yUHJlcHJvY2Vzc29yIHtcbiAgY29uc3RydWN0b3Ioc3RyKSB7XG4gICAgc3VwZXIobmV3IF9zdHJlYW0uU3RyaW5nU3RyZWFtKHN0cikpO1xuICB9XG5cbiAgcGFyc2UoKSB7XG4gICAgY29uc3Qgb3BlcmF0aW9uID0ge1xuICAgICAgZm46IDAsXG4gICAgICBhcmdzOiBbXVxuICAgIH07XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgZm9udFNpemU6IDAsXG4gICAgICBmb250TmFtZTogX3ByaW1pdGl2ZXMuTmFtZS5nZXQoXCJcIiksXG4gICAgICBmb250Q29sb3I6IG5ldyBVaW50OENsYW1wZWRBcnJheShbMCwgMCwgMF0pXG4gICAgfTtcblxuICAgIHRyeSB7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBvcGVyYXRpb24uYXJncy5sZW5ndGggPSAwO1xuXG4gICAgICAgIGlmICghdGhpcy5yZWFkKG9wZXJhdGlvbikpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNhdmVkU3RhdGVzRGVwdGggIT09IDApIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBmbixcbiAgICAgICAgICBhcmdzXG4gICAgICAgIH0gPSBvcGVyYXRpb247XG5cbiAgICAgICAgc3dpdGNoIChmbiB8IDApIHtcbiAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zZXRGb250OlxuICAgICAgICAgICAgY29uc3QgW2ZvbnROYW1lLCBmb250U2l6ZV0gPSBhcmdzO1xuXG4gICAgICAgICAgICBpZiAoKDAsIF9wcmltaXRpdmVzLmlzTmFtZSkoZm9udE5hbWUpKSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5mb250TmFtZSA9IGZvbnROYW1lO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZvbnRTaXplID09PSBcIm51bWJlclwiICYmIGZvbnRTaXplID4gMCkge1xuICAgICAgICAgICAgICByZXN1bHQuZm9udFNpemUgPSBmb250U2l6ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zZXRGaWxsUkdCQ29sb3I6XG4gICAgICAgICAgICBfY29sb3JzcGFjZS5Db2xvclNwYWNlLnNpbmdsZXRvbnMucmdiLmdldFJnYkl0ZW0oYXJncywgMCwgcmVzdWx0LmZvbnRDb2xvciwgMCk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0RmlsbEdyYXk6XG4gICAgICAgICAgICBfY29sb3JzcGFjZS5Db2xvclNwYWNlLnNpbmdsZXRvbnMuZ3JheS5nZXRSZ2JJdGVtKGFyZ3MsIDAsIHJlc3VsdC5mb250Q29sb3IsIDApO1xuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldEZpbGxDb2xvclNwYWNlOlxuICAgICAgICAgICAgX2NvbG9yc3BhY2UuQ29sb3JTcGFjZS5zaW5nbGV0b25zLmNteWsuZ2V0UmdiSXRlbShhcmdzLCAwLCByZXN1bHQuZm9udENvbG9yLCAwKTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChyZWFzb24pIHtcbiAgICAgICgwLCBfdXRpbC53YXJuKShgcGFyc2VEZWZhdWx0QXBwZWFyYW5jZSAtIGlnbm9yaW5nIGVycm9yczogXCIke3JlYXNvbn1cIi5gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbn1cblxuZnVuY3Rpb24gcGFyc2VEZWZhdWx0QXBwZWFyYW5jZShzdHIpIHtcbiAgcmV0dXJuIG5ldyBEZWZhdWx0QXBwZWFyYW5jZUV2YWx1YXRvcihzdHIpLnBhcnNlKCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRBcHBlYXJhbmNlKHtcbiAgZm9udFNpemUsXG4gIGZvbnROYW1lLFxuICBmb250Q29sb3Jcbn0pIHtcbiAgbGV0IGNvbG9yQ21kO1xuXG4gIGlmIChmb250Q29sb3IuZXZlcnkoYyA9PiBjID09PSAwKSkge1xuICAgIGNvbG9yQ21kID0gXCIwIGdcIjtcbiAgfSBlbHNlIHtcbiAgICBjb2xvckNtZCA9IEFycmF5LmZyb20oZm9udENvbG9yKS5tYXAoYyA9PiAoYyAvIDI1NSkudG9GaXhlZCgyKSkuam9pbihcIiBcIikgKyBcIiByZ1wiO1xuICB9XG5cbiAgcmV0dXJuIGAvJHsoMCwgX2NvcmVfdXRpbHMuZXNjYXBlUERGTmFtZSkoZm9udE5hbWUubmFtZSl9ICR7Zm9udFNpemV9IFRmICR7Y29sb3JDbWR9YDtcbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/default_appearance.js\n')},"./node_modules/pdfjs-dist/lib/core/document.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.PDFDocument = exports.Page = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _obj = __webpack_require__(/*! ./obj.js */ "./node_modules/pdfjs-dist/lib/core/obj.js");\n\nvar _primitives = __webpack_require__(/*! ./primitives.js */ "./node_modules/pdfjs-dist/lib/core/primitives.js");\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nvar _stream = __webpack_require__(/*! ./stream.js */ "./node_modules/pdfjs-dist/lib/core/stream.js");\n\nvar _annotation = __webpack_require__(/*! ./annotation.js */ "./node_modules/pdfjs-dist/lib/core/annotation.js");\n\nvar _crypto = __webpack_require__(/*! ./crypto.js */ "./node_modules/pdfjs-dist/lib/core/crypto.js");\n\nvar _parser = __webpack_require__(/*! ./parser.js */ "./node_modules/pdfjs-dist/lib/core/parser.js");\n\nvar _operator_list = __webpack_require__(/*! ./operator_list.js */ "./node_modules/pdfjs-dist/lib/core/operator_list.js");\n\nvar _evaluator = __webpack_require__(/*! ./evaluator.js */ "./node_modules/pdfjs-dist/lib/core/evaluator.js");\n\nconst DEFAULT_USER_UNIT = 1.0;\nconst LETTER_SIZE_MEDIABOX = [0, 0, 612, 792];\n\nfunction isAnnotationRenderable(annotation, intent) {\n  return intent === "display" && annotation.viewable || intent === "print" && annotation.printable;\n}\n\nclass Page {\n  constructor({\n    pdfManager,\n    xref,\n    pageIndex,\n    pageDict,\n    ref,\n    globalIdFactory,\n    fontCache,\n    builtInCMapCache,\n    globalImageCache,\n    nonBlendModesSet\n  }) {\n    this.pdfManager = pdfManager;\n    this.pageIndex = pageIndex;\n    this.pageDict = pageDict;\n    this.xref = xref;\n    this.ref = ref;\n    this.fontCache = fontCache;\n    this.builtInCMapCache = builtInCMapCache;\n    this.globalImageCache = globalImageCache;\n    this.nonBlendModesSet = nonBlendModesSet;\n    this.evaluatorOptions = pdfManager.evaluatorOptions;\n    this.resourcesPromise = null;\n    const idCounters = {\n      obj: 0\n    };\n    this._localIdFactory = class extends globalIdFactory {\n      static createObjId() {\n        return `p${pageIndex}_${++idCounters.obj}`;\n      }\n\n    };\n  }\n\n  _getInheritableProperty(key, getArray = false) {\n    const value = (0, _core_utils.getInheritableProperty)({\n      dict: this.pageDict,\n      key,\n      getArray,\n      stopWhenFound: false\n    });\n\n    if (!Array.isArray(value)) {\n      return value;\n    }\n\n    if (value.length === 1 || !(0, _primitives.isDict)(value[0])) {\n      return value[0];\n    }\n\n    return _primitives.Dict.merge({\n      xref: this.xref,\n      dictArray: value\n    });\n  }\n\n  get content() {\n    return this.pageDict.get("Contents");\n  }\n\n  get resources() {\n    return (0, _util.shadow)(this, "resources", this._getInheritableProperty("Resources") || _primitives.Dict.empty);\n  }\n\n  _getBoundingBox(name) {\n    const box = this._getInheritableProperty(name, true);\n\n    if (Array.isArray(box) && box.length === 4) {\n      if (box[2] - box[0] !== 0 && box[3] - box[1] !== 0) {\n        return box;\n      }\n\n      (0, _util.warn)(`Empty /${name} entry.`);\n    }\n\n    return null;\n  }\n\n  get mediaBox() {\n    return (0, _util.shadow)(this, "mediaBox", this._getBoundingBox("MediaBox") || LETTER_SIZE_MEDIABOX);\n  }\n\n  get cropBox() {\n    return (0, _util.shadow)(this, "cropBox", this._getBoundingBox("CropBox") || this.mediaBox);\n  }\n\n  get userUnit() {\n    let obj = this.pageDict.get("UserUnit");\n\n    if (!(0, _util.isNum)(obj) || obj <= 0) {\n      obj = DEFAULT_USER_UNIT;\n    }\n\n    return (0, _util.shadow)(this, "userUnit", obj);\n  }\n\n  get view() {\n    const {\n      cropBox,\n      mediaBox\n    } = this;\n    let view;\n\n    if (cropBox === mediaBox || (0, _util.isArrayEqual)(cropBox, mediaBox)) {\n      view = mediaBox;\n    } else {\n      const box = _util.Util.intersect(cropBox, mediaBox);\n\n      if (box && box[2] - box[0] !== 0 && box[3] - box[1] !== 0) {\n        view = box;\n      } else {\n        (0, _util.warn)("Empty /CropBox and /MediaBox intersection.");\n      }\n    }\n\n    return (0, _util.shadow)(this, "view", view || mediaBox);\n  }\n\n  get rotate() {\n    let rotate = this._getInheritableProperty("Rotate") || 0;\n\n    if (rotate % 90 !== 0) {\n      rotate = 0;\n    } else if (rotate >= 360) {\n      rotate = rotate % 360;\n    } else if (rotate < 0) {\n      rotate = (rotate % 360 + 360) % 360;\n    }\n\n    return (0, _util.shadow)(this, "rotate", rotate);\n  }\n\n  getContentStream() {\n    const content = this.content;\n    let stream;\n\n    if (Array.isArray(content)) {\n      const xref = this.xref;\n      const streams = [];\n\n      for (const subStream of content) {\n        streams.push(xref.fetchIfRef(subStream));\n      }\n\n      stream = new _stream.StreamsSequenceStream(streams);\n    } else if ((0, _primitives.isStream)(content)) {\n      stream = content;\n    } else {\n      stream = new _stream.NullStream();\n    }\n\n    return stream;\n  }\n\n  save(handler, task, annotationStorage) {\n    const partialEvaluator = new _evaluator.PartialEvaluator({\n      xref: this.xref,\n      handler,\n      pageIndex: this.pageIndex,\n      idFactory: this._localIdFactory,\n      fontCache: this.fontCache,\n      builtInCMapCache: this.builtInCMapCache,\n      globalImageCache: this.globalImageCache,\n      options: this.evaluatorOptions\n    });\n    return this._parsedAnnotations.then(function (annotations) {\n      const newRefsPromises = [];\n\n      for (const annotation of annotations) {\n        if (!isAnnotationRenderable(annotation, "print")) {\n          continue;\n        }\n\n        newRefsPromises.push(annotation.save(partialEvaluator, task, annotationStorage).catch(function (reason) {\n          (0, _util.warn)("save - ignoring annotation data during " + `"${task.name}" task: "${reason}".`);\n          return null;\n        }));\n      }\n\n      return Promise.all(newRefsPromises);\n    });\n  }\n\n  loadResources(keys) {\n    if (!this.resourcesPromise) {\n      this.resourcesPromise = this.pdfManager.ensure(this, "resources");\n    }\n\n    return this.resourcesPromise.then(() => {\n      const objectLoader = new _obj.ObjectLoader(this.resources, keys, this.xref);\n      return objectLoader.load();\n    });\n  }\n\n  getOperatorList({\n    handler,\n    sink,\n    task,\n    intent,\n    renderInteractiveForms,\n    annotationStorage\n  }) {\n    const contentStreamPromise = this.pdfManager.ensure(this, "getContentStream");\n    const resourcesPromise = this.loadResources(["ExtGState", "ColorSpace", "Pattern", "Shading", "XObject", "Font"]);\n    const partialEvaluator = new _evaluator.PartialEvaluator({\n      xref: this.xref,\n      handler,\n      pageIndex: this.pageIndex,\n      idFactory: this._localIdFactory,\n      fontCache: this.fontCache,\n      builtInCMapCache: this.builtInCMapCache,\n      globalImageCache: this.globalImageCache,\n      options: this.evaluatorOptions\n    });\n    const dataPromises = Promise.all([contentStreamPromise, resourcesPromise]);\n    const pageListPromise = dataPromises.then(([contentStream]) => {\n      const opList = new _operator_list.OperatorList(intent, sink);\n      handler.send("StartRenderPage", {\n        transparency: partialEvaluator.hasBlendModes(this.resources, this.nonBlendModesSet),\n        pageIndex: this.pageIndex,\n        intent\n      });\n      return partialEvaluator.getOperatorList({\n        stream: contentStream,\n        task,\n        resources: this.resources,\n        operatorList: opList\n      }).then(function () {\n        return opList;\n      });\n    });\n    return Promise.all([pageListPromise, this._parsedAnnotations]).then(function ([pageOpList, annotations]) {\n      if (annotations.length === 0) {\n        pageOpList.flush(true);\n        return {\n          length: pageOpList.totalLength\n        };\n      }\n\n      const opListPromises = [];\n\n      for (const annotation of annotations) {\n        if (isAnnotationRenderable(annotation, intent) && !annotation.isHidden(annotationStorage)) {\n          opListPromises.push(annotation.getOperatorList(partialEvaluator, task, renderInteractiveForms, annotationStorage).catch(function (reason) {\n            (0, _util.warn)("getOperatorList - ignoring annotation data during " + `"${task.name}" task: "${reason}".`);\n            return null;\n          }));\n        }\n      }\n\n      return Promise.all(opListPromises).then(function (opLists) {\n        pageOpList.addOp(_util.OPS.beginAnnotations, []);\n\n        for (const opList of opLists) {\n          pageOpList.addOpList(opList);\n        }\n\n        pageOpList.addOp(_util.OPS.endAnnotations, []);\n        pageOpList.flush(true);\n        return {\n          length: pageOpList.totalLength\n        };\n      });\n    });\n  }\n\n  extractTextContent({\n    handler,\n    task,\n    normalizeWhitespace,\n    sink,\n    combineTextItems\n  }) {\n    const contentStreamPromise = this.pdfManager.ensure(this, "getContentStream");\n    const resourcesPromise = this.loadResources(["ExtGState", "XObject", "Font"]);\n    const dataPromises = Promise.all([contentStreamPromise, resourcesPromise]);\n    return dataPromises.then(([contentStream]) => {\n      const partialEvaluator = new _evaluator.PartialEvaluator({\n        xref: this.xref,\n        handler,\n        pageIndex: this.pageIndex,\n        idFactory: this._localIdFactory,\n        fontCache: this.fontCache,\n        builtInCMapCache: this.builtInCMapCache,\n        globalImageCache: this.globalImageCache,\n        options: this.evaluatorOptions\n      });\n      return partialEvaluator.getTextContent({\n        stream: contentStream,\n        task,\n        resources: this.resources,\n        normalizeWhitespace,\n        combineTextItems,\n        sink\n      });\n    });\n  }\n\n  getAnnotationsData(intent) {\n    return this._parsedAnnotations.then(function (annotations) {\n      const annotationsData = [];\n\n      for (let i = 0, ii = annotations.length; i < ii; i++) {\n        if (!intent || isAnnotationRenderable(annotations[i], intent)) {\n          annotationsData.push(annotations[i].data);\n        }\n      }\n\n      return annotationsData;\n    });\n  }\n\n  get annotations() {\n    const annots = this._getInheritableProperty("Annots");\n\n    return (0, _util.shadow)(this, "annotations", Array.isArray(annots) ? annots : []);\n  }\n\n  get _parsedAnnotations() {\n    const parsedAnnotations = this.pdfManager.ensure(this, "annotations").then(() => {\n      const annotationPromises = [];\n\n      for (const annotationRef of this.annotations) {\n        annotationPromises.push(_annotation.AnnotationFactory.create(this.xref, annotationRef, this.pdfManager, this._localIdFactory).catch(function (reason) {\n          (0, _util.warn)(`_parsedAnnotations: "${reason}".`);\n          return null;\n        }));\n      }\n\n      return Promise.all(annotationPromises).then(function (annotations) {\n        return annotations.filter(annotation => !!annotation);\n      });\n    });\n    return (0, _util.shadow)(this, "_parsedAnnotations", parsedAnnotations);\n  }\n\n  get jsActions() {\n    const actions = (0, _core_utils.collectActions)(this.xref, this.pageDict, _util.PageActionEventType);\n    return (0, _util.shadow)(this, "jsActions", actions);\n  }\n\n}\n\nexports.Page = Page;\nconst PDF_HEADER_SIGNATURE = new Uint8Array([0x25, 0x50, 0x44, 0x46, 0x2d]);\nconst STARTXREF_SIGNATURE = new Uint8Array([0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, 0x66]);\nconst ENDOBJ_SIGNATURE = new Uint8Array([0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a]);\nconst FINGERPRINT_FIRST_BYTES = 1024;\nconst EMPTY_FINGERPRINT = "\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00";\nconst PDF_HEADER_VERSION_REGEXP = /^[1-9]\\.[0-9]$/;\n\nfunction find(stream, signature, limit = 1024, backwards = false) {\n  const signatureLength = signature.length;\n  const scanBytes = stream.peekBytes(limit);\n  const scanLength = scanBytes.length - signatureLength;\n\n  if (scanLength <= 0) {\n    return false;\n  }\n\n  if (backwards) {\n    const signatureEnd = signatureLength - 1;\n    let pos = scanBytes.length - 1;\n\n    while (pos >= signatureEnd) {\n      let j = 0;\n\n      while (j < signatureLength && scanBytes[pos - j] === signature[signatureEnd - j]) {\n        j++;\n      }\n\n      if (j >= signatureLength) {\n        stream.pos += pos - signatureEnd;\n        return true;\n      }\n\n      pos--;\n    }\n  } else {\n    let pos = 0;\n\n    while (pos <= scanLength) {\n      let j = 0;\n\n      while (j < signatureLength && scanBytes[pos + j] === signature[j]) {\n        j++;\n      }\n\n      if (j >= signatureLength) {\n        stream.pos += pos;\n        return true;\n      }\n\n      pos++;\n    }\n  }\n\n  return false;\n}\n\nclass PDFDocument {\n  constructor(pdfManager, arg) {\n    let stream;\n\n    if ((0, _primitives.isStream)(arg)) {\n      stream = arg;\n    } else if ((0, _util.isArrayBuffer)(arg)) {\n      stream = new _stream.Stream(arg);\n    } else {\n      throw new Error("PDFDocument: Unknown argument type");\n    }\n\n    if (stream.length <= 0) {\n      throw new _util.InvalidPDFException("The PDF file is empty, i.e. its size is zero bytes.");\n    }\n\n    this.pdfManager = pdfManager;\n    this.stream = stream;\n    this.xref = new _obj.XRef(stream, pdfManager);\n    this._pagePromises = [];\n    this._version = null;\n    const idCounters = {\n      font: 0\n    };\n    this._globalIdFactory = class {\n      static getDocId() {\n        return `g_${pdfManager.docId}`;\n      }\n\n      static createFontId() {\n        return `f${++idCounters.font}`;\n      }\n\n      static createObjId() {\n        (0, _util.unreachable)("Abstract method `createObjId` called.");\n      }\n\n    };\n  }\n\n  parse(recoveryMode) {\n    this.xref.parse(recoveryMode);\n    this.catalog = new _obj.Catalog(this.pdfManager, this.xref);\n\n    if (this.catalog.version) {\n      this._version = this.catalog.version;\n    }\n  }\n\n  get linearization() {\n    let linearization = null;\n\n    try {\n      linearization = _parser.Linearization.create(this.stream);\n    } catch (err) {\n      if (err instanceof _core_utils.MissingDataException) {\n        throw err;\n      }\n\n      (0, _util.info)(err);\n    }\n\n    return (0, _util.shadow)(this, "linearization", linearization);\n  }\n\n  get startXRef() {\n    const stream = this.stream;\n    let startXRef = 0;\n\n    if (this.linearization) {\n      stream.reset();\n\n      if (find(stream, ENDOBJ_SIGNATURE)) {\n        startXRef = stream.pos + 6 - stream.start;\n      }\n    } else {\n      const step = 1024;\n      const startXRefLength = STARTXREF_SIGNATURE.length;\n      let found = false,\n          pos = stream.end;\n\n      while (!found && pos > 0) {\n        pos -= step - startXRefLength;\n\n        if (pos < 0) {\n          pos = 0;\n        }\n\n        stream.pos = pos;\n        found = find(stream, STARTXREF_SIGNATURE, step, true);\n      }\n\n      if (found) {\n        stream.skip(9);\n        let ch;\n\n        do {\n          ch = stream.getByte();\n        } while ((0, _core_utils.isWhiteSpace)(ch));\n\n        let str = "";\n\n        while (ch >= 0x20 && ch <= 0x39) {\n          str += String.fromCharCode(ch);\n          ch = stream.getByte();\n        }\n\n        startXRef = parseInt(str, 10);\n\n        if (isNaN(startXRef)) {\n          startXRef = 0;\n        }\n      }\n    }\n\n    return (0, _util.shadow)(this, "startXRef", startXRef);\n  }\n\n  checkHeader() {\n    const stream = this.stream;\n    stream.reset();\n\n    if (!find(stream, PDF_HEADER_SIGNATURE)) {\n      return;\n    }\n\n    stream.moveStart();\n    const MAX_PDF_VERSION_LENGTH = 12;\n    let version = "",\n        ch;\n\n    while ((ch = stream.getByte()) > 0x20) {\n      if (version.length >= MAX_PDF_VERSION_LENGTH) {\n        break;\n      }\n\n      version += String.fromCharCode(ch);\n    }\n\n    if (!this._version) {\n      this._version = version.substring(5);\n    }\n  }\n\n  parseStartXRef() {\n    this.xref.setStartXRef(this.startXRef);\n  }\n\n  get numPages() {\n    const linearization = this.linearization;\n    const num = linearization ? linearization.numPages : this.catalog.numPages;\n    return (0, _util.shadow)(this, "numPages", num);\n  }\n\n  _hasOnlyDocumentSignatures(fields, recursionDepth = 0) {\n    const RECURSION_LIMIT = 10;\n\n    if (!Array.isArray(fields)) {\n      return false;\n    }\n\n    return fields.every(field => {\n      field = this.xref.fetchIfRef(field);\n\n      if (!(field instanceof _primitives.Dict)) {\n        return false;\n      }\n\n      if (field.has("Kids")) {\n        if (++recursionDepth > RECURSION_LIMIT) {\n          (0, _util.warn)("_hasOnlyDocumentSignatures: maximum recursion depth reached");\n          return false;\n        }\n\n        return this._hasOnlyDocumentSignatures(field.get("Kids"), recursionDepth);\n      }\n\n      const isSignature = (0, _primitives.isName)(field.get("FT"), "Sig");\n      const rectangle = field.get("Rect");\n      const isInvisible = Array.isArray(rectangle) && rectangle.every(value => value === 0);\n      return isSignature && isInvisible;\n    });\n  }\n\n  get formInfo() {\n    const formInfo = {\n      hasFields: false,\n      hasAcroForm: false,\n      hasXfa: false\n    };\n    const acroForm = this.catalog.acroForm;\n\n    if (!acroForm) {\n      return (0, _util.shadow)(this, "formInfo", formInfo);\n    }\n\n    try {\n      const fields = acroForm.get("Fields");\n      const hasFields = Array.isArray(fields) && fields.length > 0;\n      formInfo.hasFields = hasFields;\n      const xfa = acroForm.get("XFA");\n      formInfo.hasXfa = Array.isArray(xfa) && xfa.length > 0 || (0, _primitives.isStream)(xfa) && !xfa.isEmpty;\n      const sigFlags = acroForm.get("SigFlags");\n\n      const hasOnlyDocumentSignatures = !!(sigFlags & 0x1) && this._hasOnlyDocumentSignatures(fields);\n\n      formInfo.hasAcroForm = hasFields && !hasOnlyDocumentSignatures;\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)(`Cannot fetch form information: "${ex}".`);\n    }\n\n    return (0, _util.shadow)(this, "formInfo", formInfo);\n  }\n\n  get documentInfo() {\n    const DocumentInfoValidators = {\n      Title: _util.isString,\n      Author: _util.isString,\n      Subject: _util.isString,\n      Keywords: _util.isString,\n      Creator: _util.isString,\n      Producer: _util.isString,\n      CreationDate: _util.isString,\n      ModDate: _util.isString,\n      Trapped: _primitives.isName\n    };\n    let version = this._version;\n\n    if (typeof version !== "string" || !PDF_HEADER_VERSION_REGEXP.test(version)) {\n      (0, _util.warn)(`Invalid PDF header version number: ${version}`);\n      version = null;\n    }\n\n    const docInfo = {\n      PDFFormatVersion: version,\n      IsLinearized: !!this.linearization,\n      IsAcroFormPresent: this.formInfo.hasAcroForm,\n      IsXFAPresent: this.formInfo.hasXfa,\n      IsCollectionPresent: !!this.catalog.collection\n    };\n    let infoDict;\n\n    try {\n      infoDict = this.xref.trailer.get("Info");\n    } catch (err) {\n      if (err instanceof _core_utils.MissingDataException) {\n        throw err;\n      }\n\n      (0, _util.info)("The document information dictionary is invalid.");\n    }\n\n    if ((0, _primitives.isDict)(infoDict)) {\n      for (const key of infoDict.getKeys()) {\n        const value = infoDict.get(key);\n\n        if (DocumentInfoValidators[key]) {\n          if (DocumentInfoValidators[key](value)) {\n            docInfo[key] = typeof value !== "string" ? value : (0, _util.stringToPDFString)(value);\n          } else {\n            (0, _util.info)(`Bad value in document info for "${key}".`);\n          }\n        } else if (typeof key === "string") {\n          let customValue;\n\n          if ((0, _util.isString)(value)) {\n            customValue = (0, _util.stringToPDFString)(value);\n          } else if ((0, _primitives.isName)(value) || (0, _util.isNum)(value) || (0, _util.isBool)(value)) {\n            customValue = value;\n          } else {\n            (0, _util.info)(`Unsupported value in document info for (custom) "${key}".`);\n            continue;\n          }\n\n          if (!docInfo.Custom) {\n            docInfo.Custom = Object.create(null);\n          }\n\n          docInfo.Custom[key] = customValue;\n        }\n      }\n    }\n\n    return (0, _util.shadow)(this, "documentInfo", docInfo);\n  }\n\n  get fingerprint() {\n    let hash;\n    const idArray = this.xref.trailer.get("ID");\n\n    if (Array.isArray(idArray) && idArray[0] && (0, _util.isString)(idArray[0]) && idArray[0] !== EMPTY_FINGERPRINT) {\n      hash = (0, _util.stringToBytes)(idArray[0]);\n    } else {\n      hash = (0, _crypto.calculateMD5)(this.stream.getByteRange(0, FINGERPRINT_FIRST_BYTES), 0, FINGERPRINT_FIRST_BYTES);\n    }\n\n    const fingerprintBuf = [];\n\n    for (let i = 0, ii = hash.length; i < ii; i++) {\n      const hex = hash[i].toString(16);\n      fingerprintBuf.push(hex.padStart(2, "0"));\n    }\n\n    return (0, _util.shadow)(this, "fingerprint", fingerprintBuf.join(""));\n  }\n\n  _getLinearizationPage(pageIndex) {\n    const {\n      catalog,\n      linearization\n    } = this;\n\n    const ref = _primitives.Ref.get(linearization.objectNumberFirst, 0);\n\n    return this.xref.fetchAsync(ref).then(obj => {\n      if ((0, _primitives.isDict)(obj, "Page") || (0, _primitives.isDict)(obj) && !obj.has("Type") && obj.has("Contents")) {\n        if (ref && !catalog.pageKidsCountCache.has(ref)) {\n          catalog.pageKidsCountCache.put(ref, 1);\n        }\n\n        return [obj, ref];\n      }\n\n      throw new _util.FormatError("The Linearization dictionary doesn\'t point " + "to a valid Page dictionary.");\n    }).catch(reason => {\n      (0, _util.info)(reason);\n      return catalog.getPageDict(pageIndex);\n    });\n  }\n\n  getPage(pageIndex) {\n    if (this._pagePromises[pageIndex] !== undefined) {\n      return this._pagePromises[pageIndex];\n    }\n\n    const {\n      catalog,\n      linearization\n    } = this;\n    const promise = linearization && linearization.pageFirst === pageIndex ? this._getLinearizationPage(pageIndex) : catalog.getPageDict(pageIndex);\n    return this._pagePromises[pageIndex] = promise.then(([pageDict, ref]) => {\n      return new Page({\n        pdfManager: this.pdfManager,\n        xref: this.xref,\n        pageIndex,\n        pageDict,\n        ref,\n        globalIdFactory: this._globalIdFactory,\n        fontCache: catalog.fontCache,\n        builtInCMapCache: catalog.builtInCMapCache,\n        globalImageCache: catalog.globalImageCache,\n        nonBlendModesSet: catalog.nonBlendModesSet\n      });\n    });\n  }\n\n  checkFirstPage() {\n    return this.getPage(0).catch(async reason => {\n      if (reason instanceof _core_utils.XRefEntryException) {\n        this._pagePromises.length = 0;\n        await this.cleanup();\n        throw new _core_utils.XRefParseException();\n      }\n    });\n  }\n\n  fontFallback(id, handler) {\n    return this.catalog.fontFallback(id, handler);\n  }\n\n  async cleanup(manuallyTriggered = false) {\n    return this.catalog ? this.catalog.cleanup(manuallyTriggered) : (0, _primitives.clearPrimitiveCaches)();\n  }\n\n  _collectFieldObjects(name, fieldRef, promises) {\n    const field = this.xref.fetchIfRef(fieldRef);\n\n    if (field.has("T")) {\n      const partName = (0, _util.stringToPDFString)(field.get("T"));\n\n      if (name === "") {\n        name = partName;\n      } else {\n        name = `${name}.${partName}`;\n      }\n    }\n\n    if (!promises.has(name)) {\n      promises.set(name, []);\n    }\n\n    promises.get(name).push(_annotation.AnnotationFactory.create(this.xref, fieldRef, this.pdfManager, this._localIdFactory).then(annotation => annotation && annotation.getFieldObject()).catch(function (reason) {\n      (0, _util.warn)(`_collectFieldObjects: "${reason}".`);\n      return null;\n    }));\n\n    if (field.has("Kids")) {\n      const kids = field.get("Kids");\n\n      for (const kid of kids) {\n        this._collectFieldObjects(name, kid, promises);\n      }\n    }\n  }\n\n  get fieldObjects() {\n    if (!this.formInfo.hasFields) {\n      return (0, _util.shadow)(this, "fieldObjects", Promise.resolve(null));\n    }\n\n    const allFields = Object.create(null);\n    const fieldPromises = new Map();\n\n    for (const fieldRef of this.catalog.acroForm.get("Fields")) {\n      this._collectFieldObjects("", fieldRef, fieldPromises);\n    }\n\n    const allPromises = [];\n\n    for (const [name, promises] of fieldPromises) {\n      allPromises.push(Promise.all(promises).then(fields => {\n        fields = fields.filter(field => !!field);\n\n        if (fields.length > 0) {\n          allFields[name] = fields;\n        }\n      }));\n    }\n\n    return (0, _util.shadow)(this, "fieldObjects", Promise.all(allPromises).then(() => allFields));\n  }\n\n  get hasJSActions() {\n    return (0, _util.shadow)(this, "hasJSActions", this.fieldObjects.then(fieldObjects => {\n      return fieldObjects !== null && Object.values(fieldObjects).some(fieldObject => fieldObject.some(object => object.actions !== null)) || !!this.catalog.jsActions;\n    }));\n  }\n\n  get calculationOrderIds() {\n    const acroForm = this.catalog.acroForm;\n\n    if (!acroForm || !acroForm.has("CO")) {\n      return (0, _util.shadow)(this, "calculationOrderIds", null);\n    }\n\n    const calculationOrder = acroForm.get("CO");\n\n    if (!Array.isArray(calculationOrder) || calculationOrder.length === 0) {\n      return (0, _util.shadow)(this, "calculationOrderIds", null);\n    }\n\n    const ids = calculationOrder.filter(_primitives.isRef).map(ref => ref.toString());\n\n    if (ids.length === 0) {\n      return (0, _util.shadow)(this, "calculationOrderIds", null);\n    }\n\n    return (0, _util.shadow)(this, "calculationOrderIds", ids);\n  }\n\n}\n\nexports.PDFDocument = PDFDocument;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/document.js\n')},"./node_modules/pdfjs-dist/lib/core/encodings.js":function(__unused_webpack_module,exports){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.getEncoding = getEncoding;\nexports.ZapfDingbatsEncoding = exports.WinAnsiEncoding = exports.SymbolSetEncoding = exports.StandardEncoding = exports.MacRomanEncoding = exports.ExpertEncoding = void 0;\nconst ExpertEncoding = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclamsmall", "Hungarumlautsmall", "", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "", "", "", "isuperior", "", "", "lsuperior", "msuperior", "nsuperior", "osuperior", "", "", "rsuperior", "ssuperior", "tsuperior", "", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "exclamdownsmall", "centoldstyle", "Lslashsmall", "", "", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "", "Dotaccentsmall", "", "", "Macronsmall", "", "", "figuredash", "hypheninferior", "", "", "Ogoneksmall", "Ringsmall", "Cedillasmall", "", "", "", "onequarter", "onehalf", "threequarters", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "", "", "zerosuperior", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall"];\nexports.ExpertEncoding = ExpertEncoding;\nconst MacExpertEncoding = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclamsmall", "Hungarumlautsmall", "centoldstyle", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "", "threequartersemdash", "", "questionsmall", "", "", "", "", "Ethsmall", "", "", "onequarter", "onehalf", "threequarters", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "", "", "", "", "", "", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "", "parenrightinferior", "Circumflexsmall", "hypheninferior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "", "", "asuperior", "centsuperior", "", "", "", "", "Aacutesmall", "Agravesmall", "Acircumflexsmall", "Adieresissmall", "Atildesmall", "Aringsmall", "Ccedillasmall", "Eacutesmall", "Egravesmall", "Ecircumflexsmall", "Edieresissmall", "Iacutesmall", "Igravesmall", "Icircumflexsmall", "Idieresissmall", "Ntildesmall", "Oacutesmall", "Ogravesmall", "Ocircumflexsmall", "Odieresissmall", "Otildesmall", "Uacutesmall", "Ugravesmall", "Ucircumflexsmall", "Udieresissmall", "", "eightsuperior", "fourinferior", "threeinferior", "sixinferior", "eightinferior", "seveninferior", "Scaronsmall", "", "centinferior", "twoinferior", "", "Dieresissmall", "", "Caronsmall", "osuperior", "fiveinferior", "", "commainferior", "periodinferior", "Yacutesmall", "", "dollarinferior", "", "", "Thornsmall", "", "nineinferior", "zeroinferior", "Zcaronsmall", "AEsmall", "Oslashsmall", "questiondownsmall", "oneinferior", "Lslashsmall", "", "", "", "", "", "", "Cedillasmall", "", "", "", "", "", "OEsmall", "figuredash", "hyphensuperior", "", "", "", "", "exclamdownsmall", "", "Ydieresissmall", "", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "ninesuperior", "zerosuperior", "", "esuperior", "rsuperior", "tsuperior", "", "", "isuperior", "ssuperior", "dsuperior", "", "", "", "", "", "lsuperior", "Ogoneksmall", "Brevesmall", "Macronsmall", "bsuperior", "nsuperior", "msuperior", "commasuperior", "periodsuperior", "Dotaccentsmall", "Ringsmall", "", "", "", ""];\nconst MacRomanEncoding = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "", "Adieresis", "Aring", "Ccedilla", "Eacute", "Ntilde", "Odieresis", "Udieresis", "aacute", "agrave", "acircumflex", "adieresis", "atilde", "aring", "ccedilla", "eacute", "egrave", "ecircumflex", "edieresis", "iacute", "igrave", "icircumflex", "idieresis", "ntilde", "oacute", "ograve", "ocircumflex", "odieresis", "otilde", "uacute", "ugrave", "ucircumflex", "udieresis", "dagger", "degree", "cent", "sterling", "section", "bullet", "paragraph", "germandbls", "registered", "copyright", "trademark", "acute", "dieresis", "notequal", "AE", "Oslash", "infinity", "plusminus", "lessequal", "greaterequal", "yen", "mu", "partialdiff", "summation", "product", "pi", "integral", "ordfeminine", "ordmasculine", "Omega", "ae", "oslash", "questiondown", "exclamdown", "logicalnot", "radical", "florin", "approxequal", "Delta", "guillemotleft", "guillemotright", "ellipsis", "space", "Agrave", "Atilde", "Otilde", "OE", "oe", "endash", "emdash", "quotedblleft", "quotedblright", "quoteleft", "quoteright", "divide", "lozenge", "ydieresis", "Ydieresis", "fraction", "currency", "guilsinglleft", "guilsinglright", "fi", "fl", "daggerdbl", "periodcentered", "quotesinglbase", "quotedblbase", "perthousand", "Acircumflex", "Ecircumflex", "Aacute", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Oacute", "Ocircumflex", "apple", "Ograve", "Uacute", "Ucircumflex", "Ugrave", "dotlessi", "circumflex", "tilde", "macron", "breve", "dotaccent", "ring", "cedilla", "hungarumlaut", "ogonek", "caron"];\nexports.MacRomanEncoding = MacRomanEncoding;\nconst StandardEncoding = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "", "endash", "dagger", "daggerdbl", "periodcentered", "", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "", "questiondown", "", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "", "ring", "cedilla", "", "hungarumlaut", "ogonek", "caron", "emdash", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "AE", "", "ordfeminine", "", "", "", "", "Lslash", "Oslash", "OE", "ordmasculine", "", "", "", "", "", "ae", "", "", "", "dotlessi", "", "", "lslash", "oslash", "oe", "germandbls", "", "", "", ""];\nexports.StandardEncoding = StandardEncoding;\nconst WinAnsiEncoding = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "bullet", "Euro", "bullet", "quotesinglbase", "florin", "quotedblbase", "ellipsis", "dagger", "daggerdbl", "circumflex", "perthousand", "Scaron", "guilsinglleft", "OE", "bullet", "Zcaron", "bullet", "bullet", "quoteleft", "quoteright", "quotedblleft", "quotedblright", "bullet", "endash", "emdash", "tilde", "trademark", "scaron", "guilsinglright", "oe", "bullet", "zcaron", "Ydieresis", "space", "exclamdown", "cent", "sterling", "currency", "yen", "brokenbar", "section", "dieresis", "copyright", "ordfeminine", "guillemotleft", "logicalnot", "hyphen", "registered", "macron", "degree", "plusminus", "twosuperior", "threesuperior", "acute", "mu", "paragraph", "periodcentered", "cedilla", "onesuperior", "ordmasculine", "guillemotright", "onequarter", "onehalf", "threequarters", "questiondown", "Agrave", "Aacute", "Acircumflex", "Atilde", "Adieresis", "Aring", "AE", "Ccedilla", "Egrave", "Eacute", "Ecircumflex", "Edieresis", "Igrave", "Iacute", "Icircumflex", "Idieresis", "Eth", "Ntilde", "Ograve", "Oacute", "Ocircumflex", "Otilde", "Odieresis", "multiply", "Oslash", "Ugrave", "Uacute", "Ucircumflex", "Udieresis", "Yacute", "Thorn", "germandbls", "agrave", "aacute", "acircumflex", "atilde", "adieresis", "aring", "ae", "ccedilla", "egrave", "eacute", "ecircumflex", "edieresis", "igrave", "iacute", "icircumflex", "idieresis", "eth", "ntilde", "ograve", "oacute", "ocircumflex", "otilde", "odieresis", "divide", "oslash", "ugrave", "uacute", "ucircumflex", "udieresis", "yacute", "thorn", "ydieresis"];\nexports.WinAnsiEncoding = WinAnsiEncoding;\nconst SymbolSetEncoding = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "universal", "numbersign", "existential", "percent", "ampersand", "suchthat", "parenleft", "parenright", "asteriskmath", "plus", "comma", "minus", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "congruent", "Alpha", "Beta", "Chi", "Delta", "Epsilon", "Phi", "Gamma", "Eta", "Iota", "theta1", "Kappa", "Lambda", "Mu", "Nu", "Omicron", "Pi", "Theta", "Rho", "Sigma", "Tau", "Upsilon", "sigma1", "Omega", "Xi", "Psi", "Zeta", "bracketleft", "therefore", "bracketright", "perpendicular", "underscore", "radicalex", "alpha", "beta", "chi", "delta", "epsilon", "phi", "gamma", "eta", "iota", "phi1", "kappa", "lambda", "mu", "nu", "omicron", "pi", "theta", "rho", "sigma", "tau", "upsilon", "omega1", "omega", "xi", "psi", "zeta", "braceleft", "bar", "braceright", "similar", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Euro", "Upsilon1", "minute", "lessequal", "fraction", "infinity", "florin", "club", "diamond", "heart", "spade", "arrowboth", "arrowleft", "arrowup", "arrowright", "arrowdown", "degree", "plusminus", "second", "greaterequal", "multiply", "proportional", "partialdiff", "bullet", "divide", "notequal", "equivalence", "approxequal", "ellipsis", "arrowvertex", "arrowhorizex", "carriagereturn", "aleph", "Ifraktur", "Rfraktur", "weierstrass", "circlemultiply", "circleplus", "emptyset", "intersection", "union", "propersuperset", "reflexsuperset", "notsubset", "propersubset", "reflexsubset", "element", "notelement", "angle", "gradient", "registerserif", "copyrightserif", "trademarkserif", "product", "radical", "dotmath", "logicalnot", "logicaland", "logicalor", "arrowdblboth", "arrowdblleft", "arrowdblup", "arrowdblright", "arrowdbldown", "lozenge", "angleleft", "registersans", "copyrightsans", "trademarksans", "summation", "parenlefttp", "parenleftex", "parenleftbt", "bracketlefttp", "bracketleftex", "bracketleftbt", "bracelefttp", "braceleftmid", "braceleftbt", "braceex", "", "angleright", "integral", "integraltp", "integralex", "integralbt", "parenrighttp", "parenrightex", "parenrightbt", "bracketrighttp", "bracketrightex", "bracketrightbt", "bracerighttp", "bracerightmid", "bracerightbt", ""];\nexports.SymbolSetEncoding = SymbolSetEncoding;\nconst ZapfDingbatsEncoding = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "a1", "a2", "a202", "a3", "a4", "a5", "a119", "a118", "a117", "a11", "a12", "a13", "a14", "a15", "a16", "a105", "a17", "a18", "a19", "a20", "a21", "a22", "a23", "a24", "a25", "a26", "a27", "a28", "a6", "a7", "a8", "a9", "a10", "a29", "a30", "a31", "a32", "a33", "a34", "a35", "a36", "a37", "a38", "a39", "a40", "a41", "a42", "a43", "a44", "a45", "a46", "a47", "a48", "a49", "a50", "a51", "a52", "a53", "a54", "a55", "a56", "a57", "a58", "a59", "a60", "a61", "a62", "a63", "a64", "a65", "a66", "a67", "a68", "a69", "a70", "a71", "a72", "a73", "a74", "a203", "a75", "a204", "a76", "a77", "a78", "a79", "a81", "a82", "a83", "a84", "a97", "a98", "a99", "a100", "", "a89", "a90", "a93", "a94", "a91", "a92", "a205", "a85", "a206", "a86", "a87", "a88", "a95", "a96", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "a101", "a102", "a103", "a104", "a106", "a107", "a108", "a112", "a111", "a110", "a109", "a120", "a121", "a122", "a123", "a124", "a125", "a126", "a127", "a128", "a129", "a130", "a131", "a132", "a133", "a134", "a135", "a136", "a137", "a138", "a139", "a140", "a141", "a142", "a143", "a144", "a145", "a146", "a147", "a148", "a149", "a150", "a151", "a152", "a153", "a154", "a155", "a156", "a157", "a158", "a159", "a160", "a161", "a163", "a164", "a196", "a165", "a192", "a166", "a167", "a168", "a169", "a170", "a171", "a172", "a173", "a162", "a174", "a175", "a176", "a177", "a178", "a179", "a193", "a180", "a199", "a181", "a200", "a182", "", "a201", "a183", "a184", "a197", "a185", "a194", "a198", "a186", "a195", "a187", "a188", "a189", "a190", "a191", ""];\nexports.ZapfDingbatsEncoding = ZapfDingbatsEncoding;\n\nfunction getEncoding(encodingName) {\n  switch (encodingName) {\n    case "WinAnsiEncoding":\n      return WinAnsiEncoding;\n\n    case "StandardEncoding":\n      return StandardEncoding;\n\n    case "MacRomanEncoding":\n      return MacRomanEncoding;\n\n    case "SymbolSetEncoding":\n      return SymbolSetEncoding;\n\n    case "ZapfDingbatsEncoding":\n      return ZapfDingbatsEncoding;\n\n    case "ExpertEncoding":\n      return ExpertEncoding;\n\n    case "MacExpertEncoding":\n      return MacExpertEncoding;\n\n    default:\n      return null;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/encodings.js\n')},"./node_modules/pdfjs-dist/lib/core/evaluator.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.PartialEvaluator = exports.EvaluatorPreprocessor = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _cmap = __webpack_require__(/*! ./cmap.js */ "./node_modules/pdfjs-dist/lib/core/cmap.js");\n\nvar _primitives = __webpack_require__(/*! ./primitives.js */ "./node_modules/pdfjs-dist/lib/core/primitives.js");\n\nvar _fonts = __webpack_require__(/*! ./fonts.js */ "./node_modules/pdfjs-dist/lib/core/fonts.js");\n\nvar _encodings = __webpack_require__(/*! ./encodings.js */ "./node_modules/pdfjs-dist/lib/core/encodings.js");\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nvar _unicode = __webpack_require__(/*! ./unicode.js */ "./node_modules/pdfjs-dist/lib/core/unicode.js");\n\nvar _standard_fonts = __webpack_require__(/*! ./standard_fonts.js */ "./node_modules/pdfjs-dist/lib/core/standard_fonts.js");\n\nvar _pattern = __webpack_require__(/*! ./pattern.js */ "./node_modules/pdfjs-dist/lib/core/pattern.js");\n\nvar _function = __webpack_require__(/*! ./function.js */ "./node_modules/pdfjs-dist/lib/core/function.js");\n\nvar _parser = __webpack_require__(/*! ./parser.js */ "./node_modules/pdfjs-dist/lib/core/parser.js");\n\nvar _image_utils = __webpack_require__(/*! ./image_utils.js */ "./node_modules/pdfjs-dist/lib/core/image_utils.js");\n\nvar _bidi = __webpack_require__(/*! ./bidi.js */ "./node_modules/pdfjs-dist/lib/core/bidi.js");\n\nvar _colorspace = __webpack_require__(/*! ./colorspace.js */ "./node_modules/pdfjs-dist/lib/core/colorspace.js");\n\nvar _stream = __webpack_require__(/*! ./stream.js */ "./node_modules/pdfjs-dist/lib/core/stream.js");\n\nvar _glyphlist = __webpack_require__(/*! ./glyphlist.js */ "./node_modules/pdfjs-dist/lib/core/glyphlist.js");\n\nvar _metrics = __webpack_require__(/*! ./metrics.js */ "./node_modules/pdfjs-dist/lib/core/metrics.js");\n\nvar _murmurhash = __webpack_require__(/*! ./murmurhash3.js */ "./node_modules/pdfjs-dist/lib/core/murmurhash3.js");\n\nvar _operator_list = __webpack_require__(/*! ./operator_list.js */ "./node_modules/pdfjs-dist/lib/core/operator_list.js");\n\nvar _image = __webpack_require__(/*! ./image.js */ "./node_modules/pdfjs-dist/lib/core/image.js");\n\nconst DefaultPartialEvaluatorOptions = Object.freeze({\n  maxImageSize: -1,\n  disableFontFace: false,\n  ignoreErrors: false,\n  isEvalSupported: true,\n  fontExtraProperties: false\n});\nconst PatternType = {\n  TILING: 1,\n  SHADING: 2\n};\nconst deferred = Promise.resolve();\n\nfunction normalizeBlendMode(value, parsingArray = false) {\n  if (Array.isArray(value)) {\n    for (let i = 0, ii = value.length; i < ii; i++) {\n      const maybeBM = normalizeBlendMode(value[i], true);\n\n      if (maybeBM) {\n        return maybeBM;\n      }\n    }\n\n    (0, _util.warn)(`Unsupported blend mode Array: ${value}`);\n    return "source-over";\n  }\n\n  if (!(0, _primitives.isName)(value)) {\n    if (parsingArray) {\n      return null;\n    }\n\n    return "source-over";\n  }\n\n  switch (value.name) {\n    case "Normal":\n    case "Compatible":\n      return "source-over";\n\n    case "Multiply":\n      return "multiply";\n\n    case "Screen":\n      return "screen";\n\n    case "Overlay":\n      return "overlay";\n\n    case "Darken":\n      return "darken";\n\n    case "Lighten":\n      return "lighten";\n\n    case "ColorDodge":\n      return "color-dodge";\n\n    case "ColorBurn":\n      return "color-burn";\n\n    case "HardLight":\n      return "hard-light";\n\n    case "SoftLight":\n      return "soft-light";\n\n    case "Difference":\n      return "difference";\n\n    case "Exclusion":\n      return "exclusion";\n\n    case "Hue":\n      return "hue";\n\n    case "Saturation":\n      return "saturation";\n\n    case "Color":\n      return "color";\n\n    case "Luminosity":\n      return "luminosity";\n  }\n\n  if (parsingArray) {\n    return null;\n  }\n\n  (0, _util.warn)(`Unsupported blend mode: ${value.name}`);\n  return "source-over";\n}\n\nclass TimeSlotManager {\n  static get TIME_SLOT_DURATION_MS() {\n    return (0, _util.shadow)(this, "TIME_SLOT_DURATION_MS", 20);\n  }\n\n  static get CHECK_TIME_EVERY() {\n    return (0, _util.shadow)(this, "CHECK_TIME_EVERY", 100);\n  }\n\n  constructor() {\n    this.reset();\n  }\n\n  check() {\n    if (++this.checked < TimeSlotManager.CHECK_TIME_EVERY) {\n      return false;\n    }\n\n    this.checked = 0;\n    return this.endTime <= Date.now();\n  }\n\n  reset() {\n    this.endTime = Date.now() + TimeSlotManager.TIME_SLOT_DURATION_MS;\n    this.checked = 0;\n  }\n\n}\n\nclass PartialEvaluator {\n  constructor({\n    xref,\n    handler,\n    pageIndex,\n    idFactory,\n    fontCache,\n    builtInCMapCache,\n    globalImageCache,\n    options = null\n  }) {\n    this.xref = xref;\n    this.handler = handler;\n    this.pageIndex = pageIndex;\n    this.idFactory = idFactory;\n    this.fontCache = fontCache;\n    this.builtInCMapCache = builtInCMapCache;\n    this.globalImageCache = globalImageCache;\n    this.options = options || DefaultPartialEvaluatorOptions;\n    this.parsingType3Font = false;\n    this._fetchBuiltInCMapBound = this.fetchBuiltInCMap.bind(this);\n  }\n\n  get _pdfFunctionFactory() {\n    const pdfFunctionFactory = new _function.PDFFunctionFactory({\n      xref: this.xref,\n      isEvalSupported: this.options.isEvalSupported\n    });\n    return (0, _util.shadow)(this, "_pdfFunctionFactory", pdfFunctionFactory);\n  }\n\n  clone(newOptions = DefaultPartialEvaluatorOptions) {\n    var newEvaluator = Object.create(this);\n    newEvaluator.options = newOptions;\n    return newEvaluator;\n  }\n\n  hasBlendModes(resources, nonBlendModesSet) {\n    if (!(resources instanceof _primitives.Dict)) {\n      return false;\n    }\n\n    if (resources.objId && nonBlendModesSet.has(resources.objId)) {\n      return false;\n    }\n\n    const processed = new _primitives.RefSet(nonBlendModesSet);\n\n    if (resources.objId) {\n      processed.put(resources.objId);\n    }\n\n    var nodes = [resources],\n        xref = this.xref;\n\n    while (nodes.length) {\n      var node = nodes.shift();\n      var graphicStates = node.get("ExtGState");\n\n      if (graphicStates instanceof _primitives.Dict) {\n        for (let graphicState of graphicStates.getRawValues()) {\n          if (graphicState instanceof _primitives.Ref) {\n            if (processed.has(graphicState)) {\n              continue;\n            }\n\n            try {\n              graphicState = xref.fetch(graphicState);\n            } catch (ex) {\n              if (ex instanceof _core_utils.MissingDataException) {\n                throw ex;\n              }\n\n              processed.put(graphicState);\n              (0, _util.info)(`hasBlendModes - ignoring ExtGState: "${ex}".`);\n              continue;\n            }\n          }\n\n          if (!(graphicState instanceof _primitives.Dict)) {\n            continue;\n          }\n\n          if (graphicState.objId) {\n            processed.put(graphicState.objId);\n          }\n\n          const bm = graphicState.get("BM");\n\n          if (bm instanceof _primitives.Name) {\n            if (bm.name !== "Normal") {\n              return true;\n            }\n\n            continue;\n          }\n\n          if (bm !== undefined && Array.isArray(bm)) {\n            for (const element of bm) {\n              if (element instanceof _primitives.Name && element.name !== "Normal") {\n                return true;\n              }\n            }\n          }\n        }\n      }\n\n      var xObjects = node.get("XObject");\n\n      if (!(xObjects instanceof _primitives.Dict)) {\n        continue;\n      }\n\n      for (let xObject of xObjects.getRawValues()) {\n        if (xObject instanceof _primitives.Ref) {\n          if (processed.has(xObject)) {\n            continue;\n          }\n\n          try {\n            xObject = xref.fetch(xObject);\n          } catch (ex) {\n            if (ex instanceof _core_utils.MissingDataException) {\n              throw ex;\n            }\n\n            processed.put(xObject);\n            (0, _util.info)(`hasBlendModes - ignoring XObject: "${ex}".`);\n            continue;\n          }\n        }\n\n        if (!(0, _primitives.isStream)(xObject)) {\n          continue;\n        }\n\n        if (xObject.dict.objId) {\n          processed.put(xObject.dict.objId);\n        }\n\n        var xResources = xObject.dict.get("Resources");\n\n        if (!(xResources instanceof _primitives.Dict)) {\n          continue;\n        }\n\n        if (xResources.objId && processed.has(xResources.objId)) {\n          continue;\n        }\n\n        nodes.push(xResources);\n\n        if (xResources.objId) {\n          processed.put(xResources.objId);\n        }\n      }\n    }\n\n    processed.forEach(ref => {\n      nonBlendModesSet.put(ref);\n    });\n    return false;\n  }\n\n  async fetchBuiltInCMap(name) {\n    const cachedData = this.builtInCMapCache.get(name);\n\n    if (cachedData) {\n      return cachedData;\n    }\n\n    const readableStream = this.handler.sendWithStream("FetchBuiltInCMap", {\n      name\n    });\n    const reader = readableStream.getReader();\n    const data = await new Promise(function (resolve, reject) {\n      function pump() {\n        reader.read().then(function ({\n          value,\n          done\n        }) {\n          if (done) {\n            return;\n          }\n\n          resolve(value);\n          pump();\n        }, reject);\n      }\n\n      pump();\n    });\n\n    if (data.compressionType !== _util.CMapCompressionType.NONE) {\n      this.builtInCMapCache.set(name, data);\n    }\n\n    return data;\n  }\n\n  async buildFormXObject(resources, xobj, smask, operatorList, task, initialState, localColorSpaceCache) {\n    var dict = xobj.dict;\n    var matrix = dict.getArray("Matrix");\n    var bbox = dict.getArray("BBox");\n\n    if (Array.isArray(bbox) && bbox.length === 4) {\n      bbox = _util.Util.normalizeRect(bbox);\n    } else {\n      bbox = null;\n    }\n\n    let optionalContent = null;\n\n    if (dict.has("OC")) {\n      optionalContent = await this.parseMarkedContentProps(dict.get("OC"), resources);\n      operatorList.addOp(_util.OPS.beginMarkedContentProps, ["OC", optionalContent]);\n    }\n\n    var group = dict.get("Group");\n\n    if (group) {\n      var groupOptions = {\n        matrix,\n        bbox,\n        smask,\n        isolated: false,\n        knockout: false\n      };\n      var groupSubtype = group.get("S");\n      var colorSpace = null;\n\n      if ((0, _primitives.isName)(groupSubtype, "Transparency")) {\n        groupOptions.isolated = group.get("I") || false;\n        groupOptions.knockout = group.get("K") || false;\n\n        if (group.has("CS")) {\n          const cs = group.getRaw("CS");\n\n          const cachedColorSpace = _colorspace.ColorSpace.getCached(cs, this.xref, localColorSpaceCache);\n\n          if (cachedColorSpace) {\n            colorSpace = cachedColorSpace;\n          } else {\n            colorSpace = await this.parseColorSpace({\n              cs,\n              resources,\n              localColorSpaceCache\n            });\n          }\n        }\n      }\n\n      if (smask && smask.backdrop) {\n        colorSpace = colorSpace || _colorspace.ColorSpace.singletons.rgb;\n        smask.backdrop = colorSpace.getRgb(smask.backdrop, 0);\n      }\n\n      operatorList.addOp(_util.OPS.beginGroup, [groupOptions]);\n    }\n\n    operatorList.addOp(_util.OPS.paintFormXObjectBegin, [matrix, bbox]);\n    return this.getOperatorList({\n      stream: xobj,\n      task,\n      resources: dict.get("Resources") || resources,\n      operatorList,\n      initialState\n    }).then(function () {\n      operatorList.addOp(_util.OPS.paintFormXObjectEnd, []);\n\n      if (group) {\n        operatorList.addOp(_util.OPS.endGroup, [groupOptions]);\n      }\n\n      if (optionalContent) {\n        operatorList.addOp(_util.OPS.endMarkedContent, []);\n      }\n    });\n  }\n\n  _sendImgData(objId, imgData, cacheGlobally = false) {\n    const transfers = imgData ? [imgData.data.buffer] : null;\n\n    if (this.parsingType3Font || cacheGlobally) {\n      return this.handler.send("commonobj", [objId, "Image", imgData], transfers);\n    }\n\n    return this.handler.send("obj", [objId, this.pageIndex, "Image", imgData], transfers);\n  }\n\n  async buildPaintImageXObject({\n    resources,\n    image,\n    isInline = false,\n    operatorList,\n    cacheKey,\n    localImageCache,\n    localColorSpaceCache\n  }) {\n    var dict = image.dict;\n    const imageRef = dict.objId;\n    var w = dict.get("Width", "W");\n    var h = dict.get("Height", "H");\n\n    if (!(w && (0, _util.isNum)(w)) || !(h && (0, _util.isNum)(h))) {\n      (0, _util.warn)("Image dimensions are missing, or not numbers.");\n      return undefined;\n    }\n\n    var maxImageSize = this.options.maxImageSize;\n\n    if (maxImageSize !== -1 && w * h > maxImageSize) {\n      (0, _util.warn)("Image exceeded maximum allowed size and was removed.");\n      return undefined;\n    }\n\n    var imageMask = dict.get("ImageMask", "IM") || false;\n    var imgData, args;\n\n    if (imageMask) {\n      var width = dict.get("Width", "W");\n      var height = dict.get("Height", "H");\n      var bitStrideLength = width + 7 >> 3;\n      var imgArray = image.getBytes(bitStrideLength * height, true);\n      var decode = dict.getArray("Decode", "D");\n      imgData = _image.PDFImage.createMask({\n        imgArray,\n        width,\n        height,\n        imageIsFromDecodeStream: image instanceof _stream.DecodeStream,\n        inverseDecode: !!decode && decode[0] > 0\n      });\n      imgData.cached = !!cacheKey;\n      args = [imgData];\n      operatorList.addOp(_util.OPS.paintImageMaskXObject, args);\n\n      if (cacheKey) {\n        localImageCache.set(cacheKey, imageRef, {\n          fn: _util.OPS.paintImageMaskXObject,\n          args\n        });\n      }\n\n      return undefined;\n    }\n\n    var softMask = dict.get("SMask", "SM") || false;\n    var mask = dict.get("Mask") || false;\n    var SMALL_IMAGE_DIMENSIONS = 200;\n\n    if (isInline && !softMask && !mask && w + h < SMALL_IMAGE_DIMENSIONS) {\n      const imageObj = new _image.PDFImage({\n        xref: this.xref,\n        res: resources,\n        image,\n        isInline,\n        pdfFunctionFactory: this._pdfFunctionFactory,\n        localColorSpaceCache\n      });\n      imgData = imageObj.createImageData(true);\n      operatorList.addOp(_util.OPS.paintInlineImageXObject, [imgData]);\n      return undefined;\n    }\n\n    let objId = `img_${this.idFactory.createObjId()}`,\n        cacheGlobally = false;\n\n    if (this.parsingType3Font) {\n      objId = `${this.idFactory.getDocId()}_type3_${objId}`;\n    } else if (imageRef) {\n      cacheGlobally = this.globalImageCache.shouldCache(imageRef, this.pageIndex);\n\n      if (cacheGlobally) {\n        objId = `${this.idFactory.getDocId()}_${objId}`;\n      }\n    }\n\n    operatorList.addDependency(objId);\n    args = [objId, w, h];\n\n    _image.PDFImage.buildImage({\n      xref: this.xref,\n      res: resources,\n      image,\n      isInline,\n      pdfFunctionFactory: this._pdfFunctionFactory,\n      localColorSpaceCache\n    }).then(imageObj => {\n      imgData = imageObj.createImageData(false);\n      return this._sendImgData(objId, imgData, cacheGlobally);\n    }).catch(reason => {\n      (0, _util.warn)(`Unable to decode image "${objId}": "${reason}".`);\n      return this._sendImgData(objId, null, cacheGlobally);\n    });\n\n    operatorList.addOp(_util.OPS.paintImageXObject, args);\n\n    if (cacheKey) {\n      localImageCache.set(cacheKey, imageRef, {\n        fn: _util.OPS.paintImageXObject,\n        args\n      });\n\n      if (imageRef) {\n        (0, _util.assert)(!isInline, "Cannot cache an inline image globally.");\n        this.globalImageCache.addPageIndex(imageRef, this.pageIndex);\n\n        if (cacheGlobally) {\n          this.globalImageCache.setData(imageRef, {\n            objId,\n            fn: _util.OPS.paintImageXObject,\n            args\n          });\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  handleSMask(smask, resources, operatorList, task, stateManager, localColorSpaceCache) {\n    var smaskContent = smask.get("G");\n    var smaskOptions = {\n      subtype: smask.get("S").name,\n      backdrop: smask.get("BC")\n    };\n    var transferObj = smask.get("TR");\n\n    if ((0, _function.isPDFFunction)(transferObj)) {\n      const transferFn = this._pdfFunctionFactory.create(transferObj);\n\n      var transferMap = new Uint8Array(256);\n      var tmp = new Float32Array(1);\n\n      for (var i = 0; i < 256; i++) {\n        tmp[0] = i / 255;\n        transferFn(tmp, 0, tmp, 0);\n        transferMap[i] = tmp[0] * 255 | 0;\n      }\n\n      smaskOptions.transferMap = transferMap;\n    }\n\n    return this.buildFormXObject(resources, smaskContent, smaskOptions, operatorList, task, stateManager.state.clone(), localColorSpaceCache);\n  }\n\n  handleTransferFunction(tr) {\n    let transferArray;\n\n    if (Array.isArray(tr)) {\n      transferArray = tr;\n    } else if ((0, _function.isPDFFunction)(tr)) {\n      transferArray = [tr];\n    } else {\n      return null;\n    }\n\n    const transferMaps = [];\n    let numFns = 0,\n        numEffectfulFns = 0;\n\n    for (const entry of transferArray) {\n      const transferObj = this.xref.fetchIfRef(entry);\n      numFns++;\n\n      if ((0, _primitives.isName)(transferObj, "Identity")) {\n        transferMaps.push(null);\n        continue;\n      } else if (!(0, _function.isPDFFunction)(transferObj)) {\n        return null;\n      }\n\n      const transferFn = this._pdfFunctionFactory.create(transferObj);\n\n      const transferMap = new Uint8Array(256),\n            tmp = new Float32Array(1);\n\n      for (let j = 0; j < 256; j++) {\n        tmp[0] = j / 255;\n        transferFn(tmp, 0, tmp, 0);\n        transferMap[j] = tmp[0] * 255 | 0;\n      }\n\n      transferMaps.push(transferMap);\n      numEffectfulFns++;\n    }\n\n    if (!(numFns === 1 || numFns === 4)) {\n      return null;\n    }\n\n    if (numEffectfulFns === 0) {\n      return null;\n    }\n\n    return transferMaps;\n  }\n\n  handleTilingType(fn, color, resources, pattern, patternDict, operatorList, task, cacheKey, localTilingPatternCache) {\n    const tilingOpList = new _operator_list.OperatorList();\n\n    const patternResources = _primitives.Dict.merge({\n      xref: this.xref,\n      dictArray: [patternDict.get("Resources"), resources]\n    });\n\n    return this.getOperatorList({\n      stream: pattern,\n      task,\n      resources: patternResources,\n      operatorList: tilingOpList\n    }).then(function () {\n      const operatorListIR = tilingOpList.getIR();\n      const tilingPatternIR = (0, _pattern.getTilingPatternIR)(operatorListIR, patternDict, color);\n      operatorList.addDependencies(tilingOpList.dependencies);\n      operatorList.addOp(fn, tilingPatternIR);\n\n      if (cacheKey) {\n        localTilingPatternCache.set(cacheKey, patternDict.objId, {\n          operatorListIR,\n          dict: patternDict\n        });\n      }\n    }).catch(reason => {\n      if (reason instanceof _util.AbortException) {\n        return;\n      }\n\n      if (this.options.ignoreErrors) {\n        this.handler.send("UnsupportedFeature", {\n          featureId: _util.UNSUPPORTED_FEATURES.errorTilingPattern\n        });\n        (0, _util.warn)(`handleTilingType - ignoring pattern: "${reason}".`);\n        return;\n      }\n\n      throw reason;\n    });\n  }\n\n  handleSetFont(resources, fontArgs, fontRef, operatorList, task, state, fallbackFontDict = null) {\n    var fontName;\n\n    if (fontArgs) {\n      fontArgs = fontArgs.slice();\n      fontName = fontArgs[0].name;\n    }\n\n    return this.loadFont(fontName, fontRef, resources, fallbackFontDict).then(translated => {\n      if (!translated.font.isType3Font) {\n        return translated;\n      }\n\n      return translated.loadType3Data(this, resources, task).then(function () {\n        operatorList.addDependencies(translated.type3Dependencies);\n        return translated;\n      }).catch(reason => {\n        this.handler.send("UnsupportedFeature", {\n          featureId: _util.UNSUPPORTED_FEATURES.errorFontLoadType3\n        });\n        return new TranslatedFont({\n          loadedName: "g_font_error",\n          font: new _fonts.ErrorFont(`Type3 font load error: ${reason}`),\n          dict: translated.font,\n          extraProperties: this.options.fontExtraProperties\n        });\n      });\n    }).then(translated => {\n      state.font = translated.font;\n      translated.send(this.handler);\n      return translated.loadedName;\n    });\n  }\n\n  handleText(chars, state) {\n    const font = state.font;\n    const glyphs = font.charsToGlyphs(chars);\n\n    if (font.data) {\n      const isAddToPathSet = !!(state.textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);\n\n      if (isAddToPathSet || state.fillColorSpace.name === "Pattern" || font.disableFontFace || this.options.disableFontFace) {\n        PartialEvaluator.buildFontPaths(font, glyphs, this.handler);\n      }\n    }\n\n    return glyphs;\n  }\n\n  ensureStateFont(state) {\n    if (state.font) {\n      return;\n    }\n\n    const reason = new _util.FormatError("Missing setFont (Tf) operator before text rendering operator.");\n\n    if (this.options.ignoreErrors) {\n      this.handler.send("UnsupportedFeature", {\n        featureId: _util.UNSUPPORTED_FEATURES.errorFontState\n      });\n      (0, _util.warn)(`ensureStateFont: "${reason}".`);\n      return;\n    }\n\n    throw reason;\n  }\n\n  async setGState({\n    resources,\n    gState,\n    operatorList,\n    cacheKey,\n    task,\n    stateManager,\n    localGStateCache,\n    localColorSpaceCache\n  }) {\n    const gStateRef = gState.objId;\n    let isSimpleGState = true;\n    var gStateObj = [];\n    var gStateKeys = gState.getKeys();\n    var promise = Promise.resolve();\n\n    for (var i = 0, ii = gStateKeys.length; i < ii; i++) {\n      const key = gStateKeys[i];\n      const value = gState.get(key);\n\n      switch (key) {\n        case "Type":\n          break;\n\n        case "LW":\n        case "LC":\n        case "LJ":\n        case "ML":\n        case "D":\n        case "RI":\n        case "FL":\n        case "CA":\n        case "ca":\n          gStateObj.push([key, value]);\n          break;\n\n        case "Font":\n          isSimpleGState = false;\n          promise = promise.then(() => {\n            return this.handleSetFont(resources, null, value[0], operatorList, task, stateManager.state).then(function (loadedName) {\n              operatorList.addDependency(loadedName);\n              gStateObj.push([key, [loadedName, value[1]]]);\n            });\n          });\n          break;\n\n        case "BM":\n          gStateObj.push([key, normalizeBlendMode(value)]);\n          break;\n\n        case "SMask":\n          if ((0, _primitives.isName)(value, "None")) {\n            gStateObj.push([key, false]);\n            break;\n          }\n\n          if ((0, _primitives.isDict)(value)) {\n            isSimpleGState = false;\n            promise = promise.then(() => {\n              return this.handleSMask(value, resources, operatorList, task, stateManager, localColorSpaceCache);\n            });\n            gStateObj.push([key, true]);\n          } else {\n            (0, _util.warn)("Unsupported SMask type");\n          }\n\n          break;\n\n        case "TR":\n          const transferMaps = this.handleTransferFunction(value);\n          gStateObj.push([key, transferMaps]);\n          break;\n\n        case "OP":\n        case "op":\n        case "OPM":\n        case "BG":\n        case "BG2":\n        case "UCR":\n        case "UCR2":\n        case "TR2":\n        case "HT":\n        case "SM":\n        case "SA":\n        case "AIS":\n        case "TK":\n          (0, _util.info)("graphic state operator " + key);\n          break;\n\n        default:\n          (0, _util.info)("Unknown graphic state operator " + key);\n          break;\n      }\n    }\n\n    return promise.then(function () {\n      if (gStateObj.length > 0) {\n        operatorList.addOp(_util.OPS.setGState, [gStateObj]);\n      }\n\n      if (isSimpleGState) {\n        localGStateCache.set(cacheKey, gStateRef, gStateObj);\n      }\n    });\n  }\n\n  loadFont(fontName, font, resources, fallbackFontDict = null) {\n    const errorFont = async () => {\n      return new TranslatedFont({\n        loadedName: "g_font_error",\n        font: new _fonts.ErrorFont(`Font "${fontName}" is not available.`),\n        dict: font,\n        extraProperties: this.options.fontExtraProperties\n      });\n    };\n\n    var fontRef,\n        xref = this.xref;\n\n    if (font) {\n      if (!(0, _primitives.isRef)(font)) {\n        throw new _util.FormatError(\'The "font" object should be a reference.\');\n      }\n\n      fontRef = font;\n    } else {\n      var fontRes = resources.get("Font");\n\n      if (fontRes) {\n        fontRef = fontRes.getRaw(fontName);\n      }\n    }\n\n    if (!fontRef) {\n      const partialMsg = `Font "${fontName || font && font.toString()}" is not available`;\n\n      if (!this.options.ignoreErrors && !this.parsingType3Font) {\n        (0, _util.warn)(`${partialMsg}.`);\n        return errorFont();\n      }\n\n      this.handler.send("UnsupportedFeature", {\n        featureId: _util.UNSUPPORTED_FEATURES.errorFontMissing\n      });\n      (0, _util.warn)(`${partialMsg} -- attempting to fallback to a default font.`);\n\n      if (fallbackFontDict) {\n        fontRef = fallbackFontDict;\n      } else {\n        fontRef = PartialEvaluator.fallbackFontDict;\n      }\n    }\n\n    if (this.fontCache.has(fontRef)) {\n      return this.fontCache.get(fontRef);\n    }\n\n    font = xref.fetchIfRef(fontRef);\n\n    if (!(0, _primitives.isDict)(font)) {\n      return errorFont();\n    }\n\n    if (font.cacheKey && this.fontCache.has(font.cacheKey)) {\n      return this.fontCache.get(font.cacheKey);\n    }\n\n    var fontCapability = (0, _util.createPromiseCapability)();\n    let preEvaluatedFont;\n\n    try {\n      preEvaluatedFont = this.preEvaluateFont(font);\n    } catch (reason) {\n      (0, _util.warn)(`loadFont - ignoring preEvaluateFont errors: "${reason}".`);\n      return errorFont();\n    }\n\n    const {\n      descriptor,\n      hash\n    } = preEvaluatedFont;\n    var fontRefIsRef = (0, _primitives.isRef)(fontRef),\n        fontID;\n\n    if (fontRefIsRef) {\n      fontID = `f${fontRef.toString()}`;\n    }\n\n    if (hash && (0, _primitives.isDict)(descriptor)) {\n      if (!descriptor.fontAliases) {\n        descriptor.fontAliases = Object.create(null);\n      }\n\n      var fontAliases = descriptor.fontAliases;\n\n      if (fontAliases[hash]) {\n        var aliasFontRef = fontAliases[hash].aliasRef;\n\n        if (fontRefIsRef && aliasFontRef && this.fontCache.has(aliasFontRef)) {\n          this.fontCache.putAlias(fontRef, aliasFontRef);\n          return this.fontCache.get(fontRef);\n        }\n      } else {\n        fontAliases[hash] = {\n          fontID: this.idFactory.createFontId()\n        };\n      }\n\n      if (fontRefIsRef) {\n        fontAliases[hash].aliasRef = fontRef;\n      }\n\n      fontID = fontAliases[hash].fontID;\n    }\n\n    if (fontRefIsRef) {\n      this.fontCache.put(fontRef, fontCapability.promise);\n    } else {\n      if (!fontID) {\n        fontID = this.idFactory.createFontId();\n      }\n\n      font.cacheKey = `cacheKey_${fontID}`;\n      this.fontCache.put(font.cacheKey, fontCapability.promise);\n    }\n\n    (0, _util.assert)(fontID && fontID.startsWith("f"), \'The "fontID" must be (correctly) defined.\');\n    font.loadedName = `${this.idFactory.getDocId()}_${fontID}`;\n    this.translateFont(preEvaluatedFont).then(translatedFont => {\n      if (translatedFont.fontType !== undefined) {\n        var xrefFontStats = xref.stats.fontTypes;\n        xrefFontStats[translatedFont.fontType] = true;\n      }\n\n      fontCapability.resolve(new TranslatedFont({\n        loadedName: font.loadedName,\n        font: translatedFont,\n        dict: font,\n        extraProperties: this.options.fontExtraProperties\n      }));\n    }).catch(reason => {\n      this.handler.send("UnsupportedFeature", {\n        featureId: _util.UNSUPPORTED_FEATURES.errorFontTranslate\n      });\n\n      try {\n        var fontFile3 = descriptor && descriptor.get("FontFile3");\n        var subtype = fontFile3 && fontFile3.get("Subtype");\n        var fontType = (0, _fonts.getFontType)(preEvaluatedFont.type, subtype && subtype.name);\n        var xrefFontStats = xref.stats.fontTypes;\n        xrefFontStats[fontType] = true;\n      } catch (ex) {}\n\n      fontCapability.resolve(new TranslatedFont({\n        loadedName: font.loadedName,\n        font: new _fonts.ErrorFont(reason instanceof Error ? reason.message : reason),\n        dict: font,\n        extraProperties: this.options.fontExtraProperties\n      }));\n    });\n    return fontCapability.promise;\n  }\n\n  buildPath(operatorList, fn, args, parsingText = false) {\n    var lastIndex = operatorList.length - 1;\n\n    if (!args) {\n      args = [];\n    }\n\n    if (lastIndex < 0 || operatorList.fnArray[lastIndex] !== _util.OPS.constructPath) {\n      if (parsingText) {\n        (0, _util.warn)(`Encountered path operator "${fn}" inside of a text object.`);\n        operatorList.addOp(_util.OPS.save, null);\n      }\n\n      operatorList.addOp(_util.OPS.constructPath, [[fn], args]);\n\n      if (parsingText) {\n        operatorList.addOp(_util.OPS.restore, null);\n      }\n    } else {\n      var opArgs = operatorList.argsArray[lastIndex];\n      opArgs[0].push(fn);\n      Array.prototype.push.apply(opArgs[1], args);\n    }\n  }\n\n  parseColorSpace({\n    cs,\n    resources,\n    localColorSpaceCache\n  }) {\n    return _colorspace.ColorSpace.parseAsync({\n      cs,\n      xref: this.xref,\n      resources,\n      pdfFunctionFactory: this._pdfFunctionFactory,\n      localColorSpaceCache\n    }).catch(reason => {\n      if (reason instanceof _util.AbortException) {\n        return null;\n      }\n\n      if (this.options.ignoreErrors) {\n        this.handler.send("UnsupportedFeature", {\n          featureId: _util.UNSUPPORTED_FEATURES.errorColorSpace\n        });\n        (0, _util.warn)(`parseColorSpace - ignoring ColorSpace: "${reason}".`);\n        return null;\n      }\n\n      throw reason;\n    });\n  }\n\n  handleColorN(operatorList, fn, args, cs, patterns, resources, task, localColorSpaceCache, localTilingPatternCache) {\n    const patternName = args.pop();\n\n    if (patternName instanceof _primitives.Name) {\n      const name = patternName.name;\n      const localTilingPattern = localTilingPatternCache.getByName(name);\n\n      if (localTilingPattern) {\n        try {\n          const color = cs.base ? cs.base.getRgb(args, 0) : null;\n          const tilingPatternIR = (0, _pattern.getTilingPatternIR)(localTilingPattern.operatorListIR, localTilingPattern.dict, color);\n          operatorList.addOp(fn, tilingPatternIR);\n          return undefined;\n        } catch (ex) {\n          if (ex instanceof _core_utils.MissingDataException) {\n            throw ex;\n          }\n        }\n      }\n\n      let pattern = patterns.get(name);\n\n      if (pattern) {\n        var dict = (0, _primitives.isStream)(pattern) ? pattern.dict : pattern;\n        var typeNum = dict.get("PatternType");\n\n        if (typeNum === PatternType.TILING) {\n          const color = cs.base ? cs.base.getRgb(args, 0) : null;\n          return this.handleTilingType(fn, color, resources, pattern, dict, operatorList, task, name, localTilingPatternCache);\n        } else if (typeNum === PatternType.SHADING) {\n          var shading = dict.get("Shading");\n          var matrix = dict.getArray("Matrix");\n          pattern = _pattern.Pattern.parseShading(shading, matrix, this.xref, resources, this.handler, this._pdfFunctionFactory, localColorSpaceCache);\n          operatorList.addOp(fn, pattern.getIR());\n          return undefined;\n        }\n\n        throw new _util.FormatError(`Unknown PatternType: ${typeNum}`);\n      }\n    }\n\n    throw new _util.FormatError(`Unknown PatternName: ${patternName}`);\n  }\n\n  async parseMarkedContentProps(contentProperties, resources) {\n    let optionalContent;\n\n    if ((0, _primitives.isName)(contentProperties)) {\n      const properties = resources.get("Properties");\n      optionalContent = properties.get(contentProperties.name);\n    } else if ((0, _primitives.isDict)(contentProperties)) {\n      optionalContent = contentProperties;\n    } else {\n      throw new _util.FormatError("Optional content properties malformed.");\n    }\n\n    const optionalContentType = optionalContent.get("Type").name;\n\n    if (optionalContentType === "OCG") {\n      return {\n        type: optionalContentType,\n        id: optionalContent.objId\n      };\n    } else if (optionalContentType === "OCMD") {\n      const optionalContentGroups = optionalContent.get("OCGs");\n\n      if (Array.isArray(optionalContentGroups) || (0, _primitives.isDict)(optionalContentGroups)) {\n        const groupIds = [];\n\n        if (Array.isArray(optionalContentGroups)) {\n          optionalContent.get("OCGs").forEach(ocg => {\n            groupIds.push(ocg.toString());\n          });\n        } else {\n          groupIds.push(optionalContentGroups.objId);\n        }\n\n        let expression = null;\n\n        if (optionalContent.get("VE")) {\n          expression = true;\n        }\n\n        return {\n          type: optionalContentType,\n          ids: groupIds,\n          policy: (0, _primitives.isName)(optionalContent.get("P")) ? optionalContent.get("P").name : null,\n          expression\n        };\n      } else if ((0, _primitives.isRef)(optionalContentGroups)) {\n        return {\n          type: optionalContentType,\n          id: optionalContentGroups.toString()\n        };\n      }\n    }\n\n    return null;\n  }\n\n  getOperatorList({\n    stream,\n    task,\n    resources,\n    operatorList,\n    initialState = null,\n    fallbackFontDict = null\n  }) {\n    resources = resources || _primitives.Dict.empty;\n    initialState = initialState || new EvalState();\n\n    if (!operatorList) {\n      throw new Error(\'getOperatorList: missing "operatorList" parameter\');\n    }\n\n    var self = this;\n    var xref = this.xref;\n    let parsingText = false;\n    const localImageCache = new _image_utils.LocalImageCache();\n    const localColorSpaceCache = new _image_utils.LocalColorSpaceCache();\n    const localGStateCache = new _image_utils.LocalGStateCache();\n    const localTilingPatternCache = new _image_utils.LocalTilingPatternCache();\n\n    var xobjs = resources.get("XObject") || _primitives.Dict.empty;\n\n    var patterns = resources.get("Pattern") || _primitives.Dict.empty;\n\n    var stateManager = new StateManager(initialState);\n    var preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);\n    var timeSlotManager = new TimeSlotManager();\n\n    function closePendingRestoreOPS(argument) {\n      for (var i = 0, ii = preprocessor.savedStatesDepth; i < ii; i++) {\n        operatorList.addOp(_util.OPS.restore, []);\n      }\n    }\n\n    return new Promise(function promiseBody(resolve, reject) {\n      const next = function (promise) {\n        Promise.all([promise, operatorList.ready]).then(function () {\n          try {\n            promiseBody(resolve, reject);\n          } catch (ex) {\n            reject(ex);\n          }\n        }, reject);\n      };\n\n      task.ensureNotTerminated();\n      timeSlotManager.reset();\n      var stop,\n          operation = {},\n          i,\n          ii,\n          cs,\n          name;\n\n      while (!(stop = timeSlotManager.check())) {\n        operation.args = null;\n\n        if (!preprocessor.read(operation)) {\n          break;\n        }\n\n        var args = operation.args;\n        var fn = operation.fn;\n\n        switch (fn | 0) {\n          case _util.OPS.paintXObject:\n            name = args[0].name;\n\n            if (name) {\n              const localImage = localImageCache.getByName(name);\n\n              if (localImage) {\n                operatorList.addOp(localImage.fn, localImage.args);\n                args = null;\n                continue;\n              }\n            }\n\n            next(new Promise(function (resolveXObject, rejectXObject) {\n              if (!name) {\n                throw new _util.FormatError("XObject must be referred to by name.");\n              }\n\n              let xobj = xobjs.getRaw(name);\n\n              if (xobj instanceof _primitives.Ref) {\n                const localImage = localImageCache.getByRef(xobj);\n\n                if (localImage) {\n                  operatorList.addOp(localImage.fn, localImage.args);\n                  resolveXObject();\n                  return;\n                }\n\n                const globalImage = self.globalImageCache.getData(xobj, self.pageIndex);\n\n                if (globalImage) {\n                  operatorList.addDependency(globalImage.objId);\n                  operatorList.addOp(globalImage.fn, globalImage.args);\n                  resolveXObject();\n                  return;\n                }\n\n                xobj = xref.fetch(xobj);\n              }\n\n              if (!(0, _primitives.isStream)(xobj)) {\n                throw new _util.FormatError("XObject should be a stream");\n              }\n\n              const type = xobj.dict.get("Subtype");\n\n              if (!(0, _primitives.isName)(type)) {\n                throw new _util.FormatError("XObject should have a Name subtype");\n              }\n\n              if (type.name === "Form") {\n                stateManager.save();\n                self.buildFormXObject(resources, xobj, null, operatorList, task, stateManager.state.clone(), localColorSpaceCache).then(function () {\n                  stateManager.restore();\n                  resolveXObject();\n                }, rejectXObject);\n                return;\n              } else if (type.name === "Image") {\n                self.buildPaintImageXObject({\n                  resources,\n                  image: xobj,\n                  operatorList,\n                  cacheKey: name,\n                  localImageCache,\n                  localColorSpaceCache\n                }).then(resolveXObject, rejectXObject);\n                return;\n              } else if (type.name === "PS") {\n                (0, _util.info)("Ignored XObject subtype PS");\n              } else {\n                throw new _util.FormatError(`Unhandled XObject subtype ${type.name}`);\n              }\n\n              resolveXObject();\n            }).catch(function (reason) {\n              if (reason instanceof _util.AbortException) {\n                return;\n              }\n\n              if (self.options.ignoreErrors) {\n                self.handler.send("UnsupportedFeature", {\n                  featureId: _util.UNSUPPORTED_FEATURES.errorXObject\n                });\n                (0, _util.warn)(`getOperatorList - ignoring XObject: "${reason}".`);\n                return;\n              }\n\n              throw reason;\n            }));\n            return;\n\n          case _util.OPS.setFont:\n            var fontSize = args[1];\n            next(self.handleSetFont(resources, args, null, operatorList, task, stateManager.state, fallbackFontDict).then(function (loadedName) {\n              operatorList.addDependency(loadedName);\n              operatorList.addOp(_util.OPS.setFont, [loadedName, fontSize]);\n            }));\n            return;\n\n          case _util.OPS.beginText:\n            parsingText = true;\n            break;\n\n          case _util.OPS.endText:\n            parsingText = false;\n            break;\n\n          case _util.OPS.endInlineImage:\n            var cacheKey = args[0].cacheKey;\n\n            if (cacheKey) {\n              const localImage = localImageCache.getByName(cacheKey);\n\n              if (localImage) {\n                operatorList.addOp(localImage.fn, localImage.args);\n                args = null;\n                continue;\n              }\n            }\n\n            next(self.buildPaintImageXObject({\n              resources,\n              image: args[0],\n              isInline: true,\n              operatorList,\n              cacheKey,\n              localImageCache,\n              localColorSpaceCache\n            }));\n            return;\n\n          case _util.OPS.showText:\n            if (!stateManager.state.font) {\n              self.ensureStateFont(stateManager.state);\n              continue;\n            }\n\n            args[0] = self.handleText(args[0], stateManager.state);\n            break;\n\n          case _util.OPS.showSpacedText:\n            if (!stateManager.state.font) {\n              self.ensureStateFont(stateManager.state);\n              continue;\n            }\n\n            var arr = args[0];\n            var combinedGlyphs = [];\n            var arrLength = arr.length;\n            var state = stateManager.state;\n\n            for (i = 0; i < arrLength; ++i) {\n              var arrItem = arr[i];\n\n              if ((0, _util.isString)(arrItem)) {\n                Array.prototype.push.apply(combinedGlyphs, self.handleText(arrItem, state));\n              } else if ((0, _util.isNum)(arrItem)) {\n                combinedGlyphs.push(arrItem);\n              }\n            }\n\n            args[0] = combinedGlyphs;\n            fn = _util.OPS.showText;\n            break;\n\n          case _util.OPS.nextLineShowText:\n            if (!stateManager.state.font) {\n              self.ensureStateFont(stateManager.state);\n              continue;\n            }\n\n            operatorList.addOp(_util.OPS.nextLine);\n            args[0] = self.handleText(args[0], stateManager.state);\n            fn = _util.OPS.showText;\n            break;\n\n          case _util.OPS.nextLineSetSpacingShowText:\n            if (!stateManager.state.font) {\n              self.ensureStateFont(stateManager.state);\n              continue;\n            }\n\n            operatorList.addOp(_util.OPS.nextLine);\n            operatorList.addOp(_util.OPS.setWordSpacing, [args.shift()]);\n            operatorList.addOp(_util.OPS.setCharSpacing, [args.shift()]);\n            args[0] = self.handleText(args[0], stateManager.state);\n            fn = _util.OPS.showText;\n            break;\n\n          case _util.OPS.setTextRenderingMode:\n            stateManager.state.textRenderingMode = args[0];\n            break;\n\n          case _util.OPS.setFillColorSpace:\n            {\n              const cachedColorSpace = _colorspace.ColorSpace.getCached(args[0], xref, localColorSpaceCache);\n\n              if (cachedColorSpace) {\n                stateManager.state.fillColorSpace = cachedColorSpace;\n                continue;\n              }\n\n              next(self.parseColorSpace({\n                cs: args[0],\n                resources,\n                localColorSpaceCache\n              }).then(function (colorSpace) {\n                if (colorSpace) {\n                  stateManager.state.fillColorSpace = colorSpace;\n                }\n              }));\n              return;\n            }\n\n          case _util.OPS.setStrokeColorSpace:\n            {\n              const cachedColorSpace = _colorspace.ColorSpace.getCached(args[0], xref, localColorSpaceCache);\n\n              if (cachedColorSpace) {\n                stateManager.state.strokeColorSpace = cachedColorSpace;\n                continue;\n              }\n\n              next(self.parseColorSpace({\n                cs: args[0],\n                resources,\n                localColorSpaceCache\n              }).then(function (colorSpace) {\n                if (colorSpace) {\n                  stateManager.state.strokeColorSpace = colorSpace;\n                }\n              }));\n              return;\n            }\n\n          case _util.OPS.setFillColor:\n            cs = stateManager.state.fillColorSpace;\n            args = cs.getRgb(args, 0);\n            fn = _util.OPS.setFillRGBColor;\n            break;\n\n          case _util.OPS.setStrokeColor:\n            cs = stateManager.state.strokeColorSpace;\n            args = cs.getRgb(args, 0);\n            fn = _util.OPS.setStrokeRGBColor;\n            break;\n\n          case _util.OPS.setFillGray:\n            stateManager.state.fillColorSpace = _colorspace.ColorSpace.singletons.gray;\n            args = _colorspace.ColorSpace.singletons.gray.getRgb(args, 0);\n            fn = _util.OPS.setFillRGBColor;\n            break;\n\n          case _util.OPS.setStrokeGray:\n            stateManager.state.strokeColorSpace = _colorspace.ColorSpace.singletons.gray;\n            args = _colorspace.ColorSpace.singletons.gray.getRgb(args, 0);\n            fn = _util.OPS.setStrokeRGBColor;\n            break;\n\n          case _util.OPS.setFillCMYKColor:\n            stateManager.state.fillColorSpace = _colorspace.ColorSpace.singletons.cmyk;\n            args = _colorspace.ColorSpace.singletons.cmyk.getRgb(args, 0);\n            fn = _util.OPS.setFillRGBColor;\n            break;\n\n          case _util.OPS.setStrokeCMYKColor:\n            stateManager.state.strokeColorSpace = _colorspace.ColorSpace.singletons.cmyk;\n            args = _colorspace.ColorSpace.singletons.cmyk.getRgb(args, 0);\n            fn = _util.OPS.setStrokeRGBColor;\n            break;\n\n          case _util.OPS.setFillRGBColor:\n            stateManager.state.fillColorSpace = _colorspace.ColorSpace.singletons.rgb;\n            args = _colorspace.ColorSpace.singletons.rgb.getRgb(args, 0);\n            break;\n\n          case _util.OPS.setStrokeRGBColor:\n            stateManager.state.strokeColorSpace = _colorspace.ColorSpace.singletons.rgb;\n            args = _colorspace.ColorSpace.singletons.rgb.getRgb(args, 0);\n            break;\n\n          case _util.OPS.setFillColorN:\n            cs = stateManager.state.fillColorSpace;\n\n            if (cs.name === "Pattern") {\n              next(self.handleColorN(operatorList, _util.OPS.setFillColorN, args, cs, patterns, resources, task, localColorSpaceCache, localTilingPatternCache));\n              return;\n            }\n\n            args = cs.getRgb(args, 0);\n            fn = _util.OPS.setFillRGBColor;\n            break;\n\n          case _util.OPS.setStrokeColorN:\n            cs = stateManager.state.strokeColorSpace;\n\n            if (cs.name === "Pattern") {\n              next(self.handleColorN(operatorList, _util.OPS.setStrokeColorN, args, cs, patterns, resources, task, localColorSpaceCache, localTilingPatternCache));\n              return;\n            }\n\n            args = cs.getRgb(args, 0);\n            fn = _util.OPS.setStrokeRGBColor;\n            break;\n\n          case _util.OPS.shadingFill:\n            var shadingRes = resources.get("Shading");\n\n            if (!shadingRes) {\n              throw new _util.FormatError("No shading resource found");\n            }\n\n            var shading = shadingRes.get(args[0].name);\n\n            if (!shading) {\n              throw new _util.FormatError("No shading object found");\n            }\n\n            var shadingFill = _pattern.Pattern.parseShading(shading, null, xref, resources, self.handler, self._pdfFunctionFactory, localColorSpaceCache);\n\n            var patternIR = shadingFill.getIR();\n            args = [patternIR];\n            fn = _util.OPS.shadingFill;\n            break;\n\n          case _util.OPS.setGState:\n            name = args[0].name;\n\n            if (name) {\n              const localGStateObj = localGStateCache.getByName(name);\n\n              if (localGStateObj) {\n                if (localGStateObj.length > 0) {\n                  operatorList.addOp(_util.OPS.setGState, [localGStateObj]);\n                }\n\n                args = null;\n                continue;\n              }\n            }\n\n            next(new Promise(function (resolveGState, rejectGState) {\n              if (!name) {\n                throw new _util.FormatError("GState must be referred to by name.");\n              }\n\n              const extGState = resources.get("ExtGState");\n\n              if (!(extGState instanceof _primitives.Dict)) {\n                throw new _util.FormatError("ExtGState should be a dictionary.");\n              }\n\n              const gState = extGState.get(name);\n\n              if (!(gState instanceof _primitives.Dict)) {\n                throw new _util.FormatError("GState should be a dictionary.");\n              }\n\n              self.setGState({\n                resources,\n                gState,\n                operatorList,\n                cacheKey: name,\n                task,\n                stateManager,\n                localGStateCache,\n                localColorSpaceCache\n              }).then(resolveGState, rejectGState);\n            }).catch(function (reason) {\n              if (reason instanceof _util.AbortException) {\n                return;\n              }\n\n              if (self.options.ignoreErrors) {\n                self.handler.send("UnsupportedFeature", {\n                  featureId: _util.UNSUPPORTED_FEATURES.errorExtGState\n                });\n                (0, _util.warn)(`getOperatorList - ignoring ExtGState: "${reason}".`);\n                return;\n              }\n\n              throw reason;\n            }));\n            return;\n\n          case _util.OPS.moveTo:\n          case _util.OPS.lineTo:\n          case _util.OPS.curveTo:\n          case _util.OPS.curveTo2:\n          case _util.OPS.curveTo3:\n          case _util.OPS.closePath:\n          case _util.OPS.rectangle:\n            self.buildPath(operatorList, fn, args, parsingText);\n            continue;\n\n          case _util.OPS.markPoint:\n          case _util.OPS.markPointProps:\n          case _util.OPS.beginCompat:\n          case _util.OPS.endCompat:\n            continue;\n\n          case _util.OPS.beginMarkedContentProps:\n            if (!(0, _primitives.isName)(args[0])) {\n              (0, _util.warn)(`Expected name for beginMarkedContentProps arg0=${args[0]}`);\n              continue;\n            }\n\n            if (args[0].name === "OC") {\n              next(self.parseMarkedContentProps(args[1], resources).then(data => {\n                operatorList.addOp(_util.OPS.beginMarkedContentProps, ["OC", data]);\n              }).catch(reason => {\n                if (reason instanceof _util.AbortException) {\n                  return;\n                }\n\n                if (self.options.ignoreErrors) {\n                  self.handler.send("UnsupportedFeature", {\n                    featureId: _util.UNSUPPORTED_FEATURES.errorMarkedContent\n                  });\n                  (0, _util.warn)(`getOperatorList - ignoring beginMarkedContentProps: "${reason}".`);\n                  return;\n                }\n\n                throw reason;\n              }));\n              return;\n            }\n\n            args = [args[0].name];\n            break;\n\n          case _util.OPS.beginMarkedContent:\n          case _util.OPS.endMarkedContent:\n          default:\n            if (args !== null) {\n              for (i = 0, ii = args.length; i < ii; i++) {\n                if (args[i] instanceof _primitives.Dict) {\n                  break;\n                }\n              }\n\n              if (i < ii) {\n                (0, _util.warn)("getOperatorList - ignoring operator: " + fn);\n                continue;\n              }\n            }\n\n        }\n\n        operatorList.addOp(fn, args);\n      }\n\n      if (stop) {\n        next(deferred);\n        return;\n      }\n\n      closePendingRestoreOPS();\n      resolve();\n    }).catch(reason => {\n      if (reason instanceof _util.AbortException) {\n        return;\n      }\n\n      if (this.options.ignoreErrors) {\n        this.handler.send("UnsupportedFeature", {\n          featureId: _util.UNSUPPORTED_FEATURES.errorOperatorList\n        });\n        (0, _util.warn)(`getOperatorList - ignoring errors during "${task.name}" ` + `task: "${reason}".`);\n        closePendingRestoreOPS();\n        return;\n      }\n\n      throw reason;\n    });\n  }\n\n  getTextContent({\n    stream,\n    task,\n    resources,\n    stateManager = null,\n    normalizeWhitespace = false,\n    combineTextItems = false,\n    sink,\n    seenStyles = Object.create(null)\n  }) {\n    resources = resources || _primitives.Dict.empty;\n    stateManager = stateManager || new StateManager(new TextState());\n    var WhitespaceRegexp = /\\s/g;\n    var textContent = {\n      items: [],\n      styles: Object.create(null)\n    };\n    var textContentItem = {\n      initialized: false,\n      str: [],\n      width: 0,\n      height: 0,\n      vertical: false,\n      lastAdvanceWidth: 0,\n      lastAdvanceHeight: 0,\n      textAdvanceScale: 0,\n      spaceWidth: 0,\n      fakeSpaceMin: Infinity,\n      fakeMultiSpaceMin: Infinity,\n      fakeMultiSpaceMax: -0,\n      textRunBreakAllowed: false,\n      transform: null,\n      fontName: null\n    };\n    var SPACE_FACTOR = 0.3;\n    var MULTI_SPACE_FACTOR = 1.5;\n    var MULTI_SPACE_FACTOR_MAX = 4;\n    var self = this;\n    var xref = this.xref;\n    var xobjs = null;\n    const emptyXObjectCache = new _image_utils.LocalImageCache();\n    const emptyGStateCache = new _image_utils.LocalGStateCache();\n    var preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);\n    var textState;\n\n    function ensureTextContentItem() {\n      if (textContentItem.initialized) {\n        return textContentItem;\n      }\n\n      var font = textState.font;\n\n      if (!(font.loadedName in seenStyles)) {\n        seenStyles[font.loadedName] = true;\n        textContent.styles[font.loadedName] = {\n          fontFamily: font.fallbackName,\n          ascent: font.ascent,\n          descent: font.descent,\n          vertical: font.vertical\n        };\n      }\n\n      textContentItem.fontName = font.loadedName;\n      var tsm = [textState.fontSize * textState.textHScale, 0, 0, textState.fontSize, 0, textState.textRise];\n\n      if (font.isType3Font && textState.fontSize <= 1 && !(0, _util.isArrayEqual)(textState.fontMatrix, _util.FONT_IDENTITY_MATRIX)) {\n        const glyphHeight = font.bbox[3] - font.bbox[1];\n\n        if (glyphHeight > 0) {\n          tsm[3] *= glyphHeight * textState.fontMatrix[3];\n        }\n      }\n\n      var trm = _util.Util.transform(textState.ctm, _util.Util.transform(textState.textMatrix, tsm));\n\n      textContentItem.transform = trm;\n\n      if (!font.vertical) {\n        textContentItem.width = 0;\n        textContentItem.height = Math.sqrt(trm[2] * trm[2] + trm[3] * trm[3]);\n        textContentItem.vertical = false;\n      } else {\n        textContentItem.width = Math.sqrt(trm[0] * trm[0] + trm[1] * trm[1]);\n        textContentItem.height = 0;\n        textContentItem.vertical = true;\n      }\n\n      var a = textState.textLineMatrix[0];\n      var b = textState.textLineMatrix[1];\n      var scaleLineX = Math.sqrt(a * a + b * b);\n      a = textState.ctm[0];\n      b = textState.ctm[1];\n      var scaleCtmX = Math.sqrt(a * a + b * b);\n      textContentItem.textAdvanceScale = scaleCtmX * scaleLineX;\n      textContentItem.lastAdvanceWidth = 0;\n      textContentItem.lastAdvanceHeight = 0;\n      var spaceWidth = font.spaceWidth / 1000 * textState.fontSize;\n\n      if (spaceWidth) {\n        textContentItem.spaceWidth = spaceWidth;\n        textContentItem.fakeSpaceMin = spaceWidth * SPACE_FACTOR;\n        textContentItem.fakeMultiSpaceMin = spaceWidth * MULTI_SPACE_FACTOR;\n        textContentItem.fakeMultiSpaceMax = spaceWidth * MULTI_SPACE_FACTOR_MAX;\n        textContentItem.textRunBreakAllowed = !font.isMonospace;\n      } else {\n        textContentItem.spaceWidth = 0;\n        textContentItem.fakeSpaceMin = Infinity;\n        textContentItem.fakeMultiSpaceMin = Infinity;\n        textContentItem.fakeMultiSpaceMax = 0;\n        textContentItem.textRunBreakAllowed = false;\n      }\n\n      textContentItem.initialized = true;\n      return textContentItem;\n    }\n\n    function replaceWhitespace(str) {\n      var i = 0,\n          ii = str.length,\n          code;\n\n      while (i < ii && (code = str.charCodeAt(i)) >= 0x20 && code <= 0x7f) {\n        i++;\n      }\n\n      return i < ii ? str.replace(WhitespaceRegexp, " ") : str;\n    }\n\n    function runBidiTransform(textChunk) {\n      var str = textChunk.str.join("");\n      var bidiResult = (0, _bidi.bidi)(str, -1, textChunk.vertical);\n      return {\n        str: normalizeWhitespace ? replaceWhitespace(bidiResult.str) : bidiResult.str,\n        dir: bidiResult.dir,\n        width: textChunk.width,\n        height: textChunk.height,\n        transform: textChunk.transform,\n        fontName: textChunk.fontName\n      };\n    }\n\n    function handleSetFont(fontName, fontRef) {\n      return self.loadFont(fontName, fontRef, resources).then(function (translated) {\n        textState.font = translated.font;\n        textState.fontMatrix = translated.font.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n      });\n    }\n\n    function buildTextContentItem(chars) {\n      var font = textState.font;\n      var textChunk = ensureTextContentItem();\n      var width = 0;\n      var height = 0;\n      var glyphs = font.charsToGlyphs(chars);\n\n      for (var i = 0; i < glyphs.length; i++) {\n        var glyph = glyphs[i];\n        var glyphWidth = null;\n\n        if (font.vertical && glyph.vmetric) {\n          glyphWidth = glyph.vmetric[0];\n        } else {\n          glyphWidth = glyph.width;\n        }\n\n        var glyphUnicode = glyph.unicode;\n        var NormalizedUnicodes = (0, _unicode.getNormalizedUnicodes)();\n\n        if (NormalizedUnicodes[glyphUnicode] !== undefined) {\n          glyphUnicode = NormalizedUnicodes[glyphUnicode];\n        }\n\n        glyphUnicode = (0, _unicode.reverseIfRtl)(glyphUnicode);\n        var charSpacing = textState.charSpacing;\n\n        if (glyph.isSpace) {\n          var wordSpacing = textState.wordSpacing;\n          charSpacing += wordSpacing;\n\n          if (wordSpacing > 0) {\n            addFakeSpaces(wordSpacing, textChunk.str);\n          }\n        }\n\n        var tx = 0;\n        var ty = 0;\n\n        if (!font.vertical) {\n          var w0 = glyphWidth * textState.fontMatrix[0];\n          tx = (w0 * textState.fontSize + charSpacing) * textState.textHScale;\n          width += tx;\n        } else {\n          var w1 = glyphWidth * textState.fontMatrix[0];\n          ty = w1 * textState.fontSize + charSpacing;\n          height += ty;\n        }\n\n        textState.translateTextMatrix(tx, ty);\n        textChunk.str.push(glyphUnicode);\n      }\n\n      if (!font.vertical) {\n        textChunk.lastAdvanceWidth = width;\n        textChunk.width += width;\n      } else {\n        textChunk.lastAdvanceHeight = height;\n        textChunk.height += Math.abs(height);\n      }\n\n      return textChunk;\n    }\n\n    function addFakeSpaces(width, strBuf) {\n      if (width < textContentItem.fakeSpaceMin) {\n        return;\n      }\n\n      if (width < textContentItem.fakeMultiSpaceMin) {\n        strBuf.push(" ");\n        return;\n      }\n\n      var fakeSpaces = Math.round(width / textContentItem.spaceWidth);\n\n      while (fakeSpaces-- > 0) {\n        strBuf.push(" ");\n      }\n    }\n\n    function flushTextContentItem() {\n      if (!textContentItem.initialized) {\n        return;\n      }\n\n      if (!textContentItem.vertical) {\n        textContentItem.width *= textContentItem.textAdvanceScale;\n      } else {\n        textContentItem.height *= textContentItem.textAdvanceScale;\n      }\n\n      textContent.items.push(runBidiTransform(textContentItem));\n      textContentItem.initialized = false;\n      textContentItem.str.length = 0;\n    }\n\n    function enqueueChunk() {\n      const length = textContent.items.length;\n\n      if (length > 0) {\n        sink.enqueue(textContent, length);\n        textContent.items = [];\n        textContent.styles = Object.create(null);\n      }\n    }\n\n    var timeSlotManager = new TimeSlotManager();\n    return new Promise(function promiseBody(resolve, reject) {\n      const next = function (promise) {\n        enqueueChunk();\n        Promise.all([promise, sink.ready]).then(function () {\n          try {\n            promiseBody(resolve, reject);\n          } catch (ex) {\n            reject(ex);\n          }\n        }, reject);\n      };\n\n      task.ensureNotTerminated();\n      timeSlotManager.reset();\n      var stop,\n          operation = {},\n          args = [];\n\n      while (!(stop = timeSlotManager.check())) {\n        args.length = 0;\n        operation.args = args;\n\n        if (!preprocessor.read(operation)) {\n          break;\n        }\n\n        textState = stateManager.state;\n        var fn = operation.fn;\n        args = operation.args;\n        var advance, diff;\n\n        switch (fn | 0) {\n          case _util.OPS.setFont:\n            var fontNameArg = args[0].name,\n                fontSizeArg = args[1];\n\n            if (textState.font && fontNameArg === textState.fontName && fontSizeArg === textState.fontSize) {\n              break;\n            }\n\n            flushTextContentItem();\n            textState.fontName = fontNameArg;\n            textState.fontSize = fontSizeArg;\n            next(handleSetFont(fontNameArg, null));\n            return;\n\n          case _util.OPS.setTextRise:\n            flushTextContentItem();\n            textState.textRise = args[0];\n            break;\n\n          case _util.OPS.setHScale:\n            flushTextContentItem();\n            textState.textHScale = args[0] / 100;\n            break;\n\n          case _util.OPS.setLeading:\n            flushTextContentItem();\n            textState.leading = args[0];\n            break;\n\n          case _util.OPS.moveText:\n            var isSameTextLine = !textState.font ? false : (textState.font.vertical ? args[0] : args[1]) === 0;\n            advance = args[0] - args[1];\n\n            if (combineTextItems && isSameTextLine && textContentItem.initialized && advance > 0 && advance <= textContentItem.fakeMultiSpaceMax) {\n              textState.translateTextLineMatrix(args[0], args[1]);\n              textContentItem.width += args[0] - textContentItem.lastAdvanceWidth;\n              textContentItem.height += args[1] - textContentItem.lastAdvanceHeight;\n              diff = args[0] - textContentItem.lastAdvanceWidth - (args[1] - textContentItem.lastAdvanceHeight);\n              addFakeSpaces(diff, textContentItem.str);\n              break;\n            }\n\n            flushTextContentItem();\n            textState.translateTextLineMatrix(args[0], args[1]);\n            textState.textMatrix = textState.textLineMatrix.slice();\n            break;\n\n          case _util.OPS.setLeadingMoveText:\n            flushTextContentItem();\n            textState.leading = -args[1];\n            textState.translateTextLineMatrix(args[0], args[1]);\n            textState.textMatrix = textState.textLineMatrix.slice();\n            break;\n\n          case _util.OPS.nextLine:\n            flushTextContentItem();\n            textState.carriageReturn();\n            break;\n\n          case _util.OPS.setTextMatrix:\n            advance = textState.calcTextLineMatrixAdvance(args[0], args[1], args[2], args[3], args[4], args[5]);\n\n            if (combineTextItems && advance !== null && textContentItem.initialized && advance.value > 0 && advance.value <= textContentItem.fakeMultiSpaceMax) {\n              textState.translateTextLineMatrix(advance.width, advance.height);\n              textContentItem.width += advance.width - textContentItem.lastAdvanceWidth;\n              textContentItem.height += advance.height - textContentItem.lastAdvanceHeight;\n              diff = advance.width - textContentItem.lastAdvanceWidth - (advance.height - textContentItem.lastAdvanceHeight);\n              addFakeSpaces(diff, textContentItem.str);\n              break;\n            }\n\n            flushTextContentItem();\n            textState.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);\n            textState.setTextLineMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);\n            break;\n\n          case _util.OPS.setCharSpacing:\n            textState.charSpacing = args[0];\n            break;\n\n          case _util.OPS.setWordSpacing:\n            textState.wordSpacing = args[0];\n            break;\n\n          case _util.OPS.beginText:\n            flushTextContentItem();\n            textState.textMatrix = _util.IDENTITY_MATRIX.slice();\n            textState.textLineMatrix = _util.IDENTITY_MATRIX.slice();\n            break;\n\n          case _util.OPS.showSpacedText:\n            if (!stateManager.state.font) {\n              self.ensureStateFont(stateManager.state);\n              continue;\n            }\n\n            var items = args[0];\n            var offset;\n\n            for (var j = 0, jj = items.length; j < jj; j++) {\n              if (typeof items[j] === "string") {\n                buildTextContentItem(items[j]);\n              } else if ((0, _util.isNum)(items[j])) {\n                ensureTextContentItem();\n                advance = items[j] * textState.fontSize / 1000;\n                var breakTextRun = false;\n\n                if (textState.font.vertical) {\n                  offset = advance;\n                  textState.translateTextMatrix(0, offset);\n                  breakTextRun = textContentItem.textRunBreakAllowed && advance > textContentItem.fakeMultiSpaceMax;\n\n                  if (!breakTextRun) {\n                    textContentItem.height += offset;\n                  }\n                } else {\n                  advance = -advance;\n                  offset = advance * textState.textHScale;\n                  textState.translateTextMatrix(offset, 0);\n                  breakTextRun = textContentItem.textRunBreakAllowed && advance > textContentItem.fakeMultiSpaceMax;\n\n                  if (!breakTextRun) {\n                    textContentItem.width += offset;\n                  }\n                }\n\n                if (breakTextRun) {\n                  flushTextContentItem();\n                } else if (advance > 0) {\n                  addFakeSpaces(advance, textContentItem.str);\n                }\n              }\n            }\n\n            break;\n\n          case _util.OPS.showText:\n            if (!stateManager.state.font) {\n              self.ensureStateFont(stateManager.state);\n              continue;\n            }\n\n            buildTextContentItem(args[0]);\n            break;\n\n          case _util.OPS.nextLineShowText:\n            if (!stateManager.state.font) {\n              self.ensureStateFont(stateManager.state);\n              continue;\n            }\n\n            flushTextContentItem();\n            textState.carriageReturn();\n            buildTextContentItem(args[0]);\n            break;\n\n          case _util.OPS.nextLineSetSpacingShowText:\n            if (!stateManager.state.font) {\n              self.ensureStateFont(stateManager.state);\n              continue;\n            }\n\n            flushTextContentItem();\n            textState.wordSpacing = args[0];\n            textState.charSpacing = args[1];\n            textState.carriageReturn();\n            buildTextContentItem(args[2]);\n            break;\n\n          case _util.OPS.paintXObject:\n            flushTextContentItem();\n\n            if (!xobjs) {\n              xobjs = resources.get("XObject") || _primitives.Dict.empty;\n            }\n\n            var name = args[0].name;\n\n            if (name && emptyXObjectCache.getByName(name)) {\n              break;\n            }\n\n            next(new Promise(function (resolveXObject, rejectXObject) {\n              if (!name) {\n                throw new _util.FormatError("XObject must be referred to by name.");\n              }\n\n              let xobj = xobjs.getRaw(name);\n\n              if (xobj instanceof _primitives.Ref) {\n                if (emptyXObjectCache.getByRef(xobj)) {\n                  resolveXObject();\n                  return;\n                }\n\n                xobj = xref.fetch(xobj);\n              }\n\n              if (!(0, _primitives.isStream)(xobj)) {\n                throw new _util.FormatError("XObject should be a stream");\n              }\n\n              const type = xobj.dict.get("Subtype");\n\n              if (!(0, _primitives.isName)(type)) {\n                throw new _util.FormatError("XObject should have a Name subtype");\n              }\n\n              if (type.name !== "Form") {\n                emptyXObjectCache.set(name, xobj.dict.objId, true);\n                resolveXObject();\n                return;\n              }\n\n              const currentState = stateManager.state.clone();\n              const xObjStateManager = new StateManager(currentState);\n              const matrix = xobj.dict.getArray("Matrix");\n\n              if (Array.isArray(matrix) && matrix.length === 6) {\n                xObjStateManager.transform(matrix);\n              }\n\n              enqueueChunk();\n              const sinkWrapper = {\n                enqueueInvoked: false,\n\n                enqueue(chunk, size) {\n                  this.enqueueInvoked = true;\n                  sink.enqueue(chunk, size);\n                },\n\n                get desiredSize() {\n                  return sink.desiredSize;\n                },\n\n                get ready() {\n                  return sink.ready;\n                }\n\n              };\n              self.getTextContent({\n                stream: xobj,\n                task,\n                resources: xobj.dict.get("Resources") || resources,\n                stateManager: xObjStateManager,\n                normalizeWhitespace,\n                combineTextItems,\n                sink: sinkWrapper,\n                seenStyles\n              }).then(function () {\n                if (!sinkWrapper.enqueueInvoked) {\n                  emptyXObjectCache.set(name, xobj.dict.objId, true);\n                }\n\n                resolveXObject();\n              }, rejectXObject);\n            }).catch(function (reason) {\n              if (reason instanceof _util.AbortException) {\n                return;\n              }\n\n              if (self.options.ignoreErrors) {\n                (0, _util.warn)(`getTextContent - ignoring XObject: "${reason}".`);\n                return;\n              }\n\n              throw reason;\n            }));\n            return;\n\n          case _util.OPS.setGState:\n            name = args[0].name;\n\n            if (name && emptyGStateCache.getByName(name)) {\n              break;\n            }\n\n            next(new Promise(function (resolveGState, rejectGState) {\n              if (!name) {\n                throw new _util.FormatError("GState must be referred to by name.");\n              }\n\n              const extGState = resources.get("ExtGState");\n\n              if (!(extGState instanceof _primitives.Dict)) {\n                throw new _util.FormatError("ExtGState should be a dictionary.");\n              }\n\n              const gState = extGState.get(name);\n\n              if (!(gState instanceof _primitives.Dict)) {\n                throw new _util.FormatError("GState should be a dictionary.");\n              }\n\n              const gStateFont = gState.get("Font");\n\n              if (!gStateFont) {\n                emptyGStateCache.set(name, gState.objId, true);\n                resolveGState();\n                return;\n              }\n\n              flushTextContentItem();\n              textState.fontName = null;\n              textState.fontSize = gStateFont[1];\n              handleSetFont(null, gStateFont[0]).then(resolveGState, rejectGState);\n            }).catch(function (reason) {\n              if (reason instanceof _util.AbortException) {\n                return;\n              }\n\n              if (self.options.ignoreErrors) {\n                (0, _util.warn)(`getTextContent - ignoring ExtGState: "${reason}".`);\n                return;\n              }\n\n              throw reason;\n            }));\n            return;\n        }\n\n        if (textContent.items.length >= sink.desiredSize) {\n          stop = true;\n          break;\n        }\n      }\n\n      if (stop) {\n        next(deferred);\n        return;\n      }\n\n      flushTextContentItem();\n      enqueueChunk();\n      resolve();\n    }).catch(reason => {\n      if (reason instanceof _util.AbortException) {\n        return;\n      }\n\n      if (this.options.ignoreErrors) {\n        (0, _util.warn)(`getTextContent - ignoring errors during "${task.name}" ` + `task: "${reason}".`);\n        flushTextContentItem();\n        enqueueChunk();\n        return;\n      }\n\n      throw reason;\n    });\n  }\n\n  extractDataStructures(dict, baseDict, properties) {\n    const xref = this.xref;\n    let cidToGidBytes;\n    var toUnicode = dict.get("ToUnicode") || baseDict.get("ToUnicode");\n    var toUnicodePromise = toUnicode ? this.readToUnicode(toUnicode) : Promise.resolve(undefined);\n\n    if (properties.composite) {\n      var cidSystemInfo = dict.get("CIDSystemInfo");\n\n      if ((0, _primitives.isDict)(cidSystemInfo)) {\n        properties.cidSystemInfo = {\n          registry: (0, _util.stringToPDFString)(cidSystemInfo.get("Registry")),\n          ordering: (0, _util.stringToPDFString)(cidSystemInfo.get("Ordering")),\n          supplement: cidSystemInfo.get("Supplement")\n        };\n      }\n\n      var cidToGidMap = dict.get("CIDToGIDMap");\n\n      if ((0, _primitives.isStream)(cidToGidMap)) {\n        cidToGidBytes = cidToGidMap.getBytes();\n      }\n    }\n\n    var differences = [];\n    var baseEncodingName = null;\n    var encoding;\n\n    if (dict.has("Encoding")) {\n      encoding = dict.get("Encoding");\n\n      if ((0, _primitives.isDict)(encoding)) {\n        baseEncodingName = encoding.get("BaseEncoding");\n        baseEncodingName = (0, _primitives.isName)(baseEncodingName) ? baseEncodingName.name : null;\n\n        if (encoding.has("Differences")) {\n          var diffEncoding = encoding.get("Differences");\n          var index = 0;\n\n          for (var j = 0, jj = diffEncoding.length; j < jj; j++) {\n            var data = xref.fetchIfRef(diffEncoding[j]);\n\n            if ((0, _util.isNum)(data)) {\n              index = data;\n            } else if ((0, _primitives.isName)(data)) {\n              differences[index++] = data.name;\n            } else {\n              throw new _util.FormatError(`Invalid entry in \'Differences\' array: ${data}`);\n            }\n          }\n        }\n      } else if ((0, _primitives.isName)(encoding)) {\n        baseEncodingName = encoding.name;\n      } else {\n        throw new _util.FormatError("Encoding is not a Name nor a Dict");\n      }\n\n      if (baseEncodingName !== "MacRomanEncoding" && baseEncodingName !== "MacExpertEncoding" && baseEncodingName !== "WinAnsiEncoding") {\n        baseEncodingName = null;\n      }\n    }\n\n    if (baseEncodingName) {\n      properties.defaultEncoding = (0, _encodings.getEncoding)(baseEncodingName).slice();\n    } else {\n      var isSymbolicFont = !!(properties.flags & _fonts.FontFlags.Symbolic);\n      var isNonsymbolicFont = !!(properties.flags & _fonts.FontFlags.Nonsymbolic);\n      encoding = _encodings.StandardEncoding;\n\n      if (properties.type === "TrueType" && !isNonsymbolicFont) {\n        encoding = _encodings.WinAnsiEncoding;\n      }\n\n      if (isSymbolicFont) {\n        encoding = _encodings.MacRomanEncoding;\n\n        if (!properties.file) {\n          if (/Symbol/i.test(properties.name)) {\n            encoding = _encodings.SymbolSetEncoding;\n          } else if (/Dingbats|Wingdings/i.test(properties.name)) {\n            encoding = _encodings.ZapfDingbatsEncoding;\n          }\n        }\n      }\n\n      properties.defaultEncoding = encoding;\n    }\n\n    properties.differences = differences;\n    properties.baseEncodingName = baseEncodingName;\n    properties.hasEncoding = !!baseEncodingName || differences.length > 0;\n    properties.dict = dict;\n    return toUnicodePromise.then(readToUnicode => {\n      properties.toUnicode = readToUnicode;\n      return this.buildToUnicode(properties);\n    }).then(builtToUnicode => {\n      properties.toUnicode = builtToUnicode;\n\n      if (cidToGidBytes) {\n        properties.cidToGidMap = this.readCidToGidMap(cidToGidBytes, builtToUnicode);\n      }\n\n      return properties;\n    });\n  }\n\n  _buildSimpleFontToUnicode(properties, forceGlyphs = false) {\n    (0, _util.assert)(!properties.composite, "Must be a simple font.");\n    const toUnicode = [];\n    const encoding = properties.defaultEncoding.slice();\n    const baseEncodingName = properties.baseEncodingName;\n    const differences = properties.differences;\n\n    for (const charcode in differences) {\n      const glyphName = differences[charcode];\n\n      if (glyphName === ".notdef") {\n        continue;\n      }\n\n      encoding[charcode] = glyphName;\n    }\n\n    const glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n\n    for (const charcode in encoding) {\n      let glyphName = encoding[charcode];\n\n      if (glyphName === "") {\n        continue;\n      } else if (glyphsUnicodeMap[glyphName] === undefined) {\n        let code = 0;\n\n        switch (glyphName[0]) {\n          case "G":\n            if (glyphName.length === 3) {\n              code = parseInt(glyphName.substring(1), 16);\n            }\n\n            break;\n\n          case "g":\n            if (glyphName.length === 5) {\n              code = parseInt(glyphName.substring(1), 16);\n            }\n\n            break;\n\n          case "C":\n          case "c":\n            if (glyphName.length >= 3 && glyphName.length <= 4) {\n              const codeStr = glyphName.substring(1);\n\n              if (forceGlyphs) {\n                code = parseInt(codeStr, 16);\n                break;\n              }\n\n              code = +codeStr;\n\n              if (Number.isNaN(code) && Number.isInteger(parseInt(codeStr, 16))) {\n                return this._buildSimpleFontToUnicode(properties, true);\n              }\n            }\n\n            break;\n\n          default:\n            const unicode = (0, _unicode.getUnicodeForGlyph)(glyphName, glyphsUnicodeMap);\n\n            if (unicode !== -1) {\n              code = unicode;\n            }\n\n        }\n\n        if (code > 0 && code <= 0x10ffff && Number.isInteger(code)) {\n          if (baseEncodingName && code === +charcode) {\n            const baseEncoding = (0, _encodings.getEncoding)(baseEncodingName);\n\n            if (baseEncoding && (glyphName = baseEncoding[charcode])) {\n              toUnicode[charcode] = String.fromCharCode(glyphsUnicodeMap[glyphName]);\n              continue;\n            }\n          }\n\n          toUnicode[charcode] = String.fromCodePoint(code);\n        }\n\n        continue;\n      }\n\n      toUnicode[charcode] = String.fromCharCode(glyphsUnicodeMap[glyphName]);\n    }\n\n    return new _fonts.ToUnicodeMap(toUnicode);\n  }\n\n  buildToUnicode(properties) {\n    properties.hasIncludedToUnicodeMap = !!properties.toUnicode && properties.toUnicode.length > 0;\n\n    if (properties.hasIncludedToUnicodeMap) {\n      if (!properties.composite && properties.hasEncoding) {\n        properties.fallbackToUnicode = this._buildSimpleFontToUnicode(properties);\n      }\n\n      return Promise.resolve(properties.toUnicode);\n    }\n\n    if (!properties.composite) {\n      return Promise.resolve(this._buildSimpleFontToUnicode(properties));\n    }\n\n    if (properties.composite && (properties.cMap.builtInCMap && !(properties.cMap instanceof _cmap.IdentityCMap) || properties.cidSystemInfo.registry === "Adobe" && (properties.cidSystemInfo.ordering === "GB1" || properties.cidSystemInfo.ordering === "CNS1" || properties.cidSystemInfo.ordering === "Japan1" || properties.cidSystemInfo.ordering === "Korea1"))) {\n      const registry = properties.cidSystemInfo.registry;\n      const ordering = properties.cidSystemInfo.ordering;\n\n      const ucs2CMapName = _primitives.Name.get(registry + "-" + ordering + "-UCS2");\n\n      return _cmap.CMapFactory.create({\n        encoding: ucs2CMapName,\n        fetchBuiltInCMap: this._fetchBuiltInCMapBound,\n        useCMap: null\n      }).then(function (ucs2CMap) {\n        const cMap = properties.cMap;\n        const toUnicode = [];\n        cMap.forEach(function (charcode, cid) {\n          if (cid > 0xffff) {\n            throw new _util.FormatError("Max size of CID is 65,535");\n          }\n\n          const ucs2 = ucs2CMap.lookup(cid);\n\n          if (ucs2) {\n            toUnicode[charcode] = String.fromCharCode((ucs2.charCodeAt(0) << 8) + ucs2.charCodeAt(1));\n          }\n        });\n        return new _fonts.ToUnicodeMap(toUnicode);\n      });\n    }\n\n    return Promise.resolve(new _fonts.IdentityToUnicodeMap(properties.firstChar, properties.lastChar));\n  }\n\n  readToUnicode(toUnicode) {\n    var cmapObj = toUnicode;\n\n    if ((0, _primitives.isName)(cmapObj)) {\n      return _cmap.CMapFactory.create({\n        encoding: cmapObj,\n        fetchBuiltInCMap: this._fetchBuiltInCMapBound,\n        useCMap: null\n      }).then(function (cmap) {\n        if (cmap instanceof _cmap.IdentityCMap) {\n          return new _fonts.IdentityToUnicodeMap(0, 0xffff);\n        }\n\n        return new _fonts.ToUnicodeMap(cmap.getMap());\n      });\n    } else if ((0, _primitives.isStream)(cmapObj)) {\n      return _cmap.CMapFactory.create({\n        encoding: cmapObj,\n        fetchBuiltInCMap: this._fetchBuiltInCMapBound,\n        useCMap: null\n      }).then(function (cmap) {\n        if (cmap instanceof _cmap.IdentityCMap) {\n          return new _fonts.IdentityToUnicodeMap(0, 0xffff);\n        }\n\n        var map = new Array(cmap.length);\n        cmap.forEach(function (charCode, token) {\n          var str = [];\n\n          for (var k = 0; k < token.length; k += 2) {\n            var w1 = token.charCodeAt(k) << 8 | token.charCodeAt(k + 1);\n\n            if ((w1 & 0xf800) !== 0xd800) {\n              str.push(w1);\n              continue;\n            }\n\n            k += 2;\n            var w2 = token.charCodeAt(k) << 8 | token.charCodeAt(k + 1);\n            str.push(((w1 & 0x3ff) << 10) + (w2 & 0x3ff) + 0x10000);\n          }\n\n          map[charCode] = String.fromCodePoint.apply(String, str);\n        });\n        return new _fonts.ToUnicodeMap(map);\n      }, reason => {\n        if (reason instanceof _util.AbortException) {\n          return null;\n        }\n\n        if (this.options.ignoreErrors) {\n          this.handler.send("UnsupportedFeature", {\n            featureId: _util.UNSUPPORTED_FEATURES.errorFontToUnicode\n          });\n          (0, _util.warn)(`readToUnicode - ignoring ToUnicode data: "${reason}".`);\n          return null;\n        }\n\n        throw reason;\n      });\n    }\n\n    return Promise.resolve(null);\n  }\n\n  readCidToGidMap(glyphsData, toUnicode) {\n    var result = [];\n\n    for (var j = 0, jj = glyphsData.length; j < jj; j++) {\n      var glyphID = glyphsData[j++] << 8 | glyphsData[j];\n      const code = j >> 1;\n\n      if (glyphID === 0 && !toUnicode.has(code)) {\n        continue;\n      }\n\n      result[code] = glyphID;\n    }\n\n    return result;\n  }\n\n  extractWidths(dict, descriptor, properties) {\n    var xref = this.xref;\n    var glyphsWidths = [];\n    var defaultWidth = 0;\n    var glyphsVMetrics = [];\n    var defaultVMetrics;\n    var i, ii, j, jj, start, code, widths;\n\n    if (properties.composite) {\n      defaultWidth = dict.has("DW") ? dict.get("DW") : 1000;\n      widths = dict.get("W");\n\n      if (widths) {\n        for (i = 0, ii = widths.length; i < ii; i++) {\n          start = xref.fetchIfRef(widths[i++]);\n          code = xref.fetchIfRef(widths[i]);\n\n          if (Array.isArray(code)) {\n            for (j = 0, jj = code.length; j < jj; j++) {\n              glyphsWidths[start++] = xref.fetchIfRef(code[j]);\n            }\n          } else {\n            var width = xref.fetchIfRef(widths[++i]);\n\n            for (j = start; j <= code; j++) {\n              glyphsWidths[j] = width;\n            }\n          }\n        }\n      }\n\n      if (properties.vertical) {\n        var vmetrics = dict.getArray("DW2") || [880, -1000];\n        defaultVMetrics = [vmetrics[1], defaultWidth * 0.5, vmetrics[0]];\n        vmetrics = dict.get("W2");\n\n        if (vmetrics) {\n          for (i = 0, ii = vmetrics.length; i < ii; i++) {\n            start = xref.fetchIfRef(vmetrics[i++]);\n            code = xref.fetchIfRef(vmetrics[i]);\n\n            if (Array.isArray(code)) {\n              for (j = 0, jj = code.length; j < jj; j++) {\n                glyphsVMetrics[start++] = [xref.fetchIfRef(code[j++]), xref.fetchIfRef(code[j++]), xref.fetchIfRef(code[j])];\n              }\n            } else {\n              var vmetric = [xref.fetchIfRef(vmetrics[++i]), xref.fetchIfRef(vmetrics[++i]), xref.fetchIfRef(vmetrics[++i])];\n\n              for (j = start; j <= code; j++) {\n                glyphsVMetrics[j] = vmetric;\n              }\n            }\n          }\n        }\n      }\n    } else {\n      var firstChar = properties.firstChar;\n      widths = dict.get("Widths");\n\n      if (widths) {\n        j = firstChar;\n\n        for (i = 0, ii = widths.length; i < ii; i++) {\n          glyphsWidths[j++] = xref.fetchIfRef(widths[i]);\n        }\n\n        defaultWidth = parseFloat(descriptor.get("MissingWidth")) || 0;\n      } else {\n        var baseFontName = dict.get("BaseFont");\n\n        if ((0, _primitives.isName)(baseFontName)) {\n          var metrics = this.getBaseFontMetrics(baseFontName.name);\n          glyphsWidths = this.buildCharCodeToWidth(metrics.widths, properties);\n          defaultWidth = metrics.defaultWidth;\n        }\n      }\n    }\n\n    var isMonospace = true;\n    var firstWidth = defaultWidth;\n\n    for (var glyph in glyphsWidths) {\n      var glyphWidth = glyphsWidths[glyph];\n\n      if (!glyphWidth) {\n        continue;\n      }\n\n      if (!firstWidth) {\n        firstWidth = glyphWidth;\n        continue;\n      }\n\n      if (firstWidth !== glyphWidth) {\n        isMonospace = false;\n        break;\n      }\n    }\n\n    if (isMonospace) {\n      properties.flags |= _fonts.FontFlags.FixedPitch;\n    }\n\n    properties.defaultWidth = defaultWidth;\n    properties.widths = glyphsWidths;\n    properties.defaultVMetrics = defaultVMetrics;\n    properties.vmetrics = glyphsVMetrics;\n  }\n\n  isSerifFont(baseFontName) {\n    var fontNameWoStyle = baseFontName.split("-")[0];\n    return fontNameWoStyle in (0, _standard_fonts.getSerifFonts)() || fontNameWoStyle.search(/serif/gi) !== -1;\n  }\n\n  getBaseFontMetrics(name) {\n    var defaultWidth = 0;\n    var widths = [];\n    var monospace = false;\n    var stdFontMap = (0, _standard_fonts.getStdFontMap)();\n    var lookupName = stdFontMap[name] || name;\n    var Metrics = (0, _metrics.getMetrics)();\n\n    if (!(lookupName in Metrics)) {\n      if (this.isSerifFont(name)) {\n        lookupName = "Times-Roman";\n      } else {\n        lookupName = "Helvetica";\n      }\n    }\n\n    var glyphWidths = Metrics[lookupName];\n\n    if ((0, _util.isNum)(glyphWidths)) {\n      defaultWidth = glyphWidths;\n      monospace = true;\n    } else {\n      widths = glyphWidths();\n    }\n\n    return {\n      defaultWidth,\n      monospace,\n      widths\n    };\n  }\n\n  buildCharCodeToWidth(widthsByGlyphName, properties) {\n    var widths = Object.create(null);\n    var differences = properties.differences;\n    var encoding = properties.defaultEncoding;\n\n    for (var charCode = 0; charCode < 256; charCode++) {\n      if (charCode in differences && widthsByGlyphName[differences[charCode]]) {\n        widths[charCode] = widthsByGlyphName[differences[charCode]];\n        continue;\n      }\n\n      if (charCode in encoding && widthsByGlyphName[encoding[charCode]]) {\n        widths[charCode] = widthsByGlyphName[encoding[charCode]];\n        continue;\n      }\n    }\n\n    return widths;\n  }\n\n  preEvaluateFont(dict) {\n    var baseDict = dict;\n    var type = dict.get("Subtype");\n\n    if (!(0, _primitives.isName)(type)) {\n      throw new _util.FormatError("invalid font Subtype");\n    }\n\n    var composite = false;\n    var uint8array;\n\n    if (type.name === "Type0") {\n      var df = dict.get("DescendantFonts");\n\n      if (!df) {\n        throw new _util.FormatError("Descendant fonts are not specified");\n      }\n\n      dict = Array.isArray(df) ? this.xref.fetchIfRef(df[0]) : df;\n\n      if (!(dict instanceof _primitives.Dict)) {\n        throw new _util.FormatError("Descendant font is not a dictionary.");\n      }\n\n      type = dict.get("Subtype");\n\n      if (!(0, _primitives.isName)(type)) {\n        throw new _util.FormatError("invalid font Subtype");\n      }\n\n      composite = true;\n    }\n\n    var descriptor = dict.get("FontDescriptor");\n\n    if (descriptor) {\n      var hash = new _murmurhash.MurmurHash3_64();\n      var encoding = baseDict.getRaw("Encoding");\n\n      if ((0, _primitives.isName)(encoding)) {\n        hash.update(encoding.name);\n      } else if ((0, _primitives.isRef)(encoding)) {\n        hash.update(encoding.toString());\n      } else if ((0, _primitives.isDict)(encoding)) {\n        for (const entry of encoding.getRawValues()) {\n          if ((0, _primitives.isName)(entry)) {\n            hash.update(entry.name);\n          } else if ((0, _primitives.isRef)(entry)) {\n            hash.update(entry.toString());\n          } else if (Array.isArray(entry)) {\n            var diffLength = entry.length,\n                diffBuf = new Array(diffLength);\n\n            for (var j = 0; j < diffLength; j++) {\n              var diffEntry = entry[j];\n\n              if ((0, _primitives.isName)(diffEntry)) {\n                diffBuf[j] = diffEntry.name;\n              } else if ((0, _util.isNum)(diffEntry) || (0, _primitives.isRef)(diffEntry)) {\n                diffBuf[j] = diffEntry.toString();\n              }\n            }\n\n            hash.update(diffBuf.join());\n          }\n        }\n      }\n\n      const firstChar = dict.get("FirstChar") || 0;\n      const lastChar = dict.get("LastChar") || (composite ? 0xffff : 0xff);\n      hash.update(`${firstChar}-${lastChar}`);\n      var toUnicode = dict.get("ToUnicode") || baseDict.get("ToUnicode");\n\n      if ((0, _primitives.isStream)(toUnicode)) {\n        var stream = toUnicode.str || toUnicode;\n        uint8array = stream.buffer ? new Uint8Array(stream.buffer.buffer, 0, stream.bufferLength) : new Uint8Array(stream.bytes.buffer, stream.start, stream.end - stream.start);\n        hash.update(uint8array);\n      } else if ((0, _primitives.isName)(toUnicode)) {\n        hash.update(toUnicode.name);\n      }\n\n      var widths = dict.get("Widths") || baseDict.get("Widths");\n\n      if (widths) {\n        uint8array = new Uint8Array(new Uint32Array(widths).buffer);\n        hash.update(uint8array);\n      }\n    }\n\n    return {\n      descriptor,\n      dict,\n      baseDict,\n      composite,\n      type: type.name,\n      hash: hash ? hash.hexdigest() : ""\n    };\n  }\n\n  async translateFont(preEvaluatedFont) {\n    var baseDict = preEvaluatedFont.baseDict;\n    var dict = preEvaluatedFont.dict;\n    var composite = preEvaluatedFont.composite;\n    var descriptor = preEvaluatedFont.descriptor;\n    var type = preEvaluatedFont.type;\n    var maxCharIndex = composite ? 0xffff : 0xff;\n    var properties;\n    const firstChar = dict.get("FirstChar") || 0;\n    const lastChar = dict.get("LastChar") || maxCharIndex;\n\n    if (!descriptor) {\n      if (type === "Type3") {\n        descriptor = new _primitives.Dict(null);\n        descriptor.set("FontName", _primitives.Name.get(type));\n        descriptor.set("FontBBox", dict.getArray("FontBBox") || [0, 0, 0, 0]);\n      } else {\n        var baseFontName = dict.get("BaseFont");\n\n        if (!(0, _primitives.isName)(baseFontName)) {\n          throw new _util.FormatError("Base font is not specified");\n        }\n\n        baseFontName = baseFontName.name.replace(/[,_]/g, "-");\n        var metrics = this.getBaseFontMetrics(baseFontName);\n        var fontNameWoStyle = baseFontName.split("-")[0];\n        var flags = (this.isSerifFont(fontNameWoStyle) ? _fonts.FontFlags.Serif : 0) | (metrics.monospace ? _fonts.FontFlags.FixedPitch : 0) | ((0, _standard_fonts.getSymbolsFonts)()[fontNameWoStyle] ? _fonts.FontFlags.Symbolic : _fonts.FontFlags.Nonsymbolic);\n        properties = {\n          type,\n          name: baseFontName,\n          widths: metrics.widths,\n          defaultWidth: metrics.defaultWidth,\n          flags,\n          firstChar,\n          lastChar\n        };\n        const widths = dict.get("Widths");\n        return this.extractDataStructures(dict, dict, properties).then(newProperties => {\n          if (widths) {\n            const glyphWidths = [];\n            let j = firstChar;\n\n            for (let i = 0, ii = widths.length; i < ii; i++) {\n              glyphWidths[j++] = this.xref.fetchIfRef(widths[i]);\n            }\n\n            newProperties.widths = glyphWidths;\n          } else {\n            newProperties.widths = this.buildCharCodeToWidth(metrics.widths, newProperties);\n          }\n\n          return new _fonts.Font(baseFontName, null, newProperties);\n        });\n      }\n    }\n\n    var fontName = descriptor.get("FontName");\n    var baseFont = dict.get("BaseFont");\n\n    if ((0, _util.isString)(fontName)) {\n      fontName = _primitives.Name.get(fontName);\n    }\n\n    if ((0, _util.isString)(baseFont)) {\n      baseFont = _primitives.Name.get(baseFont);\n    }\n\n    if (type !== "Type3") {\n      var fontNameStr = fontName && fontName.name;\n      var baseFontStr = baseFont && baseFont.name;\n\n      if (fontNameStr !== baseFontStr) {\n        (0, _util.info)(`The FontDescriptor\'s FontName is "${fontNameStr}" but ` + `should be the same as the Font\'s BaseFont "${baseFontStr}".`);\n\n        if (fontNameStr && baseFontStr && baseFontStr.startsWith(fontNameStr)) {\n          fontName = baseFont;\n        }\n      }\n    }\n\n    fontName = fontName || baseFont;\n\n    if (!(0, _primitives.isName)(fontName)) {\n      throw new _util.FormatError("invalid font name");\n    }\n\n    var fontFile = descriptor.get("FontFile", "FontFile2", "FontFile3");\n\n    if (fontFile) {\n      if (fontFile.dict) {\n        var subtype = fontFile.dict.get("Subtype");\n\n        if (subtype) {\n          subtype = subtype.name;\n        }\n\n        var length1 = fontFile.dict.get("Length1");\n        var length2 = fontFile.dict.get("Length2");\n        var length3 = fontFile.dict.get("Length3");\n      }\n    }\n\n    properties = {\n      type,\n      name: fontName.name,\n      subtype,\n      file: fontFile,\n      length1,\n      length2,\n      length3,\n      loadedName: baseDict.loadedName,\n      composite,\n      fixedPitch: false,\n      fontMatrix: dict.getArray("FontMatrix") || _util.FONT_IDENTITY_MATRIX,\n      firstChar: firstChar || 0,\n      lastChar: lastChar || maxCharIndex,\n      bbox: descriptor.getArray("FontBBox"),\n      ascent: descriptor.get("Ascent"),\n      descent: descriptor.get("Descent"),\n      xHeight: descriptor.get("XHeight"),\n      capHeight: descriptor.get("CapHeight"),\n      flags: descriptor.get("Flags"),\n      italicAngle: descriptor.get("ItalicAngle"),\n      isType3Font: false\n    };\n\n    if (composite) {\n      const cidEncoding = baseDict.get("Encoding");\n\n      if ((0, _primitives.isName)(cidEncoding)) {\n        properties.cidEncoding = cidEncoding.name;\n      }\n\n      const cMap = await _cmap.CMapFactory.create({\n        encoding: cidEncoding,\n        fetchBuiltInCMap: this._fetchBuiltInCMapBound,\n        useCMap: null\n      });\n      properties.cMap = cMap;\n      properties.vertical = properties.cMap.vertical;\n    }\n\n    return this.extractDataStructures(dict, baseDict, properties).then(newProperties => {\n      this.extractWidths(dict, descriptor, newProperties);\n\n      if (type === "Type3") {\n        newProperties.isType3Font = true;\n      }\n\n      return new _fonts.Font(fontName.name, fontFile, newProperties);\n    });\n  }\n\n  static buildFontPaths(font, glyphs, handler) {\n    function buildPath(fontChar) {\n      if (font.renderer.hasBuiltPath(fontChar)) {\n        return;\n      }\n\n      handler.send("commonobj", [`${font.loadedName}_path_${fontChar}`, "FontPath", font.renderer.getPathJs(fontChar)]);\n    }\n\n    for (const glyph of glyphs) {\n      buildPath(glyph.fontChar);\n      const accent = glyph.accent;\n\n      if (accent && accent.fontChar) {\n        buildPath(accent.fontChar);\n      }\n    }\n  }\n\n  static get fallbackFontDict() {\n    const dict = new _primitives.Dict();\n    dict.set("BaseFont", _primitives.Name.get("PDFJS-FallbackFont"));\n    dict.set("Type", _primitives.Name.get("FallbackType"));\n    dict.set("Subtype", _primitives.Name.get("FallbackType"));\n    dict.set("Encoding", _primitives.Name.get("WinAnsiEncoding"));\n    return (0, _util.shadow)(this, "fallbackFontDict", dict);\n  }\n\n}\n\nexports.PartialEvaluator = PartialEvaluator;\n\nclass TranslatedFont {\n  constructor({\n    loadedName,\n    font,\n    dict,\n    extraProperties = false\n  }) {\n    this.loadedName = loadedName;\n    this.font = font;\n    this.dict = dict;\n    this._extraProperties = extraProperties;\n    this.type3Loaded = null;\n    this.type3Dependencies = font.isType3Font ? new Set() : null;\n    this.sent = false;\n  }\n\n  send(handler) {\n    if (this.sent) {\n      return;\n    }\n\n    this.sent = true;\n    handler.send("commonobj", [this.loadedName, "Font", this.font.exportData(this._extraProperties)]);\n  }\n\n  fallback(handler) {\n    if (!this.font.data) {\n      return;\n    }\n\n    this.font.disableFontFace = true;\n    const glyphs = this.font.glyphCacheValues;\n    PartialEvaluator.buildFontPaths(this.font, glyphs, handler);\n  }\n\n  loadType3Data(evaluator, resources, task) {\n    if (this.type3Loaded) {\n      return this.type3Loaded;\n    }\n\n    if (!this.font.isType3Font) {\n      throw new Error("Must be a Type3 font.");\n    }\n\n    var type3Options = Object.create(evaluator.options);\n    type3Options.ignoreErrors = false;\n    var type3Evaluator = evaluator.clone(type3Options);\n    type3Evaluator.parsingType3Font = true;\n    const translatedFont = this.font,\n          type3Dependencies = this.type3Dependencies;\n    var loadCharProcsPromise = Promise.resolve();\n    var charProcs = this.dict.get("CharProcs");\n    var fontResources = this.dict.get("Resources") || resources;\n    var charProcOperatorList = Object.create(null);\n\n    for (const key of charProcs.getKeys()) {\n      loadCharProcsPromise = loadCharProcsPromise.then(() => {\n        var glyphStream = charProcs.get(key);\n        var operatorList = new _operator_list.OperatorList();\n        return type3Evaluator.getOperatorList({\n          stream: glyphStream,\n          task,\n          resources: fontResources,\n          operatorList\n        }).then(() => {\n          if (operatorList.fnArray[0] === _util.OPS.setCharWidthAndBounds) {\n            this._removeType3ColorOperators(operatorList);\n          }\n\n          charProcOperatorList[key] = operatorList.getIR();\n\n          for (const dependency of operatorList.dependencies) {\n            type3Dependencies.add(dependency);\n          }\n        }).catch(function (reason) {\n          (0, _util.warn)(`Type3 font resource "${key}" is not available.`);\n          const dummyOperatorList = new _operator_list.OperatorList();\n          charProcOperatorList[key] = dummyOperatorList.getIR();\n        });\n      });\n    }\n\n    this.type3Loaded = loadCharProcsPromise.then(function () {\n      translatedFont.charProcOperatorList = charProcOperatorList;\n    });\n    return this.type3Loaded;\n  }\n\n  _removeType3ColorOperators(operatorList) {\n    let i = 1,\n        ii = operatorList.length;\n\n    while (i < ii) {\n      switch (operatorList.fnArray[i]) {\n        case _util.OPS.setStrokeColorSpace:\n        case _util.OPS.setFillColorSpace:\n        case _util.OPS.setStrokeColor:\n        case _util.OPS.setStrokeColorN:\n        case _util.OPS.setFillColor:\n        case _util.OPS.setFillColorN:\n        case _util.OPS.setStrokeGray:\n        case _util.OPS.setFillGray:\n        case _util.OPS.setStrokeRGBColor:\n        case _util.OPS.setFillRGBColor:\n        case _util.OPS.setStrokeCMYKColor:\n        case _util.OPS.setFillCMYKColor:\n        case _util.OPS.shadingFill:\n        case _util.OPS.setRenderingIntent:\n          operatorList.fnArray.splice(i, 1);\n          operatorList.argsArray.splice(i, 1);\n          ii--;\n          continue;\n\n        case _util.OPS.setGState:\n          const [gStateObj] = operatorList.argsArray[i];\n          let j = 0,\n              jj = gStateObj.length;\n\n          while (j < jj) {\n            const [gStateKey] = gStateObj[j];\n\n            switch (gStateKey) {\n              case "TR":\n              case "TR2":\n              case "HT":\n              case "BG":\n              case "BG2":\n              case "UCR":\n              case "UCR2":\n                gStateObj.splice(j, 1);\n                jj--;\n                continue;\n            }\n\n            j++;\n          }\n\n          break;\n      }\n\n      i++;\n    }\n  }\n\n}\n\nclass StateManager {\n  constructor(initialState = new EvalState()) {\n    this.state = initialState;\n    this.stateStack = [];\n  }\n\n  save() {\n    var old = this.state;\n    this.stateStack.push(this.state);\n    this.state = old.clone();\n  }\n\n  restore() {\n    var prev = this.stateStack.pop();\n\n    if (prev) {\n      this.state = prev;\n    }\n  }\n\n  transform(args) {\n    this.state.ctm = _util.Util.transform(this.state.ctm, args);\n  }\n\n}\n\nclass TextState {\n  constructor() {\n    this.ctm = new Float32Array(_util.IDENTITY_MATRIX);\n    this.fontName = null;\n    this.fontSize = 0;\n    this.font = null;\n    this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n    this.textMatrix = _util.IDENTITY_MATRIX.slice();\n    this.textLineMatrix = _util.IDENTITY_MATRIX.slice();\n    this.charSpacing = 0;\n    this.wordSpacing = 0;\n    this.leading = 0;\n    this.textHScale = 1;\n    this.textRise = 0;\n  }\n\n  setTextMatrix(a, b, c, d, e, f) {\n    var m = this.textMatrix;\n    m[0] = a;\n    m[1] = b;\n    m[2] = c;\n    m[3] = d;\n    m[4] = e;\n    m[5] = f;\n  }\n\n  setTextLineMatrix(a, b, c, d, e, f) {\n    var m = this.textLineMatrix;\n    m[0] = a;\n    m[1] = b;\n    m[2] = c;\n    m[3] = d;\n    m[4] = e;\n    m[5] = f;\n  }\n\n  translateTextMatrix(x, y) {\n    var m = this.textMatrix;\n    m[4] = m[0] * x + m[2] * y + m[4];\n    m[5] = m[1] * x + m[3] * y + m[5];\n  }\n\n  translateTextLineMatrix(x, y) {\n    var m = this.textLineMatrix;\n    m[4] = m[0] * x + m[2] * y + m[4];\n    m[5] = m[1] * x + m[3] * y + m[5];\n  }\n\n  calcTextLineMatrixAdvance(a, b, c, d, e, f) {\n    var font = this.font;\n\n    if (!font) {\n      return null;\n    }\n\n    var m = this.textLineMatrix;\n\n    if (!(a === m[0] && b === m[1] && c === m[2] && d === m[3])) {\n      return null;\n    }\n\n    var txDiff = e - m[4],\n        tyDiff = f - m[5];\n\n    if (font.vertical && txDiff !== 0 || !font.vertical && tyDiff !== 0) {\n      return null;\n    }\n\n    var tx,\n        ty,\n        denominator = a * d - b * c;\n\n    if (font.vertical) {\n      tx = -tyDiff * c / denominator;\n      ty = tyDiff * a / denominator;\n    } else {\n      tx = txDiff * d / denominator;\n      ty = -txDiff * b / denominator;\n    }\n\n    return {\n      width: tx,\n      height: ty,\n      value: font.vertical ? ty : tx\n    };\n  }\n\n  calcRenderMatrix(ctm) {\n    var tsm = [this.fontSize * this.textHScale, 0, 0, this.fontSize, 0, this.textRise];\n    return _util.Util.transform(ctm, _util.Util.transform(this.textMatrix, tsm));\n  }\n\n  carriageReturn() {\n    this.translateTextLineMatrix(0, -this.leading);\n    this.textMatrix = this.textLineMatrix.slice();\n  }\n\n  clone() {\n    var clone = Object.create(this);\n    clone.textMatrix = this.textMatrix.slice();\n    clone.textLineMatrix = this.textLineMatrix.slice();\n    clone.fontMatrix = this.fontMatrix.slice();\n    return clone;\n  }\n\n}\n\nclass EvalState {\n  constructor() {\n    this.ctm = new Float32Array(_util.IDENTITY_MATRIX);\n    this.font = null;\n    this.textRenderingMode = _util.TextRenderingMode.FILL;\n    this.fillColorSpace = _colorspace.ColorSpace.singletons.gray;\n    this.strokeColorSpace = _colorspace.ColorSpace.singletons.gray;\n  }\n\n  clone() {\n    return Object.create(this);\n  }\n\n}\n\nclass EvaluatorPreprocessor {\n  static get opMap() {\n    const getOPMap = (0, _core_utils.getLookupTableFactory)(function (t) {\n      t.w = {\n        id: _util.OPS.setLineWidth,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.J = {\n        id: _util.OPS.setLineCap,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.j = {\n        id: _util.OPS.setLineJoin,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.M = {\n        id: _util.OPS.setMiterLimit,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.d = {\n        id: _util.OPS.setDash,\n        numArgs: 2,\n        variableArgs: false\n      };\n      t.ri = {\n        id: _util.OPS.setRenderingIntent,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.i = {\n        id: _util.OPS.setFlatness,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.gs = {\n        id: _util.OPS.setGState,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.q = {\n        id: _util.OPS.save,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.Q = {\n        id: _util.OPS.restore,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.cm = {\n        id: _util.OPS.transform,\n        numArgs: 6,\n        variableArgs: false\n      };\n      t.m = {\n        id: _util.OPS.moveTo,\n        numArgs: 2,\n        variableArgs: false\n      };\n      t.l = {\n        id: _util.OPS.lineTo,\n        numArgs: 2,\n        variableArgs: false\n      };\n      t.c = {\n        id: _util.OPS.curveTo,\n        numArgs: 6,\n        variableArgs: false\n      };\n      t.v = {\n        id: _util.OPS.curveTo2,\n        numArgs: 4,\n        variableArgs: false\n      };\n      t.y = {\n        id: _util.OPS.curveTo3,\n        numArgs: 4,\n        variableArgs: false\n      };\n      t.h = {\n        id: _util.OPS.closePath,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.re = {\n        id: _util.OPS.rectangle,\n        numArgs: 4,\n        variableArgs: false\n      };\n      t.S = {\n        id: _util.OPS.stroke,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.s = {\n        id: _util.OPS.closeStroke,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.f = {\n        id: _util.OPS.fill,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.F = {\n        id: _util.OPS.fill,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t["f*"] = {\n        id: _util.OPS.eoFill,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.B = {\n        id: _util.OPS.fillStroke,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t["B*"] = {\n        id: _util.OPS.eoFillStroke,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.b = {\n        id: _util.OPS.closeFillStroke,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t["b*"] = {\n        id: _util.OPS.closeEOFillStroke,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.n = {\n        id: _util.OPS.endPath,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.W = {\n        id: _util.OPS.clip,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t["W*"] = {\n        id: _util.OPS.eoClip,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.BT = {\n        id: _util.OPS.beginText,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.ET = {\n        id: _util.OPS.endText,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.Tc = {\n        id: _util.OPS.setCharSpacing,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.Tw = {\n        id: _util.OPS.setWordSpacing,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.Tz = {\n        id: _util.OPS.setHScale,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.TL = {\n        id: _util.OPS.setLeading,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.Tf = {\n        id: _util.OPS.setFont,\n        numArgs: 2,\n        variableArgs: false\n      };\n      t.Tr = {\n        id: _util.OPS.setTextRenderingMode,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.Ts = {\n        id: _util.OPS.setTextRise,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.Td = {\n        id: _util.OPS.moveText,\n        numArgs: 2,\n        variableArgs: false\n      };\n      t.TD = {\n        id: _util.OPS.setLeadingMoveText,\n        numArgs: 2,\n        variableArgs: false\n      };\n      t.Tm = {\n        id: _util.OPS.setTextMatrix,\n        numArgs: 6,\n        variableArgs: false\n      };\n      t["T*"] = {\n        id: _util.OPS.nextLine,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.Tj = {\n        id: _util.OPS.showText,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.TJ = {\n        id: _util.OPS.showSpacedText,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t["\'"] = {\n        id: _util.OPS.nextLineShowText,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t[\'"\'] = {\n        id: _util.OPS.nextLineSetSpacingShowText,\n        numArgs: 3,\n        variableArgs: false\n      };\n      t.d0 = {\n        id: _util.OPS.setCharWidth,\n        numArgs: 2,\n        variableArgs: false\n      };\n      t.d1 = {\n        id: _util.OPS.setCharWidthAndBounds,\n        numArgs: 6,\n        variableArgs: false\n      };\n      t.CS = {\n        id: _util.OPS.setStrokeColorSpace,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.cs = {\n        id: _util.OPS.setFillColorSpace,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.SC = {\n        id: _util.OPS.setStrokeColor,\n        numArgs: 4,\n        variableArgs: true\n      };\n      t.SCN = {\n        id: _util.OPS.setStrokeColorN,\n        numArgs: 33,\n        variableArgs: true\n      };\n      t.sc = {\n        id: _util.OPS.setFillColor,\n        numArgs: 4,\n        variableArgs: true\n      };\n      t.scn = {\n        id: _util.OPS.setFillColorN,\n        numArgs: 33,\n        variableArgs: true\n      };\n      t.G = {\n        id: _util.OPS.setStrokeGray,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.g = {\n        id: _util.OPS.setFillGray,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.RG = {\n        id: _util.OPS.setStrokeRGBColor,\n        numArgs: 3,\n        variableArgs: false\n      };\n      t.rg = {\n        id: _util.OPS.setFillRGBColor,\n        numArgs: 3,\n        variableArgs: false\n      };\n      t.K = {\n        id: _util.OPS.setStrokeCMYKColor,\n        numArgs: 4,\n        variableArgs: false\n      };\n      t.k = {\n        id: _util.OPS.setFillCMYKColor,\n        numArgs: 4,\n        variableArgs: false\n      };\n      t.sh = {\n        id: _util.OPS.shadingFill,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.BI = {\n        id: _util.OPS.beginInlineImage,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.ID = {\n        id: _util.OPS.beginImageData,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.EI = {\n        id: _util.OPS.endInlineImage,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.Do = {\n        id: _util.OPS.paintXObject,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.MP = {\n        id: _util.OPS.markPoint,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.DP = {\n        id: _util.OPS.markPointProps,\n        numArgs: 2,\n        variableArgs: false\n      };\n      t.BMC = {\n        id: _util.OPS.beginMarkedContent,\n        numArgs: 1,\n        variableArgs: false\n      };\n      t.BDC = {\n        id: _util.OPS.beginMarkedContentProps,\n        numArgs: 2,\n        variableArgs: false\n      };\n      t.EMC = {\n        id: _util.OPS.endMarkedContent,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.BX = {\n        id: _util.OPS.beginCompat,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.EX = {\n        id: _util.OPS.endCompat,\n        numArgs: 0,\n        variableArgs: false\n      };\n      t.BM = null;\n      t.BD = null;\n      t.true = null;\n      t.fa = null;\n      t.fal = null;\n      t.fals = null;\n      t.false = null;\n      t.nu = null;\n      t.nul = null;\n      t.null = null;\n    });\n    return (0, _util.shadow)(this, "opMap", getOPMap());\n  }\n\n  static get MAX_INVALID_PATH_OPS() {\n    return (0, _util.shadow)(this, "MAX_INVALID_PATH_OPS", 20);\n  }\n\n  constructor(stream, xref, stateManager = new StateManager()) {\n    this.parser = new _parser.Parser({\n      lexer: new _parser.Lexer(stream, EvaluatorPreprocessor.opMap),\n      xref\n    });\n    this.stateManager = stateManager;\n    this.nonProcessedArgs = [];\n    this._numInvalidPathOPS = 0;\n  }\n\n  get savedStatesDepth() {\n    return this.stateManager.stateStack.length;\n  }\n\n  read(operation) {\n    var args = operation.args;\n\n    while (true) {\n      var obj = this.parser.getObj();\n\n      if (obj instanceof _primitives.Cmd) {\n        var cmd = obj.cmd;\n        var opSpec = EvaluatorPreprocessor.opMap[cmd];\n\n        if (!opSpec) {\n          (0, _util.warn)(`Unknown command "${cmd}".`);\n          continue;\n        }\n\n        var fn = opSpec.id;\n        var numArgs = opSpec.numArgs;\n        var argsLength = args !== null ? args.length : 0;\n\n        if (!opSpec.variableArgs) {\n          if (argsLength !== numArgs) {\n            var nonProcessedArgs = this.nonProcessedArgs;\n\n            while (argsLength > numArgs) {\n              nonProcessedArgs.push(args.shift());\n              argsLength--;\n            }\n\n            while (argsLength < numArgs && nonProcessedArgs.length !== 0) {\n              if (args === null) {\n                args = [];\n              }\n\n              args.unshift(nonProcessedArgs.pop());\n              argsLength++;\n            }\n          }\n\n          if (argsLength < numArgs) {\n            const partialMsg = `command ${cmd}: expected ${numArgs} args, ` + `but received ${argsLength} args.`;\n\n            if (fn >= _util.OPS.moveTo && fn <= _util.OPS.endPath && ++this._numInvalidPathOPS > EvaluatorPreprocessor.MAX_INVALID_PATH_OPS) {\n              throw new _util.FormatError(`Invalid ${partialMsg}`);\n            }\n\n            (0, _util.warn)(`Skipping ${partialMsg}`);\n\n            if (args !== null) {\n              args.length = 0;\n            }\n\n            continue;\n          }\n        } else if (argsLength > numArgs) {\n          (0, _util.info)(`Command ${cmd}: expected [0, ${numArgs}] args, ` + `but received ${argsLength} args.`);\n        }\n\n        this.preprocessCommand(fn, args);\n        operation.fn = fn;\n        operation.args = args;\n        return true;\n      }\n\n      if (obj === _primitives.EOF) {\n        return false;\n      }\n\n      if (obj !== null) {\n        if (args === null) {\n          args = [];\n        }\n\n        args.push(obj);\n\n        if (args.length > 33) {\n          throw new _util.FormatError("Too many arguments");\n        }\n      }\n    }\n  }\n\n  preprocessCommand(fn, args) {\n    switch (fn | 0) {\n      case _util.OPS.save:\n        this.stateManager.save();\n        break;\n\n      case _util.OPS.restore:\n        this.stateManager.restore();\n        break;\n\n      case _util.OPS.transform:\n        this.stateManager.transform(args);\n        break;\n    }\n  }\n\n}\n\nexports.EvaluatorPreprocessor = EvaluatorPreprocessor;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/evaluator.js\n')},"./node_modules/pdfjs-dist/lib/core/font_renderer.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.FontRendererFactory = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _cff_parser = __webpack_require__(/*! ./cff_parser.js */ "./node_modules/pdfjs-dist/lib/core/cff_parser.js");\n\nvar _glyphlist = __webpack_require__(/*! ./glyphlist.js */ "./node_modules/pdfjs-dist/lib/core/glyphlist.js");\n\nvar _encodings = __webpack_require__(/*! ./encodings.js */ "./node_modules/pdfjs-dist/lib/core/encodings.js");\n\nvar _stream = __webpack_require__(/*! ./stream.js */ "./node_modules/pdfjs-dist/lib/core/stream.js");\n\nvar FontRendererFactory = function FontRendererFactoryClosure() {\n  function getLong(data, offset) {\n    return data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];\n  }\n\n  function getUshort(data, offset) {\n    return data[offset] << 8 | data[offset + 1];\n  }\n\n  function getSubroutineBias(subrs) {\n    const numSubrs = subrs.length;\n    let bias = 32768;\n\n    if (numSubrs < 1240) {\n      bias = 107;\n    } else if (numSubrs < 33900) {\n      bias = 1131;\n    }\n\n    return bias;\n  }\n\n  function parseCmap(data, start, end) {\n    var offset = getUshort(data, start + 2) === 1 ? getLong(data, start + 8) : getLong(data, start + 16);\n    var format = getUshort(data, start + offset);\n    var ranges, p, i;\n\n    if (format === 4) {\n      getUshort(data, start + offset + 2);\n      var segCount = getUshort(data, start + offset + 6) >> 1;\n      p = start + offset + 14;\n      ranges = [];\n\n      for (i = 0; i < segCount; i++, p += 2) {\n        ranges[i] = {\n          end: getUshort(data, p)\n        };\n      }\n\n      p += 2;\n\n      for (i = 0; i < segCount; i++, p += 2) {\n        ranges[i].start = getUshort(data, p);\n      }\n\n      for (i = 0; i < segCount; i++, p += 2) {\n        ranges[i].idDelta = getUshort(data, p);\n      }\n\n      for (i = 0; i < segCount; i++, p += 2) {\n        var idOffset = getUshort(data, p);\n\n        if (idOffset === 0) {\n          continue;\n        }\n\n        ranges[i].ids = [];\n\n        for (var j = 0, jj = ranges[i].end - ranges[i].start + 1; j < jj; j++) {\n          ranges[i].ids[j] = getUshort(data, p + idOffset);\n          idOffset += 2;\n        }\n      }\n\n      return ranges;\n    } else if (format === 12) {\n      getLong(data, start + offset + 4);\n      var groups = getLong(data, start + offset + 12);\n      p = start + offset + 16;\n      ranges = [];\n\n      for (i = 0; i < groups; i++) {\n        ranges.push({\n          start: getLong(data, p),\n          end: getLong(data, p + 4),\n          idDelta: getLong(data, p + 8) - getLong(data, p)\n        });\n        p += 12;\n      }\n\n      return ranges;\n    }\n\n    throw new _util.FormatError(`unsupported cmap: ${format}`);\n  }\n\n  function parseCff(data, start, end, seacAnalysisEnabled) {\n    var properties = {};\n    var parser = new _cff_parser.CFFParser(new _stream.Stream(data, start, end - start), properties, seacAnalysisEnabled);\n    var cff = parser.parse();\n    return {\n      glyphs: cff.charStrings.objects,\n      subrs: cff.topDict.privateDict && cff.topDict.privateDict.subrsIndex && cff.topDict.privateDict.subrsIndex.objects,\n      gsubrs: cff.globalSubrIndex && cff.globalSubrIndex.objects,\n      isCFFCIDFont: cff.isCIDFont,\n      fdSelect: cff.fdSelect,\n      fdArray: cff.fdArray\n    };\n  }\n\n  function parseGlyfTable(glyf, loca, isGlyphLocationsLong) {\n    var itemSize, itemDecode;\n\n    if (isGlyphLocationsLong) {\n      itemSize = 4;\n\n      itemDecode = function fontItemDecodeLong(data, offset) {\n        return data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];\n      };\n    } else {\n      itemSize = 2;\n\n      itemDecode = function fontItemDecode(data, offset) {\n        return data[offset] << 9 | data[offset + 1] << 1;\n      };\n    }\n\n    var glyphs = [];\n    var startOffset = itemDecode(loca, 0);\n\n    for (var j = itemSize; j < loca.length; j += itemSize) {\n      var endOffset = itemDecode(loca, j);\n      glyphs.push(glyf.subarray(startOffset, endOffset));\n      startOffset = endOffset;\n    }\n\n    return glyphs;\n  }\n\n  function lookupCmap(ranges, unicode) {\n    var code = unicode.codePointAt(0),\n        gid = 0;\n    var l = 0,\n        r = ranges.length - 1;\n\n    while (l < r) {\n      var c = l + r + 1 >> 1;\n\n      if (code < ranges[c].start) {\n        r = c - 1;\n      } else {\n        l = c;\n      }\n    }\n\n    if (ranges[l].start <= code && code <= ranges[l].end) {\n      gid = ranges[l].idDelta + (ranges[l].ids ? ranges[l].ids[code - ranges[l].start] : code) & 0xffff;\n    }\n\n    return {\n      charCode: code,\n      glyphId: gid\n    };\n  }\n\n  function compileGlyf(code, cmds, font) {\n    function moveTo(x, y) {\n      cmds.push({\n        cmd: "moveTo",\n        args: [x, y]\n      });\n    }\n\n    function lineTo(x, y) {\n      cmds.push({\n        cmd: "lineTo",\n        args: [x, y]\n      });\n    }\n\n    function quadraticCurveTo(xa, ya, x, y) {\n      cmds.push({\n        cmd: "quadraticCurveTo",\n        args: [xa, ya, x, y]\n      });\n    }\n\n    var i = 0;\n    var numberOfContours = (code[i] << 24 | code[i + 1] << 16) >> 16;\n    var flags;\n    var x = 0,\n        y = 0;\n    i += 10;\n\n    if (numberOfContours < 0) {\n      do {\n        flags = code[i] << 8 | code[i + 1];\n        var glyphIndex = code[i + 2] << 8 | code[i + 3];\n        i += 4;\n        var arg1, arg2;\n\n        if (flags & 0x01) {\n          arg1 = (code[i] << 24 | code[i + 1] << 16) >> 16;\n          arg2 = (code[i + 2] << 24 | code[i + 3] << 16) >> 16;\n          i += 4;\n        } else {\n          arg1 = code[i++];\n          arg2 = code[i++];\n        }\n\n        if (flags & 0x02) {\n          x = arg1;\n          y = arg2;\n        } else {\n          x = 0;\n          y = 0;\n        }\n\n        var scaleX = 1,\n            scaleY = 1,\n            scale01 = 0,\n            scale10 = 0;\n\n        if (flags & 0x08) {\n          scaleX = scaleY = (code[i] << 24 | code[i + 1] << 16) / 1073741824;\n          i += 2;\n        } else if (flags & 0x40) {\n          scaleX = (code[i] << 24 | code[i + 1] << 16) / 1073741824;\n          scaleY = (code[i + 2] << 24 | code[i + 3] << 16) / 1073741824;\n          i += 4;\n        } else if (flags & 0x80) {\n          scaleX = (code[i] << 24 | code[i + 1] << 16) / 1073741824;\n          scale01 = (code[i + 2] << 24 | code[i + 3] << 16) / 1073741824;\n          scale10 = (code[i + 4] << 24 | code[i + 5] << 16) / 1073741824;\n          scaleY = (code[i + 6] << 24 | code[i + 7] << 16) / 1073741824;\n          i += 8;\n        }\n\n        var subglyph = font.glyphs[glyphIndex];\n\n        if (subglyph) {\n          cmds.push({\n            cmd: "save"\n          });\n          cmds.push({\n            cmd: "transform",\n            args: [scaleX, scale01, scale10, scaleY, x, y]\n          });\n          compileGlyf(subglyph, cmds, font);\n          cmds.push({\n            cmd: "restore"\n          });\n        }\n      } while (flags & 0x20);\n    } else {\n      var endPtsOfContours = [];\n      var j, jj;\n\n      for (j = 0; j < numberOfContours; j++) {\n        endPtsOfContours.push(code[i] << 8 | code[i + 1]);\n        i += 2;\n      }\n\n      var instructionLength = code[i] << 8 | code[i + 1];\n      i += 2 + instructionLength;\n      var numberOfPoints = endPtsOfContours[endPtsOfContours.length - 1] + 1;\n      var points = [];\n\n      while (points.length < numberOfPoints) {\n        flags = code[i++];\n        var repeat = 1;\n\n        if (flags & 0x08) {\n          repeat += code[i++];\n        }\n\n        while (repeat-- > 0) {\n          points.push({\n            flags\n          });\n        }\n      }\n\n      for (j = 0; j < numberOfPoints; j++) {\n        switch (points[j].flags & 0x12) {\n          case 0x00:\n            x += (code[i] << 24 | code[i + 1] << 16) >> 16;\n            i += 2;\n            break;\n\n          case 0x02:\n            x -= code[i++];\n            break;\n\n          case 0x12:\n            x += code[i++];\n            break;\n        }\n\n        points[j].x = x;\n      }\n\n      for (j = 0; j < numberOfPoints; j++) {\n        switch (points[j].flags & 0x24) {\n          case 0x00:\n            y += (code[i] << 24 | code[i + 1] << 16) >> 16;\n            i += 2;\n            break;\n\n          case 0x04:\n            y -= code[i++];\n            break;\n\n          case 0x24:\n            y += code[i++];\n            break;\n        }\n\n        points[j].y = y;\n      }\n\n      var startPoint = 0;\n\n      for (i = 0; i < numberOfContours; i++) {\n        var endPoint = endPtsOfContours[i];\n        var contour = points.slice(startPoint, endPoint + 1);\n\n        if (contour[0].flags & 1) {\n          contour.push(contour[0]);\n        } else if (contour[contour.length - 1].flags & 1) {\n          contour.unshift(contour[contour.length - 1]);\n        } else {\n          var p = {\n            flags: 1,\n            x: (contour[0].x + contour[contour.length - 1].x) / 2,\n            y: (contour[0].y + contour[contour.length - 1].y) / 2\n          };\n          contour.unshift(p);\n          contour.push(p);\n        }\n\n        moveTo(contour[0].x, contour[0].y);\n\n        for (j = 1, jj = contour.length; j < jj; j++) {\n          if (contour[j].flags & 1) {\n            lineTo(contour[j].x, contour[j].y);\n          } else if (contour[j + 1].flags & 1) {\n            quadraticCurveTo(contour[j].x, contour[j].y, contour[j + 1].x, contour[j + 1].y);\n            j++;\n          } else {\n            quadraticCurveTo(contour[j].x, contour[j].y, (contour[j].x + contour[j + 1].x) / 2, (contour[j].y + contour[j + 1].y) / 2);\n          }\n        }\n\n        startPoint = endPoint + 1;\n      }\n    }\n  }\n\n  function compileCharString(charStringCode, cmds, font, glyphId) {\n    function moveTo(x, y) {\n      cmds.push({\n        cmd: "moveTo",\n        args: [x, y]\n      });\n    }\n\n    function lineTo(x, y) {\n      cmds.push({\n        cmd: "lineTo",\n        args: [x, y]\n      });\n    }\n\n    function bezierCurveTo(x1, y1, x2, y2, x, y) {\n      cmds.push({\n        cmd: "bezierCurveTo",\n        args: [x1, y1, x2, y2, x, y]\n      });\n    }\n\n    var stack = [];\n    var x = 0,\n        y = 0;\n    var stems = 0;\n\n    function parse(code) {\n      var i = 0;\n\n      while (i < code.length) {\n        var stackClean = false;\n        var v = code[i++];\n        var xa, xb, ya, yb, y1, y2, y3, n, subrCode;\n\n        switch (v) {\n          case 1:\n            stems += stack.length >> 1;\n            stackClean = true;\n            break;\n\n          case 3:\n            stems += stack.length >> 1;\n            stackClean = true;\n            break;\n\n          case 4:\n            y += stack.pop();\n            moveTo(x, y);\n            stackClean = true;\n            break;\n\n          case 5:\n            while (stack.length > 0) {\n              x += stack.shift();\n              y += stack.shift();\n              lineTo(x, y);\n            }\n\n            break;\n\n          case 6:\n            while (stack.length > 0) {\n              x += stack.shift();\n              lineTo(x, y);\n\n              if (stack.length === 0) {\n                break;\n              }\n\n              y += stack.shift();\n              lineTo(x, y);\n            }\n\n            break;\n\n          case 7:\n            while (stack.length > 0) {\n              y += stack.shift();\n              lineTo(x, y);\n\n              if (stack.length === 0) {\n                break;\n              }\n\n              x += stack.shift();\n              lineTo(x, y);\n            }\n\n            break;\n\n          case 8:\n            while (stack.length > 0) {\n              xa = x + stack.shift();\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb + stack.shift();\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            break;\n\n          case 10:\n            n = stack.pop();\n            subrCode = null;\n\n            if (font.isCFFCIDFont) {\n              const fdIndex = font.fdSelect.getFDIndex(glyphId);\n\n              if (fdIndex >= 0 && fdIndex < font.fdArray.length) {\n                const fontDict = font.fdArray[fdIndex];\n                let subrs;\n\n                if (fontDict.privateDict && fontDict.privateDict.subrsIndex) {\n                  subrs = fontDict.privateDict.subrsIndex.objects;\n                }\n\n                if (subrs) {\n                  n += getSubroutineBias(subrs);\n                  subrCode = subrs[n];\n                }\n              } else {\n                (0, _util.warn)("Invalid fd index for glyph index.");\n              }\n            } else {\n              subrCode = font.subrs[n + font.subrsBias];\n            }\n\n            if (subrCode) {\n              parse(subrCode);\n            }\n\n            break;\n\n          case 11:\n            return;\n\n          case 12:\n            v = code[i++];\n\n            switch (v) {\n              case 34:\n                xa = x + stack.shift();\n                xb = xa + stack.shift();\n                y1 = y + stack.shift();\n                x = xb + stack.shift();\n                bezierCurveTo(xa, y, xb, y1, x, y1);\n                xa = x + stack.shift();\n                xb = xa + stack.shift();\n                x = xb + stack.shift();\n                bezierCurveTo(xa, y1, xb, y, x, y);\n                break;\n\n              case 35:\n                xa = x + stack.shift();\n                ya = y + stack.shift();\n                xb = xa + stack.shift();\n                yb = ya + stack.shift();\n                x = xb + stack.shift();\n                y = yb + stack.shift();\n                bezierCurveTo(xa, ya, xb, yb, x, y);\n                xa = x + stack.shift();\n                ya = y + stack.shift();\n                xb = xa + stack.shift();\n                yb = ya + stack.shift();\n                x = xb + stack.shift();\n                y = yb + stack.shift();\n                bezierCurveTo(xa, ya, xb, yb, x, y);\n                stack.pop();\n                break;\n\n              case 36:\n                xa = x + stack.shift();\n                y1 = y + stack.shift();\n                xb = xa + stack.shift();\n                y2 = y1 + stack.shift();\n                x = xb + stack.shift();\n                bezierCurveTo(xa, y1, xb, y2, x, y2);\n                xa = x + stack.shift();\n                xb = xa + stack.shift();\n                y3 = y2 + stack.shift();\n                x = xb + stack.shift();\n                bezierCurveTo(xa, y2, xb, y3, x, y);\n                break;\n\n              case 37:\n                var x0 = x,\n                    y0 = y;\n                xa = x + stack.shift();\n                ya = y + stack.shift();\n                xb = xa + stack.shift();\n                yb = ya + stack.shift();\n                x = xb + stack.shift();\n                y = yb + stack.shift();\n                bezierCurveTo(xa, ya, xb, yb, x, y);\n                xa = x + stack.shift();\n                ya = y + stack.shift();\n                xb = xa + stack.shift();\n                yb = ya + stack.shift();\n                x = xb;\n                y = yb;\n\n                if (Math.abs(x - x0) > Math.abs(y - y0)) {\n                  x += stack.shift();\n                } else {\n                  y += stack.shift();\n                }\n\n                bezierCurveTo(xa, ya, xb, yb, x, y);\n                break;\n\n              default:\n                throw new _util.FormatError(`unknown operator: 12 ${v}`);\n            }\n\n            break;\n\n          case 14:\n            if (stack.length >= 4) {\n              var achar = stack.pop();\n              var bchar = stack.pop();\n              y = stack.pop();\n              x = stack.pop();\n              cmds.push({\n                cmd: "save"\n              });\n              cmds.push({\n                cmd: "translate",\n                args: [x, y]\n              });\n              var cmap = lookupCmap(font.cmap, String.fromCharCode(font.glyphNameMap[_encodings.StandardEncoding[achar]]));\n              compileCharString(font.glyphs[cmap.glyphId], cmds, font, cmap.glyphId);\n              cmds.push({\n                cmd: "restore"\n              });\n              cmap = lookupCmap(font.cmap, String.fromCharCode(font.glyphNameMap[_encodings.StandardEncoding[bchar]]));\n              compileCharString(font.glyphs[cmap.glyphId], cmds, font, cmap.glyphId);\n            }\n\n            return;\n\n          case 18:\n            stems += stack.length >> 1;\n            stackClean = true;\n            break;\n\n          case 19:\n            stems += stack.length >> 1;\n            i += stems + 7 >> 3;\n            stackClean = true;\n            break;\n\n          case 20:\n            stems += stack.length >> 1;\n            i += stems + 7 >> 3;\n            stackClean = true;\n            break;\n\n          case 21:\n            y += stack.pop();\n            x += stack.pop();\n            moveTo(x, y);\n            stackClean = true;\n            break;\n\n          case 22:\n            x += stack.pop();\n            moveTo(x, y);\n            stackClean = true;\n            break;\n\n          case 23:\n            stems += stack.length >> 1;\n            stackClean = true;\n            break;\n\n          case 24:\n            while (stack.length > 2) {\n              xa = x + stack.shift();\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb + stack.shift();\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            x += stack.shift();\n            y += stack.shift();\n            lineTo(x, y);\n            break;\n\n          case 25:\n            while (stack.length > 6) {\n              x += stack.shift();\n              y += stack.shift();\n              lineTo(x, y);\n            }\n\n            xa = x + stack.shift();\n            ya = y + stack.shift();\n            xb = xa + stack.shift();\n            yb = ya + stack.shift();\n            x = xb + stack.shift();\n            y = yb + stack.shift();\n            bezierCurveTo(xa, ya, xb, yb, x, y);\n            break;\n\n          case 26:\n            if (stack.length % 2) {\n              x += stack.shift();\n            }\n\n            while (stack.length > 0) {\n              xa = x;\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb;\n              y = yb + stack.shift();\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            break;\n\n          case 27:\n            if (stack.length % 2) {\n              y += stack.shift();\n            }\n\n            while (stack.length > 0) {\n              xa = x + stack.shift();\n              ya = y;\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb;\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            break;\n\n          case 28:\n            stack.push((code[i] << 24 | code[i + 1] << 16) >> 16);\n            i += 2;\n            break;\n\n          case 29:\n            n = stack.pop() + font.gsubrsBias;\n            subrCode = font.gsubrs[n];\n\n            if (subrCode) {\n              parse(subrCode);\n            }\n\n            break;\n\n          case 30:\n            while (stack.length > 0) {\n              xa = x;\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb + (stack.length === 1 ? stack.shift() : 0);\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n\n              if (stack.length === 0) {\n                break;\n              }\n\n              xa = x + stack.shift();\n              ya = y;\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              y = yb + stack.shift();\n              x = xb + (stack.length === 1 ? stack.shift() : 0);\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            break;\n\n          case 31:\n            while (stack.length > 0) {\n              xa = x + stack.shift();\n              ya = y;\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              y = yb + stack.shift();\n              x = xb + (stack.length === 1 ? stack.shift() : 0);\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n\n              if (stack.length === 0) {\n                break;\n              }\n\n              xa = x;\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb + (stack.length === 1 ? stack.shift() : 0);\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            break;\n\n          default:\n            if (v < 32) {\n              throw new _util.FormatError(`unknown operator: ${v}`);\n            }\n\n            if (v < 247) {\n              stack.push(v - 139);\n            } else if (v < 251) {\n              stack.push((v - 247) * 256 + code[i++] + 108);\n            } else if (v < 255) {\n              stack.push(-(v - 251) * 256 - code[i++] - 108);\n            } else {\n              stack.push((code[i] << 24 | code[i + 1] << 16 | code[i + 2] << 8 | code[i + 3]) / 65536);\n              i += 4;\n            }\n\n            break;\n        }\n\n        if (stackClean) {\n          stack.length = 0;\n        }\n      }\n    }\n\n    parse(charStringCode);\n  }\n\n  const NOOP = [];\n\n  class CompiledFont {\n    constructor(fontMatrix) {\n      if (this.constructor === CompiledFont) {\n        (0, _util.unreachable)("Cannot initialize CompiledFont.");\n      }\n\n      this.fontMatrix = fontMatrix;\n      this.compiledGlyphs = Object.create(null);\n      this.compiledCharCodeToGlyphId = Object.create(null);\n    }\n\n    getPathJs(unicode) {\n      const cmap = lookupCmap(this.cmap, unicode);\n      let fn = this.compiledGlyphs[cmap.glyphId];\n\n      if (!fn) {\n        fn = this.compileGlyph(this.glyphs[cmap.glyphId], cmap.glyphId);\n        this.compiledGlyphs[cmap.glyphId] = fn;\n      }\n\n      if (this.compiledCharCodeToGlyphId[cmap.charCode] === undefined) {\n        this.compiledCharCodeToGlyphId[cmap.charCode] = cmap.glyphId;\n      }\n\n      return fn;\n    }\n\n    compileGlyph(code, glyphId) {\n      if (!code || code.length === 0 || code[0] === 14) {\n        return NOOP;\n      }\n\n      let fontMatrix = this.fontMatrix;\n\n      if (this.isCFFCIDFont) {\n        const fdIndex = this.fdSelect.getFDIndex(glyphId);\n\n        if (fdIndex >= 0 && fdIndex < this.fdArray.length) {\n          const fontDict = this.fdArray[fdIndex];\n          fontMatrix = fontDict.getByName("FontMatrix") || _util.FONT_IDENTITY_MATRIX;\n        } else {\n          (0, _util.warn)("Invalid fd index for glyph index.");\n        }\n      }\n\n      const cmds = [];\n      cmds.push({\n        cmd: "save"\n      });\n      cmds.push({\n        cmd: "transform",\n        args: fontMatrix.slice()\n      });\n      cmds.push({\n        cmd: "scale",\n        args: ["size", "-size"]\n      });\n      this.compileGlyphImpl(code, cmds, glyphId);\n      cmds.push({\n        cmd: "restore"\n      });\n      return cmds;\n    }\n\n    compileGlyphImpl() {\n      (0, _util.unreachable)("Children classes should implement this.");\n    }\n\n    hasBuiltPath(unicode) {\n      const cmap = lookupCmap(this.cmap, unicode);\n      return this.compiledGlyphs[cmap.glyphId] !== undefined && this.compiledCharCodeToGlyphId[cmap.charCode] !== undefined;\n    }\n\n  }\n\n  class TrueTypeCompiled extends CompiledFont {\n    constructor(glyphs, cmap, fontMatrix) {\n      super(fontMatrix || [0.000488, 0, 0, 0.000488, 0, 0]);\n      this.glyphs = glyphs;\n      this.cmap = cmap;\n    }\n\n    compileGlyphImpl(code, cmds) {\n      compileGlyf(code, cmds, this);\n    }\n\n  }\n\n  class Type2Compiled extends CompiledFont {\n    constructor(cffInfo, cmap, fontMatrix, glyphNameMap) {\n      super(fontMatrix || [0.001, 0, 0, 0.001, 0, 0]);\n      this.glyphs = cffInfo.glyphs;\n      this.gsubrs = cffInfo.gsubrs || [];\n      this.subrs = cffInfo.subrs || [];\n      this.cmap = cmap;\n      this.glyphNameMap = glyphNameMap || (0, _glyphlist.getGlyphsUnicode)();\n      this.gsubrsBias = getSubroutineBias(this.gsubrs);\n      this.subrsBias = getSubroutineBias(this.subrs);\n      this.isCFFCIDFont = cffInfo.isCFFCIDFont;\n      this.fdSelect = cffInfo.fdSelect;\n      this.fdArray = cffInfo.fdArray;\n    }\n\n    compileGlyphImpl(code, cmds, glyphId) {\n      compileCharString(code, cmds, this, glyphId);\n    }\n\n  }\n\n  return {\n    create: function FontRendererFactory_create(font, seacAnalysisEnabled) {\n      var data = new Uint8Array(font.data);\n      var cmap, glyf, loca, cff, indexToLocFormat, unitsPerEm;\n      var numTables = getUshort(data, 4);\n\n      for (var i = 0, p = 12; i < numTables; i++, p += 16) {\n        var tag = (0, _util.bytesToString)(data.subarray(p, p + 4));\n        var offset = getLong(data, p + 8);\n        var length = getLong(data, p + 12);\n\n        switch (tag) {\n          case "cmap":\n            cmap = parseCmap(data, offset, offset + length);\n            break;\n\n          case "glyf":\n            glyf = data.subarray(offset, offset + length);\n            break;\n\n          case "loca":\n            loca = data.subarray(offset, offset + length);\n            break;\n\n          case "head":\n            unitsPerEm = getUshort(data, offset + 18);\n            indexToLocFormat = getUshort(data, offset + 50);\n            break;\n\n          case "CFF ":\n            cff = parseCff(data, offset, offset + length, seacAnalysisEnabled);\n            break;\n        }\n      }\n\n      if (glyf) {\n        var fontMatrix = !unitsPerEm ? font.fontMatrix : [1 / unitsPerEm, 0, 0, 1 / unitsPerEm, 0, 0];\n        return new TrueTypeCompiled(parseGlyfTable(glyf, loca, indexToLocFormat), cmap, fontMatrix);\n      }\n\n      return new Type2Compiled(cff, cmap, font.fontMatrix, font.glyphNameMap);\n    }\n  };\n}();\n\nexports.FontRendererFactory = FontRendererFactory;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/font_renderer.js\n')},"./node_modules/pdfjs-dist/lib/core/fonts.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.getFontType = getFontType;\nexports.ToUnicodeMap = exports.SEAC_ANALYSIS_ENABLED = exports.IdentityToUnicodeMap = exports.FontFlags = exports.Font = exports.ErrorFont = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _cff_parser = __webpack_require__(/*! ./cff_parser.js */ "./node_modules/pdfjs-dist/lib/core/cff_parser.js");\n\nvar _glyphlist = __webpack_require__(/*! ./glyphlist.js */ "./node_modules/pdfjs-dist/lib/core/glyphlist.js");\n\nvar _encodings = __webpack_require__(/*! ./encodings.js */ "./node_modules/pdfjs-dist/lib/core/encodings.js");\n\nvar _standard_fonts = __webpack_require__(/*! ./standard_fonts.js */ "./node_modules/pdfjs-dist/lib/core/standard_fonts.js");\n\nvar _unicode = __webpack_require__(/*! ./unicode.js */ "./node_modules/pdfjs-dist/lib/core/unicode.js");\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nvar _font_renderer = __webpack_require__(/*! ./font_renderer.js */ "./node_modules/pdfjs-dist/lib/core/font_renderer.js");\n\nvar _cmap = __webpack_require__(/*! ./cmap.js */ "./node_modules/pdfjs-dist/lib/core/cmap.js");\n\nvar _stream = __webpack_require__(/*! ./stream.js */ "./node_modules/pdfjs-dist/lib/core/stream.js");\n\nvar _type1_parser = __webpack_require__(/*! ./type1_parser.js */ "./node_modules/pdfjs-dist/lib/core/type1_parser.js");\n\nconst PRIVATE_USE_AREAS = [[0xe000, 0xf8ff], [0x100000, 0x10fffd]];\nvar PDF_GLYPH_SPACE_UNITS = 1000;\nvar SEAC_ANALYSIS_ENABLED = true;\nexports.SEAC_ANALYSIS_ENABLED = SEAC_ANALYSIS_ENABLED;\nconst EXPORT_DATA_PROPERTIES = ["ascent", "bbox", "black", "bold", "charProcOperatorList", "composite", "data", "defaultVMetrics", "defaultWidth", "descent", "fallbackName", "fontMatrix", "fontType", "isMonospace", "isSerifFont", "isType3Font", "italic", "loadedName", "mimetype", "missingFile", "name", "remeasure", "subtype", "type", "vertical"];\nconst EXPORT_DATA_EXTRA_PROPERTIES = ["cMap", "defaultEncoding", "differences", "isSymbolicFont", "seacMap", "toFontChar", "toUnicode", "vmetrics", "widths"];\nvar FontFlags = {\n  FixedPitch: 1,\n  Serif: 2,\n  Symbolic: 4,\n  Script: 8,\n  Nonsymbolic: 32,\n  Italic: 64,\n  AllCap: 65536,\n  SmallCap: 131072,\n  ForceBold: 262144\n};\nexports.FontFlags = FontFlags;\nvar MacStandardGlyphOrdering = [".notdef", ".null", "nonmarkingreturn", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "Adieresis", "Aring", "Ccedilla", "Eacute", "Ntilde", "Odieresis", "Udieresis", "aacute", "agrave", "acircumflex", "adieresis", "atilde", "aring", "ccedilla", "eacute", "egrave", "ecircumflex", "edieresis", "iacute", "igrave", "icircumflex", "idieresis", "ntilde", "oacute", "ograve", "ocircumflex", "odieresis", "otilde", "uacute", "ugrave", "ucircumflex", "udieresis", "dagger", "degree", "cent", "sterling", "section", "bullet", "paragraph", "germandbls", "registered", "copyright", "trademark", "acute", "dieresis", "notequal", "AE", "Oslash", "infinity", "plusminus", "lessequal", "greaterequal", "yen", "mu", "partialdiff", "summation", "product", "pi", "integral", "ordfeminine", "ordmasculine", "Omega", "ae", "oslash", "questiondown", "exclamdown", "logicalnot", "radical", "florin", "approxequal", "Delta", "guillemotleft", "guillemotright", "ellipsis", "nonbreakingspace", "Agrave", "Atilde", "Otilde", "OE", "oe", "endash", "emdash", "quotedblleft", "quotedblright", "quoteleft", "quoteright", "divide", "lozenge", "ydieresis", "Ydieresis", "fraction", "currency", "guilsinglleft", "guilsinglright", "fi", "fl", "daggerdbl", "periodcentered", "quotesinglbase", "quotedblbase", "perthousand", "Acircumflex", "Ecircumflex", "Aacute", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Oacute", "Ocircumflex", "apple", "Ograve", "Uacute", "Ucircumflex", "Ugrave", "dotlessi", "circumflex", "tilde", "macron", "breve", "dotaccent", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "Lslash", "lslash", "Scaron", "scaron", "Zcaron", "zcaron", "brokenbar", "Eth", "eth", "Yacute", "yacute", "Thorn", "thorn", "minus", "multiply", "onesuperior", "twosuperior", "threesuperior", "onehalf", "onequarter", "threequarters", "franc", "Gbreve", "gbreve", "Idotaccent", "Scedilla", "scedilla", "Cacute", "cacute", "Ccaron", "ccaron", "dcroat"];\n\nfunction adjustWidths(properties) {\n  if (!properties.fontMatrix) {\n    return;\n  }\n\n  if (properties.fontMatrix[0] === _util.FONT_IDENTITY_MATRIX[0]) {\n    return;\n  }\n\n  var scale = 0.001 / properties.fontMatrix[0];\n  var glyphsWidths = properties.widths;\n\n  for (var glyph in glyphsWidths) {\n    glyphsWidths[glyph] *= scale;\n  }\n\n  properties.defaultWidth *= scale;\n}\n\nfunction adjustToUnicode(properties, builtInEncoding) {\n  if (properties.hasIncludedToUnicodeMap) {\n    return;\n  }\n\n  if (properties.hasEncoding) {\n    return;\n  }\n\n  if (builtInEncoding === properties.defaultEncoding) {\n    return;\n  }\n\n  if (properties.toUnicode instanceof IdentityToUnicodeMap) {\n    return;\n  }\n\n  var toUnicode = [],\n      glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n\n  for (var charCode in builtInEncoding) {\n    var glyphName = builtInEncoding[charCode];\n    var unicode = (0, _unicode.getUnicodeForGlyph)(glyphName, glyphsUnicodeMap);\n\n    if (unicode !== -1) {\n      toUnicode[charCode] = String.fromCharCode(unicode);\n    }\n  }\n\n  properties.toUnicode.amend(toUnicode);\n}\n\nfunction getFontType(type, subtype) {\n  switch (type) {\n    case "Type1":\n      return subtype === "Type1C" ? _util.FontType.TYPE1C : _util.FontType.TYPE1;\n\n    case "CIDFontType0":\n      return subtype === "CIDFontType0C" ? _util.FontType.CIDFONTTYPE0C : _util.FontType.CIDFONTTYPE0;\n\n    case "OpenType":\n      return _util.FontType.OPENTYPE;\n\n    case "TrueType":\n      return _util.FontType.TRUETYPE;\n\n    case "CIDFontType2":\n      return _util.FontType.CIDFONTTYPE2;\n\n    case "MMType1":\n      return _util.FontType.MMTYPE1;\n\n    case "Type0":\n      return _util.FontType.TYPE0;\n\n    default:\n      return _util.FontType.UNKNOWN;\n  }\n}\n\nfunction recoverGlyphName(name, glyphsUnicodeMap) {\n  if (glyphsUnicodeMap[name] !== undefined) {\n    return name;\n  }\n\n  var unicode = (0, _unicode.getUnicodeForGlyph)(name, glyphsUnicodeMap);\n\n  if (unicode !== -1) {\n    for (var key in glyphsUnicodeMap) {\n      if (glyphsUnicodeMap[key] === unicode) {\n        return key;\n      }\n    }\n  }\n\n  (0, _util.info)("Unable to recover a standard glyph name for: " + name);\n  return name;\n}\n\nvar Glyph = function GlyphClosure() {\n  function Glyph(fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont) {\n    this.fontChar = fontChar;\n    this.unicode = unicode;\n    this.accent = accent;\n    this.width = width;\n    this.vmetric = vmetric;\n    this.operatorListId = operatorListId;\n    this.isSpace = isSpace;\n    this.isInFont = isInFont;\n  }\n\n  Glyph.prototype.matchesForCache = function (fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont) {\n    return this.fontChar === fontChar && this.unicode === unicode && this.accent === accent && this.width === width && this.vmetric === vmetric && this.operatorListId === operatorListId && this.isSpace === isSpace && this.isInFont === isInFont;\n  };\n\n  return Glyph;\n}();\n\nvar ToUnicodeMap = function ToUnicodeMapClosure() {\n  function ToUnicodeMap(cmap = []) {\n    this._map = cmap;\n  }\n\n  ToUnicodeMap.prototype = {\n    get length() {\n      return this._map.length;\n    },\n\n    forEach(callback) {\n      for (var charCode in this._map) {\n        callback(charCode, this._map[charCode].charCodeAt(0));\n      }\n    },\n\n    has(i) {\n      return this._map[i] !== undefined;\n    },\n\n    get(i) {\n      return this._map[i];\n    },\n\n    charCodeOf(value) {\n      const map = this._map;\n\n      if (map.length <= 0x10000) {\n        return map.indexOf(value);\n      }\n\n      for (const charCode in map) {\n        if (map[charCode] === value) {\n          return charCode | 0;\n        }\n      }\n\n      return -1;\n    },\n\n    amend(map) {\n      for (var charCode in map) {\n        this._map[charCode] = map[charCode];\n      }\n    }\n\n  };\n  return ToUnicodeMap;\n}();\n\nexports.ToUnicodeMap = ToUnicodeMap;\n\nvar IdentityToUnicodeMap = function IdentityToUnicodeMapClosure() {\n  function IdentityToUnicodeMap(firstChar, lastChar) {\n    this.firstChar = firstChar;\n    this.lastChar = lastChar;\n  }\n\n  IdentityToUnicodeMap.prototype = {\n    get length() {\n      return this.lastChar + 1 - this.firstChar;\n    },\n\n    forEach(callback) {\n      for (var i = this.firstChar, ii = this.lastChar; i <= ii; i++) {\n        callback(i, i);\n      }\n    },\n\n    has(i) {\n      return this.firstChar <= i && i <= this.lastChar;\n    },\n\n    get(i) {\n      if (this.firstChar <= i && i <= this.lastChar) {\n        return String.fromCharCode(i);\n      }\n\n      return undefined;\n    },\n\n    charCodeOf(v) {\n      return Number.isInteger(v) && v >= this.firstChar && v <= this.lastChar ? v : -1;\n    },\n\n    amend(map) {\n      (0, _util.unreachable)("Should not call amend()");\n    }\n\n  };\n  return IdentityToUnicodeMap;\n}();\n\nexports.IdentityToUnicodeMap = IdentityToUnicodeMap;\n\nvar OpenTypeFileBuilder = function OpenTypeFileBuilderClosure() {\n  function writeInt16(dest, offset, num) {\n    dest[offset] = num >> 8 & 0xff;\n    dest[offset + 1] = num & 0xff;\n  }\n\n  function writeInt32(dest, offset, num) {\n    dest[offset] = num >> 24 & 0xff;\n    dest[offset + 1] = num >> 16 & 0xff;\n    dest[offset + 2] = num >> 8 & 0xff;\n    dest[offset + 3] = num & 0xff;\n  }\n\n  function writeData(dest, offset, data) {\n    var i, ii;\n\n    if (data instanceof Uint8Array) {\n      dest.set(data, offset);\n    } else if (typeof data === "string") {\n      for (i = 0, ii = data.length; i < ii; i++) {\n        dest[offset++] = data.charCodeAt(i) & 0xff;\n      }\n    } else {\n      for (i = 0, ii = data.length; i < ii; i++) {\n        dest[offset++] = data[i] & 0xff;\n      }\n    }\n  }\n\n  function OpenTypeFileBuilder(sfnt) {\n    this.sfnt = sfnt;\n    this.tables = Object.create(null);\n  }\n\n  OpenTypeFileBuilder.getSearchParams = function OpenTypeFileBuilder_getSearchParams(entriesCount, entrySize) {\n    var maxPower2 = 1,\n        log2 = 0;\n\n    while ((maxPower2 ^ entriesCount) > maxPower2) {\n      maxPower2 <<= 1;\n      log2++;\n    }\n\n    var searchRange = maxPower2 * entrySize;\n    return {\n      range: searchRange,\n      entry: log2,\n      rangeShift: entrySize * entriesCount - searchRange\n    };\n  };\n\n  var OTF_HEADER_SIZE = 12;\n  var OTF_TABLE_ENTRY_SIZE = 16;\n  OpenTypeFileBuilder.prototype = {\n    toArray: function OpenTypeFileBuilder_toArray() {\n      var sfnt = this.sfnt;\n      var tables = this.tables;\n      var tablesNames = Object.keys(tables);\n      tablesNames.sort();\n      var numTables = tablesNames.length;\n      var i, j, jj, table, tableName;\n      var offset = OTF_HEADER_SIZE + numTables * OTF_TABLE_ENTRY_SIZE;\n      var tableOffsets = [offset];\n\n      for (i = 0; i < numTables; i++) {\n        table = tables[tablesNames[i]];\n        var paddedLength = (table.length + 3 & ~3) >>> 0;\n        offset += paddedLength;\n        tableOffsets.push(offset);\n      }\n\n      var file = new Uint8Array(offset);\n\n      for (i = 0; i < numTables; i++) {\n        table = tables[tablesNames[i]];\n        writeData(file, tableOffsets[i], table);\n      }\n\n      if (sfnt === "true") {\n        sfnt = (0, _util.string32)(0x00010000);\n      }\n\n      file[0] = sfnt.charCodeAt(0) & 0xff;\n      file[1] = sfnt.charCodeAt(1) & 0xff;\n      file[2] = sfnt.charCodeAt(2) & 0xff;\n      file[3] = sfnt.charCodeAt(3) & 0xff;\n      writeInt16(file, 4, numTables);\n      var searchParams = OpenTypeFileBuilder.getSearchParams(numTables, 16);\n      writeInt16(file, 6, searchParams.range);\n      writeInt16(file, 8, searchParams.entry);\n      writeInt16(file, 10, searchParams.rangeShift);\n      offset = OTF_HEADER_SIZE;\n\n      for (i = 0; i < numTables; i++) {\n        tableName = tablesNames[i];\n        file[offset] = tableName.charCodeAt(0) & 0xff;\n        file[offset + 1] = tableName.charCodeAt(1) & 0xff;\n        file[offset + 2] = tableName.charCodeAt(2) & 0xff;\n        file[offset + 3] = tableName.charCodeAt(3) & 0xff;\n        var checksum = 0;\n\n        for (j = tableOffsets[i], jj = tableOffsets[i + 1]; j < jj; j += 4) {\n          var quad = (0, _core_utils.readUint32)(file, j);\n          checksum = checksum + quad >>> 0;\n        }\n\n        writeInt32(file, offset + 4, checksum);\n        writeInt32(file, offset + 8, tableOffsets[i]);\n        writeInt32(file, offset + 12, tables[tableName].length);\n        offset += OTF_TABLE_ENTRY_SIZE;\n      }\n\n      return file;\n    },\n    addTable: function OpenTypeFileBuilder_addTable(tag, data) {\n      if (tag in this.tables) {\n        throw new Error("Table " + tag + " already exists");\n      }\n\n      this.tables[tag] = data;\n    }\n  };\n  return OpenTypeFileBuilder;\n}();\n\nvar Font = function FontClosure() {\n  function Font(name, file, properties) {\n    var charCode;\n    this.name = name;\n    this.loadedName = properties.loadedName;\n    this.isType3Font = properties.isType3Font;\n    this.missingFile = false;\n    this.glyphCache = Object.create(null);\n    this.isSerifFont = !!(properties.flags & FontFlags.Serif);\n    this.isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);\n    this.isMonospace = !!(properties.flags & FontFlags.FixedPitch);\n    var type = properties.type;\n    var subtype = properties.subtype;\n    this.type = type;\n    this.subtype = subtype;\n    let fallbackName = "sans-serif";\n\n    if (this.isMonospace) {\n      fallbackName = "monospace";\n    } else if (this.isSerifFont) {\n      fallbackName = "serif";\n    }\n\n    this.fallbackName = fallbackName;\n    this.differences = properties.differences;\n    this.widths = properties.widths;\n    this.defaultWidth = properties.defaultWidth;\n    this.composite = properties.composite;\n    this.cMap = properties.cMap;\n    this.capHeight = properties.capHeight / PDF_GLYPH_SPACE_UNITS;\n    this.ascent = properties.ascent / PDF_GLYPH_SPACE_UNITS;\n    this.descent = properties.descent / PDF_GLYPH_SPACE_UNITS;\n    this.fontMatrix = properties.fontMatrix;\n    this.bbox = properties.bbox;\n    this.defaultEncoding = properties.defaultEncoding;\n    this.toUnicode = properties.toUnicode;\n    this.fallbackToUnicode = properties.fallbackToUnicode || new ToUnicodeMap();\n    this.toFontChar = [];\n\n    if (properties.type === "Type3") {\n      for (charCode = 0; charCode < 256; charCode++) {\n        this.toFontChar[charCode] = this.differences[charCode] || properties.defaultEncoding[charCode];\n      }\n\n      this.fontType = _util.FontType.TYPE3;\n      return;\n    }\n\n    this.cidEncoding = properties.cidEncoding;\n    this.vertical = !!properties.vertical;\n\n    if (this.vertical) {\n      this.vmetrics = properties.vmetrics;\n      this.defaultVMetrics = properties.defaultVMetrics;\n    }\n\n    if (!file || file.isEmpty) {\n      if (file) {\n        (0, _util.warn)(\'Font file is empty in "\' + name + \'" (\' + this.loadedName + ")");\n      }\n\n      this.fallbackToSystemFont(properties);\n      return;\n    }\n\n    [type, subtype] = getFontFileType(file, properties);\n\n    if (type !== this.type || subtype !== this.subtype) {\n      (0, _util.info)("Inconsistent font file Type/SubType, expected: " + `${this.type}/${this.subtype} but found: ${type}/${subtype}.`);\n    }\n\n    try {\n      var data;\n\n      switch (type) {\n        case "MMType1":\n          (0, _util.info)("MMType1 font (" + name + "), falling back to Type1.");\n\n        case "Type1":\n        case "CIDFontType0":\n          this.mimetype = "font/opentype";\n          var cff = subtype === "Type1C" || subtype === "CIDFontType0C" ? new CFFFont(file, properties) : new Type1Font(name, file, properties);\n          adjustWidths(properties);\n          data = this.convert(name, cff, properties);\n          break;\n\n        case "OpenType":\n        case "TrueType":\n        case "CIDFontType2":\n          this.mimetype = "font/opentype";\n          data = this.checkAndRepair(name, file, properties);\n\n          if (this.isOpenType) {\n            adjustWidths(properties);\n            type = "OpenType";\n          }\n\n          break;\n\n        default:\n          throw new _util.FormatError(`Font ${type} is not supported`);\n      }\n    } catch (e) {\n      (0, _util.warn)(e);\n      this.fallbackToSystemFont(properties);\n      return;\n    }\n\n    this.data = data;\n    this.fontType = getFontType(type, subtype);\n    this.fontMatrix = properties.fontMatrix;\n    this.widths = properties.widths;\n    this.defaultWidth = properties.defaultWidth;\n    this.toUnicode = properties.toUnicode;\n    this.seacMap = properties.seacMap;\n  }\n\n  function int16(b0, b1) {\n    return (b0 << 8) + b1;\n  }\n\n  function writeSignedInt16(bytes, index, value) {\n    bytes[index + 1] = value;\n    bytes[index] = value >>> 8;\n  }\n\n  function signedInt16(b0, b1) {\n    var value = (b0 << 8) + b1;\n    return value & 1 << 15 ? value - 0x10000 : value;\n  }\n\n  function int32(b0, b1, b2, b3) {\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n  }\n\n  function string16(value) {\n    return String.fromCharCode(value >> 8 & 0xff, value & 0xff);\n  }\n\n  function safeString16(value) {\n    if (value > 0x7fff) {\n      value = 0x7fff;\n    } else if (value < -0x8000) {\n      value = -0x8000;\n    }\n\n    return String.fromCharCode(value >> 8 & 0xff, value & 0xff);\n  }\n\n  function isTrueTypeFile(file) {\n    var header = file.peekBytes(4);\n    return (0, _core_utils.readUint32)(header, 0) === 0x00010000 || (0, _util.bytesToString)(header) === "true";\n  }\n\n  function isTrueTypeCollectionFile(file) {\n    const header = file.peekBytes(4);\n    return (0, _util.bytesToString)(header) === "ttcf";\n  }\n\n  function isOpenTypeFile(file) {\n    var header = file.peekBytes(4);\n    return (0, _util.bytesToString)(header) === "OTTO";\n  }\n\n  function isType1File(file) {\n    var header = file.peekBytes(2);\n\n    if (header[0] === 0x25 && header[1] === 0x21) {\n      return true;\n    }\n\n    if (header[0] === 0x80 && header[1] === 0x01) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function isCFFFile(file) {\n    const header = file.peekBytes(4);\n\n    if (header[0] >= 1 && header[3] >= 1 && header[3] <= 4) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function getFontFileType(file, {\n    type,\n    subtype,\n    composite\n  }) {\n    let fileType, fileSubtype;\n\n    if (isTrueTypeFile(file) || isTrueTypeCollectionFile(file)) {\n      if (composite) {\n        fileType = "CIDFontType2";\n      } else {\n        fileType = "TrueType";\n      }\n    } else if (isOpenTypeFile(file)) {\n      if (composite) {\n        fileType = "CIDFontType2";\n      } else {\n        fileType = "OpenType";\n      }\n    } else if (isType1File(file)) {\n      if (composite) {\n        fileType = "CIDFontType0";\n      } else {\n        fileType = type === "MMType1" ? "MMType1" : "Type1";\n      }\n    } else if (isCFFFile(file)) {\n      if (composite) {\n        fileType = "CIDFontType0";\n        fileSubtype = "CIDFontType0C";\n      } else {\n        fileType = type === "MMType1" ? "MMType1" : "Type1";\n        fileSubtype = "Type1C";\n      }\n    } else {\n      (0, _util.warn)("getFontFileType: Unable to detect correct font file Type/Subtype.");\n      fileType = type;\n      fileSubtype = subtype;\n    }\n\n    return [fileType, fileSubtype];\n  }\n\n  function buildToFontChar(encoding, glyphsUnicodeMap, differences) {\n    var toFontChar = [],\n        unicode;\n\n    for (var i = 0, ii = encoding.length; i < ii; i++) {\n      unicode = (0, _unicode.getUnicodeForGlyph)(encoding[i], glyphsUnicodeMap);\n\n      if (unicode !== -1) {\n        toFontChar[i] = unicode;\n      }\n    }\n\n    for (var charCode in differences) {\n      unicode = (0, _unicode.getUnicodeForGlyph)(differences[charCode], glyphsUnicodeMap);\n\n      if (unicode !== -1) {\n        toFontChar[+charCode] = unicode;\n      }\n    }\n\n    return toFontChar;\n  }\n\n  function adjustMapping(charCodeToGlyphId, hasGlyph, newGlyphZeroId) {\n    var newMap = Object.create(null);\n    var toFontChar = [];\n    var privateUseAreaIndex = 0;\n    var nextAvailableFontCharCode = PRIVATE_USE_AREAS[privateUseAreaIndex][0];\n    var privateUseOffetEnd = PRIVATE_USE_AREAS[privateUseAreaIndex][1];\n\n    for (var originalCharCode in charCodeToGlyphId) {\n      originalCharCode |= 0;\n      var glyphId = charCodeToGlyphId[originalCharCode];\n\n      if (!hasGlyph(glyphId)) {\n        continue;\n      }\n\n      if (nextAvailableFontCharCode > privateUseOffetEnd) {\n        privateUseAreaIndex++;\n\n        if (privateUseAreaIndex >= PRIVATE_USE_AREAS.length) {\n          (0, _util.warn)("Ran out of space in font private use area.");\n          break;\n        }\n\n        nextAvailableFontCharCode = PRIVATE_USE_AREAS[privateUseAreaIndex][0];\n        privateUseOffetEnd = PRIVATE_USE_AREAS[privateUseAreaIndex][1];\n      }\n\n      var fontCharCode = nextAvailableFontCharCode++;\n\n      if (glyphId === 0) {\n        glyphId = newGlyphZeroId;\n      }\n\n      newMap[fontCharCode] = glyphId;\n      toFontChar[originalCharCode] = fontCharCode;\n    }\n\n    return {\n      toFontChar,\n      charCodeToGlyphId: newMap,\n      nextAvailableFontCharCode\n    };\n  }\n\n  function getRanges(glyphs, numGlyphs) {\n    var codes = [];\n\n    for (var charCode in glyphs) {\n      if (glyphs[charCode] >= numGlyphs) {\n        continue;\n      }\n\n      codes.push({\n        fontCharCode: charCode | 0,\n        glyphId: glyphs[charCode]\n      });\n    }\n\n    if (codes.length === 0) {\n      codes.push({\n        fontCharCode: 0,\n        glyphId: 0\n      });\n    }\n\n    codes.sort(function fontGetRangesSort(a, b) {\n      return a.fontCharCode - b.fontCharCode;\n    });\n    var ranges = [];\n    var length = codes.length;\n\n    for (var n = 0; n < length;) {\n      var start = codes[n].fontCharCode;\n      var codeIndices = [codes[n].glyphId];\n      ++n;\n      var end = start;\n\n      while (n < length && end + 1 === codes[n].fontCharCode) {\n        codeIndices.push(codes[n].glyphId);\n        ++end;\n        ++n;\n\n        if (end === 0xffff) {\n          break;\n        }\n      }\n\n      ranges.push([start, end, codeIndices]);\n    }\n\n    return ranges;\n  }\n\n  function createCmapTable(glyphs, numGlyphs) {\n    var ranges = getRanges(glyphs, numGlyphs);\n    var numTables = ranges[ranges.length - 1][1] > 0xffff ? 2 : 1;\n    var cmap = "\\x00\\x00" + string16(numTables) + "\\x00\\x03" + "\\x00\\x01" + (0, _util.string32)(4 + numTables * 8);\n    var i, ii, j, jj;\n\n    for (i = ranges.length - 1; i >= 0; --i) {\n      if (ranges[i][0] <= 0xffff) {\n        break;\n      }\n    }\n\n    var bmpLength = i + 1;\n\n    if (ranges[i][0] < 0xffff && ranges[i][1] === 0xffff) {\n      ranges[i][1] = 0xfffe;\n    }\n\n    var trailingRangesCount = ranges[i][1] < 0xffff ? 1 : 0;\n    var segCount = bmpLength + trailingRangesCount;\n    var searchParams = OpenTypeFileBuilder.getSearchParams(segCount, 2);\n    var startCount = "";\n    var endCount = "";\n    var idDeltas = "";\n    var idRangeOffsets = "";\n    var glyphsIds = "";\n    var bias = 0;\n    var range, start, end, codes;\n\n    for (i = 0, ii = bmpLength; i < ii; i++) {\n      range = ranges[i];\n      start = range[0];\n      end = range[1];\n      startCount += string16(start);\n      endCount += string16(end);\n      codes = range[2];\n      var contiguous = true;\n\n      for (j = 1, jj = codes.length; j < jj; ++j) {\n        if (codes[j] !== codes[j - 1] + 1) {\n          contiguous = false;\n          break;\n        }\n      }\n\n      if (!contiguous) {\n        var offset = (segCount - i) * 2 + bias * 2;\n        bias += end - start + 1;\n        idDeltas += string16(0);\n        idRangeOffsets += string16(offset);\n\n        for (j = 0, jj = codes.length; j < jj; ++j) {\n          glyphsIds += string16(codes[j]);\n        }\n      } else {\n        var startCode = codes[0];\n        idDeltas += string16(startCode - start & 0xffff);\n        idRangeOffsets += string16(0);\n      }\n    }\n\n    if (trailingRangesCount > 0) {\n      endCount += "\\xFF\\xFF";\n      startCount += "\\xFF\\xFF";\n      idDeltas += "\\x00\\x01";\n      idRangeOffsets += "\\x00\\x00";\n    }\n\n    var format314 = "\\x00\\x00" + string16(2 * segCount) + string16(searchParams.range) + string16(searchParams.entry) + string16(searchParams.rangeShift) + endCount + "\\x00\\x00" + startCount + idDeltas + idRangeOffsets + glyphsIds;\n    var format31012 = "";\n    var header31012 = "";\n\n    if (numTables > 1) {\n      cmap += "\\x00\\x03" + "\\x00\\x0A" + (0, _util.string32)(4 + numTables * 8 + 4 + format314.length);\n      format31012 = "";\n\n      for (i = 0, ii = ranges.length; i < ii; i++) {\n        range = ranges[i];\n        start = range[0];\n        codes = range[2];\n        var code = codes[0];\n\n        for (j = 1, jj = codes.length; j < jj; ++j) {\n          if (codes[j] !== codes[j - 1] + 1) {\n            end = range[0] + j - 1;\n            format31012 += (0, _util.string32)(start) + (0, _util.string32)(end) + (0, _util.string32)(code);\n            start = end + 1;\n            code = codes[j];\n          }\n        }\n\n        format31012 += (0, _util.string32)(start) + (0, _util.string32)(range[1]) + (0, _util.string32)(code);\n      }\n\n      header31012 = "\\x00\\x0C" + "\\x00\\x00" + (0, _util.string32)(format31012.length + 16) + "\\x00\\x00\\x00\\x00" + (0, _util.string32)(format31012.length / 12);\n    }\n\n    return cmap + "\\x00\\x04" + string16(format314.length + 4) + format314 + header31012 + format31012;\n  }\n\n  function validateOS2Table(os2, file) {\n    file.pos = (file.start || 0) + os2.offset;\n    var version = file.getUint16();\n    file.skip(60);\n    var selection = file.getUint16();\n\n    if (version < 4 && selection & 0x0300) {\n      return false;\n    }\n\n    var firstChar = file.getUint16();\n    var lastChar = file.getUint16();\n\n    if (firstChar > lastChar) {\n      return false;\n    }\n\n    file.skip(6);\n    var usWinAscent = file.getUint16();\n\n    if (usWinAscent === 0) {\n      return false;\n    }\n\n    os2.data[8] = os2.data[9] = 0;\n    return true;\n  }\n\n  function createOS2Table(properties, charstrings, override) {\n    override = override || {\n      unitsPerEm: 0,\n      yMax: 0,\n      yMin: 0,\n      ascent: 0,\n      descent: 0\n    };\n    var ulUnicodeRange1 = 0;\n    var ulUnicodeRange2 = 0;\n    var ulUnicodeRange3 = 0;\n    var ulUnicodeRange4 = 0;\n    var firstCharIndex = null;\n    var lastCharIndex = 0;\n\n    if (charstrings) {\n      for (var code in charstrings) {\n        code |= 0;\n\n        if (firstCharIndex > code || !firstCharIndex) {\n          firstCharIndex = code;\n        }\n\n        if (lastCharIndex < code) {\n          lastCharIndex = code;\n        }\n\n        var position = (0, _unicode.getUnicodeRangeFor)(code);\n\n        if (position < 32) {\n          ulUnicodeRange1 |= 1 << position;\n        } else if (position < 64) {\n          ulUnicodeRange2 |= 1 << position - 32;\n        } else if (position < 96) {\n          ulUnicodeRange3 |= 1 << position - 64;\n        } else if (position < 123) {\n          ulUnicodeRange4 |= 1 << position - 96;\n        } else {\n          throw new _util.FormatError("Unicode ranges Bits > 123 are reserved for internal usage");\n        }\n      }\n\n      if (lastCharIndex > 0xffff) {\n        lastCharIndex = 0xffff;\n      }\n    } else {\n      firstCharIndex = 0;\n      lastCharIndex = 255;\n    }\n\n    var bbox = properties.bbox || [0, 0, 0, 0];\n    var unitsPerEm = override.unitsPerEm || 1 / (properties.fontMatrix || _util.FONT_IDENTITY_MATRIX)[0];\n    var scale = properties.ascentScaled ? 1.0 : unitsPerEm / PDF_GLYPH_SPACE_UNITS;\n    var typoAscent = override.ascent || Math.round(scale * (properties.ascent || bbox[3]));\n    var typoDescent = override.descent || Math.round(scale * (properties.descent || bbox[1]));\n\n    if (typoDescent > 0 && properties.descent > 0 && bbox[1] < 0) {\n      typoDescent = -typoDescent;\n    }\n\n    var winAscent = override.yMax || typoAscent;\n    var winDescent = -override.yMin || -typoDescent;\n    return "\\x00\\x03" + "\\x02\\x24" + "\\x01\\xF4" + "\\x00\\x05" + "\\x00\\x00" + "\\x02\\x8A" + "\\x02\\xBB" + "\\x00\\x00" + "\\x00\\x8C" + "\\x02\\x8A" + "\\x02\\xBB" + "\\x00\\x00" + "\\x01\\xDF" + "\\x00\\x31" + "\\x01\\x02" + "\\x00\\x00" + "\\x00\\x00\\x06" + String.fromCharCode(properties.fixedPitch ? 0x09 : 0x00) + "\\x00\\x00\\x00\\x00\\x00\\x00" + (0, _util.string32)(ulUnicodeRange1) + (0, _util.string32)(ulUnicodeRange2) + (0, _util.string32)(ulUnicodeRange3) + (0, _util.string32)(ulUnicodeRange4) + "\\x2A\\x32\\x31\\x2A" + string16(properties.italicAngle ? 1 : 0) + string16(firstCharIndex || properties.firstChar) + string16(lastCharIndex || properties.lastChar) + string16(typoAscent) + string16(typoDescent) + "\\x00\\x64" + string16(winAscent) + string16(winDescent) + "\\x00\\x00\\x00\\x00" + "\\x00\\x00\\x00\\x00" + string16(properties.xHeight) + string16(properties.capHeight) + string16(0) + string16(firstCharIndex || properties.firstChar) + "\\x00\\x03";\n  }\n\n  function createPostTable(properties) {\n    var angle = Math.floor(properties.italicAngle * 2 ** 16);\n    return "\\x00\\x03\\x00\\x00" + (0, _util.string32)(angle) + "\\x00\\x00" + "\\x00\\x00" + (0, _util.string32)(properties.fixedPitch) + "\\x00\\x00\\x00\\x00" + "\\x00\\x00\\x00\\x00" + "\\x00\\x00\\x00\\x00" + "\\x00\\x00\\x00\\x00";\n  }\n\n  function createNameTable(name, proto) {\n    if (!proto) {\n      proto = [[], []];\n    }\n\n    var strings = [proto[0][0] || "Original licence", proto[0][1] || name, proto[0][2] || "Unknown", proto[0][3] || "uniqueID", proto[0][4] || name, proto[0][5] || "Version 0.11", proto[0][6] || "", proto[0][7] || "Unknown", proto[0][8] || "Unknown", proto[0][9] || "Unknown"];\n    var stringsUnicode = [];\n    var i, ii, j, jj, str;\n\n    for (i = 0, ii = strings.length; i < ii; i++) {\n      str = proto[1][i] || strings[i];\n      var strBufUnicode = [];\n\n      for (j = 0, jj = str.length; j < jj; j++) {\n        strBufUnicode.push(string16(str.charCodeAt(j)));\n      }\n\n      stringsUnicode.push(strBufUnicode.join(""));\n    }\n\n    var names = [strings, stringsUnicode];\n    var platforms = ["\\x00\\x01", "\\x00\\x03"];\n    var encodings = ["\\x00\\x00", "\\x00\\x01"];\n    var languages = ["\\x00\\x00", "\\x04\\x09"];\n    var namesRecordCount = strings.length * platforms.length;\n    var nameTable = "\\x00\\x00" + string16(namesRecordCount) + string16(namesRecordCount * 12 + 6);\n    var strOffset = 0;\n\n    for (i = 0, ii = platforms.length; i < ii; i++) {\n      var strs = names[i];\n\n      for (j = 0, jj = strs.length; j < jj; j++) {\n        str = strs[j];\n        var nameRecord = platforms[i] + encodings[i] + languages[i] + string16(j) + string16(str.length) + string16(strOffset);\n        nameTable += nameRecord;\n        strOffset += str.length;\n      }\n    }\n\n    nameTable += strings.join("") + stringsUnicode.join("");\n    return nameTable;\n  }\n\n  Font.prototype = {\n    name: null,\n    font: null,\n    mimetype: null,\n    disableFontFace: false,\n\n    get renderer() {\n      var renderer = _font_renderer.FontRendererFactory.create(this, SEAC_ANALYSIS_ENABLED);\n\n      return (0, _util.shadow)(this, "renderer", renderer);\n    },\n\n    exportData(extraProperties = false) {\n      const exportDataProperties = extraProperties ? [...EXPORT_DATA_PROPERTIES, ...EXPORT_DATA_EXTRA_PROPERTIES] : EXPORT_DATA_PROPERTIES;\n      const data = Object.create(null);\n      let property, value;\n\n      for (property of exportDataProperties) {\n        value = this[property];\n\n        if (value !== undefined) {\n          data[property] = value;\n        }\n      }\n\n      return data;\n    },\n\n    fallbackToSystemFont(properties) {\n      this.missingFile = true;\n      var name = this.name;\n      var type = this.type;\n      var subtype = this.subtype;\n      let fontName = name.replace(/[,_]/g, "-").replace(/\\s/g, "");\n      var stdFontMap = (0, _standard_fonts.getStdFontMap)(),\n          nonStdFontMap = (0, _standard_fonts.getNonStdFontMap)();\n      const isStandardFont = !!stdFontMap[fontName];\n      const isMappedToStandardFont = !!(nonStdFontMap[fontName] && stdFontMap[nonStdFontMap[fontName]]);\n      fontName = stdFontMap[fontName] || nonStdFontMap[fontName] || fontName;\n      this.bold = fontName.search(/bold/gi) !== -1;\n      this.italic = fontName.search(/oblique/gi) !== -1 || fontName.search(/italic/gi) !== -1;\n      this.black = name.search(/Black/g) !== -1;\n      const isNarrow = name.search(/Narrow/g) !== -1;\n      this.remeasure = (!isStandardFont || isNarrow) && Object.keys(this.widths).length > 0;\n\n      if ((isStandardFont || isMappedToStandardFont) && type === "CIDFontType2" && this.cidEncoding.startsWith("Identity-")) {\n        const GlyphMapForStandardFonts = (0, _standard_fonts.getGlyphMapForStandardFonts)(),\n              cidToGidMap = properties.cidToGidMap;\n        const map = [];\n\n        for (const charCode in GlyphMapForStandardFonts) {\n          map[+charCode] = GlyphMapForStandardFonts[charCode];\n        }\n\n        if (/Arial-?Black/i.test(name)) {\n          var SupplementalGlyphMapForArialBlack = (0, _standard_fonts.getSupplementalGlyphMapForArialBlack)();\n\n          for (const charCode in SupplementalGlyphMapForArialBlack) {\n            map[+charCode] = SupplementalGlyphMapForArialBlack[charCode];\n          }\n        } else if (/Calibri/i.test(name)) {\n          const SupplementalGlyphMapForCalibri = (0, _standard_fonts.getSupplementalGlyphMapForCalibri)();\n\n          for (const charCode in SupplementalGlyphMapForCalibri) {\n            map[+charCode] = SupplementalGlyphMapForCalibri[charCode];\n          }\n        }\n\n        if (cidToGidMap) {\n          for (const charCode in map) {\n            const cid = map[charCode];\n\n            if (cidToGidMap[cid] !== undefined) {\n              map[+charCode] = cidToGidMap[cid];\n            }\n          }\n        }\n\n        var isIdentityUnicode = this.toUnicode instanceof IdentityToUnicodeMap;\n\n        if (!isIdentityUnicode) {\n          this.toUnicode.forEach(function (charCode, unicodeCharCode) {\n            map[+charCode] = unicodeCharCode;\n          });\n        }\n\n        this.toFontChar = map;\n        this.toUnicode = new ToUnicodeMap(map);\n      } else if (/Symbol/i.test(fontName)) {\n        this.toFontChar = buildToFontChar(_encodings.SymbolSetEncoding, (0, _glyphlist.getGlyphsUnicode)(), this.differences);\n      } else if (/Dingbats/i.test(fontName)) {\n        if (/Wingdings/i.test(name)) {\n          (0, _util.warn)("Non-embedded Wingdings font, falling back to ZapfDingbats.");\n        }\n\n        this.toFontChar = buildToFontChar(_encodings.ZapfDingbatsEncoding, (0, _glyphlist.getDingbatsGlyphsUnicode)(), this.differences);\n      } else if (isStandardFont) {\n        this.toFontChar = buildToFontChar(this.defaultEncoding, (0, _glyphlist.getGlyphsUnicode)(), this.differences);\n      } else {\n        const glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n        const map = [];\n        this.toUnicode.forEach((charCode, unicodeCharCode) => {\n          if (!this.composite) {\n            var glyphName = this.differences[charCode] || this.defaultEncoding[charCode];\n            const unicode = (0, _unicode.getUnicodeForGlyph)(glyphName, glyphsUnicodeMap);\n\n            if (unicode !== -1) {\n              unicodeCharCode = unicode;\n            }\n          }\n\n          map[+charCode] = unicodeCharCode;\n        });\n\n        if (this.composite && this.toUnicode instanceof IdentityToUnicodeMap) {\n          if (/Verdana/i.test(name)) {\n            const GlyphMapForStandardFonts = (0, _standard_fonts.getGlyphMapForStandardFonts)();\n\n            for (const charCode in GlyphMapForStandardFonts) {\n              map[+charCode] = GlyphMapForStandardFonts[charCode];\n            }\n          }\n        }\n\n        this.toFontChar = map;\n      }\n\n      this.loadedName = fontName.split("-")[0];\n      this.fontType = getFontType(type, subtype);\n    },\n\n    checkAndRepair: function Font_checkAndRepair(name, font, properties) {\n      const VALID_TABLES = ["OS/2", "cmap", "head", "hhea", "hmtx", "maxp", "name", "post", "loca", "glyf", "fpgm", "prep", "cvt ", "CFF "];\n\n      function readTables(file, numTables) {\n        const tables = Object.create(null);\n        tables["OS/2"] = null;\n        tables.cmap = null;\n        tables.head = null;\n        tables.hhea = null;\n        tables.hmtx = null;\n        tables.maxp = null;\n        tables.name = null;\n        tables.post = null;\n\n        for (let i = 0; i < numTables; i++) {\n          const table = readTableEntry(file);\n\n          if (!VALID_TABLES.includes(table.tag)) {\n            continue;\n          }\n\n          if (table.length === 0) {\n            continue;\n          }\n\n          tables[table.tag] = table;\n        }\n\n        return tables;\n      }\n\n      function readTableEntry(file) {\n        var tag = (0, _util.bytesToString)(file.getBytes(4));\n        var checksum = file.getInt32() >>> 0;\n        var offset = file.getInt32() >>> 0;\n        var length = file.getInt32() >>> 0;\n        var previousPosition = file.pos;\n        file.pos = file.start ? file.start : 0;\n        file.skip(offset);\n        var data = file.getBytes(length);\n        file.pos = previousPosition;\n\n        if (tag === "head") {\n          data[8] = data[9] = data[10] = data[11] = 0;\n          data[17] |= 0x20;\n        }\n\n        return {\n          tag,\n          checksum,\n          length,\n          offset,\n          data\n        };\n      }\n\n      function readOpenTypeHeader(ttf) {\n        return {\n          version: (0, _util.bytesToString)(ttf.getBytes(4)),\n          numTables: ttf.getUint16(),\n          searchRange: ttf.getUint16(),\n          entrySelector: ttf.getUint16(),\n          rangeShift: ttf.getUint16()\n        };\n      }\n\n      function readTrueTypeCollectionHeader(ttc) {\n        const ttcTag = (0, _util.bytesToString)(ttc.getBytes(4));\n        (0, _util.assert)(ttcTag === "ttcf", "Must be a TrueType Collection font.");\n        const majorVersion = ttc.getUint16();\n        const minorVersion = ttc.getUint16();\n        const numFonts = ttc.getInt32() >>> 0;\n        const offsetTable = [];\n\n        for (let i = 0; i < numFonts; i++) {\n          offsetTable.push(ttc.getInt32() >>> 0);\n        }\n\n        const header = {\n          ttcTag,\n          majorVersion,\n          minorVersion,\n          numFonts,\n          offsetTable\n        };\n\n        switch (majorVersion) {\n          case 1:\n            return header;\n\n          case 2:\n            header.dsigTag = ttc.getInt32() >>> 0;\n            header.dsigLength = ttc.getInt32() >>> 0;\n            header.dsigOffset = ttc.getInt32() >>> 0;\n            return header;\n        }\n\n        throw new _util.FormatError(`Invalid TrueType Collection majorVersion: ${majorVersion}.`);\n      }\n\n      function readTrueTypeCollectionData(ttc, fontName) {\n        const {\n          numFonts,\n          offsetTable\n        } = readTrueTypeCollectionHeader(ttc);\n\n        for (let i = 0; i < numFonts; i++) {\n          ttc.pos = (ttc.start || 0) + offsetTable[i];\n          const potentialHeader = readOpenTypeHeader(ttc);\n          const potentialTables = readTables(ttc, potentialHeader.numTables);\n\n          if (!potentialTables.name) {\n            throw new _util.FormatError(\'TrueType Collection font must contain a "name" table.\');\n          }\n\n          const nameTable = readNameTable(potentialTables.name);\n\n          for (let j = 0, jj = nameTable.length; j < jj; j++) {\n            for (let k = 0, kk = nameTable[j].length; k < kk; k++) {\n              const nameEntry = nameTable[j][k];\n\n              if (nameEntry && nameEntry.replace(/\\s/g, "") === fontName) {\n                return {\n                  header: potentialHeader,\n                  tables: potentialTables\n                };\n              }\n            }\n          }\n        }\n\n        throw new _util.FormatError(`TrueType Collection does not contain "${fontName}" font.`);\n      }\n\n      function readCmapTable(cmap, file, isSymbolicFont, hasEncoding) {\n        if (!cmap) {\n          (0, _util.warn)("No cmap table available.");\n          return {\n            platformId: -1,\n            encodingId: -1,\n            mappings: [],\n            hasShortCmap: false\n          };\n        }\n\n        var segment;\n        var start = (file.start ? file.start : 0) + cmap.offset;\n        file.pos = start;\n        file.skip(2);\n        var numTables = file.getUint16();\n        var potentialTable;\n        var canBreak = false;\n\n        for (var i = 0; i < numTables; i++) {\n          var platformId = file.getUint16();\n          var encodingId = file.getUint16();\n          var offset = file.getInt32() >>> 0;\n          var useTable = false;\n\n          if (potentialTable && potentialTable.platformId === platformId && potentialTable.encodingId === encodingId) {\n            continue;\n          }\n\n          if (platformId === 0 && (encodingId === 0 || encodingId === 1 || encodingId === 3)) {\n            useTable = true;\n          } else if (platformId === 1 && encodingId === 0) {\n            useTable = true;\n          } else if (platformId === 3 && encodingId === 1 && (hasEncoding || !potentialTable)) {\n            useTable = true;\n\n            if (!isSymbolicFont) {\n              canBreak = true;\n            }\n          } else if (isSymbolicFont && platformId === 3 && encodingId === 0) {\n            useTable = true;\n            canBreak = true;\n          }\n\n          if (useTable) {\n            potentialTable = {\n              platformId,\n              encodingId,\n              offset\n            };\n          }\n\n          if (canBreak) {\n            break;\n          }\n        }\n\n        if (potentialTable) {\n          file.pos = start + potentialTable.offset;\n        }\n\n        if (!potentialTable || file.peekByte() === -1) {\n          (0, _util.warn)("Could not find a preferred cmap table.");\n          return {\n            platformId: -1,\n            encodingId: -1,\n            mappings: [],\n            hasShortCmap: false\n          };\n        }\n\n        var format = file.getUint16();\n        file.skip(2 + 2);\n        var hasShortCmap = false;\n        var mappings = [];\n        var j, glyphId;\n\n        if (format === 0) {\n          for (j = 0; j < 256; j++) {\n            var index = file.getByte();\n\n            if (!index) {\n              continue;\n            }\n\n            mappings.push({\n              charCode: j,\n              glyphId: index\n            });\n          }\n\n          hasShortCmap = true;\n        } else if (format === 4) {\n          var segCount = file.getUint16() >> 1;\n          file.skip(6);\n          var segIndex,\n              segments = [];\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segments.push({\n              end: file.getUint16()\n            });\n          }\n\n          file.skip(2);\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segments[segIndex].start = file.getUint16();\n          }\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segments[segIndex].delta = file.getUint16();\n          }\n\n          var offsetsCount = 0;\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segment = segments[segIndex];\n            var rangeOffset = file.getUint16();\n\n            if (!rangeOffset) {\n              segment.offsetIndex = -1;\n              continue;\n            }\n\n            var offsetIndex = (rangeOffset >> 1) - (segCount - segIndex);\n            segment.offsetIndex = offsetIndex;\n            offsetsCount = Math.max(offsetsCount, offsetIndex + segment.end - segment.start + 1);\n          }\n\n          var offsets = [];\n\n          for (j = 0; j < offsetsCount; j++) {\n            offsets.push(file.getUint16());\n          }\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segment = segments[segIndex];\n            start = segment.start;\n            var end = segment.end;\n            var delta = segment.delta;\n            offsetIndex = segment.offsetIndex;\n\n            for (j = start; j <= end; j++) {\n              if (j === 0xffff) {\n                continue;\n              }\n\n              glyphId = offsetIndex < 0 ? j : offsets[offsetIndex + j - start];\n              glyphId = glyphId + delta & 0xffff;\n              mappings.push({\n                charCode: j,\n                glyphId\n              });\n            }\n          }\n        } else if (format === 6) {\n          var firstCode = file.getUint16();\n          var entryCount = file.getUint16();\n\n          for (j = 0; j < entryCount; j++) {\n            glyphId = file.getUint16();\n            var charCode = firstCode + j;\n            mappings.push({\n              charCode,\n              glyphId\n            });\n          }\n        } else {\n          (0, _util.warn)("cmap table has unsupported format: " + format);\n          return {\n            platformId: -1,\n            encodingId: -1,\n            mappings: [],\n            hasShortCmap: false\n          };\n        }\n\n        mappings.sort(function (a, b) {\n          return a.charCode - b.charCode;\n        });\n\n        for (i = 1; i < mappings.length; i++) {\n          if (mappings[i - 1].charCode === mappings[i].charCode) {\n            mappings.splice(i, 1);\n            i--;\n          }\n        }\n\n        return {\n          platformId: potentialTable.platformId,\n          encodingId: potentialTable.encodingId,\n          mappings,\n          hasShortCmap\n        };\n      }\n\n      function sanitizeMetrics(file, header, metrics, numGlyphs, dupFirstEntry) {\n        if (!header) {\n          if (metrics) {\n            metrics.data = null;\n          }\n\n          return;\n        }\n\n        file.pos = (file.start ? file.start : 0) + header.offset;\n        file.pos += 4;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 8;\n        file.pos += 2;\n        var numOfMetrics = file.getUint16();\n\n        if (numOfMetrics > numGlyphs) {\n          (0, _util.info)("The numOfMetrics (" + numOfMetrics + ") should not be " + "greater than the numGlyphs (" + numGlyphs + ")");\n          numOfMetrics = numGlyphs;\n          header.data[34] = (numOfMetrics & 0xff00) >> 8;\n          header.data[35] = numOfMetrics & 0x00ff;\n        }\n\n        var numOfSidebearings = numGlyphs - numOfMetrics;\n        var numMissing = numOfSidebearings - (metrics.length - numOfMetrics * 4 >> 1);\n\n        if (numMissing > 0) {\n          var entries = new Uint8Array(metrics.length + numMissing * 2);\n          entries.set(metrics.data);\n\n          if (dupFirstEntry) {\n            entries[metrics.length] = metrics.data[2];\n            entries[metrics.length + 1] = metrics.data[3];\n          }\n\n          metrics.data = entries;\n        }\n      }\n\n      function sanitizeGlyph(source, sourceStart, sourceEnd, dest, destStart, hintsValid) {\n        var glyphProfile = {\n          length: 0,\n          sizeOfInstructions: 0\n        };\n\n        if (sourceEnd - sourceStart <= 12) {\n          return glyphProfile;\n        }\n\n        var glyf = source.subarray(sourceStart, sourceEnd);\n        var contoursCount = signedInt16(glyf[0], glyf[1]);\n\n        if (contoursCount < 0) {\n          contoursCount = -1;\n          writeSignedInt16(glyf, 0, contoursCount);\n          dest.set(glyf, destStart);\n          glyphProfile.length = glyf.length;\n          return glyphProfile;\n        }\n\n        var i,\n            j = 10,\n            flagsCount = 0;\n\n        for (i = 0; i < contoursCount; i++) {\n          var endPoint = glyf[j] << 8 | glyf[j + 1];\n          flagsCount = endPoint + 1;\n          j += 2;\n        }\n\n        var instructionsStart = j;\n        var instructionsLength = glyf[j] << 8 | glyf[j + 1];\n        glyphProfile.sizeOfInstructions = instructionsLength;\n        j += 2 + instructionsLength;\n        var instructionsEnd = j;\n        var coordinatesLength = 0;\n\n        for (i = 0; i < flagsCount; i++) {\n          var flag = glyf[j++];\n\n          if (flag & 0xc0) {\n            glyf[j - 1] = flag & 0x3f;\n          }\n\n          let xLength = 2;\n\n          if (flag & 2) {\n            xLength = 1;\n          } else if (flag & 16) {\n            xLength = 0;\n          }\n\n          let yLength = 2;\n\n          if (flag & 4) {\n            yLength = 1;\n          } else if (flag & 32) {\n            yLength = 0;\n          }\n\n          const xyLength = xLength + yLength;\n          coordinatesLength += xyLength;\n\n          if (flag & 8) {\n            var repeat = glyf[j++];\n            i += repeat;\n            coordinatesLength += repeat * xyLength;\n          }\n        }\n\n        if (coordinatesLength === 0) {\n          return glyphProfile;\n        }\n\n        var glyphDataLength = j + coordinatesLength;\n\n        if (glyphDataLength > glyf.length) {\n          return glyphProfile;\n        }\n\n        if (!hintsValid && instructionsLength > 0) {\n          dest.set(glyf.subarray(0, instructionsStart), destStart);\n          dest.set([0, 0], destStart + instructionsStart);\n          dest.set(glyf.subarray(instructionsEnd, glyphDataLength), destStart + instructionsStart + 2);\n          glyphDataLength -= instructionsLength;\n\n          if (glyf.length - glyphDataLength > 3) {\n            glyphDataLength = glyphDataLength + 3 & ~3;\n          }\n\n          glyphProfile.length = glyphDataLength;\n          return glyphProfile;\n        }\n\n        if (glyf.length - glyphDataLength > 3) {\n          glyphDataLength = glyphDataLength + 3 & ~3;\n          dest.set(glyf.subarray(0, glyphDataLength), destStart);\n          glyphProfile.length = glyphDataLength;\n          return glyphProfile;\n        }\n\n        dest.set(glyf, destStart);\n        glyphProfile.length = glyf.length;\n        return glyphProfile;\n      }\n\n      function sanitizeHead(head, numGlyphs, locaLength) {\n        var data = head.data;\n        var version = int32(data[0], data[1], data[2], data[3]);\n\n        if (version >> 16 !== 1) {\n          (0, _util.info)("Attempting to fix invalid version in head table: " + version);\n          data[0] = 0;\n          data[1] = 1;\n          data[2] = 0;\n          data[3] = 0;\n        }\n\n        var indexToLocFormat = int16(data[50], data[51]);\n\n        if (indexToLocFormat < 0 || indexToLocFormat > 1) {\n          (0, _util.info)("Attempting to fix invalid indexToLocFormat in head table: " + indexToLocFormat);\n          var numGlyphsPlusOne = numGlyphs + 1;\n\n          if (locaLength === numGlyphsPlusOne << 1) {\n            data[50] = 0;\n            data[51] = 0;\n          } else if (locaLength === numGlyphsPlusOne << 2) {\n            data[50] = 0;\n            data[51] = 1;\n          } else {\n            throw new _util.FormatError("Could not fix indexToLocFormat: " + indexToLocFormat);\n          }\n        }\n      }\n\n      function sanitizeGlyphLocations(loca, glyf, numGlyphs, isGlyphLocationsLong, hintsValid, dupFirstEntry, maxSizeOfInstructions) {\n        var itemSize, itemDecode, itemEncode;\n\n        if (isGlyphLocationsLong) {\n          itemSize = 4;\n\n          itemDecode = function fontItemDecodeLong(data, offset) {\n            return data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];\n          };\n\n          itemEncode = function fontItemEncodeLong(data, offset, value) {\n            data[offset] = value >>> 24 & 0xff;\n            data[offset + 1] = value >> 16 & 0xff;\n            data[offset + 2] = value >> 8 & 0xff;\n            data[offset + 3] = value & 0xff;\n          };\n        } else {\n          itemSize = 2;\n\n          itemDecode = function fontItemDecode(data, offset) {\n            return data[offset] << 9 | data[offset + 1] << 1;\n          };\n\n          itemEncode = function fontItemEncode(data, offset, value) {\n            data[offset] = value >> 9 & 0xff;\n            data[offset + 1] = value >> 1 & 0xff;\n          };\n        }\n\n        var numGlyphsOut = dupFirstEntry ? numGlyphs + 1 : numGlyphs;\n        var locaDataSize = itemSize * (1 + numGlyphsOut);\n        var locaData = new Uint8Array(locaDataSize);\n        locaData.set(loca.data.subarray(0, locaDataSize));\n        loca.data = locaData;\n        var oldGlyfData = glyf.data;\n        var oldGlyfDataLength = oldGlyfData.length;\n        var newGlyfData = new Uint8Array(oldGlyfDataLength);\n        var i, j;\n        const locaEntries = [];\n\n        for (i = 0, j = 0; i < numGlyphs + 1; i++, j += itemSize) {\n          let offset = itemDecode(locaData, j);\n\n          if (offset > oldGlyfDataLength) {\n            offset = oldGlyfDataLength;\n          }\n\n          locaEntries.push({\n            index: i,\n            offset,\n            endOffset: 0\n          });\n        }\n\n        locaEntries.sort((a, b) => {\n          return a.offset - b.offset;\n        });\n\n        for (i = 0; i < numGlyphs; i++) {\n          locaEntries[i].endOffset = locaEntries[i + 1].offset;\n        }\n\n        locaEntries.sort((a, b) => {\n          return a.index - b.index;\n        });\n        var missingGlyphs = Object.create(null);\n        var writeOffset = 0;\n        itemEncode(locaData, 0, writeOffset);\n\n        for (i = 0, j = itemSize; i < numGlyphs; i++, j += itemSize) {\n          var glyphProfile = sanitizeGlyph(oldGlyfData, locaEntries[i].offset, locaEntries[i].endOffset, newGlyfData, writeOffset, hintsValid);\n          var newLength = glyphProfile.length;\n\n          if (newLength === 0) {\n            missingGlyphs[i] = true;\n          }\n\n          if (glyphProfile.sizeOfInstructions > maxSizeOfInstructions) {\n            maxSizeOfInstructions = glyphProfile.sizeOfInstructions;\n          }\n\n          writeOffset += newLength;\n          itemEncode(locaData, j, writeOffset);\n        }\n\n        if (writeOffset === 0) {\n          var simpleGlyph = new Uint8Array([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0]);\n\n          for (i = 0, j = itemSize; i < numGlyphsOut; i++, j += itemSize) {\n            itemEncode(locaData, j, simpleGlyph.length);\n          }\n\n          glyf.data = simpleGlyph;\n        } else if (dupFirstEntry) {\n          var firstEntryLength = itemDecode(locaData, itemSize);\n\n          if (newGlyfData.length > firstEntryLength + writeOffset) {\n            glyf.data = newGlyfData.subarray(0, firstEntryLength + writeOffset);\n          } else {\n            glyf.data = new Uint8Array(firstEntryLength + writeOffset);\n            glyf.data.set(newGlyfData.subarray(0, writeOffset));\n          }\n\n          glyf.data.set(newGlyfData.subarray(0, firstEntryLength), writeOffset);\n          itemEncode(loca.data, locaData.length - itemSize, writeOffset + firstEntryLength);\n        } else {\n          glyf.data = newGlyfData.subarray(0, writeOffset);\n        }\n\n        return {\n          missingGlyphs,\n          maxSizeOfInstructions\n        };\n      }\n\n      function readPostScriptTable(post, propertiesObj, maxpNumGlyphs) {\n        var start = (font.start ? font.start : 0) + post.offset;\n        font.pos = start;\n        var length = post.length,\n            end = start + length;\n        var version = font.getInt32();\n        font.skip(28);\n        var glyphNames;\n        var valid = true;\n        var i;\n\n        switch (version) {\n          case 0x00010000:\n            glyphNames = MacStandardGlyphOrdering;\n            break;\n\n          case 0x00020000:\n            var numGlyphs = font.getUint16();\n\n            if (numGlyphs !== maxpNumGlyphs) {\n              valid = false;\n              break;\n            }\n\n            var glyphNameIndexes = [];\n\n            for (i = 0; i < numGlyphs; ++i) {\n              var index = font.getUint16();\n\n              if (index >= 32768) {\n                valid = false;\n                break;\n              }\n\n              glyphNameIndexes.push(index);\n            }\n\n            if (!valid) {\n              break;\n            }\n\n            var customNames = [];\n            var strBuf = [];\n\n            while (font.pos < end) {\n              var stringLength = font.getByte();\n              strBuf.length = stringLength;\n\n              for (i = 0; i < stringLength; ++i) {\n                strBuf[i] = String.fromCharCode(font.getByte());\n              }\n\n              customNames.push(strBuf.join(""));\n            }\n\n            glyphNames = [];\n\n            for (i = 0; i < numGlyphs; ++i) {\n              var j = glyphNameIndexes[i];\n\n              if (j < 258) {\n                glyphNames.push(MacStandardGlyphOrdering[j]);\n                continue;\n              }\n\n              glyphNames.push(customNames[j - 258]);\n            }\n\n            break;\n\n          case 0x00030000:\n            break;\n\n          default:\n            (0, _util.warn)("Unknown/unsupported post table version " + version);\n            valid = false;\n\n            if (propertiesObj.defaultEncoding) {\n              glyphNames = propertiesObj.defaultEncoding;\n            }\n\n            break;\n        }\n\n        propertiesObj.glyphNames = glyphNames;\n        return valid;\n      }\n\n      function readNameTable(nameTable) {\n        var start = (font.start ? font.start : 0) + nameTable.offset;\n        font.pos = start;\n        var names = [[], []];\n        var length = nameTable.length,\n            end = start + length;\n        var format = font.getUint16();\n        var FORMAT_0_HEADER_LENGTH = 6;\n\n        if (format !== 0 || length < FORMAT_0_HEADER_LENGTH) {\n          return names;\n        }\n\n        var numRecords = font.getUint16();\n        var stringsStart = font.getUint16();\n        var records = [];\n        var NAME_RECORD_LENGTH = 12;\n        var i, ii;\n\n        for (i = 0; i < numRecords && font.pos + NAME_RECORD_LENGTH <= end; i++) {\n          var r = {\n            platform: font.getUint16(),\n            encoding: font.getUint16(),\n            language: font.getUint16(),\n            name: font.getUint16(),\n            length: font.getUint16(),\n            offset: font.getUint16()\n          };\n\n          if (r.platform === 1 && r.encoding === 0 && r.language === 0 || r.platform === 3 && r.encoding === 1 && r.language === 0x409) {\n            records.push(r);\n          }\n        }\n\n        for (i = 0, ii = records.length; i < ii; i++) {\n          var record = records[i];\n\n          if (record.length <= 0) {\n            continue;\n          }\n\n          var pos = start + stringsStart + record.offset;\n\n          if (pos + record.length > end) {\n            continue;\n          }\n\n          font.pos = pos;\n          var nameIndex = record.name;\n\n          if (record.encoding) {\n            var str = "";\n\n            for (var j = 0, jj = record.length; j < jj; j += 2) {\n              str += String.fromCharCode(font.getUint16());\n            }\n\n            names[1][nameIndex] = str;\n          } else {\n            names[0][nameIndex] = (0, _util.bytesToString)(font.getBytes(record.length));\n          }\n        }\n\n        return names;\n      }\n\n      var TTOpsStackDeltas = [0, 0, 0, 0, 0, 0, 0, 0, -2, -2, -2, -2, 0, 0, -2, -5, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, -1, -1, 1, -1, -999, 0, 1, 0, -1, -2, 0, -1, -2, -1, -1, 0, -1, -1, 0, 0, -999, -999, -1, -1, -1, -1, -2, -999, -2, -2, -999, 0, -2, -2, 0, 0, -2, 0, -2, 0, 0, 0, -2, -1, -1, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, 0, -999, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -999, -999, -999, -999, -999, -1, -1, -2, -2, 0, 0, 0, 0, -1, -1, -999, -2, -2, 0, 0, -1, -2, -2, 0, 0, 0, -1, -1, -1, -2];\n\n      function sanitizeTTProgram(table, ttContext) {\n        var data = table.data;\n        var i = 0,\n            j,\n            n,\n            b,\n            funcId,\n            pc,\n            lastEndf = 0,\n            lastDeff = 0;\n        var stack = [];\n        var callstack = [];\n        var functionsCalled = [];\n        var tooComplexToFollowFunctions = ttContext.tooComplexToFollowFunctions;\n        var inFDEF = false,\n            ifLevel = 0,\n            inELSE = 0;\n\n        for (var ii = data.length; i < ii;) {\n          var op = data[i++];\n\n          if (op === 0x40) {\n            n = data[i++];\n\n            if (inFDEF || inELSE) {\n              i += n;\n            } else {\n              for (j = 0; j < n; j++) {\n                stack.push(data[i++]);\n              }\n            }\n          } else if (op === 0x41) {\n            n = data[i++];\n\n            if (inFDEF || inELSE) {\n              i += n * 2;\n            } else {\n              for (j = 0; j < n; j++) {\n                b = data[i++];\n                stack.push(b << 8 | data[i++]);\n              }\n            }\n          } else if ((op & 0xf8) === 0xb0) {\n            n = op - 0xb0 + 1;\n\n            if (inFDEF || inELSE) {\n              i += n;\n            } else {\n              for (j = 0; j < n; j++) {\n                stack.push(data[i++]);\n              }\n            }\n          } else if ((op & 0xf8) === 0xb8) {\n            n = op - 0xb8 + 1;\n\n            if (inFDEF || inELSE) {\n              i += n * 2;\n            } else {\n              for (j = 0; j < n; j++) {\n                b = data[i++];\n                stack.push(b << 8 | data[i++]);\n              }\n            }\n          } else if (op === 0x2b && !tooComplexToFollowFunctions) {\n            if (!inFDEF && !inELSE) {\n              funcId = stack[stack.length - 1];\n\n              if (isNaN(funcId)) {\n                (0, _util.info)("TT: CALL empty stack (or invalid entry).");\n              } else {\n                ttContext.functionsUsed[funcId] = true;\n\n                if (funcId in ttContext.functionsStackDeltas) {\n                  const newStackLength = stack.length + ttContext.functionsStackDeltas[funcId];\n\n                  if (newStackLength < 0) {\n                    (0, _util.warn)("TT: CALL invalid functions stack delta.");\n                    ttContext.hintsValid = false;\n                    return;\n                  }\n\n                  stack.length = newStackLength;\n                } else if (funcId in ttContext.functionsDefined && !functionsCalled.includes(funcId)) {\n                  callstack.push({\n                    data,\n                    i,\n                    stackTop: stack.length - 1\n                  });\n                  functionsCalled.push(funcId);\n                  pc = ttContext.functionsDefined[funcId];\n\n                  if (!pc) {\n                    (0, _util.warn)("TT: CALL non-existent function");\n                    ttContext.hintsValid = false;\n                    return;\n                  }\n\n                  data = pc.data;\n                  i = pc.i;\n                }\n              }\n            }\n          } else if (op === 0x2c && !tooComplexToFollowFunctions) {\n            if (inFDEF || inELSE) {\n              (0, _util.warn)("TT: nested FDEFs not allowed");\n              tooComplexToFollowFunctions = true;\n            }\n\n            inFDEF = true;\n            lastDeff = i;\n            funcId = stack.pop();\n            ttContext.functionsDefined[funcId] = {\n              data,\n              i\n            };\n          } else if (op === 0x2d) {\n            if (inFDEF) {\n              inFDEF = false;\n              lastEndf = i;\n            } else {\n              pc = callstack.pop();\n\n              if (!pc) {\n                (0, _util.warn)("TT: ENDF bad stack");\n                ttContext.hintsValid = false;\n                return;\n              }\n\n              funcId = functionsCalled.pop();\n              data = pc.data;\n              i = pc.i;\n              ttContext.functionsStackDeltas[funcId] = stack.length - pc.stackTop;\n            }\n          } else if (op === 0x89) {\n            if (inFDEF || inELSE) {\n              (0, _util.warn)("TT: nested IDEFs not allowed");\n              tooComplexToFollowFunctions = true;\n            }\n\n            inFDEF = true;\n            lastDeff = i;\n          } else if (op === 0x58) {\n            ++ifLevel;\n          } else if (op === 0x1b) {\n            inELSE = ifLevel;\n          } else if (op === 0x59) {\n            if (inELSE === ifLevel) {\n              inELSE = 0;\n            }\n\n            --ifLevel;\n          } else if (op === 0x1c) {\n            if (!inFDEF && !inELSE) {\n              var offset = stack[stack.length - 1];\n\n              if (offset > 0) {\n                i += offset - 1;\n              }\n            }\n          }\n\n          if (!inFDEF && !inELSE) {\n            let stackDelta = 0;\n\n            if (op <= 0x8e) {\n              stackDelta = TTOpsStackDeltas[op];\n            } else if (op >= 0xc0 && op <= 0xdf) {\n              stackDelta = -1;\n            } else if (op >= 0xe0) {\n              stackDelta = -2;\n            }\n\n            if (op >= 0x71 && op <= 0x75) {\n              n = stack.pop();\n\n              if (!isNaN(n)) {\n                stackDelta = -n * 2;\n              }\n            }\n\n            while (stackDelta < 0 && stack.length > 0) {\n              stack.pop();\n              stackDelta++;\n            }\n\n            while (stackDelta > 0) {\n              stack.push(NaN);\n              stackDelta--;\n            }\n          }\n        }\n\n        ttContext.tooComplexToFollowFunctions = tooComplexToFollowFunctions;\n        var content = [data];\n\n        if (i > data.length) {\n          content.push(new Uint8Array(i - data.length));\n        }\n\n        if (lastDeff > lastEndf) {\n          (0, _util.warn)("TT: complementing a missing function tail");\n          content.push(new Uint8Array([0x22, 0x2d]));\n        }\n\n        foldTTTable(table, content);\n      }\n\n      function checkInvalidFunctions(ttContext, maxFunctionDefs) {\n        if (ttContext.tooComplexToFollowFunctions) {\n          return;\n        }\n\n        if (ttContext.functionsDefined.length > maxFunctionDefs) {\n          (0, _util.warn)("TT: more functions defined than expected");\n          ttContext.hintsValid = false;\n          return;\n        }\n\n        for (var j = 0, jj = ttContext.functionsUsed.length; j < jj; j++) {\n          if (j > maxFunctionDefs) {\n            (0, _util.warn)("TT: invalid function id: " + j);\n            ttContext.hintsValid = false;\n            return;\n          }\n\n          if (ttContext.functionsUsed[j] && !ttContext.functionsDefined[j]) {\n            (0, _util.warn)("TT: undefined function: " + j);\n            ttContext.hintsValid = false;\n            return;\n          }\n        }\n      }\n\n      function foldTTTable(table, content) {\n        if (content.length > 1) {\n          var newLength = 0;\n          var j, jj;\n\n          for (j = 0, jj = content.length; j < jj; j++) {\n            newLength += content[j].length;\n          }\n\n          newLength = newLength + 3 & ~3;\n          var result = new Uint8Array(newLength);\n          var pos = 0;\n\n          for (j = 0, jj = content.length; j < jj; j++) {\n            result.set(content[j], pos);\n            pos += content[j].length;\n          }\n\n          table.data = result;\n          table.length = newLength;\n        }\n      }\n\n      function sanitizeTTPrograms(fpgm, prep, cvt, maxFunctionDefs) {\n        var ttContext = {\n          functionsDefined: [],\n          functionsUsed: [],\n          functionsStackDeltas: [],\n          tooComplexToFollowFunctions: false,\n          hintsValid: true\n        };\n\n        if (fpgm) {\n          sanitizeTTProgram(fpgm, ttContext);\n        }\n\n        if (prep) {\n          sanitizeTTProgram(prep, ttContext);\n        }\n\n        if (fpgm) {\n          checkInvalidFunctions(ttContext, maxFunctionDefs);\n        }\n\n        if (cvt && cvt.length & 1) {\n          var cvtData = new Uint8Array(cvt.length + 1);\n          cvtData.set(cvt.data);\n          cvt.data = cvtData;\n        }\n\n        return ttContext.hintsValid;\n      }\n\n      font = new _stream.Stream(new Uint8Array(font.getBytes()));\n      let header, tables;\n\n      if (isTrueTypeCollectionFile(font)) {\n        const ttcData = readTrueTypeCollectionData(font, this.name);\n        header = ttcData.header;\n        tables = ttcData.tables;\n      } else {\n        header = readOpenTypeHeader(font);\n        tables = readTables(font, header.numTables);\n      }\n\n      let cff, cffFile;\n      var isTrueType = !tables["CFF "];\n\n      if (!isTrueType) {\n        const isComposite = properties.composite && ((properties.cidToGidMap || []).length > 0 || !(properties.cMap instanceof _cmap.IdentityCMap));\n\n        if (header.version === "OTTO" && !isComposite || !tables.head || !tables.hhea || !tables.maxp || !tables.post) {\n          cffFile = new _stream.Stream(tables["CFF "].data);\n          cff = new CFFFont(cffFile, properties);\n          adjustWidths(properties);\n          return this.convert(name, cff, properties);\n        }\n\n        delete tables.glyf;\n        delete tables.loca;\n        delete tables.fpgm;\n        delete tables.prep;\n        delete tables["cvt "];\n        this.isOpenType = true;\n      } else {\n        if (!tables.loca) {\n          throw new _util.FormatError(\'Required "loca" table is not found\');\n        }\n\n        if (!tables.glyf) {\n          (0, _util.warn)(\'Required "glyf" table is not found -- trying to recover.\');\n          tables.glyf = {\n            tag: "glyf",\n            data: new Uint8Array(0)\n          };\n        }\n\n        this.isOpenType = false;\n      }\n\n      if (!tables.maxp) {\n        throw new _util.FormatError(\'Required "maxp" table is not found\');\n      }\n\n      font.pos = (font.start || 0) + tables.maxp.offset;\n      var version = font.getInt32();\n      const numGlyphs = font.getUint16();\n      let numGlyphsOut = numGlyphs + 1;\n      let dupFirstEntry = true;\n\n      if (numGlyphsOut > 0xffff) {\n        dupFirstEntry = false;\n        numGlyphsOut = numGlyphs;\n        (0, _util.warn)("Not enough space in glyfs to duplicate first glyph.");\n      }\n\n      var maxFunctionDefs = 0;\n      var maxSizeOfInstructions = 0;\n\n      if (version >= 0x00010000 && tables.maxp.length >= 22) {\n        font.pos += 8;\n        var maxZones = font.getUint16();\n\n        if (maxZones > 2) {\n          tables.maxp.data[14] = 0;\n          tables.maxp.data[15] = 2;\n        }\n\n        font.pos += 4;\n        maxFunctionDefs = font.getUint16();\n        font.pos += 4;\n        maxSizeOfInstructions = font.getUint16();\n      }\n\n      tables.maxp.data[4] = numGlyphsOut >> 8;\n      tables.maxp.data[5] = numGlyphsOut & 255;\n      var hintsValid = sanitizeTTPrograms(tables.fpgm, tables.prep, tables["cvt "], maxFunctionDefs);\n\n      if (!hintsValid) {\n        delete tables.fpgm;\n        delete tables.prep;\n        delete tables["cvt "];\n      }\n\n      sanitizeMetrics(font, tables.hhea, tables.hmtx, numGlyphsOut, dupFirstEntry);\n\n      if (!tables.head) {\n        throw new _util.FormatError(\'Required "head" table is not found\');\n      }\n\n      sanitizeHead(tables.head, numGlyphs, isTrueType ? tables.loca.length : 0);\n      var missingGlyphs = Object.create(null);\n\n      if (isTrueType) {\n        var isGlyphLocationsLong = int16(tables.head.data[50], tables.head.data[51]);\n        var glyphsInfo = sanitizeGlyphLocations(tables.loca, tables.glyf, numGlyphs, isGlyphLocationsLong, hintsValid, dupFirstEntry, maxSizeOfInstructions);\n        missingGlyphs = glyphsInfo.missingGlyphs;\n\n        if (version >= 0x00010000 && tables.maxp.length >= 22) {\n          tables.maxp.data[26] = glyphsInfo.maxSizeOfInstructions >> 8;\n          tables.maxp.data[27] = glyphsInfo.maxSizeOfInstructions & 255;\n        }\n      }\n\n      if (!tables.hhea) {\n        throw new _util.FormatError(\'Required "hhea" table is not found\');\n      }\n\n      if (tables.hhea.data[10] === 0 && tables.hhea.data[11] === 0) {\n        tables.hhea.data[10] = 0xff;\n        tables.hhea.data[11] = 0xff;\n      }\n\n      var metricsOverride = {\n        unitsPerEm: int16(tables.head.data[18], tables.head.data[19]),\n        yMax: int16(tables.head.data[42], tables.head.data[43]),\n        yMin: signedInt16(tables.head.data[38], tables.head.data[39]),\n        ascent: int16(tables.hhea.data[4], tables.hhea.data[5]),\n        descent: signedInt16(tables.hhea.data[6], tables.hhea.data[7])\n      };\n      this.ascent = metricsOverride.ascent / metricsOverride.unitsPerEm;\n      this.descent = metricsOverride.descent / metricsOverride.unitsPerEm;\n\n      if (tables.post) {\n        readPostScriptTable(tables.post, properties, numGlyphs);\n      }\n\n      tables.post = {\n        tag: "post",\n        data: createPostTable(properties)\n      };\n      const charCodeToGlyphId = [];\n\n      function hasGlyph(glyphId) {\n        return !missingGlyphs[glyphId];\n      }\n\n      if (properties.composite) {\n        var cidToGidMap = properties.cidToGidMap || [];\n        var isCidToGidMapEmpty = cidToGidMap.length === 0;\n        properties.cMap.forEach(function (charCode, cid) {\n          if (cid > 0xffff) {\n            throw new _util.FormatError("Max size of CID is 65,535");\n          }\n\n          var glyphId = -1;\n\n          if (isCidToGidMapEmpty) {\n            glyphId = cid;\n          } else if (cidToGidMap[cid] !== undefined) {\n            glyphId = cidToGidMap[cid];\n          }\n\n          if (glyphId >= 0 && glyphId < numGlyphs && hasGlyph(glyphId)) {\n            charCodeToGlyphId[charCode] = glyphId;\n          }\n        });\n      } else {\n        var cmapTable = readCmapTable(tables.cmap, font, this.isSymbolicFont, properties.hasEncoding);\n        var cmapPlatformId = cmapTable.platformId;\n        var cmapEncodingId = cmapTable.encodingId;\n        var cmapMappings = cmapTable.mappings;\n        var cmapMappingsLength = cmapMappings.length;\n        let baseEncoding = [];\n\n        if (properties.hasEncoding && (properties.baseEncodingName === "MacRomanEncoding" || properties.baseEncodingName === "WinAnsiEncoding")) {\n          baseEncoding = (0, _encodings.getEncoding)(properties.baseEncodingName);\n        }\n\n        if (properties.hasEncoding && !this.isSymbolicFont && (cmapPlatformId === 3 && cmapEncodingId === 1 || cmapPlatformId === 1 && cmapEncodingId === 0)) {\n          var glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n\n          for (let charCode = 0; charCode < 256; charCode++) {\n            var glyphName, standardGlyphName;\n\n            if (this.differences && charCode in this.differences) {\n              glyphName = this.differences[charCode];\n            } else if (charCode in baseEncoding && baseEncoding[charCode] !== "") {\n              glyphName = baseEncoding[charCode];\n            } else {\n              glyphName = _encodings.StandardEncoding[charCode];\n            }\n\n            if (!glyphName) {\n              continue;\n            }\n\n            standardGlyphName = recoverGlyphName(glyphName, glyphsUnicodeMap);\n            var unicodeOrCharCode;\n\n            if (cmapPlatformId === 3 && cmapEncodingId === 1) {\n              unicodeOrCharCode = glyphsUnicodeMap[standardGlyphName];\n            } else if (cmapPlatformId === 1 && cmapEncodingId === 0) {\n              unicodeOrCharCode = _encodings.MacRomanEncoding.indexOf(standardGlyphName);\n            }\n\n            for (let i = 0; i < cmapMappingsLength; ++i) {\n              if (cmapMappings[i].charCode !== unicodeOrCharCode) {\n                continue;\n              }\n\n              charCodeToGlyphId[charCode] = cmapMappings[i].glyphId;\n              break;\n            }\n          }\n        } else if (cmapPlatformId === 0) {\n          for (let i = 0; i < cmapMappingsLength; ++i) {\n            charCodeToGlyphId[cmapMappings[i].charCode] = cmapMappings[i].glyphId;\n          }\n        } else {\n          for (let i = 0; i < cmapMappingsLength; ++i) {\n            let charCode = cmapMappings[i].charCode;\n\n            if (cmapPlatformId === 3 && charCode >= 0xf000 && charCode <= 0xf0ff) {\n              charCode &= 0xff;\n            }\n\n            charCodeToGlyphId[charCode] = cmapMappings[i].glyphId;\n          }\n        }\n\n        if (properties.glyphNames && baseEncoding.length) {\n          for (let i = 0; i < 256; ++i) {\n            if (charCodeToGlyphId[i] === undefined && baseEncoding[i]) {\n              glyphName = baseEncoding[i];\n              const glyphId = properties.glyphNames.indexOf(glyphName);\n\n              if (glyphId > 0 && hasGlyph(glyphId)) {\n                charCodeToGlyphId[i] = glyphId;\n              }\n            }\n          }\n        }\n      }\n\n      if (charCodeToGlyphId.length === 0) {\n        charCodeToGlyphId[0] = 0;\n      }\n\n      let glyphZeroId = numGlyphsOut - 1;\n\n      if (!dupFirstEntry) {\n        glyphZeroId = 0;\n      }\n\n      var newMapping = adjustMapping(charCodeToGlyphId, hasGlyph, glyphZeroId);\n      this.toFontChar = newMapping.toFontChar;\n      tables.cmap = {\n        tag: "cmap",\n        data: createCmapTable(newMapping.charCodeToGlyphId, numGlyphsOut)\n      };\n\n      if (!tables["OS/2"] || !validateOS2Table(tables["OS/2"], font)) {\n        tables["OS/2"] = {\n          tag: "OS/2",\n          data: createOS2Table(properties, newMapping.charCodeToGlyphId, metricsOverride)\n        };\n      }\n\n      if (!isTrueType) {\n        try {\n          cffFile = new _stream.Stream(tables["CFF "].data);\n          var parser = new _cff_parser.CFFParser(cffFile, properties, SEAC_ANALYSIS_ENABLED);\n          cff = parser.parse();\n          cff.duplicateFirstGlyph();\n          var compiler = new _cff_parser.CFFCompiler(cff);\n          tables["CFF "].data = compiler.compile();\n        } catch (e) {\n          (0, _util.warn)("Failed to compile font " + properties.loadedName);\n        }\n      }\n\n      if (!tables.name) {\n        tables.name = {\n          tag: "name",\n          data: createNameTable(this.name)\n        };\n      } else {\n        var namePrototype = readNameTable(tables.name);\n        tables.name.data = createNameTable(name, namePrototype);\n      }\n\n      var builder = new OpenTypeFileBuilder(header.version);\n\n      for (var tableTag in tables) {\n        builder.addTable(tableTag, tables[tableTag].data);\n      }\n\n      return builder.toArray();\n    },\n    convert: function Font_convert(fontName, font, properties) {\n      properties.fixedPitch = false;\n\n      if (properties.builtInEncoding) {\n        adjustToUnicode(properties, properties.builtInEncoding);\n      }\n\n      let glyphZeroId = 1;\n\n      if (font instanceof CFFFont) {\n        glyphZeroId = font.numGlyphs - 1;\n      }\n\n      var mapping = font.getGlyphMapping(properties);\n      var newMapping = adjustMapping(mapping, font.hasGlyphId.bind(font), glyphZeroId);\n      this.toFontChar = newMapping.toFontChar;\n      var numGlyphs = font.numGlyphs;\n\n      function getCharCodes(charCodeToGlyphId, glyphId) {\n        var charCodes = null;\n\n        for (var charCode in charCodeToGlyphId) {\n          if (glyphId === charCodeToGlyphId[charCode]) {\n            if (!charCodes) {\n              charCodes = [];\n            }\n\n            charCodes.push(charCode | 0);\n          }\n        }\n\n        return charCodes;\n      }\n\n      function createCharCode(charCodeToGlyphId, glyphId) {\n        for (var charCode in charCodeToGlyphId) {\n          if (glyphId === charCodeToGlyphId[charCode]) {\n            return charCode | 0;\n          }\n        }\n\n        newMapping.charCodeToGlyphId[newMapping.nextAvailableFontCharCode] = glyphId;\n        return newMapping.nextAvailableFontCharCode++;\n      }\n\n      var seacs = font.seacs;\n\n      if (SEAC_ANALYSIS_ENABLED && seacs && seacs.length) {\n        var matrix = properties.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n        var charset = font.getCharset();\n        var seacMap = Object.create(null);\n\n        for (var glyphId in seacs) {\n          glyphId |= 0;\n          var seac = seacs[glyphId];\n          var baseGlyphName = _encodings.StandardEncoding[seac[2]];\n          var accentGlyphName = _encodings.StandardEncoding[seac[3]];\n          var baseGlyphId = charset.indexOf(baseGlyphName);\n          var accentGlyphId = charset.indexOf(accentGlyphName);\n\n          if (baseGlyphId < 0 || accentGlyphId < 0) {\n            continue;\n          }\n\n          var accentOffset = {\n            x: seac[0] * matrix[0] + seac[1] * matrix[2] + matrix[4],\n            y: seac[0] * matrix[1] + seac[1] * matrix[3] + matrix[5]\n          };\n          var charCodes = getCharCodes(mapping, glyphId);\n\n          if (!charCodes) {\n            continue;\n          }\n\n          for (let i = 0, ii = charCodes.length; i < ii; i++) {\n            var charCode = charCodes[i];\n            var charCodeToGlyphId = newMapping.charCodeToGlyphId;\n            var baseFontCharCode = createCharCode(charCodeToGlyphId, baseGlyphId);\n            var accentFontCharCode = createCharCode(charCodeToGlyphId, accentGlyphId);\n            seacMap[charCode] = {\n              baseFontCharCode,\n              accentFontCharCode,\n              accentOffset\n            };\n          }\n        }\n\n        properties.seacMap = seacMap;\n      }\n\n      var unitsPerEm = 1 / (properties.fontMatrix || _util.FONT_IDENTITY_MATRIX)[0];\n      var builder = new OpenTypeFileBuilder("\\x4F\\x54\\x54\\x4F");\n      builder.addTable("CFF ", font.data);\n      builder.addTable("OS/2", createOS2Table(properties, newMapping.charCodeToGlyphId));\n      builder.addTable("cmap", createCmapTable(newMapping.charCodeToGlyphId, numGlyphs));\n      builder.addTable("head", "\\x00\\x01\\x00\\x00" + "\\x00\\x00\\x10\\x00" + "\\x00\\x00\\x00\\x00" + "\\x5F\\x0F\\x3C\\xF5" + "\\x00\\x00" + safeString16(unitsPerEm) + "\\x00\\x00\\x00\\x00\\x9e\\x0b\\x7e\\x27" + "\\x00\\x00\\x00\\x00\\x9e\\x0b\\x7e\\x27" + "\\x00\\x00" + safeString16(properties.descent) + "\\x0F\\xFF" + safeString16(properties.ascent) + string16(properties.italicAngle ? 2 : 0) + "\\x00\\x11" + "\\x00\\x00" + "\\x00\\x00" + "\\x00\\x00");\n      builder.addTable("hhea", "\\x00\\x01\\x00\\x00" + safeString16(properties.ascent) + safeString16(properties.descent) + "\\x00\\x00" + "\\xFF\\xFF" + "\\x00\\x00" + "\\x00\\x00" + "\\x00\\x00" + safeString16(properties.capHeight) + safeString16(Math.tan(properties.italicAngle) * properties.xHeight) + "\\x00\\x00" + "\\x00\\x00" + "\\x00\\x00" + "\\x00\\x00" + "\\x00\\x00" + "\\x00\\x00" + string16(numGlyphs));\n      builder.addTable("hmtx", function fontFieldsHmtx() {\n        var charstrings = font.charstrings;\n        var cffWidths = font.cff ? font.cff.widths : null;\n        var hmtx = "\\x00\\x00\\x00\\x00";\n\n        for (let i = 1, ii = numGlyphs; i < ii; i++) {\n          var width = 0;\n\n          if (charstrings) {\n            var charstring = charstrings[i - 1];\n            width = "width" in charstring ? charstring.width : 0;\n          } else if (cffWidths) {\n            width = Math.ceil(cffWidths[i] || 0);\n          }\n\n          hmtx += string16(width) + string16(0);\n        }\n\n        return hmtx;\n      }());\n      builder.addTable("maxp", "\\x00\\x00\\x50\\x00" + string16(numGlyphs));\n      builder.addTable("name", createNameTable(fontName));\n      builder.addTable("post", createPostTable(properties));\n      return builder.toArray();\n    },\n\n    get spaceWidth() {\n      var possibleSpaceReplacements = ["space", "minus", "one", "i", "I"];\n      var width;\n\n      for (var i = 0, ii = possibleSpaceReplacements.length; i < ii; i++) {\n        var glyphName = possibleSpaceReplacements[i];\n\n        if (glyphName in this.widths) {\n          width = this.widths[glyphName];\n          break;\n        }\n\n        var glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n        var glyphUnicode = glyphsUnicodeMap[glyphName];\n        var charcode = 0;\n\n        if (this.composite && this.cMap.contains(glyphUnicode)) {\n          charcode = this.cMap.lookup(glyphUnicode);\n        }\n\n        if (!charcode && this.toUnicode) {\n          charcode = this.toUnicode.charCodeOf(glyphUnicode);\n        }\n\n        if (charcode <= 0) {\n          charcode = glyphUnicode;\n        }\n\n        width = this.widths[charcode];\n\n        if (width) {\n          break;\n        }\n      }\n\n      width = width || this.defaultWidth;\n      return (0, _util.shadow)(this, "spaceWidth", width);\n    },\n\n    _charToGlyph(charcode, isSpace = false) {\n      var fontCharCode, width, operatorListId;\n      var widthCode = charcode;\n\n      if (this.cMap && this.cMap.contains(charcode)) {\n        widthCode = this.cMap.lookup(charcode);\n      }\n\n      width = this.widths[widthCode];\n      width = (0, _util.isNum)(width) ? width : this.defaultWidth;\n      var vmetric = this.vmetrics && this.vmetrics[widthCode];\n      let unicode = this.toUnicode.get(charcode) || this.fallbackToUnicode.get(charcode) || charcode;\n\n      if (typeof unicode === "number") {\n        unicode = String.fromCharCode(unicode);\n      }\n\n      var isInFont = (charcode in this.toFontChar);\n      fontCharCode = this.toFontChar[charcode] || charcode;\n\n      if (this.missingFile) {\n        const glyphName = this.differences[charcode] || this.defaultEncoding[charcode];\n\n        if ((glyphName === ".notdef" || glyphName === "") && this.type === "Type1") {\n          fontCharCode = 0x20;\n        }\n\n        fontCharCode = (0, _unicode.mapSpecialUnicodeValues)(fontCharCode);\n      }\n\n      if (this.isType3Font) {\n        operatorListId = fontCharCode;\n      }\n\n      var accent = null;\n\n      if (this.seacMap && this.seacMap[charcode]) {\n        isInFont = true;\n        var seac = this.seacMap[charcode];\n        fontCharCode = seac.baseFontCharCode;\n        accent = {\n          fontChar: String.fromCodePoint(seac.accentFontCharCode),\n          offset: seac.accentOffset\n        };\n      }\n\n      let fontChar = "";\n\n      if (typeof fontCharCode === "number") {\n        if (fontCharCode <= 0x10ffff) {\n          fontChar = String.fromCodePoint(fontCharCode);\n        } else {\n          (0, _util.warn)(`charToGlyph - invalid fontCharCode: ${fontCharCode}`);\n        }\n      }\n\n      var glyph = this.glyphCache[charcode];\n\n      if (!glyph || !glyph.matchesForCache(fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont)) {\n        glyph = new Glyph(fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont);\n        this.glyphCache[charcode] = glyph;\n      }\n\n      return glyph;\n    },\n\n    charsToGlyphs: function Font_charsToGlyphs(chars) {\n      var charsCache = this.charsCache;\n      var glyphs, glyph, charcode;\n\n      if (charsCache) {\n        glyphs = charsCache[chars];\n\n        if (glyphs) {\n          return glyphs;\n        }\n      }\n\n      if (!charsCache) {\n        charsCache = this.charsCache = Object.create(null);\n      }\n\n      glyphs = [];\n      var charsCacheKey = chars;\n      var i = 0,\n          ii;\n\n      if (this.cMap) {\n        var c = Object.create(null);\n\n        while (i < chars.length) {\n          this.cMap.readCharCode(chars, i, c);\n          charcode = c.charcode;\n          var length = c.length;\n          i += length;\n          var isSpace = length === 1 && chars.charCodeAt(i - 1) === 0x20;\n          glyph = this._charToGlyph(charcode, isSpace);\n          glyphs.push(glyph);\n        }\n      } else {\n        for (i = 0, ii = chars.length; i < ii; ++i) {\n          charcode = chars.charCodeAt(i);\n          glyph = this._charToGlyph(charcode, charcode === 0x20);\n          glyphs.push(glyph);\n        }\n      }\n\n      return charsCache[charsCacheKey] = glyphs;\n    },\n\n    getCharPositions(chars) {\n      const positions = [];\n\n      if (this.cMap) {\n        const c = Object.create(null);\n        let i = 0;\n\n        while (i < chars.length) {\n          this.cMap.readCharCode(chars, i, c);\n          const length = c.length;\n          positions.push([i, i + length]);\n          i += length;\n        }\n      } else {\n        for (let i = 0, ii = chars.length; i < ii; ++i) {\n          positions.push([i, i + 1]);\n        }\n      }\n\n      return positions;\n    },\n\n    get glyphCacheValues() {\n      return Object.values(this.glyphCache);\n    },\n\n    encodeString(str) {\n      const buffers = [];\n      const currentBuf = [];\n\n      const hasCurrentBufErrors = () => buffers.length % 2 === 1;\n\n      for (let i = 0, ii = str.length; i < ii; i++) {\n        const unicode = str.codePointAt(i);\n\n        if (unicode > 0xd7ff && (unicode < 0xe000 || unicode > 0xfffd)) {\n          i++;\n        }\n\n        if (this.toUnicode) {\n          const char = String.fromCodePoint(unicode);\n          const charCode = this.toUnicode.charCodeOf(char);\n\n          if (charCode !== -1) {\n            if (hasCurrentBufErrors()) {\n              buffers.push(currentBuf.join(""));\n              currentBuf.length = 0;\n            }\n\n            const charCodeLength = this.cMap ? this.cMap.getCharCodeLength(charCode) : 1;\n\n            for (let j = charCodeLength - 1; j >= 0; j--) {\n              currentBuf.push(String.fromCharCode(charCode >> 8 * j & 0xff));\n            }\n\n            continue;\n          }\n        }\n\n        if (!hasCurrentBufErrors()) {\n          buffers.push(currentBuf.join(""));\n          currentBuf.length = 0;\n        }\n\n        currentBuf.push(String.fromCodePoint(unicode));\n      }\n\n      buffers.push(currentBuf.join(""));\n      return buffers;\n    }\n\n  };\n  return Font;\n}();\n\nexports.Font = Font;\n\nvar ErrorFont = function ErrorFontClosure() {\n  function ErrorFont(error) {\n    this.error = error;\n    this.loadedName = "g_font_error";\n    this.missingFile = true;\n  }\n\n  ErrorFont.prototype = {\n    charsToGlyphs: function ErrorFont_charsToGlyphs() {\n      return [];\n    },\n    encodeString: function ErrorFont_encodeString(chars) {\n      return [chars];\n    },\n\n    exportData(extraProperties = false) {\n      return {\n        error: this.error\n      };\n    }\n\n  };\n  return ErrorFont;\n}();\n\nexports.ErrorFont = ErrorFont;\n\nfunction type1FontGlyphMapping(properties, builtInEncoding, glyphNames) {\n  var charCodeToGlyphId = Object.create(null);\n  var glyphId, charCode, baseEncoding;\n  var isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);\n\n  if (properties.baseEncodingName) {\n    baseEncoding = (0, _encodings.getEncoding)(properties.baseEncodingName);\n\n    for (charCode = 0; charCode < baseEncoding.length; charCode++) {\n      glyphId = glyphNames.indexOf(baseEncoding[charCode]);\n\n      if (glyphId >= 0) {\n        charCodeToGlyphId[charCode] = glyphId;\n      } else {\n        charCodeToGlyphId[charCode] = 0;\n      }\n    }\n  } else if (isSymbolicFont) {\n    for (charCode in builtInEncoding) {\n      charCodeToGlyphId[charCode] = builtInEncoding[charCode];\n    }\n  } else {\n    baseEncoding = _encodings.StandardEncoding;\n\n    for (charCode = 0; charCode < baseEncoding.length; charCode++) {\n      glyphId = glyphNames.indexOf(baseEncoding[charCode]);\n\n      if (glyphId >= 0) {\n        charCodeToGlyphId[charCode] = glyphId;\n      } else {\n        charCodeToGlyphId[charCode] = 0;\n      }\n    }\n  }\n\n  var differences = properties.differences,\n      glyphsUnicodeMap;\n\n  if (differences) {\n    for (charCode in differences) {\n      var glyphName = differences[charCode];\n      glyphId = glyphNames.indexOf(glyphName);\n\n      if (glyphId === -1) {\n        if (!glyphsUnicodeMap) {\n          glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n        }\n\n        var standardGlyphName = recoverGlyphName(glyphName, glyphsUnicodeMap);\n\n        if (standardGlyphName !== glyphName) {\n          glyphId = glyphNames.indexOf(standardGlyphName);\n        }\n      }\n\n      if (glyphId >= 0) {\n        charCodeToGlyphId[charCode] = glyphId;\n      } else {\n        charCodeToGlyphId[charCode] = 0;\n      }\n    }\n  }\n\n  return charCodeToGlyphId;\n}\n\nvar Type1Font = function Type1FontClosure() {\n  function findBlock(streamBytes, signature, startIndex) {\n    var streamBytesLength = streamBytes.length;\n    var signatureLength = signature.length;\n    var scanLength = streamBytesLength - signatureLength;\n    var i = startIndex,\n        j,\n        found = false;\n\n    while (i < scanLength) {\n      j = 0;\n\n      while (j < signatureLength && streamBytes[i + j] === signature[j]) {\n        j++;\n      }\n\n      if (j >= signatureLength) {\n        i += j;\n\n        while (i < streamBytesLength && (0, _core_utils.isWhiteSpace)(streamBytes[i])) {\n          i++;\n        }\n\n        found = true;\n        break;\n      }\n\n      i++;\n    }\n\n    return {\n      found,\n      length: i\n    };\n  }\n\n  function getHeaderBlock(stream, suggestedLength) {\n    var EEXEC_SIGNATURE = [0x65, 0x65, 0x78, 0x65, 0x63];\n    var streamStartPos = stream.pos;\n    var headerBytes, headerBytesLength, block;\n\n    try {\n      headerBytes = stream.getBytes(suggestedLength);\n      headerBytesLength = headerBytes.length;\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n    }\n\n    if (headerBytesLength === suggestedLength) {\n      block = findBlock(headerBytes, EEXEC_SIGNATURE, suggestedLength - 2 * EEXEC_SIGNATURE.length);\n\n      if (block.found && block.length === suggestedLength) {\n        return {\n          stream: new _stream.Stream(headerBytes),\n          length: suggestedLength\n        };\n      }\n    }\n\n    (0, _util.warn)(\'Invalid "Length1" property in Type1 font -- trying to recover.\');\n    stream.pos = streamStartPos;\n    var SCAN_BLOCK_LENGTH = 2048;\n    var actualLength;\n\n    while (true) {\n      var scanBytes = stream.peekBytes(SCAN_BLOCK_LENGTH);\n      block = findBlock(scanBytes, EEXEC_SIGNATURE, 0);\n\n      if (block.length === 0) {\n        break;\n      }\n\n      stream.pos += block.length;\n\n      if (block.found) {\n        actualLength = stream.pos - streamStartPos;\n        break;\n      }\n    }\n\n    stream.pos = streamStartPos;\n\n    if (actualLength) {\n      return {\n        stream: new _stream.Stream(stream.getBytes(actualLength)),\n        length: actualLength\n      };\n    }\n\n    (0, _util.warn)(\'Unable to recover "Length1" property in Type1 font -- using as is.\');\n    return {\n      stream: new _stream.Stream(stream.getBytes(suggestedLength)),\n      length: suggestedLength\n    };\n  }\n\n  function getEexecBlock(stream, suggestedLength) {\n    var eexecBytes = stream.getBytes();\n    return {\n      stream: new _stream.Stream(eexecBytes),\n      length: eexecBytes.length\n    };\n  }\n\n  function Type1Font(name, file, properties) {\n    var PFB_HEADER_SIZE = 6;\n    var headerBlockLength = properties.length1;\n    var eexecBlockLength = properties.length2;\n    var pfbHeader = file.peekBytes(PFB_HEADER_SIZE);\n    var pfbHeaderPresent = pfbHeader[0] === 0x80 && pfbHeader[1] === 0x01;\n\n    if (pfbHeaderPresent) {\n      file.skip(PFB_HEADER_SIZE);\n      headerBlockLength = pfbHeader[5] << 24 | pfbHeader[4] << 16 | pfbHeader[3] << 8 | pfbHeader[2];\n    }\n\n    var headerBlock = getHeaderBlock(file, headerBlockLength);\n    var headerBlockParser = new _type1_parser.Type1Parser(headerBlock.stream, false, SEAC_ANALYSIS_ENABLED);\n    headerBlockParser.extractFontHeader(properties);\n\n    if (pfbHeaderPresent) {\n      pfbHeader = file.getBytes(PFB_HEADER_SIZE);\n      eexecBlockLength = pfbHeader[5] << 24 | pfbHeader[4] << 16 | pfbHeader[3] << 8 | pfbHeader[2];\n    }\n\n    var eexecBlock = getEexecBlock(file, eexecBlockLength);\n    var eexecBlockParser = new _type1_parser.Type1Parser(eexecBlock.stream, true, SEAC_ANALYSIS_ENABLED);\n    var data = eexecBlockParser.extractFontProgram(properties);\n\n    for (const key in data.properties) {\n      properties[key] = data.properties[key];\n    }\n\n    var charstrings = data.charstrings;\n    var type2Charstrings = this.getType2Charstrings(charstrings);\n    var subrs = this.getType2Subrs(data.subrs);\n    this.charstrings = charstrings;\n    this.data = this.wrap(name, type2Charstrings, this.charstrings, subrs, properties);\n    this.seacs = this.getSeacs(data.charstrings);\n  }\n\n  Type1Font.prototype = {\n    get numGlyphs() {\n      return this.charstrings.length + 1;\n    },\n\n    getCharset: function Type1Font_getCharset() {\n      var charset = [".notdef"];\n      var charstrings = this.charstrings;\n\n      for (var glyphId = 0; glyphId < charstrings.length; glyphId++) {\n        charset.push(charstrings[glyphId].glyphName);\n      }\n\n      return charset;\n    },\n    getGlyphMapping: function Type1Font_getGlyphMapping(properties) {\n      var charstrings = this.charstrings;\n\n      if (properties.composite) {\n        const charCodeToGlyphId = Object.create(null);\n\n        for (let glyphId = 0, charstringsLen = charstrings.length; glyphId < charstringsLen; glyphId++) {\n          const charCode = properties.cMap.charCodeOf(glyphId);\n          charCodeToGlyphId[charCode] = glyphId + 1;\n        }\n\n        return charCodeToGlyphId;\n      }\n\n      var glyphNames = [".notdef"],\n          glyphId;\n\n      for (glyphId = 0; glyphId < charstrings.length; glyphId++) {\n        glyphNames.push(charstrings[glyphId].glyphName);\n      }\n\n      var encoding = properties.builtInEncoding;\n\n      if (encoding) {\n        var builtInEncoding = Object.create(null);\n\n        for (var charCode in encoding) {\n          glyphId = glyphNames.indexOf(encoding[charCode]);\n\n          if (glyphId >= 0) {\n            builtInEncoding[charCode] = glyphId;\n          }\n        }\n      }\n\n      return type1FontGlyphMapping(properties, builtInEncoding, glyphNames);\n    },\n    hasGlyphId: function Type1Font_hasGlyphID(id) {\n      if (id < 0 || id >= this.numGlyphs) {\n        return false;\n      }\n\n      if (id === 0) {\n        return true;\n      }\n\n      var glyph = this.charstrings[id - 1];\n      return glyph.charstring.length > 0;\n    },\n    getSeacs: function Type1Font_getSeacs(charstrings) {\n      var i, ii;\n      var seacMap = [];\n\n      for (i = 0, ii = charstrings.length; i < ii; i++) {\n        var charstring = charstrings[i];\n\n        if (charstring.seac) {\n          seacMap[i + 1] = charstring.seac;\n        }\n      }\n\n      return seacMap;\n    },\n    getType2Charstrings: function Type1Font_getType2Charstrings(type1Charstrings) {\n      var type2Charstrings = [];\n\n      for (var i = 0, ii = type1Charstrings.length; i < ii; i++) {\n        type2Charstrings.push(type1Charstrings[i].charstring);\n      }\n\n      return type2Charstrings;\n    },\n    getType2Subrs: function Type1Font_getType2Subrs(type1Subrs) {\n      var bias = 0;\n      var count = type1Subrs.length;\n\n      if (count < 1133) {\n        bias = 107;\n      } else if (count < 33769) {\n        bias = 1131;\n      } else {\n        bias = 32768;\n      }\n\n      var type2Subrs = [];\n      var i;\n\n      for (i = 0; i < bias; i++) {\n        type2Subrs.push([0x0b]);\n      }\n\n      for (i = 0; i < count; i++) {\n        type2Subrs.push(type1Subrs[i]);\n      }\n\n      return type2Subrs;\n    },\n    wrap: function Type1Font_wrap(name, glyphs, charstrings, subrs, properties) {\n      var cff = new _cff_parser.CFF();\n      cff.header = new _cff_parser.CFFHeader(1, 0, 4, 4);\n      cff.names = [name];\n      var topDict = new _cff_parser.CFFTopDict();\n      topDict.setByName("version", 391);\n      topDict.setByName("Notice", 392);\n      topDict.setByName("FullName", 393);\n      topDict.setByName("FamilyName", 394);\n      topDict.setByName("Weight", 395);\n      topDict.setByName("Encoding", null);\n      topDict.setByName("FontMatrix", properties.fontMatrix);\n      topDict.setByName("FontBBox", properties.bbox);\n      topDict.setByName("charset", null);\n      topDict.setByName("CharStrings", null);\n      topDict.setByName("Private", null);\n      cff.topDict = topDict;\n      var strings = new _cff_parser.CFFStrings();\n      strings.add("Version 0.11");\n      strings.add("See original notice");\n      strings.add(name);\n      strings.add(name);\n      strings.add("Medium");\n      cff.strings = strings;\n      cff.globalSubrIndex = new _cff_parser.CFFIndex();\n      var count = glyphs.length;\n      var charsetArray = [".notdef"];\n      var i, ii;\n\n      for (i = 0; i < count; i++) {\n        const glyphName = charstrings[i].glyphName;\n\n        const index = _cff_parser.CFFStandardStrings.indexOf(glyphName);\n\n        if (index === -1) {\n          strings.add(glyphName);\n        }\n\n        charsetArray.push(glyphName);\n      }\n\n      cff.charset = new _cff_parser.CFFCharset(false, 0, charsetArray);\n      var charStringsIndex = new _cff_parser.CFFIndex();\n      charStringsIndex.add([0x8b, 0x0e]);\n\n      for (i = 0; i < count; i++) {\n        charStringsIndex.add(glyphs[i]);\n      }\n\n      cff.charStrings = charStringsIndex;\n      var privateDict = new _cff_parser.CFFPrivateDict();\n      privateDict.setByName("Subrs", null);\n      var fields = ["BlueValues", "OtherBlues", "FamilyBlues", "FamilyOtherBlues", "StemSnapH", "StemSnapV", "BlueShift", "BlueFuzz", "BlueScale", "LanguageGroup", "ExpansionFactor", "ForceBold", "StdHW", "StdVW"];\n\n      for (i = 0, ii = fields.length; i < ii; i++) {\n        var field = fields[i];\n\n        if (!(field in properties.privateData)) {\n          continue;\n        }\n\n        var value = properties.privateData[field];\n\n        if (Array.isArray(value)) {\n          for (var j = value.length - 1; j > 0; j--) {\n            value[j] -= value[j - 1];\n          }\n        }\n\n        privateDict.setByName(field, value);\n      }\n\n      cff.topDict.privateDict = privateDict;\n      var subrIndex = new _cff_parser.CFFIndex();\n\n      for (i = 0, ii = subrs.length; i < ii; i++) {\n        subrIndex.add(subrs[i]);\n      }\n\n      privateDict.subrsIndex = subrIndex;\n      var compiler = new _cff_parser.CFFCompiler(cff);\n      return compiler.compile();\n    }\n  };\n  return Type1Font;\n}();\n\nvar CFFFont = function CFFFontClosure() {\n  function CFFFont(file, properties) {\n    this.properties = properties;\n    var parser = new _cff_parser.CFFParser(file, properties, SEAC_ANALYSIS_ENABLED);\n    this.cff = parser.parse();\n    this.cff.duplicateFirstGlyph();\n    var compiler = new _cff_parser.CFFCompiler(this.cff);\n    this.seacs = this.cff.seacs;\n\n    try {\n      this.data = compiler.compile();\n    } catch (e) {\n      (0, _util.warn)("Failed to compile font " + properties.loadedName);\n      this.data = file;\n    }\n  }\n\n  CFFFont.prototype = {\n    get numGlyphs() {\n      return this.cff.charStrings.count;\n    },\n\n    getCharset: function CFFFont_getCharset() {\n      return this.cff.charset.charset;\n    },\n    getGlyphMapping: function CFFFont_getGlyphMapping() {\n      var cff = this.cff;\n      var properties = this.properties;\n      var charsets = cff.charset.charset;\n      var charCodeToGlyphId;\n      var glyphId;\n\n      if (properties.composite) {\n        charCodeToGlyphId = Object.create(null);\n        let charCode;\n\n        if (cff.isCIDFont) {\n          for (glyphId = 0; glyphId < charsets.length; glyphId++) {\n            var cid = charsets[glyphId];\n            charCode = properties.cMap.charCodeOf(cid);\n            charCodeToGlyphId[charCode] = glyphId;\n          }\n        } else {\n          for (glyphId = 0; glyphId < cff.charStrings.count; glyphId++) {\n            charCode = properties.cMap.charCodeOf(glyphId);\n            charCodeToGlyphId[charCode] = glyphId;\n          }\n        }\n\n        return charCodeToGlyphId;\n      }\n\n      var encoding = cff.encoding ? cff.encoding.encoding : null;\n      charCodeToGlyphId = type1FontGlyphMapping(properties, encoding, charsets);\n      return charCodeToGlyphId;\n    },\n    hasGlyphId: function CFFFont_hasGlyphID(id) {\n      return this.cff.hasGlyphId(id);\n    }\n  };\n  return CFFFont;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/fonts.js\n')},"./node_modules/pdfjs-dist/lib/core/function.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.isPDFFunction = isPDFFunction;\nexports.PostScriptEvaluator = exports.PostScriptCompiler = exports.PDFFunctionFactory = void 0;\n\nvar _primitives = __webpack_require__(/*! ./primitives.js */ "./node_modules/pdfjs-dist/lib/core/primitives.js");\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _ps_parser = __webpack_require__(/*! ./ps_parser.js */ "./node_modules/pdfjs-dist/lib/core/ps_parser.js");\n\nvar _image_utils = __webpack_require__(/*! ./image_utils.js */ "./node_modules/pdfjs-dist/lib/core/image_utils.js");\n\nclass PDFFunctionFactory {\n  constructor({\n    xref,\n    isEvalSupported = true\n  }) {\n    this.xref = xref;\n    this.isEvalSupported = isEvalSupported !== false;\n  }\n\n  create(fn) {\n    const cachedFunction = this.getCached(fn);\n\n    if (cachedFunction) {\n      return cachedFunction;\n    }\n\n    const parsedFunction = PDFFunction.parse({\n      xref: this.xref,\n      isEvalSupported: this.isEvalSupported,\n      fn: fn instanceof _primitives.Ref ? this.xref.fetch(fn) : fn\n    });\n\n    this._cache(fn, parsedFunction);\n\n    return parsedFunction;\n  }\n\n  createFromArray(fnObj) {\n    const cachedFunction = this.getCached(fnObj);\n\n    if (cachedFunction) {\n      return cachedFunction;\n    }\n\n    const parsedFunction = PDFFunction.parseArray({\n      xref: this.xref,\n      isEvalSupported: this.isEvalSupported,\n      fnObj: fnObj instanceof _primitives.Ref ? this.xref.fetch(fnObj) : fnObj\n    });\n\n    this._cache(fnObj, parsedFunction);\n\n    return parsedFunction;\n  }\n\n  getCached(cacheKey) {\n    let fnRef;\n\n    if (cacheKey instanceof _primitives.Ref) {\n      fnRef = cacheKey;\n    } else if (cacheKey instanceof _primitives.Dict) {\n      fnRef = cacheKey.objId;\n    } else if ((0, _primitives.isStream)(cacheKey)) {\n      fnRef = cacheKey.dict && cacheKey.dict.objId;\n    }\n\n    if (fnRef) {\n      const localFunction = this._localFunctionCache.getByRef(fnRef);\n\n      if (localFunction) {\n        return localFunction;\n      }\n    }\n\n    return null;\n  }\n\n  _cache(cacheKey, parsedFunction) {\n    if (!parsedFunction) {\n      throw new Error(\'PDFFunctionFactory._cache - expected "parsedFunction" argument.\');\n    }\n\n    let fnRef;\n\n    if (cacheKey instanceof _primitives.Ref) {\n      fnRef = cacheKey;\n    } else if (cacheKey instanceof _primitives.Dict) {\n      fnRef = cacheKey.objId;\n    } else if ((0, _primitives.isStream)(cacheKey)) {\n      fnRef = cacheKey.dict && cacheKey.dict.objId;\n    }\n\n    if (fnRef) {\n      this._localFunctionCache.set(null, fnRef, parsedFunction);\n    }\n  }\n\n  get _localFunctionCache() {\n    return (0, _util.shadow)(this, "_localFunctionCache", new _image_utils.LocalFunctionCache());\n  }\n\n}\n\nexports.PDFFunctionFactory = PDFFunctionFactory;\n\nfunction toNumberArray(arr) {\n  if (!Array.isArray(arr)) {\n    return null;\n  }\n\n  const length = arr.length;\n\n  for (let i = 0; i < length; i++) {\n    if (typeof arr[i] !== "number") {\n      const result = new Array(length);\n\n      for (let j = 0; j < length; j++) {\n        result[j] = +arr[j];\n      }\n\n      return result;\n    }\n  }\n\n  return arr;\n}\n\nvar PDFFunction = function PDFFunctionClosure() {\n  const CONSTRUCT_SAMPLED = 0;\n  const CONSTRUCT_INTERPOLATED = 2;\n  const CONSTRUCT_STICHED = 3;\n  const CONSTRUCT_POSTSCRIPT = 4;\n  return {\n    getSampleArray(size, outputSize, bps, stream) {\n      var i, ii;\n      var length = 1;\n\n      for (i = 0, ii = size.length; i < ii; i++) {\n        length *= size[i];\n      }\n\n      length *= outputSize;\n      var array = new Array(length);\n      var codeSize = 0;\n      var codeBuf = 0;\n      var sampleMul = 1.0 / (2.0 ** bps - 1);\n      var strBytes = stream.getBytes((length * bps + 7) / 8);\n      var strIdx = 0;\n\n      for (i = 0; i < length; i++) {\n        while (codeSize < bps) {\n          codeBuf <<= 8;\n          codeBuf |= strBytes[strIdx++];\n          codeSize += 8;\n        }\n\n        codeSize -= bps;\n        array[i] = (codeBuf >> codeSize) * sampleMul;\n        codeBuf &= (1 << codeSize) - 1;\n      }\n\n      return array;\n    },\n\n    getIR({\n      xref,\n      isEvalSupported,\n      fn\n    }) {\n      var dict = fn.dict;\n\n      if (!dict) {\n        dict = fn;\n      }\n\n      var types = [this.constructSampled, null, this.constructInterpolated, this.constructStiched, this.constructPostScript];\n      var typeNum = dict.get("FunctionType");\n      var typeFn = types[typeNum];\n\n      if (!typeFn) {\n        throw new _util.FormatError("Unknown type of function");\n      }\n\n      return typeFn.call(this, {\n        xref,\n        isEvalSupported,\n        fn,\n        dict\n      });\n    },\n\n    fromIR({\n      xref,\n      isEvalSupported,\n      IR\n    }) {\n      var type = IR[0];\n\n      switch (type) {\n        case CONSTRUCT_SAMPLED:\n          return this.constructSampledFromIR({\n            xref,\n            isEvalSupported,\n            IR\n          });\n\n        case CONSTRUCT_INTERPOLATED:\n          return this.constructInterpolatedFromIR({\n            xref,\n            isEvalSupported,\n            IR\n          });\n\n        case CONSTRUCT_STICHED:\n          return this.constructStichedFromIR({\n            xref,\n            isEvalSupported,\n            IR\n          });\n\n        default:\n          return this.constructPostScriptFromIR({\n            xref,\n            isEvalSupported,\n            IR\n          });\n      }\n    },\n\n    parse({\n      xref,\n      isEvalSupported,\n      fn\n    }) {\n      const IR = this.getIR({\n        xref,\n        isEvalSupported,\n        fn\n      });\n      return this.fromIR({\n        xref,\n        isEvalSupported,\n        IR\n      });\n    },\n\n    parseArray({\n      xref,\n      isEvalSupported,\n      fnObj\n    }) {\n      if (!Array.isArray(fnObj)) {\n        return this.parse({\n          xref,\n          isEvalSupported,\n          fn: fnObj\n        });\n      }\n\n      var fnArray = [];\n\n      for (var j = 0, jj = fnObj.length; j < jj; j++) {\n        fnArray.push(this.parse({\n          xref,\n          isEvalSupported,\n          fn: xref.fetchIfRef(fnObj[j])\n        }));\n      }\n\n      return function (src, srcOffset, dest, destOffset) {\n        for (var i = 0, ii = fnArray.length; i < ii; i++) {\n          fnArray[i](src, srcOffset, dest, destOffset + i);\n        }\n      };\n    },\n\n    constructSampled({\n      xref,\n      isEvalSupported,\n      fn,\n      dict\n    }) {\n      function toMultiArray(arr) {\n        var inputLength = arr.length;\n        var out = [];\n        var index = 0;\n\n        for (var i = 0; i < inputLength; i += 2) {\n          out[index] = [arr[i], arr[i + 1]];\n          ++index;\n        }\n\n        return out;\n      }\n\n      var domain = toNumberArray(dict.getArray("Domain"));\n      var range = toNumberArray(dict.getArray("Range"));\n\n      if (!domain || !range) {\n        throw new _util.FormatError("No domain or range");\n      }\n\n      var inputSize = domain.length / 2;\n      var outputSize = range.length / 2;\n      domain = toMultiArray(domain);\n      range = toMultiArray(range);\n      var size = toNumberArray(dict.getArray("Size"));\n      var bps = dict.get("BitsPerSample");\n      var order = dict.get("Order") || 1;\n\n      if (order !== 1) {\n        (0, _util.info)("No support for cubic spline interpolation: " + order);\n      }\n\n      var encode = toNumberArray(dict.getArray("Encode"));\n\n      if (!encode) {\n        encode = [];\n\n        for (var i = 0; i < inputSize; ++i) {\n          encode.push([0, size[i] - 1]);\n        }\n      } else {\n        encode = toMultiArray(encode);\n      }\n\n      var decode = toNumberArray(dict.getArray("Decode"));\n\n      if (!decode) {\n        decode = range;\n      } else {\n        decode = toMultiArray(decode);\n      }\n\n      var samples = this.getSampleArray(size, outputSize, bps, fn);\n      return [CONSTRUCT_SAMPLED, inputSize, domain, encode, decode, samples, size, outputSize, 2 ** bps - 1, range];\n    },\n\n    constructSampledFromIR({\n      xref,\n      isEvalSupported,\n      IR\n    }) {\n      function interpolate(x, xmin, xmax, ymin, ymax) {\n        return ymin + (x - xmin) * ((ymax - ymin) / (xmax - xmin));\n      }\n\n      return function constructSampledFromIRResult(src, srcOffset, dest, destOffset) {\n        var m = IR[1];\n        var domain = IR[2];\n        var encode = IR[3];\n        var decode = IR[4];\n        var samples = IR[5];\n        var size = IR[6];\n        var n = IR[7];\n        var range = IR[9];\n        var cubeVertices = 1 << m;\n        var cubeN = new Float64Array(cubeVertices);\n        var cubeVertex = new Uint32Array(cubeVertices);\n        var i, j;\n\n        for (j = 0; j < cubeVertices; j++) {\n          cubeN[j] = 1;\n        }\n\n        var k = n,\n            pos = 1;\n\n        for (i = 0; i < m; ++i) {\n          var domain_2i = domain[i][0];\n          var domain_2i_1 = domain[i][1];\n          var xi = Math.min(Math.max(src[srcOffset + i], domain_2i), domain_2i_1);\n          var e = interpolate(xi, domain_2i, domain_2i_1, encode[i][0], encode[i][1]);\n          var size_i = size[i];\n          e = Math.min(Math.max(e, 0), size_i - 1);\n          var e0 = e < size_i - 1 ? Math.floor(e) : e - 1;\n          var n0 = e0 + 1 - e;\n          var n1 = e - e0;\n          var offset0 = e0 * k;\n          var offset1 = offset0 + k;\n\n          for (j = 0; j < cubeVertices; j++) {\n            if (j & pos) {\n              cubeN[j] *= n1;\n              cubeVertex[j] += offset1;\n            } else {\n              cubeN[j] *= n0;\n              cubeVertex[j] += offset0;\n            }\n          }\n\n          k *= size_i;\n          pos <<= 1;\n        }\n\n        for (j = 0; j < n; ++j) {\n          var rj = 0;\n\n          for (i = 0; i < cubeVertices; i++) {\n            rj += samples[cubeVertex[i] + j] * cubeN[i];\n          }\n\n          rj = interpolate(rj, 0, 1, decode[j][0], decode[j][1]);\n          dest[destOffset + j] = Math.min(Math.max(rj, range[j][0]), range[j][1]);\n        }\n      };\n    },\n\n    constructInterpolated({\n      xref,\n      isEvalSupported,\n      fn,\n      dict\n    }) {\n      var c0 = toNumberArray(dict.getArray("C0")) || [0];\n      var c1 = toNumberArray(dict.getArray("C1")) || [1];\n      var n = dict.get("N");\n      var length = c0.length;\n      var diff = [];\n\n      for (var i = 0; i < length; ++i) {\n        diff.push(c1[i] - c0[i]);\n      }\n\n      return [CONSTRUCT_INTERPOLATED, c0, diff, n];\n    },\n\n    constructInterpolatedFromIR({\n      xref,\n      isEvalSupported,\n      IR\n    }) {\n      var c0 = IR[1];\n      var diff = IR[2];\n      var n = IR[3];\n      var length = diff.length;\n      return function constructInterpolatedFromIRResult(src, srcOffset, dest, destOffset) {\n        var x = n === 1 ? src[srcOffset] : src[srcOffset] ** n;\n\n        for (var j = 0; j < length; ++j) {\n          dest[destOffset + j] = c0[j] + x * diff[j];\n        }\n      };\n    },\n\n    constructStiched({\n      xref,\n      isEvalSupported,\n      fn,\n      dict\n    }) {\n      var domain = toNumberArray(dict.getArray("Domain"));\n\n      if (!domain) {\n        throw new _util.FormatError("No domain");\n      }\n\n      var inputSize = domain.length / 2;\n\n      if (inputSize !== 1) {\n        throw new _util.FormatError("Bad domain for stiched function");\n      }\n\n      var fnRefs = dict.get("Functions");\n      var fns = [];\n\n      for (var i = 0, ii = fnRefs.length; i < ii; ++i) {\n        fns.push(this.parse({\n          xref,\n          isEvalSupported,\n          fn: xref.fetchIfRef(fnRefs[i])\n        }));\n      }\n\n      var bounds = toNumberArray(dict.getArray("Bounds"));\n      var encode = toNumberArray(dict.getArray("Encode"));\n      return [CONSTRUCT_STICHED, domain, bounds, encode, fns];\n    },\n\n    constructStichedFromIR({\n      xref,\n      isEvalSupported,\n      IR\n    }) {\n      var domain = IR[1];\n      var bounds = IR[2];\n      var encode = IR[3];\n      var fns = IR[4];\n      var tmpBuf = new Float32Array(1);\n      return function constructStichedFromIRResult(src, srcOffset, dest, destOffset) {\n        var clip = function constructStichedFromIRClip(v, min, max) {\n          if (v > max) {\n            v = max;\n          } else if (v < min) {\n            v = min;\n          }\n\n          return v;\n        };\n\n        var v = clip(src[srcOffset], domain[0], domain[1]);\n\n        for (var i = 0, ii = bounds.length; i < ii; ++i) {\n          if (v < bounds[i]) {\n            break;\n          }\n        }\n\n        var dmin = domain[0];\n\n        if (i > 0) {\n          dmin = bounds[i - 1];\n        }\n\n        var dmax = domain[1];\n\n        if (i < bounds.length) {\n          dmax = bounds[i];\n        }\n\n        var rmin = encode[2 * i];\n        var rmax = encode[2 * i + 1];\n        tmpBuf[0] = dmin === dmax ? rmin : rmin + (v - dmin) * (rmax - rmin) / (dmax - dmin);\n        fns[i](tmpBuf, 0, dest, destOffset);\n      };\n    },\n\n    constructPostScript({\n      xref,\n      isEvalSupported,\n      fn,\n      dict\n    }) {\n      var domain = toNumberArray(dict.getArray("Domain"));\n      var range = toNumberArray(dict.getArray("Range"));\n\n      if (!domain) {\n        throw new _util.FormatError("No domain.");\n      }\n\n      if (!range) {\n        throw new _util.FormatError("No range.");\n      }\n\n      var lexer = new _ps_parser.PostScriptLexer(fn);\n      var parser = new _ps_parser.PostScriptParser(lexer);\n      var code = parser.parse();\n      return [CONSTRUCT_POSTSCRIPT, domain, range, code];\n    },\n\n    constructPostScriptFromIR({\n      xref,\n      isEvalSupported,\n      IR\n    }) {\n      var domain = IR[1];\n      var range = IR[2];\n      var code = IR[3];\n\n      if (isEvalSupported && _util.IsEvalSupportedCached.value) {\n        const compiled = new PostScriptCompiler().compile(code, domain, range);\n\n        if (compiled) {\n          return new Function("src", "srcOffset", "dest", "destOffset", compiled);\n        }\n      }\n\n      (0, _util.info)("Unable to compile PS function");\n      var numOutputs = range.length >> 1;\n      var numInputs = domain.length >> 1;\n      var evaluator = new PostScriptEvaluator(code);\n      var cache = Object.create(null);\n      var MAX_CACHE_SIZE = 2048 * 4;\n      var cache_available = MAX_CACHE_SIZE;\n      var tmpBuf = new Float32Array(numInputs);\n      return function constructPostScriptFromIRResult(src, srcOffset, dest, destOffset) {\n        var i, value;\n        var key = "";\n        var input = tmpBuf;\n\n        for (i = 0; i < numInputs; i++) {\n          value = src[srcOffset + i];\n          input[i] = value;\n          key += value + "_";\n        }\n\n        var cachedValue = cache[key];\n\n        if (cachedValue !== undefined) {\n          dest.set(cachedValue, destOffset);\n          return;\n        }\n\n        var output = new Float32Array(numOutputs);\n        var stack = evaluator.execute(input);\n        var stackIndex = stack.length - numOutputs;\n\n        for (i = 0; i < numOutputs; i++) {\n          value = stack[stackIndex + i];\n          var bound = range[i * 2];\n\n          if (value < bound) {\n            value = bound;\n          } else {\n            bound = range[i * 2 + 1];\n\n            if (value > bound) {\n              value = bound;\n            }\n          }\n\n          output[i] = value;\n        }\n\n        if (cache_available > 0) {\n          cache_available--;\n          cache[key] = output;\n        }\n\n        dest.set(output, destOffset);\n      };\n    }\n\n  };\n}();\n\nfunction isPDFFunction(v) {\n  var fnDict;\n\n  if (typeof v !== "object") {\n    return false;\n  } else if ((0, _primitives.isDict)(v)) {\n    fnDict = v;\n  } else if ((0, _primitives.isStream)(v)) {\n    fnDict = v.dict;\n  } else {\n    return false;\n  }\n\n  return fnDict.has("FunctionType");\n}\n\nvar PostScriptStack = function PostScriptStackClosure() {\n  var MAX_STACK_SIZE = 100;\n\n  function PostScriptStack(initialStack) {\n    this.stack = !initialStack ? [] : Array.prototype.slice.call(initialStack, 0);\n  }\n\n  PostScriptStack.prototype = {\n    push: function PostScriptStack_push(value) {\n      if (this.stack.length >= MAX_STACK_SIZE) {\n        throw new Error("PostScript function stack overflow.");\n      }\n\n      this.stack.push(value);\n    },\n    pop: function PostScriptStack_pop() {\n      if (this.stack.length <= 0) {\n        throw new Error("PostScript function stack underflow.");\n      }\n\n      return this.stack.pop();\n    },\n    copy: function PostScriptStack_copy(n) {\n      if (this.stack.length + n >= MAX_STACK_SIZE) {\n        throw new Error("PostScript function stack overflow.");\n      }\n\n      var stack = this.stack;\n\n      for (var i = stack.length - n, j = n - 1; j >= 0; j--, i++) {\n        stack.push(stack[i]);\n      }\n    },\n    index: function PostScriptStack_index(n) {\n      this.push(this.stack[this.stack.length - n - 1]);\n    },\n    roll: function PostScriptStack_roll(n, p) {\n      var stack = this.stack;\n      var l = stack.length - n;\n      var r = stack.length - 1,\n          c = l + (p - Math.floor(p / n) * n),\n          i,\n          j,\n          t;\n\n      for (i = l, j = r; i < j; i++, j--) {\n        t = stack[i];\n        stack[i] = stack[j];\n        stack[j] = t;\n      }\n\n      for (i = l, j = c - 1; i < j; i++, j--) {\n        t = stack[i];\n        stack[i] = stack[j];\n        stack[j] = t;\n      }\n\n      for (i = c, j = r; i < j; i++, j--) {\n        t = stack[i];\n        stack[i] = stack[j];\n        stack[j] = t;\n      }\n    }\n  };\n  return PostScriptStack;\n}();\n\nvar PostScriptEvaluator = function PostScriptEvaluatorClosure() {\n  function PostScriptEvaluator(operators) {\n    this.operators = operators;\n  }\n\n  PostScriptEvaluator.prototype = {\n    execute: function PostScriptEvaluator_execute(initialStack) {\n      var stack = new PostScriptStack(initialStack);\n      var counter = 0;\n      var operators = this.operators;\n      var length = operators.length;\n      var operator, a, b;\n\n      while (counter < length) {\n        operator = operators[counter++];\n\n        if (typeof operator === "number") {\n          stack.push(operator);\n          continue;\n        }\n\n        switch (operator) {\n          case "jz":\n            b = stack.pop();\n            a = stack.pop();\n\n            if (!a) {\n              counter = b;\n            }\n\n            break;\n\n          case "j":\n            a = stack.pop();\n            counter = a;\n            break;\n\n          case "abs":\n            a = stack.pop();\n            stack.push(Math.abs(a));\n            break;\n\n          case "add":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a + b);\n            break;\n\n          case "and":\n            b = stack.pop();\n            a = stack.pop();\n\n            if ((0, _util.isBool)(a) && (0, _util.isBool)(b)) {\n              stack.push(a && b);\n            } else {\n              stack.push(a & b);\n            }\n\n            break;\n\n          case "atan":\n            a = stack.pop();\n            stack.push(Math.atan(a));\n            break;\n\n          case "bitshift":\n            b = stack.pop();\n            a = stack.pop();\n\n            if (a > 0) {\n              stack.push(a << b);\n            } else {\n              stack.push(a >> b);\n            }\n\n            break;\n\n          case "ceiling":\n            a = stack.pop();\n            stack.push(Math.ceil(a));\n            break;\n\n          case "copy":\n            a = stack.pop();\n            stack.copy(a);\n            break;\n\n          case "cos":\n            a = stack.pop();\n            stack.push(Math.cos(a));\n            break;\n\n          case "cvi":\n            a = stack.pop() | 0;\n            stack.push(a);\n            break;\n\n          case "cvr":\n            break;\n\n          case "div":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a / b);\n            break;\n\n          case "dup":\n            stack.copy(1);\n            break;\n\n          case "eq":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a === b);\n            break;\n\n          case "exch":\n            stack.roll(2, 1);\n            break;\n\n          case "exp":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a ** b);\n            break;\n\n          case "false":\n            stack.push(false);\n            break;\n\n          case "floor":\n            a = stack.pop();\n            stack.push(Math.floor(a));\n            break;\n\n          case "ge":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a >= b);\n            break;\n\n          case "gt":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a > b);\n            break;\n\n          case "idiv":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a / b | 0);\n            break;\n\n          case "index":\n            a = stack.pop();\n            stack.index(a);\n            break;\n\n          case "le":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a <= b);\n            break;\n\n          case "ln":\n            a = stack.pop();\n            stack.push(Math.log(a));\n            break;\n\n          case "log":\n            a = stack.pop();\n            stack.push(Math.log(a) / Math.LN10);\n            break;\n\n          case "lt":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a < b);\n            break;\n\n          case "mod":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a % b);\n            break;\n\n          case "mul":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a * b);\n            break;\n\n          case "ne":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a !== b);\n            break;\n\n          case "neg":\n            a = stack.pop();\n            stack.push(-a);\n            break;\n\n          case "not":\n            a = stack.pop();\n\n            if ((0, _util.isBool)(a)) {\n              stack.push(!a);\n            } else {\n              stack.push(~a);\n            }\n\n            break;\n\n          case "or":\n            b = stack.pop();\n            a = stack.pop();\n\n            if ((0, _util.isBool)(a) && (0, _util.isBool)(b)) {\n              stack.push(a || b);\n            } else {\n              stack.push(a | b);\n            }\n\n            break;\n\n          case "pop":\n            stack.pop();\n            break;\n\n          case "roll":\n            b = stack.pop();\n            a = stack.pop();\n            stack.roll(a, b);\n            break;\n\n          case "round":\n            a = stack.pop();\n            stack.push(Math.round(a));\n            break;\n\n          case "sin":\n            a = stack.pop();\n            stack.push(Math.sin(a));\n            break;\n\n          case "sqrt":\n            a = stack.pop();\n            stack.push(Math.sqrt(a));\n            break;\n\n          case "sub":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a - b);\n            break;\n\n          case "true":\n            stack.push(true);\n            break;\n\n          case "truncate":\n            a = stack.pop();\n            a = a < 0 ? Math.ceil(a) : Math.floor(a);\n            stack.push(a);\n            break;\n\n          case "xor":\n            b = stack.pop();\n            a = stack.pop();\n\n            if ((0, _util.isBool)(a) && (0, _util.isBool)(b)) {\n              stack.push(a !== b);\n            } else {\n              stack.push(a ^ b);\n            }\n\n            break;\n\n          default:\n            throw new _util.FormatError(`Unknown operator ${operator}`);\n        }\n      }\n\n      return stack.stack;\n    }\n  };\n  return PostScriptEvaluator;\n}();\n\nexports.PostScriptEvaluator = PostScriptEvaluator;\n\nvar PostScriptCompiler = function PostScriptCompilerClosure() {\n  function AstNode(type) {\n    this.type = type;\n  }\n\n  AstNode.prototype.visit = function (visitor) {\n    (0, _util.unreachable)("abstract method");\n  };\n\n  function AstArgument(index, min, max) {\n    AstNode.call(this, "args");\n    this.index = index;\n    this.min = min;\n    this.max = max;\n  }\n\n  AstArgument.prototype = Object.create(AstNode.prototype);\n\n  AstArgument.prototype.visit = function (visitor) {\n    visitor.visitArgument(this);\n  };\n\n  function AstLiteral(number) {\n    AstNode.call(this, "literal");\n    this.number = number;\n    this.min = number;\n    this.max = number;\n  }\n\n  AstLiteral.prototype = Object.create(AstNode.prototype);\n\n  AstLiteral.prototype.visit = function (visitor) {\n    visitor.visitLiteral(this);\n  };\n\n  function AstBinaryOperation(op, arg1, arg2, min, max) {\n    AstNode.call(this, "binary");\n    this.op = op;\n    this.arg1 = arg1;\n    this.arg2 = arg2;\n    this.min = min;\n    this.max = max;\n  }\n\n  AstBinaryOperation.prototype = Object.create(AstNode.prototype);\n\n  AstBinaryOperation.prototype.visit = function (visitor) {\n    visitor.visitBinaryOperation(this);\n  };\n\n  function AstMin(arg, max) {\n    AstNode.call(this, "max");\n    this.arg = arg;\n    this.min = arg.min;\n    this.max = max;\n  }\n\n  AstMin.prototype = Object.create(AstNode.prototype);\n\n  AstMin.prototype.visit = function (visitor) {\n    visitor.visitMin(this);\n  };\n\n  function AstVariable(index, min, max) {\n    AstNode.call(this, "var");\n    this.index = index;\n    this.min = min;\n    this.max = max;\n  }\n\n  AstVariable.prototype = Object.create(AstNode.prototype);\n\n  AstVariable.prototype.visit = function (visitor) {\n    visitor.visitVariable(this);\n  };\n\n  function AstVariableDefinition(variable, arg) {\n    AstNode.call(this, "definition");\n    this.variable = variable;\n    this.arg = arg;\n  }\n\n  AstVariableDefinition.prototype = Object.create(AstNode.prototype);\n\n  AstVariableDefinition.prototype.visit = function (visitor) {\n    visitor.visitVariableDefinition(this);\n  };\n\n  function ExpressionBuilderVisitor() {\n    this.parts = [];\n  }\n\n  ExpressionBuilderVisitor.prototype = {\n    visitArgument(arg) {\n      this.parts.push("Math.max(", arg.min, ", Math.min(", arg.max, ", src[srcOffset + ", arg.index, "]))");\n    },\n\n    visitVariable(variable) {\n      this.parts.push("v", variable.index);\n    },\n\n    visitLiteral(literal) {\n      this.parts.push(literal.number);\n    },\n\n    visitBinaryOperation(operation) {\n      this.parts.push("(");\n      operation.arg1.visit(this);\n      this.parts.push(" ", operation.op, " ");\n      operation.arg2.visit(this);\n      this.parts.push(")");\n    },\n\n    visitVariableDefinition(definition) {\n      this.parts.push("var ");\n      definition.variable.visit(this);\n      this.parts.push(" = ");\n      definition.arg.visit(this);\n      this.parts.push(";");\n    },\n\n    visitMin(max) {\n      this.parts.push("Math.min(");\n      max.arg.visit(this);\n      this.parts.push(", ", max.max, ")");\n    },\n\n    toString() {\n      return this.parts.join("");\n    }\n\n  };\n\n  function buildAddOperation(num1, num2) {\n    if (num2.type === "literal" && num2.number === 0) {\n      return num1;\n    }\n\n    if (num1.type === "literal" && num1.number === 0) {\n      return num2;\n    }\n\n    if (num2.type === "literal" && num1.type === "literal") {\n      return new AstLiteral(num1.number + num2.number);\n    }\n\n    return new AstBinaryOperation("+", num1, num2, num1.min + num2.min, num1.max + num2.max);\n  }\n\n  function buildMulOperation(num1, num2) {\n    if (num2.type === "literal") {\n      if (num2.number === 0) {\n        return new AstLiteral(0);\n      } else if (num2.number === 1) {\n        return num1;\n      } else if (num1.type === "literal") {\n        return new AstLiteral(num1.number * num2.number);\n      }\n    }\n\n    if (num1.type === "literal") {\n      if (num1.number === 0) {\n        return new AstLiteral(0);\n      } else if (num1.number === 1) {\n        return num2;\n      }\n    }\n\n    var min = Math.min(num1.min * num2.min, num1.min * num2.max, num1.max * num2.min, num1.max * num2.max);\n    var max = Math.max(num1.min * num2.min, num1.min * num2.max, num1.max * num2.min, num1.max * num2.max);\n    return new AstBinaryOperation("*", num1, num2, min, max);\n  }\n\n  function buildSubOperation(num1, num2) {\n    if (num2.type === "literal") {\n      if (num2.number === 0) {\n        return num1;\n      } else if (num1.type === "literal") {\n        return new AstLiteral(num1.number - num2.number);\n      }\n    }\n\n    if (num2.type === "binary" && num2.op === "-" && num1.type === "literal" && num1.number === 1 && num2.arg1.type === "literal" && num2.arg1.number === 1) {\n      return num2.arg2;\n    }\n\n    return new AstBinaryOperation("-", num1, num2, num1.min - num2.max, num1.max - num2.min);\n  }\n\n  function buildMinOperation(num1, max) {\n    if (num1.min >= max) {\n      return new AstLiteral(max);\n    } else if (num1.max <= max) {\n      return num1;\n    }\n\n    return new AstMin(num1, max);\n  }\n\n  function PostScriptCompiler() {}\n\n  PostScriptCompiler.prototype = {\n    compile: function PostScriptCompiler_compile(code, domain, range) {\n      var stack = [];\n      var instructions = [];\n      var inputSize = domain.length >> 1,\n          outputSize = range.length >> 1;\n      var lastRegister = 0;\n      var n, j;\n      var num1, num2, ast1, ast2, tmpVar, item;\n\n      for (let i = 0; i < inputSize; i++) {\n        stack.push(new AstArgument(i, domain[i * 2], domain[i * 2 + 1]));\n      }\n\n      for (let i = 0, ii = code.length; i < ii; i++) {\n        item = code[i];\n\n        if (typeof item === "number") {\n          stack.push(new AstLiteral(item));\n          continue;\n        }\n\n        switch (item) {\n          case "add":\n            if (stack.length < 2) {\n              return null;\n            }\n\n            num2 = stack.pop();\n            num1 = stack.pop();\n            stack.push(buildAddOperation(num1, num2));\n            break;\n\n          case "cvr":\n            if (stack.length < 1) {\n              return null;\n            }\n\n            break;\n\n          case "mul":\n            if (stack.length < 2) {\n              return null;\n            }\n\n            num2 = stack.pop();\n            num1 = stack.pop();\n            stack.push(buildMulOperation(num1, num2));\n            break;\n\n          case "sub":\n            if (stack.length < 2) {\n              return null;\n            }\n\n            num2 = stack.pop();\n            num1 = stack.pop();\n            stack.push(buildSubOperation(num1, num2));\n            break;\n\n          case "exch":\n            if (stack.length < 2) {\n              return null;\n            }\n\n            ast1 = stack.pop();\n            ast2 = stack.pop();\n            stack.push(ast1, ast2);\n            break;\n\n          case "pop":\n            if (stack.length < 1) {\n              return null;\n            }\n\n            stack.pop();\n            break;\n\n          case "index":\n            if (stack.length < 1) {\n              return null;\n            }\n\n            num1 = stack.pop();\n\n            if (num1.type !== "literal") {\n              return null;\n            }\n\n            n = num1.number;\n\n            if (n < 0 || !Number.isInteger(n) || stack.length < n) {\n              return null;\n            }\n\n            ast1 = stack[stack.length - n - 1];\n\n            if (ast1.type === "literal" || ast1.type === "var") {\n              stack.push(ast1);\n              break;\n            }\n\n            tmpVar = new AstVariable(lastRegister++, ast1.min, ast1.max);\n            stack[stack.length - n - 1] = tmpVar;\n            stack.push(tmpVar);\n            instructions.push(new AstVariableDefinition(tmpVar, ast1));\n            break;\n\n          case "dup":\n            if (stack.length < 1) {\n              return null;\n            }\n\n            if (typeof code[i + 1] === "number" && code[i + 2] === "gt" && code[i + 3] === i + 7 && code[i + 4] === "jz" && code[i + 5] === "pop" && code[i + 6] === code[i + 1]) {\n              num1 = stack.pop();\n              stack.push(buildMinOperation(num1, code[i + 1]));\n              i += 6;\n              break;\n            }\n\n            ast1 = stack[stack.length - 1];\n\n            if (ast1.type === "literal" || ast1.type === "var") {\n              stack.push(ast1);\n              break;\n            }\n\n            tmpVar = new AstVariable(lastRegister++, ast1.min, ast1.max);\n            stack[stack.length - 1] = tmpVar;\n            stack.push(tmpVar);\n            instructions.push(new AstVariableDefinition(tmpVar, ast1));\n            break;\n\n          case "roll":\n            if (stack.length < 2) {\n              return null;\n            }\n\n            num2 = stack.pop();\n            num1 = stack.pop();\n\n            if (num2.type !== "literal" || num1.type !== "literal") {\n              return null;\n            }\n\n            j = num2.number;\n            n = num1.number;\n\n            if (n <= 0 || !Number.isInteger(n) || !Number.isInteger(j) || stack.length < n) {\n              return null;\n            }\n\n            j = (j % n + n) % n;\n\n            if (j === 0) {\n              break;\n            }\n\n            Array.prototype.push.apply(stack, stack.splice(stack.length - n, n - j));\n            break;\n\n          default:\n            return null;\n        }\n      }\n\n      if (stack.length !== outputSize) {\n        return null;\n      }\n\n      var result = [];\n      instructions.forEach(function (instruction) {\n        var statementBuilder = new ExpressionBuilderVisitor();\n        instruction.visit(statementBuilder);\n        result.push(statementBuilder.toString());\n      });\n      stack.forEach(function (expr, i) {\n        var statementBuilder = new ExpressionBuilderVisitor();\n        expr.visit(statementBuilder);\n        var min = range[i * 2],\n            max = range[i * 2 + 1];\n        var out = [statementBuilder.toString()];\n\n        if (min > expr.min) {\n          out.unshift("Math.max(", min, ", ");\n          out.push(")");\n        }\n\n        if (max < expr.max) {\n          out.unshift("Math.min(", max, ", ");\n          out.push(")");\n        }\n\n        out.unshift("dest[destOffset + ", i, "] = ");\n        out.push(";");\n        result.push(out.join(""));\n      });\n      return result.join("\\n");\n    }\n  };\n  return PostScriptCompiler;\n}();\n\nexports.PostScriptCompiler = PostScriptCompiler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/function.js\n')},"./node_modules/pdfjs-dist/lib/core/glyphlist.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.getGlyphsUnicode = exports.getDingbatsGlyphsUnicode = void 0;\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nvar getGlyphsUnicode = (0, _core_utils.getArrayLookupTableFactory)(function () {\n  return ["A", 0x0041, "AE", 0x00c6, "AEacute", 0x01fc, "AEmacron", 0x01e2, "AEsmall", 0xf7e6, "Aacute", 0x00c1, "Aacutesmall", 0xf7e1, "Abreve", 0x0102, "Abreveacute", 0x1eae, "Abrevecyrillic", 0x04d0, "Abrevedotbelow", 0x1eb6, "Abrevegrave", 0x1eb0, "Abrevehookabove", 0x1eb2, "Abrevetilde", 0x1eb4, "Acaron", 0x01cd, "Acircle", 0x24b6, "Acircumflex", 0x00c2, "Acircumflexacute", 0x1ea4, "Acircumflexdotbelow", 0x1eac, "Acircumflexgrave", 0x1ea6, "Acircumflexhookabove", 0x1ea8, "Acircumflexsmall", 0xf7e2, "Acircumflextilde", 0x1eaa, "Acute", 0xf6c9, "Acutesmall", 0xf7b4, "Acyrillic", 0x0410, "Adblgrave", 0x0200, "Adieresis", 0x00c4, "Adieresiscyrillic", 0x04d2, "Adieresismacron", 0x01de, "Adieresissmall", 0xf7e4, "Adotbelow", 0x1ea0, "Adotmacron", 0x01e0, "Agrave", 0x00c0, "Agravesmall", 0xf7e0, "Ahookabove", 0x1ea2, "Aiecyrillic", 0x04d4, "Ainvertedbreve", 0x0202, "Alpha", 0x0391, "Alphatonos", 0x0386, "Amacron", 0x0100, "Amonospace", 0xff21, "Aogonek", 0x0104, "Aring", 0x00c5, "Aringacute", 0x01fa, "Aringbelow", 0x1e00, "Aringsmall", 0xf7e5, "Asmall", 0xf761, "Atilde", 0x00c3, "Atildesmall", 0xf7e3, "Aybarmenian", 0x0531, "B", 0x0042, "Bcircle", 0x24b7, "Bdotaccent", 0x1e02, "Bdotbelow", 0x1e04, "Becyrillic", 0x0411, "Benarmenian", 0x0532, "Beta", 0x0392, "Bhook", 0x0181, "Blinebelow", 0x1e06, "Bmonospace", 0xff22, "Brevesmall", 0xf6f4, "Bsmall", 0xf762, "Btopbar", 0x0182, "C", 0x0043, "Caarmenian", 0x053e, "Cacute", 0x0106, "Caron", 0xf6ca, "Caronsmall", 0xf6f5, "Ccaron", 0x010c, "Ccedilla", 0x00c7, "Ccedillaacute", 0x1e08, "Ccedillasmall", 0xf7e7, "Ccircle", 0x24b8, "Ccircumflex", 0x0108, "Cdot", 0x010a, "Cdotaccent", 0x010a, "Cedillasmall", 0xf7b8, "Chaarmenian", 0x0549, "Cheabkhasiancyrillic", 0x04bc, "Checyrillic", 0x0427, "Chedescenderabkhasiancyrillic", 0x04be, "Chedescendercyrillic", 0x04b6, "Chedieresiscyrillic", 0x04f4, "Cheharmenian", 0x0543, "Chekhakassiancyrillic", 0x04cb, "Cheverticalstrokecyrillic", 0x04b8, "Chi", 0x03a7, "Chook", 0x0187, "Circumflexsmall", 0xf6f6, "Cmonospace", 0xff23, "Coarmenian", 0x0551, "Csmall", 0xf763, "D", 0x0044, "DZ", 0x01f1, "DZcaron", 0x01c4, "Daarmenian", 0x0534, "Dafrican", 0x0189, "Dcaron", 0x010e, "Dcedilla", 0x1e10, "Dcircle", 0x24b9, "Dcircumflexbelow", 0x1e12, "Dcroat", 0x0110, "Ddotaccent", 0x1e0a, "Ddotbelow", 0x1e0c, "Decyrillic", 0x0414, "Deicoptic", 0x03ee, "Delta", 0x2206, "Deltagreek", 0x0394, "Dhook", 0x018a, "Dieresis", 0xf6cb, "DieresisAcute", 0xf6cc, "DieresisGrave", 0xf6cd, "Dieresissmall", 0xf7a8, "Digammagreek", 0x03dc, "Djecyrillic", 0x0402, "Dlinebelow", 0x1e0e, "Dmonospace", 0xff24, "Dotaccentsmall", 0xf6f7, "Dslash", 0x0110, "Dsmall", 0xf764, "Dtopbar", 0x018b, "Dz", 0x01f2, "Dzcaron", 0x01c5, "Dzeabkhasiancyrillic", 0x04e0, "Dzecyrillic", 0x0405, "Dzhecyrillic", 0x040f, "E", 0x0045, "Eacute", 0x00c9, "Eacutesmall", 0xf7e9, "Ebreve", 0x0114, "Ecaron", 0x011a, "Ecedillabreve", 0x1e1c, "Echarmenian", 0x0535, "Ecircle", 0x24ba, "Ecircumflex", 0x00ca, "Ecircumflexacute", 0x1ebe, "Ecircumflexbelow", 0x1e18, "Ecircumflexdotbelow", 0x1ec6, "Ecircumflexgrave", 0x1ec0, "Ecircumflexhookabove", 0x1ec2, "Ecircumflexsmall", 0xf7ea, "Ecircumflextilde", 0x1ec4, "Ecyrillic", 0x0404, "Edblgrave", 0x0204, "Edieresis", 0x00cb, "Edieresissmall", 0xf7eb, "Edot", 0x0116, "Edotaccent", 0x0116, "Edotbelow", 0x1eb8, "Efcyrillic", 0x0424, "Egrave", 0x00c8, "Egravesmall", 0xf7e8, "Eharmenian", 0x0537, "Ehookabove", 0x1eba, "Eightroman", 0x2167, "Einvertedbreve", 0x0206, "Eiotifiedcyrillic", 0x0464, "Elcyrillic", 0x041b, "Elevenroman", 0x216a, "Emacron", 0x0112, "Emacronacute", 0x1e16, "Emacrongrave", 0x1e14, "Emcyrillic", 0x041c, "Emonospace", 0xff25, "Encyrillic", 0x041d, "Endescendercyrillic", 0x04a2, "Eng", 0x014a, "Enghecyrillic", 0x04a4, "Enhookcyrillic", 0x04c7, "Eogonek", 0x0118, "Eopen", 0x0190, "Epsilon", 0x0395, "Epsilontonos", 0x0388, "Ercyrillic", 0x0420, "Ereversed", 0x018e, "Ereversedcyrillic", 0x042d, "Escyrillic", 0x0421, "Esdescendercyrillic", 0x04aa, "Esh", 0x01a9, "Esmall", 0xf765, "Eta", 0x0397, "Etarmenian", 0x0538, "Etatonos", 0x0389, "Eth", 0x00d0, "Ethsmall", 0xf7f0, "Etilde", 0x1ebc, "Etildebelow", 0x1e1a, "Euro", 0x20ac, "Ezh", 0x01b7, "Ezhcaron", 0x01ee, "Ezhreversed", 0x01b8, "F", 0x0046, "Fcircle", 0x24bb, "Fdotaccent", 0x1e1e, "Feharmenian", 0x0556, "Feicoptic", 0x03e4, "Fhook", 0x0191, "Fitacyrillic", 0x0472, "Fiveroman", 0x2164, "Fmonospace", 0xff26, "Fourroman", 0x2163, "Fsmall", 0xf766, "G", 0x0047, "GBsquare", 0x3387, "Gacute", 0x01f4, "Gamma", 0x0393, "Gammaafrican", 0x0194, "Gangiacoptic", 0x03ea, "Gbreve", 0x011e, "Gcaron", 0x01e6, "Gcedilla", 0x0122, "Gcircle", 0x24bc, "Gcircumflex", 0x011c, "Gcommaaccent", 0x0122, "Gdot", 0x0120, "Gdotaccent", 0x0120, "Gecyrillic", 0x0413, "Ghadarmenian", 0x0542, "Ghemiddlehookcyrillic", 0x0494, "Ghestrokecyrillic", 0x0492, "Gheupturncyrillic", 0x0490, "Ghook", 0x0193, "Gimarmenian", 0x0533, "Gjecyrillic", 0x0403, "Gmacron", 0x1e20, "Gmonospace", 0xff27, "Grave", 0xf6ce, "Gravesmall", 0xf760, "Gsmall", 0xf767, "Gsmallhook", 0x029b, "Gstroke", 0x01e4, "H", 0x0048, "H18533", 0x25cf, "H18543", 0x25aa, "H18551", 0x25ab, "H22073", 0x25a1, "HPsquare", 0x33cb, "Haabkhasiancyrillic", 0x04a8, "Hadescendercyrillic", 0x04b2, "Hardsigncyrillic", 0x042a, "Hbar", 0x0126, "Hbrevebelow", 0x1e2a, "Hcedilla", 0x1e28, "Hcircle", 0x24bd, "Hcircumflex", 0x0124, "Hdieresis", 0x1e26, "Hdotaccent", 0x1e22, "Hdotbelow", 0x1e24, "Hmonospace", 0xff28, "Hoarmenian", 0x0540, "Horicoptic", 0x03e8, "Hsmall", 0xf768, "Hungarumlaut", 0xf6cf, "Hungarumlautsmall", 0xf6f8, "Hzsquare", 0x3390, "I", 0x0049, "IAcyrillic", 0x042f, "IJ", 0x0132, "IUcyrillic", 0x042e, "Iacute", 0x00cd, "Iacutesmall", 0xf7ed, "Ibreve", 0x012c, "Icaron", 0x01cf, "Icircle", 0x24be, "Icircumflex", 0x00ce, "Icircumflexsmall", 0xf7ee, "Icyrillic", 0x0406, "Idblgrave", 0x0208, "Idieresis", 0x00cf, "Idieresisacute", 0x1e2e, "Idieresiscyrillic", 0x04e4, "Idieresissmall", 0xf7ef, "Idot", 0x0130, "Idotaccent", 0x0130, "Idotbelow", 0x1eca, "Iebrevecyrillic", 0x04d6, "Iecyrillic", 0x0415, "Ifraktur", 0x2111, "Igrave", 0x00cc, "Igravesmall", 0xf7ec, "Ihookabove", 0x1ec8, "Iicyrillic", 0x0418, "Iinvertedbreve", 0x020a, "Iishortcyrillic", 0x0419, "Imacron", 0x012a, "Imacroncyrillic", 0x04e2, "Imonospace", 0xff29, "Iniarmenian", 0x053b, "Iocyrillic", 0x0401, "Iogonek", 0x012e, "Iota", 0x0399, "Iotaafrican", 0x0196, "Iotadieresis", 0x03aa, "Iotatonos", 0x038a, "Ismall", 0xf769, "Istroke", 0x0197, "Itilde", 0x0128, "Itildebelow", 0x1e2c, "Izhitsacyrillic", 0x0474, "Izhitsadblgravecyrillic", 0x0476, "J", 0x004a, "Jaarmenian", 0x0541, "Jcircle", 0x24bf, "Jcircumflex", 0x0134, "Jecyrillic", 0x0408, "Jheharmenian", 0x054b, "Jmonospace", 0xff2a, "Jsmall", 0xf76a, "K", 0x004b, "KBsquare", 0x3385, "KKsquare", 0x33cd, "Kabashkircyrillic", 0x04a0, "Kacute", 0x1e30, "Kacyrillic", 0x041a, "Kadescendercyrillic", 0x049a, "Kahookcyrillic", 0x04c3, "Kappa", 0x039a, "Kastrokecyrillic", 0x049e, "Kaverticalstrokecyrillic", 0x049c, "Kcaron", 0x01e8, "Kcedilla", 0x0136, "Kcircle", 0x24c0, "Kcommaaccent", 0x0136, "Kdotbelow", 0x1e32, "Keharmenian", 0x0554, "Kenarmenian", 0x053f, "Khacyrillic", 0x0425, "Kheicoptic", 0x03e6, "Khook", 0x0198, "Kjecyrillic", 0x040c, "Klinebelow", 0x1e34, "Kmonospace", 0xff2b, "Koppacyrillic", 0x0480, "Koppagreek", 0x03de, "Ksicyrillic", 0x046e, "Ksmall", 0xf76b, "L", 0x004c, "LJ", 0x01c7, "LL", 0xf6bf, "Lacute", 0x0139, "Lambda", 0x039b, "Lcaron", 0x013d, "Lcedilla", 0x013b, "Lcircle", 0x24c1, "Lcircumflexbelow", 0x1e3c, "Lcommaaccent", 0x013b, "Ldot", 0x013f, "Ldotaccent", 0x013f, "Ldotbelow", 0x1e36, "Ldotbelowmacron", 0x1e38, "Liwnarmenian", 0x053c, "Lj", 0x01c8, "Ljecyrillic", 0x0409, "Llinebelow", 0x1e3a, "Lmonospace", 0xff2c, "Lslash", 0x0141, "Lslashsmall", 0xf6f9, "Lsmall", 0xf76c, "M", 0x004d, "MBsquare", 0x3386, "Macron", 0xf6d0, "Macronsmall", 0xf7af, "Macute", 0x1e3e, "Mcircle", 0x24c2, "Mdotaccent", 0x1e40, "Mdotbelow", 0x1e42, "Menarmenian", 0x0544, "Mmonospace", 0xff2d, "Msmall", 0xf76d, "Mturned", 0x019c, "Mu", 0x039c, "N", 0x004e, "NJ", 0x01ca, "Nacute", 0x0143, "Ncaron", 0x0147, "Ncedilla", 0x0145, "Ncircle", 0x24c3, "Ncircumflexbelow", 0x1e4a, "Ncommaaccent", 0x0145, "Ndotaccent", 0x1e44, "Ndotbelow", 0x1e46, "Nhookleft", 0x019d, "Nineroman", 0x2168, "Nj", 0x01cb, "Njecyrillic", 0x040a, "Nlinebelow", 0x1e48, "Nmonospace", 0xff2e, "Nowarmenian", 0x0546, "Nsmall", 0xf76e, "Ntilde", 0x00d1, "Ntildesmall", 0xf7f1, "Nu", 0x039d, "O", 0x004f, "OE", 0x0152, "OEsmall", 0xf6fa, "Oacute", 0x00d3, "Oacutesmall", 0xf7f3, "Obarredcyrillic", 0x04e8, "Obarreddieresiscyrillic", 0x04ea, "Obreve", 0x014e, "Ocaron", 0x01d1, "Ocenteredtilde", 0x019f, "Ocircle", 0x24c4, "Ocircumflex", 0x00d4, "Ocircumflexacute", 0x1ed0, "Ocircumflexdotbelow", 0x1ed8, "Ocircumflexgrave", 0x1ed2, "Ocircumflexhookabove", 0x1ed4, "Ocircumflexsmall", 0xf7f4, "Ocircumflextilde", 0x1ed6, "Ocyrillic", 0x041e, "Odblacute", 0x0150, "Odblgrave", 0x020c, "Odieresis", 0x00d6, "Odieresiscyrillic", 0x04e6, "Odieresissmall", 0xf7f6, "Odotbelow", 0x1ecc, "Ogoneksmall", 0xf6fb, "Ograve", 0x00d2, "Ogravesmall", 0xf7f2, "Oharmenian", 0x0555, "Ohm", 0x2126, "Ohookabove", 0x1ece, "Ohorn", 0x01a0, "Ohornacute", 0x1eda, "Ohorndotbelow", 0x1ee2, "Ohorngrave", 0x1edc, "Ohornhookabove", 0x1ede, "Ohorntilde", 0x1ee0, "Ohungarumlaut", 0x0150, "Oi", 0x01a2, "Oinvertedbreve", 0x020e, "Omacron", 0x014c, "Omacronacute", 0x1e52, "Omacrongrave", 0x1e50, "Omega", 0x2126, "Omegacyrillic", 0x0460, "Omegagreek", 0x03a9, "Omegaroundcyrillic", 0x047a, "Omegatitlocyrillic", 0x047c, "Omegatonos", 0x038f, "Omicron", 0x039f, "Omicrontonos", 0x038c, "Omonospace", 0xff2f, "Oneroman", 0x2160, "Oogonek", 0x01ea, "Oogonekmacron", 0x01ec, "Oopen", 0x0186, "Oslash", 0x00d8, "Oslashacute", 0x01fe, "Oslashsmall", 0xf7f8, "Osmall", 0xf76f, "Ostrokeacute", 0x01fe, "Otcyrillic", 0x047e, "Otilde", 0x00d5, "Otildeacute", 0x1e4c, "Otildedieresis", 0x1e4e, "Otildesmall", 0xf7f5, "P", 0x0050, "Pacute", 0x1e54, "Pcircle", 0x24c5, "Pdotaccent", 0x1e56, "Pecyrillic", 0x041f, "Peharmenian", 0x054a, "Pemiddlehookcyrillic", 0x04a6, "Phi", 0x03a6, "Phook", 0x01a4, "Pi", 0x03a0, "Piwrarmenian", 0x0553, "Pmonospace", 0xff30, "Psi", 0x03a8, "Psicyrillic", 0x0470, "Psmall", 0xf770, "Q", 0x0051, "Qcircle", 0x24c6, "Qmonospace", 0xff31, "Qsmall", 0xf771, "R", 0x0052, "Raarmenian", 0x054c, "Racute", 0x0154, "Rcaron", 0x0158, "Rcedilla", 0x0156, "Rcircle", 0x24c7, "Rcommaaccent", 0x0156, "Rdblgrave", 0x0210, "Rdotaccent", 0x1e58, "Rdotbelow", 0x1e5a, "Rdotbelowmacron", 0x1e5c, "Reharmenian", 0x0550, "Rfraktur", 0x211c, "Rho", 0x03a1, "Ringsmall", 0xf6fc, "Rinvertedbreve", 0x0212, "Rlinebelow", 0x1e5e, "Rmonospace", 0xff32, "Rsmall", 0xf772, "Rsmallinverted", 0x0281, "Rsmallinvertedsuperior", 0x02b6, "S", 0x0053, "SF010000", 0x250c, "SF020000", 0x2514, "SF030000", 0x2510, "SF040000", 0x2518, "SF050000", 0x253c, "SF060000", 0x252c, "SF070000", 0x2534, "SF080000", 0x251c, "SF090000", 0x2524, "SF100000", 0x2500, "SF110000", 0x2502, "SF190000", 0x2561, "SF200000", 0x2562, "SF210000", 0x2556, "SF220000", 0x2555, "SF230000", 0x2563, "SF240000", 0x2551, "SF250000", 0x2557, "SF260000", 0x255d, "SF270000", 0x255c, "SF280000", 0x255b, "SF360000", 0x255e, "SF370000", 0x255f, "SF380000", 0x255a, "SF390000", 0x2554, "SF400000", 0x2569, "SF410000", 0x2566, "SF420000", 0x2560, "SF430000", 0x2550, "SF440000", 0x256c, "SF450000", 0x2567, "SF460000", 0x2568, "SF470000", 0x2564, "SF480000", 0x2565, "SF490000", 0x2559, "SF500000", 0x2558, "SF510000", 0x2552, "SF520000", 0x2553, "SF530000", 0x256b, "SF540000", 0x256a, "Sacute", 0x015a, "Sacutedotaccent", 0x1e64, "Sampigreek", 0x03e0, "Scaron", 0x0160, "Scarondotaccent", 0x1e66, "Scaronsmall", 0xf6fd, "Scedilla", 0x015e, "Schwa", 0x018f, "Schwacyrillic", 0x04d8, "Schwadieresiscyrillic", 0x04da, "Scircle", 0x24c8, "Scircumflex", 0x015c, "Scommaaccent", 0x0218, "Sdotaccent", 0x1e60, "Sdotbelow", 0x1e62, "Sdotbelowdotaccent", 0x1e68, "Seharmenian", 0x054d, "Sevenroman", 0x2166, "Shaarmenian", 0x0547, "Shacyrillic", 0x0428, "Shchacyrillic", 0x0429, "Sheicoptic", 0x03e2, "Shhacyrillic", 0x04ba, "Shimacoptic", 0x03ec, "Sigma", 0x03a3, "Sixroman", 0x2165, "Smonospace", 0xff33, "Softsigncyrillic", 0x042c, "Ssmall", 0xf773, "Stigmagreek", 0x03da, "T", 0x0054, "Tau", 0x03a4, "Tbar", 0x0166, "Tcaron", 0x0164, "Tcedilla", 0x0162, "Tcircle", 0x24c9, "Tcircumflexbelow", 0x1e70, "Tcommaaccent", 0x0162, "Tdotaccent", 0x1e6a, "Tdotbelow", 0x1e6c, "Tecyrillic", 0x0422, "Tedescendercyrillic", 0x04ac, "Tenroman", 0x2169, "Tetsecyrillic", 0x04b4, "Theta", 0x0398, "Thook", 0x01ac, "Thorn", 0x00de, "Thornsmall", 0xf7fe, "Threeroman", 0x2162, "Tildesmall", 0xf6fe, "Tiwnarmenian", 0x054f, "Tlinebelow", 0x1e6e, "Tmonospace", 0xff34, "Toarmenian", 0x0539, "Tonefive", 0x01bc, "Tonesix", 0x0184, "Tonetwo", 0x01a7, "Tretroflexhook", 0x01ae, "Tsecyrillic", 0x0426, "Tshecyrillic", 0x040b, "Tsmall", 0xf774, "Twelveroman", 0x216b, "Tworoman", 0x2161, "U", 0x0055, "Uacute", 0x00da, "Uacutesmall", 0xf7fa, "Ubreve", 0x016c, "Ucaron", 0x01d3, "Ucircle", 0x24ca, "Ucircumflex", 0x00db, "Ucircumflexbelow", 0x1e76, "Ucircumflexsmall", 0xf7fb, "Ucyrillic", 0x0423, "Udblacute", 0x0170, "Udblgrave", 0x0214, "Udieresis", 0x00dc, "Udieresisacute", 0x01d7, "Udieresisbelow", 0x1e72, "Udieresiscaron", 0x01d9, "Udieresiscyrillic", 0x04f0, "Udieresisgrave", 0x01db, "Udieresismacron", 0x01d5, "Udieresissmall", 0xf7fc, "Udotbelow", 0x1ee4, "Ugrave", 0x00d9, "Ugravesmall", 0xf7f9, "Uhookabove", 0x1ee6, "Uhorn", 0x01af, "Uhornacute", 0x1ee8, "Uhorndotbelow", 0x1ef0, "Uhorngrave", 0x1eea, "Uhornhookabove", 0x1eec, "Uhorntilde", 0x1eee, "Uhungarumlaut", 0x0170, "Uhungarumlautcyrillic", 0x04f2, "Uinvertedbreve", 0x0216, "Ukcyrillic", 0x0478, "Umacron", 0x016a, "Umacroncyrillic", 0x04ee, "Umacrondieresis", 0x1e7a, "Umonospace", 0xff35, "Uogonek", 0x0172, "Upsilon", 0x03a5, "Upsilon1", 0x03d2, "Upsilonacutehooksymbolgreek", 0x03d3, "Upsilonafrican", 0x01b1, "Upsilondieresis", 0x03ab, "Upsilondieresishooksymbolgreek", 0x03d4, "Upsilonhooksymbol", 0x03d2, "Upsilontonos", 0x038e, "Uring", 0x016e, "Ushortcyrillic", 0x040e, "Usmall", 0xf775, "Ustraightcyrillic", 0x04ae, "Ustraightstrokecyrillic", 0x04b0, "Utilde", 0x0168, "Utildeacute", 0x1e78, "Utildebelow", 0x1e74, "V", 0x0056, "Vcircle", 0x24cb, "Vdotbelow", 0x1e7e, "Vecyrillic", 0x0412, "Vewarmenian", 0x054e, "Vhook", 0x01b2, "Vmonospace", 0xff36, "Voarmenian", 0x0548, "Vsmall", 0xf776, "Vtilde", 0x1e7c, "W", 0x0057, "Wacute", 0x1e82, "Wcircle", 0x24cc, "Wcircumflex", 0x0174, "Wdieresis", 0x1e84, "Wdotaccent", 0x1e86, "Wdotbelow", 0x1e88, "Wgrave", 0x1e80, "Wmonospace", 0xff37, "Wsmall", 0xf777, "X", 0x0058, "Xcircle", 0x24cd, "Xdieresis", 0x1e8c, "Xdotaccent", 0x1e8a, "Xeharmenian", 0x053d, "Xi", 0x039e, "Xmonospace", 0xff38, "Xsmall", 0xf778, "Y", 0x0059, "Yacute", 0x00dd, "Yacutesmall", 0xf7fd, "Yatcyrillic", 0x0462, "Ycircle", 0x24ce, "Ycircumflex", 0x0176, "Ydieresis", 0x0178, "Ydieresissmall", 0xf7ff, "Ydotaccent", 0x1e8e, "Ydotbelow", 0x1ef4, "Yericyrillic", 0x042b, "Yerudieresiscyrillic", 0x04f8, "Ygrave", 0x1ef2, "Yhook", 0x01b3, "Yhookabove", 0x1ef6, "Yiarmenian", 0x0545, "Yicyrillic", 0x0407, "Yiwnarmenian", 0x0552, "Ymonospace", 0xff39, "Ysmall", 0xf779, "Ytilde", 0x1ef8, "Yusbigcyrillic", 0x046a, "Yusbigiotifiedcyrillic", 0x046c, "Yuslittlecyrillic", 0x0466, "Yuslittleiotifiedcyrillic", 0x0468, "Z", 0x005a, "Zaarmenian", 0x0536, "Zacute", 0x0179, "Zcaron", 0x017d, "Zcaronsmall", 0xf6ff, "Zcircle", 0x24cf, "Zcircumflex", 0x1e90, "Zdot", 0x017b, "Zdotaccent", 0x017b, "Zdotbelow", 0x1e92, "Zecyrillic", 0x0417, "Zedescendercyrillic", 0x0498, "Zedieresiscyrillic", 0x04de, "Zeta", 0x0396, "Zhearmenian", 0x053a, "Zhebrevecyrillic", 0x04c1, "Zhecyrillic", 0x0416, "Zhedescendercyrillic", 0x0496, "Zhedieresiscyrillic", 0x04dc, "Zlinebelow", 0x1e94, "Zmonospace", 0xff3a, "Zsmall", 0xf77a, "Zstroke", 0x01b5, "a", 0x0061, "aabengali", 0x0986, "aacute", 0x00e1, "aadeva", 0x0906, "aagujarati", 0x0a86, "aagurmukhi", 0x0a06, "aamatragurmukhi", 0x0a3e, "aarusquare", 0x3303, "aavowelsignbengali", 0x09be, "aavowelsigndeva", 0x093e, "aavowelsigngujarati", 0x0abe, "abbreviationmarkarmenian", 0x055f, "abbreviationsigndeva", 0x0970, "abengali", 0x0985, "abopomofo", 0x311a, "abreve", 0x0103, "abreveacute", 0x1eaf, "abrevecyrillic", 0x04d1, "abrevedotbelow", 0x1eb7, "abrevegrave", 0x1eb1, "abrevehookabove", 0x1eb3, "abrevetilde", 0x1eb5, "acaron", 0x01ce, "acircle", 0x24d0, "acircumflex", 0x00e2, "acircumflexacute", 0x1ea5, "acircumflexdotbelow", 0x1ead, "acircumflexgrave", 0x1ea7, "acircumflexhookabove", 0x1ea9, "acircumflextilde", 0x1eab, "acute", 0x00b4, "acutebelowcmb", 0x0317, "acutecmb", 0x0301, "acutecomb", 0x0301, "acutedeva", 0x0954, "acutelowmod", 0x02cf, "acutetonecmb", 0x0341, "acyrillic", 0x0430, "adblgrave", 0x0201, "addakgurmukhi", 0x0a71, "adeva", 0x0905, "adieresis", 0x00e4, "adieresiscyrillic", 0x04d3, "adieresismacron", 0x01df, "adotbelow", 0x1ea1, "adotmacron", 0x01e1, "ae", 0x00e6, "aeacute", 0x01fd, "aekorean", 0x3150, "aemacron", 0x01e3, "afii00208", 0x2015, "afii08941", 0x20a4, "afii10017", 0x0410, "afii10018", 0x0411, "afii10019", 0x0412, "afii10020", 0x0413, "afii10021", 0x0414, "afii10022", 0x0415, "afii10023", 0x0401, "afii10024", 0x0416, "afii10025", 0x0417, "afii10026", 0x0418, "afii10027", 0x0419, "afii10028", 0x041a, "afii10029", 0x041b, "afii10030", 0x041c, "afii10031", 0x041d, "afii10032", 0x041e, "afii10033", 0x041f, "afii10034", 0x0420, "afii10035", 0x0421, "afii10036", 0x0422, "afii10037", 0x0423, "afii10038", 0x0424, "afii10039", 0x0425, "afii10040", 0x0426, "afii10041", 0x0427, "afii10042", 0x0428, "afii10043", 0x0429, "afii10044", 0x042a, "afii10045", 0x042b, "afii10046", 0x042c, "afii10047", 0x042d, "afii10048", 0x042e, "afii10049", 0x042f, "afii10050", 0x0490, "afii10051", 0x0402, "afii10052", 0x0403, "afii10053", 0x0404, "afii10054", 0x0405, "afii10055", 0x0406, "afii10056", 0x0407, "afii10057", 0x0408, "afii10058", 0x0409, "afii10059", 0x040a, "afii10060", 0x040b, "afii10061", 0x040c, "afii10062", 0x040e, "afii10063", 0xf6c4, "afii10064", 0xf6c5, "afii10065", 0x0430, "afii10066", 0x0431, "afii10067", 0x0432, "afii10068", 0x0433, "afii10069", 0x0434, "afii10070", 0x0435, "afii10071", 0x0451, "afii10072", 0x0436, "afii10073", 0x0437, "afii10074", 0x0438, "afii10075", 0x0439, "afii10076", 0x043a, "afii10077", 0x043b, "afii10078", 0x043c, "afii10079", 0x043d, "afii10080", 0x043e, "afii10081", 0x043f, "afii10082", 0x0440, "afii10083", 0x0441, "afii10084", 0x0442, "afii10085", 0x0443, "afii10086", 0x0444, "afii10087", 0x0445, "afii10088", 0x0446, "afii10089", 0x0447, "afii10090", 0x0448, "afii10091", 0x0449, "afii10092", 0x044a, "afii10093", 0x044b, "afii10094", 0x044c, "afii10095", 0x044d, "afii10096", 0x044e, "afii10097", 0x044f, "afii10098", 0x0491, "afii10099", 0x0452, "afii10100", 0x0453, "afii10101", 0x0454, "afii10102", 0x0455, "afii10103", 0x0456, "afii10104", 0x0457, "afii10105", 0x0458, "afii10106", 0x0459, "afii10107", 0x045a, "afii10108", 0x045b, "afii10109", 0x045c, "afii10110", 0x045e, "afii10145", 0x040f, "afii10146", 0x0462, "afii10147", 0x0472, "afii10148", 0x0474, "afii10192", 0xf6c6, "afii10193", 0x045f, "afii10194", 0x0463, "afii10195", 0x0473, "afii10196", 0x0475, "afii10831", 0xf6c7, "afii10832", 0xf6c8, "afii10846", 0x04d9, "afii299", 0x200e, "afii300", 0x200f, "afii301", 0x200d, "afii57381", 0x066a, "afii57388", 0x060c, "afii57392", 0x0660, "afii57393", 0x0661, "afii57394", 0x0662, "afii57395", 0x0663, "afii57396", 0x0664, "afii57397", 0x0665, "afii57398", 0x0666, "afii57399", 0x0667, "afii57400", 0x0668, "afii57401", 0x0669, "afii57403", 0x061b, "afii57407", 0x061f, "afii57409", 0x0621, "afii57410", 0x0622, "afii57411", 0x0623, "afii57412", 0x0624, "afii57413", 0x0625, "afii57414", 0x0626, "afii57415", 0x0627, "afii57416", 0x0628, "afii57417", 0x0629, "afii57418", 0x062a, "afii57419", 0x062b, "afii57420", 0x062c, "afii57421", 0x062d, "afii57422", 0x062e, "afii57423", 0x062f, "afii57424", 0x0630, "afii57425", 0x0631, "afii57426", 0x0632, "afii57427", 0x0633, "afii57428", 0x0634, "afii57429", 0x0635, "afii57430", 0x0636, "afii57431", 0x0637, "afii57432", 0x0638, "afii57433", 0x0639, "afii57434", 0x063a, "afii57440", 0x0640, "afii57441", 0x0641, "afii57442", 0x0642, "afii57443", 0x0643, "afii57444", 0x0644, "afii57445", 0x0645, "afii57446", 0x0646, "afii57448", 0x0648, "afii57449", 0x0649, "afii57450", 0x064a, "afii57451", 0x064b, "afii57452", 0x064c, "afii57453", 0x064d, "afii57454", 0x064e, "afii57455", 0x064f, "afii57456", 0x0650, "afii57457", 0x0651, "afii57458", 0x0652, "afii57470", 0x0647, "afii57505", 0x06a4, "afii57506", 0x067e, "afii57507", 0x0686, "afii57508", 0x0698, "afii57509", 0x06af, "afii57511", 0x0679, "afii57512", 0x0688, "afii57513", 0x0691, "afii57514", 0x06ba, "afii57519", 0x06d2, "afii57534", 0x06d5, "afii57636", 0x20aa, "afii57645", 0x05be, "afii57658", 0x05c3, "afii57664", 0x05d0, "afii57665", 0x05d1, "afii57666", 0x05d2, "afii57667", 0x05d3, "afii57668", 0x05d4, "afii57669", 0x05d5, "afii57670", 0x05d6, "afii57671", 0x05d7, "afii57672", 0x05d8, "afii57673", 0x05d9, "afii57674", 0x05da, "afii57675", 0x05db, "afii57676", 0x05dc, "afii57677", 0x05dd, "afii57678", 0x05de, "afii57679", 0x05df, "afii57680", 0x05e0, "afii57681", 0x05e1, "afii57682", 0x05e2, "afii57683", 0x05e3, "afii57684", 0x05e4, "afii57685", 0x05e5, "afii57686", 0x05e6, "afii57687", 0x05e7, "afii57688", 0x05e8, "afii57689", 0x05e9, "afii57690", 0x05ea, "afii57694", 0xfb2a, "afii57695", 0xfb2b, "afii57700", 0xfb4b, "afii57705", 0xfb1f, "afii57716", 0x05f0, "afii57717", 0x05f1, "afii57718", 0x05f2, "afii57723", 0xfb35, "afii57793", 0x05b4, "afii57794", 0x05b5, "afii57795", 0x05b6, "afii57796", 0x05bb, "afii57797", 0x05b8, "afii57798", 0x05b7, "afii57799", 0x05b0, "afii57800", 0x05b2, "afii57801", 0x05b1, "afii57802", 0x05b3, "afii57803", 0x05c2, "afii57804", 0x05c1, "afii57806", 0x05b9, "afii57807", 0x05bc, "afii57839", 0x05bd, "afii57841", 0x05bf, "afii57842", 0x05c0, "afii57929", 0x02bc, "afii61248", 0x2105, "afii61289", 0x2113, "afii61352", 0x2116, "afii61573", 0x202c, "afii61574", 0x202d, "afii61575", 0x202e, "afii61664", 0x200c, "afii63167", 0x066d, "afii64937", 0x02bd, "agrave", 0x00e0, "agujarati", 0x0a85, "agurmukhi", 0x0a05, "ahiragana", 0x3042, "ahookabove", 0x1ea3, "aibengali", 0x0990, "aibopomofo", 0x311e, "aideva", 0x0910, "aiecyrillic", 0x04d5, "aigujarati", 0x0a90, "aigurmukhi", 0x0a10, "aimatragurmukhi", 0x0a48, "ainarabic", 0x0639, "ainfinalarabic", 0xfeca, "aininitialarabic", 0xfecb, "ainmedialarabic", 0xfecc, "ainvertedbreve", 0x0203, "aivowelsignbengali", 0x09c8, "aivowelsigndeva", 0x0948, "aivowelsigngujarati", 0x0ac8, "akatakana", 0x30a2, "akatakanahalfwidth", 0xff71, "akorean", 0x314f, "alef", 0x05d0, "alefarabic", 0x0627, "alefdageshhebrew", 0xfb30, "aleffinalarabic", 0xfe8e, "alefhamzaabovearabic", 0x0623, "alefhamzaabovefinalarabic", 0xfe84, "alefhamzabelowarabic", 0x0625, "alefhamzabelowfinalarabic", 0xfe88, "alefhebrew", 0x05d0, "aleflamedhebrew", 0xfb4f, "alefmaddaabovearabic", 0x0622, "alefmaddaabovefinalarabic", 0xfe82, "alefmaksuraarabic", 0x0649, "alefmaksurafinalarabic", 0xfef0, "alefmaksurainitialarabic", 0xfef3, "alefmaksuramedialarabic", 0xfef4, "alefpatahhebrew", 0xfb2e, "alefqamatshebrew", 0xfb2f, "aleph", 0x2135, "allequal", 0x224c, "alpha", 0x03b1, "alphatonos", 0x03ac, "amacron", 0x0101, "amonospace", 0xff41, "ampersand", 0x0026, "ampersandmonospace", 0xff06, "ampersandsmall", 0xf726, "amsquare", 0x33c2, "anbopomofo", 0x3122, "angbopomofo", 0x3124, "angbracketleft", 0x3008, "angbracketright", 0x3009, "angkhankhuthai", 0x0e5a, "angle", 0x2220, "anglebracketleft", 0x3008, "anglebracketleftvertical", 0xfe3f, "anglebracketright", 0x3009, "anglebracketrightvertical", 0xfe40, "angleleft", 0x2329, "angleright", 0x232a, "angstrom", 0x212b, "anoteleia", 0x0387, "anudattadeva", 0x0952, "anusvarabengali", 0x0982, "anusvaradeva", 0x0902, "anusvaragujarati", 0x0a82, "aogonek", 0x0105, "apaatosquare", 0x3300, "aparen", 0x249c, "apostrophearmenian", 0x055a, "apostrophemod", 0x02bc, "apple", 0xf8ff, "approaches", 0x2250, "approxequal", 0x2248, "approxequalorimage", 0x2252, "approximatelyequal", 0x2245, "araeaekorean", 0x318e, "araeakorean", 0x318d, "arc", 0x2312, "arighthalfring", 0x1e9a, "aring", 0x00e5, "aringacute", 0x01fb, "aringbelow", 0x1e01, "arrowboth", 0x2194, "arrowdashdown", 0x21e3, "arrowdashleft", 0x21e0, "arrowdashright", 0x21e2, "arrowdashup", 0x21e1, "arrowdblboth", 0x21d4, "arrowdbldown", 0x21d3, "arrowdblleft", 0x21d0, "arrowdblright", 0x21d2, "arrowdblup", 0x21d1, "arrowdown", 0x2193, "arrowdownleft", 0x2199, "arrowdownright", 0x2198, "arrowdownwhite", 0x21e9, "arrowheaddownmod", 0x02c5, "arrowheadleftmod", 0x02c2, "arrowheadrightmod", 0x02c3, "arrowheadupmod", 0x02c4, "arrowhorizex", 0xf8e7, "arrowleft", 0x2190, "arrowleftdbl", 0x21d0, "arrowleftdblstroke", 0x21cd, "arrowleftoverright", 0x21c6, "arrowleftwhite", 0x21e6, "arrowright", 0x2192, "arrowrightdblstroke", 0x21cf, "arrowrightheavy", 0x279e, "arrowrightoverleft", 0x21c4, "arrowrightwhite", 0x21e8, "arrowtableft", 0x21e4, "arrowtabright", 0x21e5, "arrowup", 0x2191, "arrowupdn", 0x2195, "arrowupdnbse", 0x21a8, "arrowupdownbase", 0x21a8, "arrowupleft", 0x2196, "arrowupleftofdown", 0x21c5, "arrowupright", 0x2197, "arrowupwhite", 0x21e7, "arrowvertex", 0xf8e6, "asciicircum", 0x005e, "asciicircummonospace", 0xff3e, "asciitilde", 0x007e, "asciitildemonospace", 0xff5e, "ascript", 0x0251, "ascriptturned", 0x0252, "asmallhiragana", 0x3041, "asmallkatakana", 0x30a1, "asmallkatakanahalfwidth", 0xff67, "asterisk", 0x002a, "asteriskaltonearabic", 0x066d, "asteriskarabic", 0x066d, "asteriskmath", 0x2217, "asteriskmonospace", 0xff0a, "asterisksmall", 0xfe61, "asterism", 0x2042, "asuperior", 0xf6e9, "asymptoticallyequal", 0x2243, "at", 0x0040, "atilde", 0x00e3, "atmonospace", 0xff20, "atsmall", 0xfe6b, "aturned", 0x0250, "aubengali", 0x0994, "aubopomofo", 0x3120, "audeva", 0x0914, "augujarati", 0x0a94, "augurmukhi", 0x0a14, "aulengthmarkbengali", 0x09d7, "aumatragurmukhi", 0x0a4c, "auvowelsignbengali", 0x09cc, "auvowelsigndeva", 0x094c, "auvowelsigngujarati", 0x0acc, "avagrahadeva", 0x093d, "aybarmenian", 0x0561, "ayin", 0x05e2, "ayinaltonehebrew", 0xfb20, "ayinhebrew", 0x05e2, "b", 0x0062, "babengali", 0x09ac, "backslash", 0x005c, "backslashmonospace", 0xff3c, "badeva", 0x092c, "bagujarati", 0x0aac, "bagurmukhi", 0x0a2c, "bahiragana", 0x3070, "bahtthai", 0x0e3f, "bakatakana", 0x30d0, "bar", 0x007c, "barmonospace", 0xff5c, "bbopomofo", 0x3105, "bcircle", 0x24d1, "bdotaccent", 0x1e03, "bdotbelow", 0x1e05, "beamedsixteenthnotes", 0x266c, "because", 0x2235, "becyrillic", 0x0431, "beharabic", 0x0628, "behfinalarabic", 0xfe90, "behinitialarabic", 0xfe91, "behiragana", 0x3079, "behmedialarabic", 0xfe92, "behmeeminitialarabic", 0xfc9f, "behmeemisolatedarabic", 0xfc08, "behnoonfinalarabic", 0xfc6d, "bekatakana", 0x30d9, "benarmenian", 0x0562, "bet", 0x05d1, "beta", 0x03b2, "betasymbolgreek", 0x03d0, "betdagesh", 0xfb31, "betdageshhebrew", 0xfb31, "bethebrew", 0x05d1, "betrafehebrew", 0xfb4c, "bhabengali", 0x09ad, "bhadeva", 0x092d, "bhagujarati", 0x0aad, "bhagurmukhi", 0x0a2d, "bhook", 0x0253, "bihiragana", 0x3073, "bikatakana", 0x30d3, "bilabialclick", 0x0298, "bindigurmukhi", 0x0a02, "birusquare", 0x3331, "blackcircle", 0x25cf, "blackdiamond", 0x25c6, "blackdownpointingtriangle", 0x25bc, "blackleftpointingpointer", 0x25c4, "blackleftpointingtriangle", 0x25c0, "blacklenticularbracketleft", 0x3010, "blacklenticularbracketleftvertical", 0xfe3b, "blacklenticularbracketright", 0x3011, "blacklenticularbracketrightvertical", 0xfe3c, "blacklowerlefttriangle", 0x25e3, "blacklowerrighttriangle", 0x25e2, "blackrectangle", 0x25ac, "blackrightpointingpointer", 0x25ba, "blackrightpointingtriangle", 0x25b6, "blacksmallsquare", 0x25aa, "blacksmilingface", 0x263b, "blacksquare", 0x25a0, "blackstar", 0x2605, "blackupperlefttriangle", 0x25e4, "blackupperrighttriangle", 0x25e5, "blackuppointingsmalltriangle", 0x25b4, "blackuppointingtriangle", 0x25b2, "blank", 0x2423, "blinebelow", 0x1e07, "block", 0x2588, "bmonospace", 0xff42, "bobaimaithai", 0x0e1a, "bohiragana", 0x307c, "bokatakana", 0x30dc, "bparen", 0x249d, "bqsquare", 0x33c3, "braceex", 0xf8f4, "braceleft", 0x007b, "braceleftbt", 0xf8f3, "braceleftmid", 0xf8f2, "braceleftmonospace", 0xff5b, "braceleftsmall", 0xfe5b, "bracelefttp", 0xf8f1, "braceleftvertical", 0xfe37, "braceright", 0x007d, "bracerightbt", 0xf8fe, "bracerightmid", 0xf8fd, "bracerightmonospace", 0xff5d, "bracerightsmall", 0xfe5c, "bracerighttp", 0xf8fc, "bracerightvertical", 0xfe38, "bracketleft", 0x005b, "bracketleftbt", 0xf8f0, "bracketleftex", 0xf8ef, "bracketleftmonospace", 0xff3b, "bracketlefttp", 0xf8ee, "bracketright", 0x005d, "bracketrightbt", 0xf8fb, "bracketrightex", 0xf8fa, "bracketrightmonospace", 0xff3d, "bracketrighttp", 0xf8f9, "breve", 0x02d8, "brevebelowcmb", 0x032e, "brevecmb", 0x0306, "breveinvertedbelowcmb", 0x032f, "breveinvertedcmb", 0x0311, "breveinverteddoublecmb", 0x0361, "bridgebelowcmb", 0x032a, "bridgeinvertedbelowcmb", 0x033a, "brokenbar", 0x00a6, "bstroke", 0x0180, "bsuperior", 0xf6ea, "btopbar", 0x0183, "buhiragana", 0x3076, "bukatakana", 0x30d6, "bullet", 0x2022, "bulletinverse", 0x25d8, "bulletoperator", 0x2219, "bullseye", 0x25ce, "c", 0x0063, "caarmenian", 0x056e, "cabengali", 0x099a, "cacute", 0x0107, "cadeva", 0x091a, "cagujarati", 0x0a9a, "cagurmukhi", 0x0a1a, "calsquare", 0x3388, "candrabindubengali", 0x0981, "candrabinducmb", 0x0310, "candrabindudeva", 0x0901, "candrabindugujarati", 0x0a81, "capslock", 0x21ea, "careof", 0x2105, "caron", 0x02c7, "caronbelowcmb", 0x032c, "caroncmb", 0x030c, "carriagereturn", 0x21b5, "cbopomofo", 0x3118, "ccaron", 0x010d, "ccedilla", 0x00e7, "ccedillaacute", 0x1e09, "ccircle", 0x24d2, "ccircumflex", 0x0109, "ccurl", 0x0255, "cdot", 0x010b, "cdotaccent", 0x010b, "cdsquare", 0x33c5, "cedilla", 0x00b8, "cedillacmb", 0x0327, "cent", 0x00a2, "centigrade", 0x2103, "centinferior", 0xf6df, "centmonospace", 0xffe0, "centoldstyle", 0xf7a2, "centsuperior", 0xf6e0, "chaarmenian", 0x0579, "chabengali", 0x099b, "chadeva", 0x091b, "chagujarati", 0x0a9b, "chagurmukhi", 0x0a1b, "chbopomofo", 0x3114, "cheabkhasiancyrillic", 0x04bd, "checkmark", 0x2713, "checyrillic", 0x0447, "chedescenderabkhasiancyrillic", 0x04bf, "chedescendercyrillic", 0x04b7, "chedieresiscyrillic", 0x04f5, "cheharmenian", 0x0573, "chekhakassiancyrillic", 0x04cc, "cheverticalstrokecyrillic", 0x04b9, "chi", 0x03c7, "chieuchacirclekorean", 0x3277, "chieuchaparenkorean", 0x3217, "chieuchcirclekorean", 0x3269, "chieuchkorean", 0x314a, "chieuchparenkorean", 0x3209, "chochangthai", 0x0e0a, "chochanthai", 0x0e08, "chochingthai", 0x0e09, "chochoethai", 0x0e0c, "chook", 0x0188, "cieucacirclekorean", 0x3276, "cieucaparenkorean", 0x3216, "cieuccirclekorean", 0x3268, "cieuckorean", 0x3148, "cieucparenkorean", 0x3208, "cieucuparenkorean", 0x321c, "circle", 0x25cb, "circlecopyrt", 0x00a9, "circlemultiply", 0x2297, "circleot", 0x2299, "circleplus", 0x2295, "circlepostalmark", 0x3036, "circlewithlefthalfblack", 0x25d0, "circlewithrighthalfblack", 0x25d1, "circumflex", 0x02c6, "circumflexbelowcmb", 0x032d, "circumflexcmb", 0x0302, "clear", 0x2327, "clickalveolar", 0x01c2, "clickdental", 0x01c0, "clicklateral", 0x01c1, "clickretroflex", 0x01c3, "club", 0x2663, "clubsuitblack", 0x2663, "clubsuitwhite", 0x2667, "cmcubedsquare", 0x33a4, "cmonospace", 0xff43, "cmsquaredsquare", 0x33a0, "coarmenian", 0x0581, "colon", 0x003a, "colonmonetary", 0x20a1, "colonmonospace", 0xff1a, "colonsign", 0x20a1, "colonsmall", 0xfe55, "colontriangularhalfmod", 0x02d1, "colontriangularmod", 0x02d0, "comma", 0x002c, "commaabovecmb", 0x0313, "commaaboverightcmb", 0x0315, "commaaccent", 0xf6c3, "commaarabic", 0x060c, "commaarmenian", 0x055d, "commainferior", 0xf6e1, "commamonospace", 0xff0c, "commareversedabovecmb", 0x0314, "commareversedmod", 0x02bd, "commasmall", 0xfe50, "commasuperior", 0xf6e2, "commaturnedabovecmb", 0x0312, "commaturnedmod", 0x02bb, "compass", 0x263c, "congruent", 0x2245, "contourintegral", 0x222e, "control", 0x2303, "controlACK", 0x0006, "controlBEL", 0x0007, "controlBS", 0x0008, "controlCAN", 0x0018, "controlCR", 0x000d, "controlDC1", 0x0011, "controlDC2", 0x0012, "controlDC3", 0x0013, "controlDC4", 0x0014, "controlDEL", 0x007f, "controlDLE", 0x0010, "controlEM", 0x0019, "controlENQ", 0x0005, "controlEOT", 0x0004, "controlESC", 0x001b, "controlETB", 0x0017, "controlETX", 0x0003, "controlFF", 0x000c, "controlFS", 0x001c, "controlGS", 0x001d, "controlHT", 0x0009, "controlLF", 0x000a, "controlNAK", 0x0015, "controlNULL", 0x0000, "controlRS", 0x001e, "controlSI", 0x000f, "controlSO", 0x000e, "controlSOT", 0x0002, "controlSTX", 0x0001, "controlSUB", 0x001a, "controlSYN", 0x0016, "controlUS", 0x001f, "controlVT", 0x000b, "copyright", 0x00a9, "copyrightsans", 0xf8e9, "copyrightserif", 0xf6d9, "cornerbracketleft", 0x300c, "cornerbracketlefthalfwidth", 0xff62, "cornerbracketleftvertical", 0xfe41, "cornerbracketright", 0x300d, "cornerbracketrighthalfwidth", 0xff63, "cornerbracketrightvertical", 0xfe42, "corporationsquare", 0x337f, "cosquare", 0x33c7, "coverkgsquare", 0x33c6, "cparen", 0x249e, "cruzeiro", 0x20a2, "cstretched", 0x0297, "curlyand", 0x22cf, "curlyor", 0x22ce, "currency", 0x00a4, "cyrBreve", 0xf6d1, "cyrFlex", 0xf6d2, "cyrbreve", 0xf6d4, "cyrflex", 0xf6d5, "d", 0x0064, "daarmenian", 0x0564, "dabengali", 0x09a6, "dadarabic", 0x0636, "dadeva", 0x0926, "dadfinalarabic", 0xfebe, "dadinitialarabic", 0xfebf, "dadmedialarabic", 0xfec0, "dagesh", 0x05bc, "dageshhebrew", 0x05bc, "dagger", 0x2020, "daggerdbl", 0x2021, "dagujarati", 0x0aa6, "dagurmukhi", 0x0a26, "dahiragana", 0x3060, "dakatakana", 0x30c0, "dalarabic", 0x062f, "dalet", 0x05d3, "daletdagesh", 0xfb33, "daletdageshhebrew", 0xfb33, "dalethebrew", 0x05d3, "dalfinalarabic", 0xfeaa, "dammaarabic", 0x064f, "dammalowarabic", 0x064f, "dammatanaltonearabic", 0x064c, "dammatanarabic", 0x064c, "danda", 0x0964, "dargahebrew", 0x05a7, "dargalefthebrew", 0x05a7, "dasiapneumatacyrilliccmb", 0x0485, "dblGrave", 0xf6d3, "dblanglebracketleft", 0x300a, "dblanglebracketleftvertical", 0xfe3d, "dblanglebracketright", 0x300b, "dblanglebracketrightvertical", 0xfe3e, "dblarchinvertedbelowcmb", 0x032b, "dblarrowleft", 0x21d4, "dblarrowright", 0x21d2, "dbldanda", 0x0965, "dblgrave", 0xf6d6, "dblgravecmb", 0x030f, "dblintegral", 0x222c, "dbllowline", 0x2017, "dbllowlinecmb", 0x0333, "dbloverlinecmb", 0x033f, "dblprimemod", 0x02ba, "dblverticalbar", 0x2016, "dblverticallineabovecmb", 0x030e, "dbopomofo", 0x3109, "dbsquare", 0x33c8, "dcaron", 0x010f, "dcedilla", 0x1e11, "dcircle", 0x24d3, "dcircumflexbelow", 0x1e13, "dcroat", 0x0111, "ddabengali", 0x09a1, "ddadeva", 0x0921, "ddagujarati", 0x0aa1, "ddagurmukhi", 0x0a21, "ddalarabic", 0x0688, "ddalfinalarabic", 0xfb89, "dddhadeva", 0x095c, "ddhabengali", 0x09a2, "ddhadeva", 0x0922, "ddhagujarati", 0x0aa2, "ddhagurmukhi", 0x0a22, "ddotaccent", 0x1e0b, "ddotbelow", 0x1e0d, "decimalseparatorarabic", 0x066b, "decimalseparatorpersian", 0x066b, "decyrillic", 0x0434, "degree", 0x00b0, "dehihebrew", 0x05ad, "dehiragana", 0x3067, "deicoptic", 0x03ef, "dekatakana", 0x30c7, "deleteleft", 0x232b, "deleteright", 0x2326, "delta", 0x03b4, "deltaturned", 0x018d, "denominatorminusonenumeratorbengali", 0x09f8, "dezh", 0x02a4, "dhabengali", 0x09a7, "dhadeva", 0x0927, "dhagujarati", 0x0aa7, "dhagurmukhi", 0x0a27, "dhook", 0x0257, "dialytikatonos", 0x0385, "dialytikatonoscmb", 0x0344, "diamond", 0x2666, "diamondsuitwhite", 0x2662, "dieresis", 0x00a8, "dieresisacute", 0xf6d7, "dieresisbelowcmb", 0x0324, "dieresiscmb", 0x0308, "dieresisgrave", 0xf6d8, "dieresistonos", 0x0385, "dihiragana", 0x3062, "dikatakana", 0x30c2, "dittomark", 0x3003, "divide", 0x00f7, "divides", 0x2223, "divisionslash", 0x2215, "djecyrillic", 0x0452, "dkshade", 0x2593, "dlinebelow", 0x1e0f, "dlsquare", 0x3397, "dmacron", 0x0111, "dmonospace", 0xff44, "dnblock", 0x2584, "dochadathai", 0x0e0e, "dodekthai", 0x0e14, "dohiragana", 0x3069, "dokatakana", 0x30c9, "dollar", 0x0024, "dollarinferior", 0xf6e3, "dollarmonospace", 0xff04, "dollaroldstyle", 0xf724, "dollarsmall", 0xfe69, "dollarsuperior", 0xf6e4, "dong", 0x20ab, "dorusquare", 0x3326, "dotaccent", 0x02d9, "dotaccentcmb", 0x0307, "dotbelowcmb", 0x0323, "dotbelowcomb", 0x0323, "dotkatakana", 0x30fb, "dotlessi", 0x0131, "dotlessj", 0xf6be, "dotlessjstrokehook", 0x0284, "dotmath", 0x22c5, "dottedcircle", 0x25cc, "doubleyodpatah", 0xfb1f, "doubleyodpatahhebrew", 0xfb1f, "downtackbelowcmb", 0x031e, "downtackmod", 0x02d5, "dparen", 0x249f, "dsuperior", 0xf6eb, "dtail", 0x0256, "dtopbar", 0x018c, "duhiragana", 0x3065, "dukatakana", 0x30c5, "dz", 0x01f3, "dzaltone", 0x02a3, "dzcaron", 0x01c6, "dzcurl", 0x02a5, "dzeabkhasiancyrillic", 0x04e1, "dzecyrillic", 0x0455, "dzhecyrillic", 0x045f, "e", 0x0065, "eacute", 0x00e9, "earth", 0x2641, "ebengali", 0x098f, "ebopomofo", 0x311c, "ebreve", 0x0115, "ecandradeva", 0x090d, "ecandragujarati", 0x0a8d, "ecandravowelsigndeva", 0x0945, "ecandravowelsigngujarati", 0x0ac5, "ecaron", 0x011b, "ecedillabreve", 0x1e1d, "echarmenian", 0x0565, "echyiwnarmenian", 0x0587, "ecircle", 0x24d4, "ecircumflex", 0x00ea, "ecircumflexacute", 0x1ebf, "ecircumflexbelow", 0x1e19, "ecircumflexdotbelow", 0x1ec7, "ecircumflexgrave", 0x1ec1, "ecircumflexhookabove", 0x1ec3, "ecircumflextilde", 0x1ec5, "ecyrillic", 0x0454, "edblgrave", 0x0205, "edeva", 0x090f, "edieresis", 0x00eb, "edot", 0x0117, "edotaccent", 0x0117, "edotbelow", 0x1eb9, "eegurmukhi", 0x0a0f, "eematragurmukhi", 0x0a47, "efcyrillic", 0x0444, "egrave", 0x00e8, "egujarati", 0x0a8f, "eharmenian", 0x0567, "ehbopomofo", 0x311d, "ehiragana", 0x3048, "ehookabove", 0x1ebb, "eibopomofo", 0x311f, "eight", 0x0038, "eightarabic", 0x0668, "eightbengali", 0x09ee, "eightcircle", 0x2467, "eightcircleinversesansserif", 0x2791, "eightdeva", 0x096e, "eighteencircle", 0x2471, "eighteenparen", 0x2485, "eighteenperiod", 0x2499, "eightgujarati", 0x0aee, "eightgurmukhi", 0x0a6e, "eighthackarabic", 0x0668, "eighthangzhou", 0x3028, "eighthnotebeamed", 0x266b, "eightideographicparen", 0x3227, "eightinferior", 0x2088, "eightmonospace", 0xff18, "eightoldstyle", 0xf738, "eightparen", 0x247b, "eightperiod", 0x248f, "eightpersian", 0x06f8, "eightroman", 0x2177, "eightsuperior", 0x2078, "eightthai", 0x0e58, "einvertedbreve", 0x0207, "eiotifiedcyrillic", 0x0465, "ekatakana", 0x30a8, "ekatakanahalfwidth", 0xff74, "ekonkargurmukhi", 0x0a74, "ekorean", 0x3154, "elcyrillic", 0x043b, "element", 0x2208, "elevencircle", 0x246a, "elevenparen", 0x247e, "elevenperiod", 0x2492, "elevenroman", 0x217a, "ellipsis", 0x2026, "ellipsisvertical", 0x22ee, "emacron", 0x0113, "emacronacute", 0x1e17, "emacrongrave", 0x1e15, "emcyrillic", 0x043c, "emdash", 0x2014, "emdashvertical", 0xfe31, "emonospace", 0xff45, "emphasismarkarmenian", 0x055b, "emptyset", 0x2205, "enbopomofo", 0x3123, "encyrillic", 0x043d, "endash", 0x2013, "endashvertical", 0xfe32, "endescendercyrillic", 0x04a3, "eng", 0x014b, "engbopomofo", 0x3125, "enghecyrillic", 0x04a5, "enhookcyrillic", 0x04c8, "enspace", 0x2002, "eogonek", 0x0119, "eokorean", 0x3153, "eopen", 0x025b, "eopenclosed", 0x029a, "eopenreversed", 0x025c, "eopenreversedclosed", 0x025e, "eopenreversedhook", 0x025d, "eparen", 0x24a0, "epsilon", 0x03b5, "epsilontonos", 0x03ad, "equal", 0x003d, "equalmonospace", 0xff1d, "equalsmall", 0xfe66, "equalsuperior", 0x207c, "equivalence", 0x2261, "erbopomofo", 0x3126, "ercyrillic", 0x0440, "ereversed", 0x0258, "ereversedcyrillic", 0x044d, "escyrillic", 0x0441, "esdescendercyrillic", 0x04ab, "esh", 0x0283, "eshcurl", 0x0286, "eshortdeva", 0x090e, "eshortvowelsigndeva", 0x0946, "eshreversedloop", 0x01aa, "eshsquatreversed", 0x0285, "esmallhiragana", 0x3047, "esmallkatakana", 0x30a7, "esmallkatakanahalfwidth", 0xff6a, "estimated", 0x212e, "esuperior", 0xf6ec, "eta", 0x03b7, "etarmenian", 0x0568, "etatonos", 0x03ae, "eth", 0x00f0, "etilde", 0x1ebd, "etildebelow", 0x1e1b, "etnahtafoukhhebrew", 0x0591, "etnahtafoukhlefthebrew", 0x0591, "etnahtahebrew", 0x0591, "etnahtalefthebrew", 0x0591, "eturned", 0x01dd, "eukorean", 0x3161, "euro", 0x20ac, "evowelsignbengali", 0x09c7, "evowelsigndeva", 0x0947, "evowelsigngujarati", 0x0ac7, "exclam", 0x0021, "exclamarmenian", 0x055c, "exclamdbl", 0x203c, "exclamdown", 0x00a1, "exclamdownsmall", 0xf7a1, "exclammonospace", 0xff01, "exclamsmall", 0xf721, "existential", 0x2203, "ezh", 0x0292, "ezhcaron", 0x01ef, "ezhcurl", 0x0293, "ezhreversed", 0x01b9, "ezhtail", 0x01ba, "f", 0x0066, "fadeva", 0x095e, "fagurmukhi", 0x0a5e, "fahrenheit", 0x2109, "fathaarabic", 0x064e, "fathalowarabic", 0x064e, "fathatanarabic", 0x064b, "fbopomofo", 0x3108, "fcircle", 0x24d5, "fdotaccent", 0x1e1f, "feharabic", 0x0641, "feharmenian", 0x0586, "fehfinalarabic", 0xfed2, "fehinitialarabic", 0xfed3, "fehmedialarabic", 0xfed4, "feicoptic", 0x03e5, "female", 0x2640, "ff", 0xfb00, "f_f", 0xfb00, "ffi", 0xfb03, "ffl", 0xfb04, "fi", 0xfb01, "fifteencircle", 0x246e, "fifteenparen", 0x2482, "fifteenperiod", 0x2496, "figuredash", 0x2012, "filledbox", 0x25a0, "filledrect", 0x25ac, "finalkaf", 0x05da, "finalkafdagesh", 0xfb3a, "finalkafdageshhebrew", 0xfb3a, "finalkafhebrew", 0x05da, "finalmem", 0x05dd, "finalmemhebrew", 0x05dd, "finalnun", 0x05df, "finalnunhebrew", 0x05df, "finalpe", 0x05e3, "finalpehebrew", 0x05e3, "finaltsadi", 0x05e5, "finaltsadihebrew", 0x05e5, "firsttonechinese", 0x02c9, "fisheye", 0x25c9, "fitacyrillic", 0x0473, "five", 0x0035, "fivearabic", 0x0665, "fivebengali", 0x09eb, "fivecircle", 0x2464, "fivecircleinversesansserif", 0x278e, "fivedeva", 0x096b, "fiveeighths", 0x215d, "fivegujarati", 0x0aeb, "fivegurmukhi", 0x0a6b, "fivehackarabic", 0x0665, "fivehangzhou", 0x3025, "fiveideographicparen", 0x3224, "fiveinferior", 0x2085, "fivemonospace", 0xff15, "fiveoldstyle", 0xf735, "fiveparen", 0x2478, "fiveperiod", 0x248c, "fivepersian", 0x06f5, "fiveroman", 0x2174, "fivesuperior", 0x2075, "fivethai", 0x0e55, "fl", 0xfb02, "florin", 0x0192, "fmonospace", 0xff46, "fmsquare", 0x3399, "fofanthai", 0x0e1f, "fofathai", 0x0e1d, "fongmanthai", 0x0e4f, "forall", 0x2200, "four", 0x0034, "fourarabic", 0x0664, "fourbengali", 0x09ea, "fourcircle", 0x2463, "fourcircleinversesansserif", 0x278d, "fourdeva", 0x096a, "fourgujarati", 0x0aea, "fourgurmukhi", 0x0a6a, "fourhackarabic", 0x0664, "fourhangzhou", 0x3024, "fourideographicparen", 0x3223, "fourinferior", 0x2084, "fourmonospace", 0xff14, "fournumeratorbengali", 0x09f7, "fouroldstyle", 0xf734, "fourparen", 0x2477, "fourperiod", 0x248b, "fourpersian", 0x06f4, "fourroman", 0x2173, "foursuperior", 0x2074, "fourteencircle", 0x246d, "fourteenparen", 0x2481, "fourteenperiod", 0x2495, "fourthai", 0x0e54, "fourthtonechinese", 0x02cb, "fparen", 0x24a1, "fraction", 0x2044, "franc", 0x20a3, "g", 0x0067, "gabengali", 0x0997, "gacute", 0x01f5, "gadeva", 0x0917, "gafarabic", 0x06af, "gaffinalarabic", 0xfb93, "gafinitialarabic", 0xfb94, "gafmedialarabic", 0xfb95, "gagujarati", 0x0a97, "gagurmukhi", 0x0a17, "gahiragana", 0x304c, "gakatakana", 0x30ac, "gamma", 0x03b3, "gammalatinsmall", 0x0263, "gammasuperior", 0x02e0, "gangiacoptic", 0x03eb, "gbopomofo", 0x310d, "gbreve", 0x011f, "gcaron", 0x01e7, "gcedilla", 0x0123, "gcircle", 0x24d6, "gcircumflex", 0x011d, "gcommaaccent", 0x0123, "gdot", 0x0121, "gdotaccent", 0x0121, "gecyrillic", 0x0433, "gehiragana", 0x3052, "gekatakana", 0x30b2, "geometricallyequal", 0x2251, "gereshaccenthebrew", 0x059c, "gereshhebrew", 0x05f3, "gereshmuqdamhebrew", 0x059d, "germandbls", 0x00df, "gershayimaccenthebrew", 0x059e, "gershayimhebrew", 0x05f4, "getamark", 0x3013, "ghabengali", 0x0998, "ghadarmenian", 0x0572, "ghadeva", 0x0918, "ghagujarati", 0x0a98, "ghagurmukhi", 0x0a18, "ghainarabic", 0x063a, "ghainfinalarabic", 0xfece, "ghaininitialarabic", 0xfecf, "ghainmedialarabic", 0xfed0, "ghemiddlehookcyrillic", 0x0495, "ghestrokecyrillic", 0x0493, "gheupturncyrillic", 0x0491, "ghhadeva", 0x095a, "ghhagurmukhi", 0x0a5a, "ghook", 0x0260, "ghzsquare", 0x3393, "gihiragana", 0x304e, "gikatakana", 0x30ae, "gimarmenian", 0x0563, "gimel", 0x05d2, "gimeldagesh", 0xfb32, "gimeldageshhebrew", 0xfb32, "gimelhebrew", 0x05d2, "gjecyrillic", 0x0453, "glottalinvertedstroke", 0x01be, "glottalstop", 0x0294, "glottalstopinverted", 0x0296, "glottalstopmod", 0x02c0, "glottalstopreversed", 0x0295, "glottalstopreversedmod", 0x02c1, "glottalstopreversedsuperior", 0x02e4, "glottalstopstroke", 0x02a1, "glottalstopstrokereversed", 0x02a2, "gmacron", 0x1e21, "gmonospace", 0xff47, "gohiragana", 0x3054, "gokatakana", 0x30b4, "gparen", 0x24a2, "gpasquare", 0x33ac, "gradient", 0x2207, "grave", 0x0060, "gravebelowcmb", 0x0316, "gravecmb", 0x0300, "gravecomb", 0x0300, "gravedeva", 0x0953, "gravelowmod", 0x02ce, "gravemonospace", 0xff40, "gravetonecmb", 0x0340, "greater", 0x003e, "greaterequal", 0x2265, "greaterequalorless", 0x22db, "greatermonospace", 0xff1e, "greaterorequivalent", 0x2273, "greaterorless", 0x2277, "greateroverequal", 0x2267, "greatersmall", 0xfe65, "gscript", 0x0261, "gstroke", 0x01e5, "guhiragana", 0x3050, "guillemotleft", 0x00ab, "guillemotright", 0x00bb, "guilsinglleft", 0x2039, "guilsinglright", 0x203a, "gukatakana", 0x30b0, "guramusquare", 0x3318, "gysquare", 0x33c9, "h", 0x0068, "haabkhasiancyrillic", 0x04a9, "haaltonearabic", 0x06c1, "habengali", 0x09b9, "hadescendercyrillic", 0x04b3, "hadeva", 0x0939, "hagujarati", 0x0ab9, "hagurmukhi", 0x0a39, "haharabic", 0x062d, "hahfinalarabic", 0xfea2, "hahinitialarabic", 0xfea3, "hahiragana", 0x306f, "hahmedialarabic", 0xfea4, "haitusquare", 0x332a, "hakatakana", 0x30cf, "hakatakanahalfwidth", 0xff8a, "halantgurmukhi", 0x0a4d, "hamzaarabic", 0x0621, "hamzalowarabic", 0x0621, "hangulfiller", 0x3164, "hardsigncyrillic", 0x044a, "harpoonleftbarbup", 0x21bc, "harpoonrightbarbup", 0x21c0, "hasquare", 0x33ca, "hatafpatah", 0x05b2, "hatafpatah16", 0x05b2, "hatafpatah23", 0x05b2, "hatafpatah2f", 0x05b2, "hatafpatahhebrew", 0x05b2, "hatafpatahnarrowhebrew", 0x05b2, "hatafpatahquarterhebrew", 0x05b2, "hatafpatahwidehebrew", 0x05b2, "hatafqamats", 0x05b3, "hatafqamats1b", 0x05b3, "hatafqamats28", 0x05b3, "hatafqamats34", 0x05b3, "hatafqamatshebrew", 0x05b3, "hatafqamatsnarrowhebrew", 0x05b3, "hatafqamatsquarterhebrew", 0x05b3, "hatafqamatswidehebrew", 0x05b3, "hatafsegol", 0x05b1, "hatafsegol17", 0x05b1, "hatafsegol24", 0x05b1, "hatafsegol30", 0x05b1, "hatafsegolhebrew", 0x05b1, "hatafsegolnarrowhebrew", 0x05b1, "hatafsegolquarterhebrew", 0x05b1, "hatafsegolwidehebrew", 0x05b1, "hbar", 0x0127, "hbopomofo", 0x310f, "hbrevebelow", 0x1e2b, "hcedilla", 0x1e29, "hcircle", 0x24d7, "hcircumflex", 0x0125, "hdieresis", 0x1e27, "hdotaccent", 0x1e23, "hdotbelow", 0x1e25, "he", 0x05d4, "heart", 0x2665, "heartsuitblack", 0x2665, "heartsuitwhite", 0x2661, "hedagesh", 0xfb34, "hedageshhebrew", 0xfb34, "hehaltonearabic", 0x06c1, "heharabic", 0x0647, "hehebrew", 0x05d4, "hehfinalaltonearabic", 0xfba7, "hehfinalalttwoarabic", 0xfeea, "hehfinalarabic", 0xfeea, "hehhamzaabovefinalarabic", 0xfba5, "hehhamzaaboveisolatedarabic", 0xfba4, "hehinitialaltonearabic", 0xfba8, "hehinitialarabic", 0xfeeb, "hehiragana", 0x3078, "hehmedialaltonearabic", 0xfba9, "hehmedialarabic", 0xfeec, "heiseierasquare", 0x337b, "hekatakana", 0x30d8, "hekatakanahalfwidth", 0xff8d, "hekutaarusquare", 0x3336, "henghook", 0x0267, "herutusquare", 0x3339, "het", 0x05d7, "hethebrew", 0x05d7, "hhook", 0x0266, "hhooksuperior", 0x02b1, "hieuhacirclekorean", 0x327b, "hieuhaparenkorean", 0x321b, "hieuhcirclekorean", 0x326d, "hieuhkorean", 0x314e, "hieuhparenkorean", 0x320d, "hihiragana", 0x3072, "hikatakana", 0x30d2, "hikatakanahalfwidth", 0xff8b, "hiriq", 0x05b4, "hiriq14", 0x05b4, "hiriq21", 0x05b4, "hiriq2d", 0x05b4, "hiriqhebrew", 0x05b4, "hiriqnarrowhebrew", 0x05b4, "hiriqquarterhebrew", 0x05b4, "hiriqwidehebrew", 0x05b4, "hlinebelow", 0x1e96, "hmonospace", 0xff48, "hoarmenian", 0x0570, "hohipthai", 0x0e2b, "hohiragana", 0x307b, "hokatakana", 0x30db, "hokatakanahalfwidth", 0xff8e, "holam", 0x05b9, "holam19", 0x05b9, "holam26", 0x05b9, "holam32", 0x05b9, "holamhebrew", 0x05b9, "holamnarrowhebrew", 0x05b9, "holamquarterhebrew", 0x05b9, "holamwidehebrew", 0x05b9, "honokhukthai", 0x0e2e, "hookabovecomb", 0x0309, "hookcmb", 0x0309, "hookpalatalizedbelowcmb", 0x0321, "hookretroflexbelowcmb", 0x0322, "hoonsquare", 0x3342, "horicoptic", 0x03e9, "horizontalbar", 0x2015, "horncmb", 0x031b, "hotsprings", 0x2668, "house", 0x2302, "hparen", 0x24a3, "hsuperior", 0x02b0, "hturned", 0x0265, "huhiragana", 0x3075, "huiitosquare", 0x3333, "hukatakana", 0x30d5, "hukatakanahalfwidth", 0xff8c, "hungarumlaut", 0x02dd, "hungarumlautcmb", 0x030b, "hv", 0x0195, "hyphen", 0x002d, "hypheninferior", 0xf6e5, "hyphenmonospace", 0xff0d, "hyphensmall", 0xfe63, "hyphensuperior", 0xf6e6, "hyphentwo", 0x2010, "i", 0x0069, "iacute", 0x00ed, "iacyrillic", 0x044f, "ibengali", 0x0987, "ibopomofo", 0x3127, "ibreve", 0x012d, "icaron", 0x01d0, "icircle", 0x24d8, "icircumflex", 0x00ee, "icyrillic", 0x0456, "idblgrave", 0x0209, "ideographearthcircle", 0x328f, "ideographfirecircle", 0x328b, "ideographicallianceparen", 0x323f, "ideographiccallparen", 0x323a, "ideographiccentrecircle", 0x32a5, "ideographicclose", 0x3006, "ideographiccomma", 0x3001, "ideographiccommaleft", 0xff64, "ideographiccongratulationparen", 0x3237, "ideographiccorrectcircle", 0x32a3, "ideographicearthparen", 0x322f, "ideographicenterpriseparen", 0x323d, "ideographicexcellentcircle", 0x329d, "ideographicfestivalparen", 0x3240, "ideographicfinancialcircle", 0x3296, "ideographicfinancialparen", 0x3236, "ideographicfireparen", 0x322b, "ideographichaveparen", 0x3232, "ideographichighcircle", 0x32a4, "ideographiciterationmark", 0x3005, "ideographiclaborcircle", 0x3298, "ideographiclaborparen", 0x3238, "ideographicleftcircle", 0x32a7, "ideographiclowcircle", 0x32a6, "ideographicmedicinecircle", 0x32a9, "ideographicmetalparen", 0x322e, "ideographicmoonparen", 0x322a, "ideographicnameparen", 0x3234, "ideographicperiod", 0x3002, "ideographicprintcircle", 0x329e, "ideographicreachparen", 0x3243, "ideographicrepresentparen", 0x3239, "ideographicresourceparen", 0x323e, "ideographicrightcircle", 0x32a8, "ideographicsecretcircle", 0x3299, "ideographicselfparen", 0x3242, "ideographicsocietyparen", 0x3233, "ideographicspace", 0x3000, "ideographicspecialparen", 0x3235, "ideographicstockparen", 0x3231, "ideographicstudyparen", 0x323b, "ideographicsunparen", 0x3230, "ideographicsuperviseparen", 0x323c, "ideographicwaterparen", 0x322c, "ideographicwoodparen", 0x322d, "ideographiczero", 0x3007, "ideographmetalcircle", 0x328e, "ideographmooncircle", 0x328a, "ideographnamecircle", 0x3294, "ideographsuncircle", 0x3290, "ideographwatercircle", 0x328c, "ideographwoodcircle", 0x328d, "ideva", 0x0907, "idieresis", 0x00ef, "idieresisacute", 0x1e2f, "idieresiscyrillic", 0x04e5, "idotbelow", 0x1ecb, "iebrevecyrillic", 0x04d7, "iecyrillic", 0x0435, "ieungacirclekorean", 0x3275, "ieungaparenkorean", 0x3215, "ieungcirclekorean", 0x3267, "ieungkorean", 0x3147, "ieungparenkorean", 0x3207, "igrave", 0x00ec, "igujarati", 0x0a87, "igurmukhi", 0x0a07, "ihiragana", 0x3044, "ihookabove", 0x1ec9, "iibengali", 0x0988, "iicyrillic", 0x0438, "iideva", 0x0908, "iigujarati", 0x0a88, "iigurmukhi", 0x0a08, "iimatragurmukhi", 0x0a40, "iinvertedbreve", 0x020b, "iishortcyrillic", 0x0439, "iivowelsignbengali", 0x09c0, "iivowelsigndeva", 0x0940, "iivowelsigngujarati", 0x0ac0, "ij", 0x0133, "ikatakana", 0x30a4, "ikatakanahalfwidth", 0xff72, "ikorean", 0x3163, "ilde", 0x02dc, "iluyhebrew", 0x05ac, "imacron", 0x012b, "imacroncyrillic", 0x04e3, "imageorapproximatelyequal", 0x2253, "imatragurmukhi", 0x0a3f, "imonospace", 0xff49, "increment", 0x2206, "infinity", 0x221e, "iniarmenian", 0x056b, "integral", 0x222b, "integralbottom", 0x2321, "integralbt", 0x2321, "integralex", 0xf8f5, "integraltop", 0x2320, "integraltp", 0x2320, "intersection", 0x2229, "intisquare", 0x3305, "invbullet", 0x25d8, "invcircle", 0x25d9, "invsmileface", 0x263b, "iocyrillic", 0x0451, "iogonek", 0x012f, "iota", 0x03b9, "iotadieresis", 0x03ca, "iotadieresistonos", 0x0390, "iotalatin", 0x0269, "iotatonos", 0x03af, "iparen", 0x24a4, "irigurmukhi", 0x0a72, "ismallhiragana", 0x3043, "ismallkatakana", 0x30a3, "ismallkatakanahalfwidth", 0xff68, "issharbengali", 0x09fa, "istroke", 0x0268, "isuperior", 0xf6ed, "iterationhiragana", 0x309d, "iterationkatakana", 0x30fd, "itilde", 0x0129, "itildebelow", 0x1e2d, "iubopomofo", 0x3129, "iucyrillic", 0x044e, "ivowelsignbengali", 0x09bf, "ivowelsigndeva", 0x093f, "ivowelsigngujarati", 0x0abf, "izhitsacyrillic", 0x0475, "izhitsadblgravecyrillic", 0x0477, "j", 0x006a, "jaarmenian", 0x0571, "jabengali", 0x099c, "jadeva", 0x091c, "jagujarati", 0x0a9c, "jagurmukhi", 0x0a1c, "jbopomofo", 0x3110, "jcaron", 0x01f0, "jcircle", 0x24d9, "jcircumflex", 0x0135, "jcrossedtail", 0x029d, "jdotlessstroke", 0x025f, "jecyrillic", 0x0458, "jeemarabic", 0x062c, "jeemfinalarabic", 0xfe9e, "jeeminitialarabic", 0xfe9f, "jeemmedialarabic", 0xfea0, "jeharabic", 0x0698, "jehfinalarabic", 0xfb8b, "jhabengali", 0x099d, "jhadeva", 0x091d, "jhagujarati", 0x0a9d, "jhagurmukhi", 0x0a1d, "jheharmenian", 0x057b, "jis", 0x3004, "jmonospace", 0xff4a, "jparen", 0x24a5, "jsuperior", 0x02b2, "k", 0x006b, "kabashkircyrillic", 0x04a1, "kabengali", 0x0995, "kacute", 0x1e31, "kacyrillic", 0x043a, "kadescendercyrillic", 0x049b, "kadeva", 0x0915, "kaf", 0x05db, "kafarabic", 0x0643, "kafdagesh", 0xfb3b, "kafdageshhebrew", 0xfb3b, "kaffinalarabic", 0xfeda, "kafhebrew", 0x05db, "kafinitialarabic", 0xfedb, "kafmedialarabic", 0xfedc, "kafrafehebrew", 0xfb4d, "kagujarati", 0x0a95, "kagurmukhi", 0x0a15, "kahiragana", 0x304b, "kahookcyrillic", 0x04c4, "kakatakana", 0x30ab, "kakatakanahalfwidth", 0xff76, "kappa", 0x03ba, "kappasymbolgreek", 0x03f0, "kapyeounmieumkorean", 0x3171, "kapyeounphieuphkorean", 0x3184, "kapyeounpieupkorean", 0x3178, "kapyeounssangpieupkorean", 0x3179, "karoriisquare", 0x330d, "kashidaautoarabic", 0x0640, "kashidaautonosidebearingarabic", 0x0640, "kasmallkatakana", 0x30f5, "kasquare", 0x3384, "kasraarabic", 0x0650, "kasratanarabic", 0x064d, "kastrokecyrillic", 0x049f, "katahiraprolongmarkhalfwidth", 0xff70, "kaverticalstrokecyrillic", 0x049d, "kbopomofo", 0x310e, "kcalsquare", 0x3389, "kcaron", 0x01e9, "kcedilla", 0x0137, "kcircle", 0x24da, "kcommaaccent", 0x0137, "kdotbelow", 0x1e33, "keharmenian", 0x0584, "kehiragana", 0x3051, "kekatakana", 0x30b1, "kekatakanahalfwidth", 0xff79, "kenarmenian", 0x056f, "kesmallkatakana", 0x30f6, "kgreenlandic", 0x0138, "khabengali", 0x0996, "khacyrillic", 0x0445, "khadeva", 0x0916, "khagujarati", 0x0a96, "khagurmukhi", 0x0a16, "khaharabic", 0x062e, "khahfinalarabic", 0xfea6, "khahinitialarabic", 0xfea7, "khahmedialarabic", 0xfea8, "kheicoptic", 0x03e7, "khhadeva", 0x0959, "khhagurmukhi", 0x0a59, "khieukhacirclekorean", 0x3278, "khieukhaparenkorean", 0x3218, "khieukhcirclekorean", 0x326a, "khieukhkorean", 0x314b, "khieukhparenkorean", 0x320a, "khokhaithai", 0x0e02, "khokhonthai", 0x0e05, "khokhuatthai", 0x0e03, "khokhwaithai", 0x0e04, "khomutthai", 0x0e5b, "khook", 0x0199, "khorakhangthai", 0x0e06, "khzsquare", 0x3391, "kihiragana", 0x304d, "kikatakana", 0x30ad, "kikatakanahalfwidth", 0xff77, "kiroguramusquare", 0x3315, "kiromeetorusquare", 0x3316, "kirosquare", 0x3314, "kiyeokacirclekorean", 0x326e, "kiyeokaparenkorean", 0x320e, "kiyeokcirclekorean", 0x3260, "kiyeokkorean", 0x3131, "kiyeokparenkorean", 0x3200, "kiyeoksioskorean", 0x3133, "kjecyrillic", 0x045c, "klinebelow", 0x1e35, "klsquare", 0x3398, "kmcubedsquare", 0x33a6, "kmonospace", 0xff4b, "kmsquaredsquare", 0x33a2, "kohiragana", 0x3053, "kohmsquare", 0x33c0, "kokaithai", 0x0e01, "kokatakana", 0x30b3, "kokatakanahalfwidth", 0xff7a, "kooposquare", 0x331e, "koppacyrillic", 0x0481, "koreanstandardsymbol", 0x327f, "koroniscmb", 0x0343, "kparen", 0x24a6, "kpasquare", 0x33aa, "ksicyrillic", 0x046f, "ktsquare", 0x33cf, "kturned", 0x029e, "kuhiragana", 0x304f, "kukatakana", 0x30af, "kukatakanahalfwidth", 0xff78, "kvsquare", 0x33b8, "kwsquare", 0x33be, "l", 0x006c, "labengali", 0x09b2, "lacute", 0x013a, "ladeva", 0x0932, "lagujarati", 0x0ab2, "lagurmukhi", 0x0a32, "lakkhangyaothai", 0x0e45, "lamaleffinalarabic", 0xfefc, "lamalefhamzaabovefinalarabic", 0xfef8, "lamalefhamzaaboveisolatedarabic", 0xfef7, "lamalefhamzabelowfinalarabic", 0xfefa, "lamalefhamzabelowisolatedarabic", 0xfef9, "lamalefisolatedarabic", 0xfefb, "lamalefmaddaabovefinalarabic", 0xfef6, "lamalefmaddaaboveisolatedarabic", 0xfef5, "lamarabic", 0x0644, "lambda", 0x03bb, "lambdastroke", 0x019b, "lamed", 0x05dc, "lameddagesh", 0xfb3c, "lameddageshhebrew", 0xfb3c, "lamedhebrew", 0x05dc, "lamfinalarabic", 0xfede, "lamhahinitialarabic", 0xfcca, "laminitialarabic", 0xfedf, "lamjeeminitialarabic", 0xfcc9, "lamkhahinitialarabic", 0xfccb, "lamlamhehisolatedarabic", 0xfdf2, "lammedialarabic", 0xfee0, "lammeemhahinitialarabic", 0xfd88, "lammeeminitialarabic", 0xfccc, "largecircle", 0x25ef, "lbar", 0x019a, "lbelt", 0x026c, "lbopomofo", 0x310c, "lcaron", 0x013e, "lcedilla", 0x013c, "lcircle", 0x24db, "lcircumflexbelow", 0x1e3d, "lcommaaccent", 0x013c, "ldot", 0x0140, "ldotaccent", 0x0140, "ldotbelow", 0x1e37, "ldotbelowmacron", 0x1e39, "leftangleabovecmb", 0x031a, "lefttackbelowcmb", 0x0318, "less", 0x003c, "lessequal", 0x2264, "lessequalorgreater", 0x22da, "lessmonospace", 0xff1c, "lessorequivalent", 0x2272, "lessorgreater", 0x2276, "lessoverequal", 0x2266, "lesssmall", 0xfe64, "lezh", 0x026e, "lfblock", 0x258c, "lhookretroflex", 0x026d, "lira", 0x20a4, "liwnarmenian", 0x056c, "lj", 0x01c9, "ljecyrillic", 0x0459, "ll", 0xf6c0, "lladeva", 0x0933, "llagujarati", 0x0ab3, "llinebelow", 0x1e3b, "llladeva", 0x0934, "llvocalicbengali", 0x09e1, "llvocalicdeva", 0x0961, "llvocalicvowelsignbengali", 0x09e3, "llvocalicvowelsigndeva", 0x0963, "lmiddletilde", 0x026b, "lmonospace", 0xff4c, "lmsquare", 0x33d0, "lochulathai", 0x0e2c, "logicaland", 0x2227, "logicalnot", 0x00ac, "logicalnotreversed", 0x2310, "logicalor", 0x2228, "lolingthai", 0x0e25, "longs", 0x017f, "lowlinecenterline", 0xfe4e, "lowlinecmb", 0x0332, "lowlinedashed", 0xfe4d, "lozenge", 0x25ca, "lparen", 0x24a7, "lslash", 0x0142, "lsquare", 0x2113, "lsuperior", 0xf6ee, "ltshade", 0x2591, "luthai", 0x0e26, "lvocalicbengali", 0x098c, "lvocalicdeva", 0x090c, "lvocalicvowelsignbengali", 0x09e2, "lvocalicvowelsigndeva", 0x0962, "lxsquare", 0x33d3, "m", 0x006d, "mabengali", 0x09ae, "macron", 0x00af, "macronbelowcmb", 0x0331, "macroncmb", 0x0304, "macronlowmod", 0x02cd, "macronmonospace", 0xffe3, "macute", 0x1e3f, "madeva", 0x092e, "magujarati", 0x0aae, "magurmukhi", 0x0a2e, "mahapakhhebrew", 0x05a4, "mahapakhlefthebrew", 0x05a4, "mahiragana", 0x307e, "maichattawalowleftthai", 0xf895, "maichattawalowrightthai", 0xf894, "maichattawathai", 0x0e4b, "maichattawaupperleftthai", 0xf893, "maieklowleftthai", 0xf88c, "maieklowrightthai", 0xf88b, "maiekthai", 0x0e48, "maiekupperleftthai", 0xf88a, "maihanakatleftthai", 0xf884, "maihanakatthai", 0x0e31, "maitaikhuleftthai", 0xf889, "maitaikhuthai", 0x0e47, "maitholowleftthai", 0xf88f, "maitholowrightthai", 0xf88e, "maithothai", 0x0e49, "maithoupperleftthai", 0xf88d, "maitrilowleftthai", 0xf892, "maitrilowrightthai", 0xf891, "maitrithai", 0x0e4a, "maitriupperleftthai", 0xf890, "maiyamokthai", 0x0e46, "makatakana", 0x30de, "makatakanahalfwidth", 0xff8f, "male", 0x2642, "mansyonsquare", 0x3347, "maqafhebrew", 0x05be, "mars", 0x2642, "masoracirclehebrew", 0x05af, "masquare", 0x3383, "mbopomofo", 0x3107, "mbsquare", 0x33d4, "mcircle", 0x24dc, "mcubedsquare", 0x33a5, "mdotaccent", 0x1e41, "mdotbelow", 0x1e43, "meemarabic", 0x0645, "meemfinalarabic", 0xfee2, "meeminitialarabic", 0xfee3, "meemmedialarabic", 0xfee4, "meemmeeminitialarabic", 0xfcd1, "meemmeemisolatedarabic", 0xfc48, "meetorusquare", 0x334d, "mehiragana", 0x3081, "meizierasquare", 0x337e, "mekatakana", 0x30e1, "mekatakanahalfwidth", 0xff92, "mem", 0x05de, "memdagesh", 0xfb3e, "memdageshhebrew", 0xfb3e, "memhebrew", 0x05de, "menarmenian", 0x0574, "merkhahebrew", 0x05a5, "merkhakefulahebrew", 0x05a6, "merkhakefulalefthebrew", 0x05a6, "merkhalefthebrew", 0x05a5, "mhook", 0x0271, "mhzsquare", 0x3392, "middledotkatakanahalfwidth", 0xff65, "middot", 0x00b7, "mieumacirclekorean", 0x3272, "mieumaparenkorean", 0x3212, "mieumcirclekorean", 0x3264, "mieumkorean", 0x3141, "mieumpansioskorean", 0x3170, "mieumparenkorean", 0x3204, "mieumpieupkorean", 0x316e, "mieumsioskorean", 0x316f, "mihiragana", 0x307f, "mikatakana", 0x30df, "mikatakanahalfwidth", 0xff90, "minus", 0x2212, "minusbelowcmb", 0x0320, "minuscircle", 0x2296, "minusmod", 0x02d7, "minusplus", 0x2213, "minute", 0x2032, "miribaarusquare", 0x334a, "mirisquare", 0x3349, "mlonglegturned", 0x0270, "mlsquare", 0x3396, "mmcubedsquare", 0x33a3, "mmonospace", 0xff4d, "mmsquaredsquare", 0x339f, "mohiragana", 0x3082, "mohmsquare", 0x33c1, "mokatakana", 0x30e2, "mokatakanahalfwidth", 0xff93, "molsquare", 0x33d6, "momathai", 0x0e21, "moverssquare", 0x33a7, "moverssquaredsquare", 0x33a8, "mparen", 0x24a8, "mpasquare", 0x33ab, "mssquare", 0x33b3, "msuperior", 0xf6ef, "mturned", 0x026f, "mu", 0x00b5, "mu1", 0x00b5, "muasquare", 0x3382, "muchgreater", 0x226b, "muchless", 0x226a, "mufsquare", 0x338c, "mugreek", 0x03bc, "mugsquare", 0x338d, "muhiragana", 0x3080, "mukatakana", 0x30e0, "mukatakanahalfwidth", 0xff91, "mulsquare", 0x3395, "multiply", 0x00d7, "mumsquare", 0x339b, "munahhebrew", 0x05a3, "munahlefthebrew", 0x05a3, "musicalnote", 0x266a, "musicalnotedbl", 0x266b, "musicflatsign", 0x266d, "musicsharpsign", 0x266f, "mussquare", 0x33b2, "muvsquare", 0x33b6, "muwsquare", 0x33bc, "mvmegasquare", 0x33b9, "mvsquare", 0x33b7, "mwmegasquare", 0x33bf, "mwsquare", 0x33bd, "n", 0x006e, "nabengali", 0x09a8, "nabla", 0x2207, "nacute", 0x0144, "nadeva", 0x0928, "nagujarati", 0x0aa8, "nagurmukhi", 0x0a28, "nahiragana", 0x306a, "nakatakana", 0x30ca, "nakatakanahalfwidth", 0xff85, "napostrophe", 0x0149, "nasquare", 0x3381, "nbopomofo", 0x310b, "nbspace", 0x00a0, "ncaron", 0x0148, "ncedilla", 0x0146, "ncircle", 0x24dd, "ncircumflexbelow", 0x1e4b, "ncommaaccent", 0x0146, "ndotaccent", 0x1e45, "ndotbelow", 0x1e47, "nehiragana", 0x306d, "nekatakana", 0x30cd, "nekatakanahalfwidth", 0xff88, "newsheqelsign", 0x20aa, "nfsquare", 0x338b, "ngabengali", 0x0999, "ngadeva", 0x0919, "ngagujarati", 0x0a99, "ngagurmukhi", 0x0a19, "ngonguthai", 0x0e07, "nhiragana", 0x3093, "nhookleft", 0x0272, "nhookretroflex", 0x0273, "nieunacirclekorean", 0x326f, "nieunaparenkorean", 0x320f, "nieuncieuckorean", 0x3135, "nieuncirclekorean", 0x3261, "nieunhieuhkorean", 0x3136, "nieunkorean", 0x3134, "nieunpansioskorean", 0x3168, "nieunparenkorean", 0x3201, "nieunsioskorean", 0x3167, "nieuntikeutkorean", 0x3166, "nihiragana", 0x306b, "nikatakana", 0x30cb, "nikatakanahalfwidth", 0xff86, "nikhahitleftthai", 0xf899, "nikhahitthai", 0x0e4d, "nine", 0x0039, "ninearabic", 0x0669, "ninebengali", 0x09ef, "ninecircle", 0x2468, "ninecircleinversesansserif", 0x2792, "ninedeva", 0x096f, "ninegujarati", 0x0aef, "ninegurmukhi", 0x0a6f, "ninehackarabic", 0x0669, "ninehangzhou", 0x3029, "nineideographicparen", 0x3228, "nineinferior", 0x2089, "ninemonospace", 0xff19, "nineoldstyle", 0xf739, "nineparen", 0x247c, "nineperiod", 0x2490, "ninepersian", 0x06f9, "nineroman", 0x2178, "ninesuperior", 0x2079, "nineteencircle", 0x2472, "nineteenparen", 0x2486, "nineteenperiod", 0x249a, "ninethai", 0x0e59, "nj", 0x01cc, "njecyrillic", 0x045a, "nkatakana", 0x30f3, "nkatakanahalfwidth", 0xff9d, "nlegrightlong", 0x019e, "nlinebelow", 0x1e49, "nmonospace", 0xff4e, "nmsquare", 0x339a, "nnabengali", 0x09a3, "nnadeva", 0x0923, "nnagujarati", 0x0aa3, "nnagurmukhi", 0x0a23, "nnnadeva", 0x0929, "nohiragana", 0x306e, "nokatakana", 0x30ce, "nokatakanahalfwidth", 0xff89, "nonbreakingspace", 0x00a0, "nonenthai", 0x0e13, "nonuthai", 0x0e19, "noonarabic", 0x0646, "noonfinalarabic", 0xfee6, "noonghunnaarabic", 0x06ba, "noonghunnafinalarabic", 0xfb9f, "nooninitialarabic", 0xfee7, "noonjeeminitialarabic", 0xfcd2, "noonjeemisolatedarabic", 0xfc4b, "noonmedialarabic", 0xfee8, "noonmeeminitialarabic", 0xfcd5, "noonmeemisolatedarabic", 0xfc4e, "noonnoonfinalarabic", 0xfc8d, "notcontains", 0x220c, "notelement", 0x2209, "notelementof", 0x2209, "notequal", 0x2260, "notgreater", 0x226f, "notgreaternorequal", 0x2271, "notgreaternorless", 0x2279, "notidentical", 0x2262, "notless", 0x226e, "notlessnorequal", 0x2270, "notparallel", 0x2226, "notprecedes", 0x2280, "notsubset", 0x2284, "notsucceeds", 0x2281, "notsuperset", 0x2285, "nowarmenian", 0x0576, "nparen", 0x24a9, "nssquare", 0x33b1, "nsuperior", 0x207f, "ntilde", 0x00f1, "nu", 0x03bd, "nuhiragana", 0x306c, "nukatakana", 0x30cc, "nukatakanahalfwidth", 0xff87, "nuktabengali", 0x09bc, "nuktadeva", 0x093c, "nuktagujarati", 0x0abc, "nuktagurmukhi", 0x0a3c, "numbersign", 0x0023, "numbersignmonospace", 0xff03, "numbersignsmall", 0xfe5f, "numeralsigngreek", 0x0374, "numeralsignlowergreek", 0x0375, "numero", 0x2116, "nun", 0x05e0, "nundagesh", 0xfb40, "nundageshhebrew", 0xfb40, "nunhebrew", 0x05e0, "nvsquare", 0x33b5, "nwsquare", 0x33bb, "nyabengali", 0x099e, "nyadeva", 0x091e, "nyagujarati", 0x0a9e, "nyagurmukhi", 0x0a1e, "o", 0x006f, "oacute", 0x00f3, "oangthai", 0x0e2d, "obarred", 0x0275, "obarredcyrillic", 0x04e9, "obarreddieresiscyrillic", 0x04eb, "obengali", 0x0993, "obopomofo", 0x311b, "obreve", 0x014f, "ocandradeva", 0x0911, "ocandragujarati", 0x0a91, "ocandravowelsigndeva", 0x0949, "ocandravowelsigngujarati", 0x0ac9, "ocaron", 0x01d2, "ocircle", 0x24de, "ocircumflex", 0x00f4, "ocircumflexacute", 0x1ed1, "ocircumflexdotbelow", 0x1ed9, "ocircumflexgrave", 0x1ed3, "ocircumflexhookabove", 0x1ed5, "ocircumflextilde", 0x1ed7, "ocyrillic", 0x043e, "odblacute", 0x0151, "odblgrave", 0x020d, "odeva", 0x0913, "odieresis", 0x00f6, "odieresiscyrillic", 0x04e7, "odotbelow", 0x1ecd, "oe", 0x0153, "oekorean", 0x315a, "ogonek", 0x02db, "ogonekcmb", 0x0328, "ograve", 0x00f2, "ogujarati", 0x0a93, "oharmenian", 0x0585, "ohiragana", 0x304a, "ohookabove", 0x1ecf, "ohorn", 0x01a1, "ohornacute", 0x1edb, "ohorndotbelow", 0x1ee3, "ohorngrave", 0x1edd, "ohornhookabove", 0x1edf, "ohorntilde", 0x1ee1, "ohungarumlaut", 0x0151, "oi", 0x01a3, "oinvertedbreve", 0x020f, "okatakana", 0x30aa, "okatakanahalfwidth", 0xff75, "okorean", 0x3157, "olehebrew", 0x05ab, "omacron", 0x014d, "omacronacute", 0x1e53, "omacrongrave", 0x1e51, "omdeva", 0x0950, "omega", 0x03c9, "omega1", 0x03d6, "omegacyrillic", 0x0461, "omegalatinclosed", 0x0277, "omegaroundcyrillic", 0x047b, "omegatitlocyrillic", 0x047d, "omegatonos", 0x03ce, "omgujarati", 0x0ad0, "omicron", 0x03bf, "omicrontonos", 0x03cc, "omonospace", 0xff4f, "one", 0x0031, "onearabic", 0x0661, "onebengali", 0x09e7, "onecircle", 0x2460, "onecircleinversesansserif", 0x278a, "onedeva", 0x0967, "onedotenleader", 0x2024, "oneeighth", 0x215b, "onefitted", 0xf6dc, "onegujarati", 0x0ae7, "onegurmukhi", 0x0a67, "onehackarabic", 0x0661, "onehalf", 0x00bd, "onehangzhou", 0x3021, "oneideographicparen", 0x3220, "oneinferior", 0x2081, "onemonospace", 0xff11, "onenumeratorbengali", 0x09f4, "oneoldstyle", 0xf731, "oneparen", 0x2474, "oneperiod", 0x2488, "onepersian", 0x06f1, "onequarter", 0x00bc, "oneroman", 0x2170, "onesuperior", 0x00b9, "onethai", 0x0e51, "onethird", 0x2153, "oogonek", 0x01eb, "oogonekmacron", 0x01ed, "oogurmukhi", 0x0a13, "oomatragurmukhi", 0x0a4b, "oopen", 0x0254, "oparen", 0x24aa, "openbullet", 0x25e6, "option", 0x2325, "ordfeminine", 0x00aa, "ordmasculine", 0x00ba, "orthogonal", 0x221f, "oshortdeva", 0x0912, "oshortvowelsigndeva", 0x094a, "oslash", 0x00f8, "oslashacute", 0x01ff, "osmallhiragana", 0x3049, "osmallkatakana", 0x30a9, "osmallkatakanahalfwidth", 0xff6b, "ostrokeacute", 0x01ff, "osuperior", 0xf6f0, "otcyrillic", 0x047f, "otilde", 0x00f5, "otildeacute", 0x1e4d, "otildedieresis", 0x1e4f, "oubopomofo", 0x3121, "overline", 0x203e, "overlinecenterline", 0xfe4a, "overlinecmb", 0x0305, "overlinedashed", 0xfe49, "overlinedblwavy", 0xfe4c, "overlinewavy", 0xfe4b, "overscore", 0x00af, "ovowelsignbengali", 0x09cb, "ovowelsigndeva", 0x094b, "ovowelsigngujarati", 0x0acb, "p", 0x0070, "paampssquare", 0x3380, "paasentosquare", 0x332b, "pabengali", 0x09aa, "pacute", 0x1e55, "padeva", 0x092a, "pagedown", 0x21df, "pageup", 0x21de, "pagujarati", 0x0aaa, "pagurmukhi", 0x0a2a, "pahiragana", 0x3071, "paiyannoithai", 0x0e2f, "pakatakana", 0x30d1, "palatalizationcyrilliccmb", 0x0484, "palochkacyrillic", 0x04c0, "pansioskorean", 0x317f, "paragraph", 0x00b6, "parallel", 0x2225, "parenleft", 0x0028, "parenleftaltonearabic", 0xfd3e, "parenleftbt", 0xf8ed, "parenleftex", 0xf8ec, "parenleftinferior", 0x208d, "parenleftmonospace", 0xff08, "parenleftsmall", 0xfe59, "parenleftsuperior", 0x207d, "parenlefttp", 0xf8eb, "parenleftvertical", 0xfe35, "parenright", 0x0029, "parenrightaltonearabic", 0xfd3f, "parenrightbt", 0xf8f8, "parenrightex", 0xf8f7, "parenrightinferior", 0x208e, "parenrightmonospace", 0xff09, "parenrightsmall", 0xfe5a, "parenrightsuperior", 0x207e, "parenrighttp", 0xf8f6, "parenrightvertical", 0xfe36, "partialdiff", 0x2202, "paseqhebrew", 0x05c0, "pashtahebrew", 0x0599, "pasquare", 0x33a9, "patah", 0x05b7, "patah11", 0x05b7, "patah1d", 0x05b7, "patah2a", 0x05b7, "patahhebrew", 0x05b7, "patahnarrowhebrew", 0x05b7, "patahquarterhebrew", 0x05b7, "patahwidehebrew", 0x05b7, "pazerhebrew", 0x05a1, "pbopomofo", 0x3106, "pcircle", 0x24df, "pdotaccent", 0x1e57, "pe", 0x05e4, "pecyrillic", 0x043f, "pedagesh", 0xfb44, "pedageshhebrew", 0xfb44, "peezisquare", 0x333b, "pefinaldageshhebrew", 0xfb43, "peharabic", 0x067e, "peharmenian", 0x057a, "pehebrew", 0x05e4, "pehfinalarabic", 0xfb57, "pehinitialarabic", 0xfb58, "pehiragana", 0x307a, "pehmedialarabic", 0xfb59, "pekatakana", 0x30da, "pemiddlehookcyrillic", 0x04a7, "perafehebrew", 0xfb4e, "percent", 0x0025, "percentarabic", 0x066a, "percentmonospace", 0xff05, "percentsmall", 0xfe6a, "period", 0x002e, "periodarmenian", 0x0589, "periodcentered", 0x00b7, "periodhalfwidth", 0xff61, "periodinferior", 0xf6e7, "periodmonospace", 0xff0e, "periodsmall", 0xfe52, "periodsuperior", 0xf6e8, "perispomenigreekcmb", 0x0342, "perpendicular", 0x22a5, "perthousand", 0x2030, "peseta", 0x20a7, "pfsquare", 0x338a, "phabengali", 0x09ab, "phadeva", 0x092b, "phagujarati", 0x0aab, "phagurmukhi", 0x0a2b, "phi", 0x03c6, "phi1", 0x03d5, "phieuphacirclekorean", 0x327a, "phieuphaparenkorean", 0x321a, "phieuphcirclekorean", 0x326c, "phieuphkorean", 0x314d, "phieuphparenkorean", 0x320c, "philatin", 0x0278, "phinthuthai", 0x0e3a, "phisymbolgreek", 0x03d5, "phook", 0x01a5, "phophanthai", 0x0e1e, "phophungthai", 0x0e1c, "phosamphaothai", 0x0e20, "pi", 0x03c0, "pieupacirclekorean", 0x3273, "pieupaparenkorean", 0x3213, "pieupcieuckorean", 0x3176, "pieupcirclekorean", 0x3265, "pieupkiyeokkorean", 0x3172, "pieupkorean", 0x3142, "pieupparenkorean", 0x3205, "pieupsioskiyeokkorean", 0x3174, "pieupsioskorean", 0x3144, "pieupsiostikeutkorean", 0x3175, "pieupthieuthkorean", 0x3177, "pieuptikeutkorean", 0x3173, "pihiragana", 0x3074, "pikatakana", 0x30d4, "pisymbolgreek", 0x03d6, "piwrarmenian", 0x0583, "plus", 0x002b, "plusbelowcmb", 0x031f, "pluscircle", 0x2295, "plusminus", 0x00b1, "plusmod", 0x02d6, "plusmonospace", 0xff0b, "plussmall", 0xfe62, "plussuperior", 0x207a, "pmonospace", 0xff50, "pmsquare", 0x33d8, "pohiragana", 0x307d, "pointingindexdownwhite", 0x261f, "pointingindexleftwhite", 0x261c, "pointingindexrightwhite", 0x261e, "pointingindexupwhite", 0x261d, "pokatakana", 0x30dd, "poplathai", 0x0e1b, "postalmark", 0x3012, "postalmarkface", 0x3020, "pparen", 0x24ab, "precedes", 0x227a, "prescription", 0x211e, "primemod", 0x02b9, "primereversed", 0x2035, "product", 0x220f, "projective", 0x2305, "prolongedkana", 0x30fc, "propellor", 0x2318, "propersubset", 0x2282, "propersuperset", 0x2283, "proportion", 0x2237, "proportional", 0x221d, "psi", 0x03c8, "psicyrillic", 0x0471, "psilipneumatacyrilliccmb", 0x0486, "pssquare", 0x33b0, "puhiragana", 0x3077, "pukatakana", 0x30d7, "pvsquare", 0x33b4, "pwsquare", 0x33ba, "q", 0x0071, "qadeva", 0x0958, "qadmahebrew", 0x05a8, "qafarabic", 0x0642, "qaffinalarabic", 0xfed6, "qafinitialarabic", 0xfed7, "qafmedialarabic", 0xfed8, "qamats", 0x05b8, "qamats10", 0x05b8, "qamats1a", 0x05b8, "qamats1c", 0x05b8, "qamats27", 0x05b8, "qamats29", 0x05b8, "qamats33", 0x05b8, "qamatsde", 0x05b8, "qamatshebrew", 0x05b8, "qamatsnarrowhebrew", 0x05b8, "qamatsqatanhebrew", 0x05b8, "qamatsqatannarrowhebrew", 0x05b8, "qamatsqatanquarterhebrew", 0x05b8, "qamatsqatanwidehebrew", 0x05b8, "qamatsquarterhebrew", 0x05b8, "qamatswidehebrew", 0x05b8, "qarneyparahebrew", 0x059f, "qbopomofo", 0x3111, "qcircle", 0x24e0, "qhook", 0x02a0, "qmonospace", 0xff51, "qof", 0x05e7, "qofdagesh", 0xfb47, "qofdageshhebrew", 0xfb47, "qofhebrew", 0x05e7, "qparen", 0x24ac, "quarternote", 0x2669, "qubuts", 0x05bb, "qubuts18", 0x05bb, "qubuts25", 0x05bb, "qubuts31", 0x05bb, "qubutshebrew", 0x05bb, "qubutsnarrowhebrew", 0x05bb, "qubutsquarterhebrew", 0x05bb, "qubutswidehebrew", 0x05bb, "question", 0x003f, "questionarabic", 0x061f, "questionarmenian", 0x055e, "questiondown", 0x00bf, "questiondownsmall", 0xf7bf, "questiongreek", 0x037e, "questionmonospace", 0xff1f, "questionsmall", 0xf73f, "quotedbl", 0x0022, "quotedblbase", 0x201e, "quotedblleft", 0x201c, "quotedblmonospace", 0xff02, "quotedblprime", 0x301e, "quotedblprimereversed", 0x301d, "quotedblright", 0x201d, "quoteleft", 0x2018, "quoteleftreversed", 0x201b, "quotereversed", 0x201b, "quoteright", 0x2019, "quoterightn", 0x0149, "quotesinglbase", 0x201a, "quotesingle", 0x0027, "quotesinglemonospace", 0xff07, "r", 0x0072, "raarmenian", 0x057c, "rabengali", 0x09b0, "racute", 0x0155, "radeva", 0x0930, "radical", 0x221a, "radicalex", 0xf8e5, "radoverssquare", 0x33ae, "radoverssquaredsquare", 0x33af, "radsquare", 0x33ad, "rafe", 0x05bf, "rafehebrew", 0x05bf, "ragujarati", 0x0ab0, "ragurmukhi", 0x0a30, "rahiragana", 0x3089, "rakatakana", 0x30e9, "rakatakanahalfwidth", 0xff97, "ralowerdiagonalbengali", 0x09f1, "ramiddlediagonalbengali", 0x09f0, "ramshorn", 0x0264, "ratio", 0x2236, "rbopomofo", 0x3116, "rcaron", 0x0159, "rcedilla", 0x0157, "rcircle", 0x24e1, "rcommaaccent", 0x0157, "rdblgrave", 0x0211, "rdotaccent", 0x1e59, "rdotbelow", 0x1e5b, "rdotbelowmacron", 0x1e5d, "referencemark", 0x203b, "reflexsubset", 0x2286, "reflexsuperset", 0x2287, "registered", 0x00ae, "registersans", 0xf8e8, "registerserif", 0xf6da, "reharabic", 0x0631, "reharmenian", 0x0580, "rehfinalarabic", 0xfeae, "rehiragana", 0x308c, "rekatakana", 0x30ec, "rekatakanahalfwidth", 0xff9a, "resh", 0x05e8, "reshdageshhebrew", 0xfb48, "reshhebrew", 0x05e8, "reversedtilde", 0x223d, "reviahebrew", 0x0597, "reviamugrashhebrew", 0x0597, "revlogicalnot", 0x2310, "rfishhook", 0x027e, "rfishhookreversed", 0x027f, "rhabengali", 0x09dd, "rhadeva", 0x095d, "rho", 0x03c1, "rhook", 0x027d, "rhookturned", 0x027b, "rhookturnedsuperior", 0x02b5, "rhosymbolgreek", 0x03f1, "rhotichookmod", 0x02de, "rieulacirclekorean", 0x3271, "rieulaparenkorean", 0x3211, "rieulcirclekorean", 0x3263, "rieulhieuhkorean", 0x3140, "rieulkiyeokkorean", 0x313a, "rieulkiyeoksioskorean", 0x3169, "rieulkorean", 0x3139, "rieulmieumkorean", 0x313b, "rieulpansioskorean", 0x316c, "rieulparenkorean", 0x3203, "rieulphieuphkorean", 0x313f, "rieulpieupkorean", 0x313c, "rieulpieupsioskorean", 0x316b, "rieulsioskorean", 0x313d, "rieulthieuthkorean", 0x313e, "rieultikeutkorean", 0x316a, "rieulyeorinhieuhkorean", 0x316d, "rightangle", 0x221f, "righttackbelowcmb", 0x0319, "righttriangle", 0x22bf, "rihiragana", 0x308a, "rikatakana", 0x30ea, "rikatakanahalfwidth", 0xff98, "ring", 0x02da, "ringbelowcmb", 0x0325, "ringcmb", 0x030a, "ringhalfleft", 0x02bf, "ringhalfleftarmenian", 0x0559, "ringhalfleftbelowcmb", 0x031c, "ringhalfleftcentered", 0x02d3, "ringhalfright", 0x02be, "ringhalfrightbelowcmb", 0x0339, "ringhalfrightcentered", 0x02d2, "rinvertedbreve", 0x0213, "rittorusquare", 0x3351, "rlinebelow", 0x1e5f, "rlongleg", 0x027c, "rlonglegturned", 0x027a, "rmonospace", 0xff52, "rohiragana", 0x308d, "rokatakana", 0x30ed, "rokatakanahalfwidth", 0xff9b, "roruathai", 0x0e23, "rparen", 0x24ad, "rrabengali", 0x09dc, "rradeva", 0x0931, "rragurmukhi", 0x0a5c, "rreharabic", 0x0691, "rrehfinalarabic", 0xfb8d, "rrvocalicbengali", 0x09e0, "rrvocalicdeva", 0x0960, "rrvocalicgujarati", 0x0ae0, "rrvocalicvowelsignbengali", 0x09c4, "rrvocalicvowelsigndeva", 0x0944, "rrvocalicvowelsigngujarati", 0x0ac4, "rsuperior", 0xf6f1, "rtblock", 0x2590, "rturned", 0x0279, "rturnedsuperior", 0x02b4, "ruhiragana", 0x308b, "rukatakana", 0x30eb, "rukatakanahalfwidth", 0xff99, "rupeemarkbengali", 0x09f2, "rupeesignbengali", 0x09f3, "rupiah", 0xf6dd, "ruthai", 0x0e24, "rvocalicbengali", 0x098b, "rvocalicdeva", 0x090b, "rvocalicgujarati", 0x0a8b, "rvocalicvowelsignbengali", 0x09c3, "rvocalicvowelsigndeva", 0x0943, "rvocalicvowelsigngujarati", 0x0ac3, "s", 0x0073, "sabengali", 0x09b8, "sacute", 0x015b, "sacutedotaccent", 0x1e65, "sadarabic", 0x0635, "sadeva", 0x0938, "sadfinalarabic", 0xfeba, "sadinitialarabic", 0xfebb, "sadmedialarabic", 0xfebc, "sagujarati", 0x0ab8, "sagurmukhi", 0x0a38, "sahiragana", 0x3055, "sakatakana", 0x30b5, "sakatakanahalfwidth", 0xff7b, "sallallahoualayhewasallamarabic", 0xfdfa, "samekh", 0x05e1, "samekhdagesh", 0xfb41, "samekhdageshhebrew", 0xfb41, "samekhhebrew", 0x05e1, "saraaathai", 0x0e32, "saraaethai", 0x0e41, "saraaimaimalaithai", 0x0e44, "saraaimaimuanthai", 0x0e43, "saraamthai", 0x0e33, "saraathai", 0x0e30, "saraethai", 0x0e40, "saraiileftthai", 0xf886, "saraiithai", 0x0e35, "saraileftthai", 0xf885, "saraithai", 0x0e34, "saraothai", 0x0e42, "saraueeleftthai", 0xf888, "saraueethai", 0x0e37, "saraueleftthai", 0xf887, "sarauethai", 0x0e36, "sarauthai", 0x0e38, "sarauuthai", 0x0e39, "sbopomofo", 0x3119, "scaron", 0x0161, "scarondotaccent", 0x1e67, "scedilla", 0x015f, "schwa", 0x0259, "schwacyrillic", 0x04d9, "schwadieresiscyrillic", 0x04db, "schwahook", 0x025a, "scircle", 0x24e2, "scircumflex", 0x015d, "scommaaccent", 0x0219, "sdotaccent", 0x1e61, "sdotbelow", 0x1e63, "sdotbelowdotaccent", 0x1e69, "seagullbelowcmb", 0x033c, "second", 0x2033, "secondtonechinese", 0x02ca, "section", 0x00a7, "seenarabic", 0x0633, "seenfinalarabic", 0xfeb2, "seeninitialarabic", 0xfeb3, "seenmedialarabic", 0xfeb4, "segol", 0x05b6, "segol13", 0x05b6, "segol1f", 0x05b6, "segol2c", 0x05b6, "segolhebrew", 0x05b6, "segolnarrowhebrew", 0x05b6, "segolquarterhebrew", 0x05b6, "segoltahebrew", 0x0592, "segolwidehebrew", 0x05b6, "seharmenian", 0x057d, "sehiragana", 0x305b, "sekatakana", 0x30bb, "sekatakanahalfwidth", 0xff7e, "semicolon", 0x003b, "semicolonarabic", 0x061b, "semicolonmonospace", 0xff1b, "semicolonsmall", 0xfe54, "semivoicedmarkkana", 0x309c, "semivoicedmarkkanahalfwidth", 0xff9f, "sentisquare", 0x3322, "sentosquare", 0x3323, "seven", 0x0037, "sevenarabic", 0x0667, "sevenbengali", 0x09ed, "sevencircle", 0x2466, "sevencircleinversesansserif", 0x2790, "sevendeva", 0x096d, "seveneighths", 0x215e, "sevengujarati", 0x0aed, "sevengurmukhi", 0x0a6d, "sevenhackarabic", 0x0667, "sevenhangzhou", 0x3027, "sevenideographicparen", 0x3226, "seveninferior", 0x2087, "sevenmonospace", 0xff17, "sevenoldstyle", 0xf737, "sevenparen", 0x247a, "sevenperiod", 0x248e, "sevenpersian", 0x06f7, "sevenroman", 0x2176, "sevensuperior", 0x2077, "seventeencircle", 0x2470, "seventeenparen", 0x2484, "seventeenperiod", 0x2498, "seventhai", 0x0e57, "sfthyphen", 0x00ad, "shaarmenian", 0x0577, "shabengali", 0x09b6, "shacyrillic", 0x0448, "shaddaarabic", 0x0651, "shaddadammaarabic", 0xfc61, "shaddadammatanarabic", 0xfc5e, "shaddafathaarabic", 0xfc60, "shaddakasraarabic", 0xfc62, "shaddakasratanarabic", 0xfc5f, "shade", 0x2592, "shadedark", 0x2593, "shadelight", 0x2591, "shademedium", 0x2592, "shadeva", 0x0936, "shagujarati", 0x0ab6, "shagurmukhi", 0x0a36, "shalshelethebrew", 0x0593, "shbopomofo", 0x3115, "shchacyrillic", 0x0449, "sheenarabic", 0x0634, "sheenfinalarabic", 0xfeb6, "sheeninitialarabic", 0xfeb7, "sheenmedialarabic", 0xfeb8, "sheicoptic", 0x03e3, "sheqel", 0x20aa, "sheqelhebrew", 0x20aa, "sheva", 0x05b0, "sheva115", 0x05b0, "sheva15", 0x05b0, "sheva22", 0x05b0, "sheva2e", 0x05b0, "shevahebrew", 0x05b0, "shevanarrowhebrew", 0x05b0, "shevaquarterhebrew", 0x05b0, "shevawidehebrew", 0x05b0, "shhacyrillic", 0x04bb, "shimacoptic", 0x03ed, "shin", 0x05e9, "shindagesh", 0xfb49, "shindageshhebrew", 0xfb49, "shindageshshindot", 0xfb2c, "shindageshshindothebrew", 0xfb2c, "shindageshsindot", 0xfb2d, "shindageshsindothebrew", 0xfb2d, "shindothebrew", 0x05c1, "shinhebrew", 0x05e9, "shinshindot", 0xfb2a, "shinshindothebrew", 0xfb2a, "shinsindot", 0xfb2b, "shinsindothebrew", 0xfb2b, "shook", 0x0282, "sigma", 0x03c3, "sigma1", 0x03c2, "sigmafinal", 0x03c2, "sigmalunatesymbolgreek", 0x03f2, "sihiragana", 0x3057, "sikatakana", 0x30b7, "sikatakanahalfwidth", 0xff7c, "siluqhebrew", 0x05bd, "siluqlefthebrew", 0x05bd, "similar", 0x223c, "sindothebrew", 0x05c2, "siosacirclekorean", 0x3274, "siosaparenkorean", 0x3214, "sioscieuckorean", 0x317e, "sioscirclekorean", 0x3266, "sioskiyeokkorean", 0x317a, "sioskorean", 0x3145, "siosnieunkorean", 0x317b, "siosparenkorean", 0x3206, "siospieupkorean", 0x317d, "siostikeutkorean", 0x317c, "six", 0x0036, "sixarabic", 0x0666, "sixbengali", 0x09ec, "sixcircle", 0x2465, "sixcircleinversesansserif", 0x278f, "sixdeva", 0x096c, "sixgujarati", 0x0aec, "sixgurmukhi", 0x0a6c, "sixhackarabic", 0x0666, "sixhangzhou", 0x3026, "sixideographicparen", 0x3225, "sixinferior", 0x2086, "sixmonospace", 0xff16, "sixoldstyle", 0xf736, "sixparen", 0x2479, "sixperiod", 0x248d, "sixpersian", 0x06f6, "sixroman", 0x2175, "sixsuperior", 0x2076, "sixteencircle", 0x246f, "sixteencurrencydenominatorbengali", 0x09f9, "sixteenparen", 0x2483, "sixteenperiod", 0x2497, "sixthai", 0x0e56, "slash", 0x002f, "slashmonospace", 0xff0f, "slong", 0x017f, "slongdotaccent", 0x1e9b, "smileface", 0x263a, "smonospace", 0xff53, "sofpasuqhebrew", 0x05c3, "softhyphen", 0x00ad, "softsigncyrillic", 0x044c, "sohiragana", 0x305d, "sokatakana", 0x30bd, "sokatakanahalfwidth", 0xff7f, "soliduslongoverlaycmb", 0x0338, "solidusshortoverlaycmb", 0x0337, "sorusithai", 0x0e29, "sosalathai", 0x0e28, "sosothai", 0x0e0b, "sosuathai", 0x0e2a, "space", 0x0020, "spacehackarabic", 0x0020, "spade", 0x2660, "spadesuitblack", 0x2660, "spadesuitwhite", 0x2664, "sparen", 0x24ae, "squarebelowcmb", 0x033b, "squarecc", 0x33c4, "squarecm", 0x339d, "squarediagonalcrosshatchfill", 0x25a9, "squarehorizontalfill", 0x25a4, "squarekg", 0x338f, "squarekm", 0x339e, "squarekmcapital", 0x33ce, "squareln", 0x33d1, "squarelog", 0x33d2, "squaremg", 0x338e, "squaremil", 0x33d5, "squaremm", 0x339c, "squaremsquared", 0x33a1, "squareorthogonalcrosshatchfill", 0x25a6, "squareupperlefttolowerrightfill", 0x25a7, "squareupperrighttolowerleftfill", 0x25a8, "squareverticalfill", 0x25a5, "squarewhitewithsmallblack", 0x25a3, "srsquare", 0x33db, "ssabengali", 0x09b7, "ssadeva", 0x0937, "ssagujarati", 0x0ab7, "ssangcieuckorean", 0x3149, "ssanghieuhkorean", 0x3185, "ssangieungkorean", 0x3180, "ssangkiyeokkorean", 0x3132, "ssangnieunkorean", 0x3165, "ssangpieupkorean", 0x3143, "ssangsioskorean", 0x3146, "ssangtikeutkorean", 0x3138, "ssuperior", 0xf6f2, "sterling", 0x00a3, "sterlingmonospace", 0xffe1, "strokelongoverlaycmb", 0x0336, "strokeshortoverlaycmb", 0x0335, "subset", 0x2282, "subsetnotequal", 0x228a, "subsetorequal", 0x2286, "succeeds", 0x227b, "suchthat", 0x220b, "suhiragana", 0x3059, "sukatakana", 0x30b9, "sukatakanahalfwidth", 0xff7d, "sukunarabic", 0x0652, "summation", 0x2211, "sun", 0x263c, "superset", 0x2283, "supersetnotequal", 0x228b, "supersetorequal", 0x2287, "svsquare", 0x33dc, "syouwaerasquare", 0x337c, "t", 0x0074, "tabengali", 0x09a4, "tackdown", 0x22a4, "tackleft", 0x22a3, "tadeva", 0x0924, "tagujarati", 0x0aa4, "tagurmukhi", 0x0a24, "taharabic", 0x0637, "tahfinalarabic", 0xfec2, "tahinitialarabic", 0xfec3, "tahiragana", 0x305f, "tahmedialarabic", 0xfec4, "taisyouerasquare", 0x337d, "takatakana", 0x30bf, "takatakanahalfwidth", 0xff80, "tatweelarabic", 0x0640, "tau", 0x03c4, "tav", 0x05ea, "tavdages", 0xfb4a, "tavdagesh", 0xfb4a, "tavdageshhebrew", 0xfb4a, "tavhebrew", 0x05ea, "tbar", 0x0167, "tbopomofo", 0x310a, "tcaron", 0x0165, "tccurl", 0x02a8, "tcedilla", 0x0163, "tcheharabic", 0x0686, "tchehfinalarabic", 0xfb7b, "tchehinitialarabic", 0xfb7c, "tchehmedialarabic", 0xfb7d, "tcircle", 0x24e3, "tcircumflexbelow", 0x1e71, "tcommaaccent", 0x0163, "tdieresis", 0x1e97, "tdotaccent", 0x1e6b, "tdotbelow", 0x1e6d, "tecyrillic", 0x0442, "tedescendercyrillic", 0x04ad, "teharabic", 0x062a, "tehfinalarabic", 0xfe96, "tehhahinitialarabic", 0xfca2, "tehhahisolatedarabic", 0xfc0c, "tehinitialarabic", 0xfe97, "tehiragana", 0x3066, "tehjeeminitialarabic", 0xfca1, "tehjeemisolatedarabic", 0xfc0b, "tehmarbutaarabic", 0x0629, "tehmarbutafinalarabic", 0xfe94, "tehmedialarabic", 0xfe98, "tehmeeminitialarabic", 0xfca4, "tehmeemisolatedarabic", 0xfc0e, "tehnoonfinalarabic", 0xfc73, "tekatakana", 0x30c6, "tekatakanahalfwidth", 0xff83, "telephone", 0x2121, "telephoneblack", 0x260e, "telishagedolahebrew", 0x05a0, "telishaqetanahebrew", 0x05a9, "tencircle", 0x2469, "tenideographicparen", 0x3229, "tenparen", 0x247d, "tenperiod", 0x2491, "tenroman", 0x2179, "tesh", 0x02a7, "tet", 0x05d8, "tetdagesh", 0xfb38, "tetdageshhebrew", 0xfb38, "tethebrew", 0x05d8, "tetsecyrillic", 0x04b5, "tevirhebrew", 0x059b, "tevirlefthebrew", 0x059b, "thabengali", 0x09a5, "thadeva", 0x0925, "thagujarati", 0x0aa5, "thagurmukhi", 0x0a25, "thalarabic", 0x0630, "thalfinalarabic", 0xfeac, "thanthakhatlowleftthai", 0xf898, "thanthakhatlowrightthai", 0xf897, "thanthakhatthai", 0x0e4c, "thanthakhatupperleftthai", 0xf896, "theharabic", 0x062b, "thehfinalarabic", 0xfe9a, "thehinitialarabic", 0xfe9b, "thehmedialarabic", 0xfe9c, "thereexists", 0x2203, "therefore", 0x2234, "theta", 0x03b8, "theta1", 0x03d1, "thetasymbolgreek", 0x03d1, "thieuthacirclekorean", 0x3279, "thieuthaparenkorean", 0x3219, "thieuthcirclekorean", 0x326b, "thieuthkorean", 0x314c, "thieuthparenkorean", 0x320b, "thirteencircle", 0x246c, "thirteenparen", 0x2480, "thirteenperiod", 0x2494, "thonangmonthothai", 0x0e11, "thook", 0x01ad, "thophuthaothai", 0x0e12, "thorn", 0x00fe, "thothahanthai", 0x0e17, "thothanthai", 0x0e10, "thothongthai", 0x0e18, "thothungthai", 0x0e16, "thousandcyrillic", 0x0482, "thousandsseparatorarabic", 0x066c, "thousandsseparatorpersian", 0x066c, "three", 0x0033, "threearabic", 0x0663, "threebengali", 0x09e9, "threecircle", 0x2462, "threecircleinversesansserif", 0x278c, "threedeva", 0x0969, "threeeighths", 0x215c, "threegujarati", 0x0ae9, "threegurmukhi", 0x0a69, "threehackarabic", 0x0663, "threehangzhou", 0x3023, "threeideographicparen", 0x3222, "threeinferior", 0x2083, "threemonospace", 0xff13, "threenumeratorbengali", 0x09f6, "threeoldstyle", 0xf733, "threeparen", 0x2476, "threeperiod", 0x248a, "threepersian", 0x06f3, "threequarters", 0x00be, "threequartersemdash", 0xf6de, "threeroman", 0x2172, "threesuperior", 0x00b3, "threethai", 0x0e53, "thzsquare", 0x3394, "tihiragana", 0x3061, "tikatakana", 0x30c1, "tikatakanahalfwidth", 0xff81, "tikeutacirclekorean", 0x3270, "tikeutaparenkorean", 0x3210, "tikeutcirclekorean", 0x3262, "tikeutkorean", 0x3137, "tikeutparenkorean", 0x3202, "tilde", 0x02dc, "tildebelowcmb", 0x0330, "tildecmb", 0x0303, "tildecomb", 0x0303, "tildedoublecmb", 0x0360, "tildeoperator", 0x223c, "tildeoverlaycmb", 0x0334, "tildeverticalcmb", 0x033e, "timescircle", 0x2297, "tipehahebrew", 0x0596, "tipehalefthebrew", 0x0596, "tippigurmukhi", 0x0a70, "titlocyrilliccmb", 0x0483, "tiwnarmenian", 0x057f, "tlinebelow", 0x1e6f, "tmonospace", 0xff54, "toarmenian", 0x0569, "tohiragana", 0x3068, "tokatakana", 0x30c8, "tokatakanahalfwidth", 0xff84, "tonebarextrahighmod", 0x02e5, "tonebarextralowmod", 0x02e9, "tonebarhighmod", 0x02e6, "tonebarlowmod", 0x02e8, "tonebarmidmod", 0x02e7, "tonefive", 0x01bd, "tonesix", 0x0185, "tonetwo", 0x01a8, "tonos", 0x0384, "tonsquare", 0x3327, "topatakthai", 0x0e0f, "tortoiseshellbracketleft", 0x3014, "tortoiseshellbracketleftsmall", 0xfe5d, "tortoiseshellbracketleftvertical", 0xfe39, "tortoiseshellbracketright", 0x3015, "tortoiseshellbracketrightsmall", 0xfe5e, "tortoiseshellbracketrightvertical", 0xfe3a, "totaothai", 0x0e15, "tpalatalhook", 0x01ab, "tparen", 0x24af, "trademark", 0x2122, "trademarksans", 0xf8ea, "trademarkserif", 0xf6db, "tretroflexhook", 0x0288, "triagdn", 0x25bc, "triaglf", 0x25c4, "triagrt", 0x25ba, "triagup", 0x25b2, "ts", 0x02a6, "tsadi", 0x05e6, "tsadidagesh", 0xfb46, "tsadidageshhebrew", 0xfb46, "tsadihebrew", 0x05e6, "tsecyrillic", 0x0446, "tsere", 0x05b5, "tsere12", 0x05b5, "tsere1e", 0x05b5, "tsere2b", 0x05b5, "tserehebrew", 0x05b5, "tserenarrowhebrew", 0x05b5, "tserequarterhebrew", 0x05b5, "tserewidehebrew", 0x05b5, "tshecyrillic", 0x045b, "tsuperior", 0xf6f3, "ttabengali", 0x099f, "ttadeva", 0x091f, "ttagujarati", 0x0a9f, "ttagurmukhi", 0x0a1f, "tteharabic", 0x0679, "ttehfinalarabic", 0xfb67, "ttehinitialarabic", 0xfb68, "ttehmedialarabic", 0xfb69, "tthabengali", 0x09a0, "tthadeva", 0x0920, "tthagujarati", 0x0aa0, "tthagurmukhi", 0x0a20, "tturned", 0x0287, "tuhiragana", 0x3064, "tukatakana", 0x30c4, "tukatakanahalfwidth", 0xff82, "tusmallhiragana", 0x3063, "tusmallkatakana", 0x30c3, "tusmallkatakanahalfwidth", 0xff6f, "twelvecircle", 0x246b, "twelveparen", 0x247f, "twelveperiod", 0x2493, "twelveroman", 0x217b, "twentycircle", 0x2473, "twentyhangzhou", 0x5344, "twentyparen", 0x2487, "twentyperiod", 0x249b, "two", 0x0032, "twoarabic", 0x0662, "twobengali", 0x09e8, "twocircle", 0x2461, "twocircleinversesansserif", 0x278b, "twodeva", 0x0968, "twodotenleader", 0x2025, "twodotleader", 0x2025, "twodotleadervertical", 0xfe30, "twogujarati", 0x0ae8, "twogurmukhi", 0x0a68, "twohackarabic", 0x0662, "twohangzhou", 0x3022, "twoideographicparen", 0x3221, "twoinferior", 0x2082, "twomonospace", 0xff12, "twonumeratorbengali", 0x09f5, "twooldstyle", 0xf732, "twoparen", 0x2475, "twoperiod", 0x2489, "twopersian", 0x06f2, "tworoman", 0x2171, "twostroke", 0x01bb, "twosuperior", 0x00b2, "twothai", 0x0e52, "twothirds", 0x2154, "u", 0x0075, "uacute", 0x00fa, "ubar", 0x0289, "ubengali", 0x0989, "ubopomofo", 0x3128, "ubreve", 0x016d, "ucaron", 0x01d4, "ucircle", 0x24e4, "ucircumflex", 0x00fb, "ucircumflexbelow", 0x1e77, "ucyrillic", 0x0443, "udattadeva", 0x0951, "udblacute", 0x0171, "udblgrave", 0x0215, "udeva", 0x0909, "udieresis", 0x00fc, "udieresisacute", 0x01d8, "udieresisbelow", 0x1e73, "udieresiscaron", 0x01da, "udieresiscyrillic", 0x04f1, "udieresisgrave", 0x01dc, "udieresismacron", 0x01d6, "udotbelow", 0x1ee5, "ugrave", 0x00f9, "ugujarati", 0x0a89, "ugurmukhi", 0x0a09, "uhiragana", 0x3046, "uhookabove", 0x1ee7, "uhorn", 0x01b0, "uhornacute", 0x1ee9, "uhorndotbelow", 0x1ef1, "uhorngrave", 0x1eeb, "uhornhookabove", 0x1eed, "uhorntilde", 0x1eef, "uhungarumlaut", 0x0171, "uhungarumlautcyrillic", 0x04f3, "uinvertedbreve", 0x0217, "ukatakana", 0x30a6, "ukatakanahalfwidth", 0xff73, "ukcyrillic", 0x0479, "ukorean", 0x315c, "umacron", 0x016b, "umacroncyrillic", 0x04ef, "umacrondieresis", 0x1e7b, "umatragurmukhi", 0x0a41, "umonospace", 0xff55, "underscore", 0x005f, "underscoredbl", 0x2017, "underscoremonospace", 0xff3f, "underscorevertical", 0xfe33, "underscorewavy", 0xfe4f, "union", 0x222a, "universal", 0x2200, "uogonek", 0x0173, "uparen", 0x24b0, "upblock", 0x2580, "upperdothebrew", 0x05c4, "upsilon", 0x03c5, "upsilondieresis", 0x03cb, "upsilondieresistonos", 0x03b0, "upsilonlatin", 0x028a, "upsilontonos", 0x03cd, "uptackbelowcmb", 0x031d, "uptackmod", 0x02d4, "uragurmukhi", 0x0a73, "uring", 0x016f, "ushortcyrillic", 0x045e, "usmallhiragana", 0x3045, "usmallkatakana", 0x30a5, "usmallkatakanahalfwidth", 0xff69, "ustraightcyrillic", 0x04af, "ustraightstrokecyrillic", 0x04b1, "utilde", 0x0169, "utildeacute", 0x1e79, "utildebelow", 0x1e75, "uubengali", 0x098a, "uudeva", 0x090a, "uugujarati", 0x0a8a, "uugurmukhi", 0x0a0a, "uumatragurmukhi", 0x0a42, "uuvowelsignbengali", 0x09c2, "uuvowelsigndeva", 0x0942, "uuvowelsigngujarati", 0x0ac2, "uvowelsignbengali", 0x09c1, "uvowelsigndeva", 0x0941, "uvowelsigngujarati", 0x0ac1, "v", 0x0076, "vadeva", 0x0935, "vagujarati", 0x0ab5, "vagurmukhi", 0x0a35, "vakatakana", 0x30f7, "vav", 0x05d5, "vavdagesh", 0xfb35, "vavdagesh65", 0xfb35, "vavdageshhebrew", 0xfb35, "vavhebrew", 0x05d5, "vavholam", 0xfb4b, "vavholamhebrew", 0xfb4b, "vavvavhebrew", 0x05f0, "vavyodhebrew", 0x05f1, "vcircle", 0x24e5, "vdotbelow", 0x1e7f, "vecyrillic", 0x0432, "veharabic", 0x06a4, "vehfinalarabic", 0xfb6b, "vehinitialarabic", 0xfb6c, "vehmedialarabic", 0xfb6d, "vekatakana", 0x30f9, "venus", 0x2640, "verticalbar", 0x007c, "verticallineabovecmb", 0x030d, "verticallinebelowcmb", 0x0329, "verticallinelowmod", 0x02cc, "verticallinemod", 0x02c8, "vewarmenian", 0x057e, "vhook", 0x028b, "vikatakana", 0x30f8, "viramabengali", 0x09cd, "viramadeva", 0x094d, "viramagujarati", 0x0acd, "visargabengali", 0x0983, "visargadeva", 0x0903, "visargagujarati", 0x0a83, "vmonospace", 0xff56, "voarmenian", 0x0578, "voicediterationhiragana", 0x309e, "voicediterationkatakana", 0x30fe, "voicedmarkkana", 0x309b, "voicedmarkkanahalfwidth", 0xff9e, "vokatakana", 0x30fa, "vparen", 0x24b1, "vtilde", 0x1e7d, "vturned", 0x028c, "vuhiragana", 0x3094, "vukatakana", 0x30f4, "w", 0x0077, "wacute", 0x1e83, "waekorean", 0x3159, "wahiragana", 0x308f, "wakatakana", 0x30ef, "wakatakanahalfwidth", 0xff9c, "wakorean", 0x3158, "wasmallhiragana", 0x308e, "wasmallkatakana", 0x30ee, "wattosquare", 0x3357, "wavedash", 0x301c, "wavyunderscorevertical", 0xfe34, "wawarabic", 0x0648, "wawfinalarabic", 0xfeee, "wawhamzaabovearabic", 0x0624, "wawhamzaabovefinalarabic", 0xfe86, "wbsquare", 0x33dd, "wcircle", 0x24e6, "wcircumflex", 0x0175, "wdieresis", 0x1e85, "wdotaccent", 0x1e87, "wdotbelow", 0x1e89, "wehiragana", 0x3091, "weierstrass", 0x2118, "wekatakana", 0x30f1, "wekorean", 0x315e, "weokorean", 0x315d, "wgrave", 0x1e81, "whitebullet", 0x25e6, "whitecircle", 0x25cb, "whitecircleinverse", 0x25d9, "whitecornerbracketleft", 0x300e, "whitecornerbracketleftvertical", 0xfe43, "whitecornerbracketright", 0x300f, "whitecornerbracketrightvertical", 0xfe44, "whitediamond", 0x25c7, "whitediamondcontainingblacksmalldiamond", 0x25c8, "whitedownpointingsmalltriangle", 0x25bf, "whitedownpointingtriangle", 0x25bd, "whiteleftpointingsmalltriangle", 0x25c3, "whiteleftpointingtriangle", 0x25c1, "whitelenticularbracketleft", 0x3016, "whitelenticularbracketright", 0x3017, "whiterightpointingsmalltriangle", 0x25b9, "whiterightpointingtriangle", 0x25b7, "whitesmallsquare", 0x25ab, "whitesmilingface", 0x263a, "whitesquare", 0x25a1, "whitestar", 0x2606, "whitetelephone", 0x260f, "whitetortoiseshellbracketleft", 0x3018, "whitetortoiseshellbracketright", 0x3019, "whiteuppointingsmalltriangle", 0x25b5, "whiteuppointingtriangle", 0x25b3, "wihiragana", 0x3090, "wikatakana", 0x30f0, "wikorean", 0x315f, "wmonospace", 0xff57, "wohiragana", 0x3092, "wokatakana", 0x30f2, "wokatakanahalfwidth", 0xff66, "won", 0x20a9, "wonmonospace", 0xffe6, "wowaenthai", 0x0e27, "wparen", 0x24b2, "wring", 0x1e98, "wsuperior", 0x02b7, "wturned", 0x028d, "wynn", 0x01bf, "x", 0x0078, "xabovecmb", 0x033d, "xbopomofo", 0x3112, "xcircle", 0x24e7, "xdieresis", 0x1e8d, "xdotaccent", 0x1e8b, "xeharmenian", 0x056d, "xi", 0x03be, "xmonospace", 0xff58, "xparen", 0x24b3, "xsuperior", 0x02e3, "y", 0x0079, "yaadosquare", 0x334e, "yabengali", 0x09af, "yacute", 0x00fd, "yadeva", 0x092f, "yaekorean", 0x3152, "yagujarati", 0x0aaf, "yagurmukhi", 0x0a2f, "yahiragana", 0x3084, "yakatakana", 0x30e4, "yakatakanahalfwidth", 0xff94, "yakorean", 0x3151, "yamakkanthai", 0x0e4e, "yasmallhiragana", 0x3083, "yasmallkatakana", 0x30e3, "yasmallkatakanahalfwidth", 0xff6c, "yatcyrillic", 0x0463, "ycircle", 0x24e8, "ycircumflex", 0x0177, "ydieresis", 0x00ff, "ydotaccent", 0x1e8f, "ydotbelow", 0x1ef5, "yeharabic", 0x064a, "yehbarreearabic", 0x06d2, "yehbarreefinalarabic", 0xfbaf, "yehfinalarabic", 0xfef2, "yehhamzaabovearabic", 0x0626, "yehhamzaabovefinalarabic", 0xfe8a, "yehhamzaaboveinitialarabic", 0xfe8b, "yehhamzaabovemedialarabic", 0xfe8c, "yehinitialarabic", 0xfef3, "yehmedialarabic", 0xfef4, "yehmeeminitialarabic", 0xfcdd, "yehmeemisolatedarabic", 0xfc58, "yehnoonfinalarabic", 0xfc94, "yehthreedotsbelowarabic", 0x06d1, "yekorean", 0x3156, "yen", 0x00a5, "yenmonospace", 0xffe5, "yeokorean", 0x3155, "yeorinhieuhkorean", 0x3186, "yerahbenyomohebrew", 0x05aa, "yerahbenyomolefthebrew", 0x05aa, "yericyrillic", 0x044b, "yerudieresiscyrillic", 0x04f9, "yesieungkorean", 0x3181, "yesieungpansioskorean", 0x3183, "yesieungsioskorean", 0x3182, "yetivhebrew", 0x059a, "ygrave", 0x1ef3, "yhook", 0x01b4, "yhookabove", 0x1ef7, "yiarmenian", 0x0575, "yicyrillic", 0x0457, "yikorean", 0x3162, "yinyang", 0x262f, "yiwnarmenian", 0x0582, "ymonospace", 0xff59, "yod", 0x05d9, "yoddagesh", 0xfb39, "yoddageshhebrew", 0xfb39, "yodhebrew", 0x05d9, "yodyodhebrew", 0x05f2, "yodyodpatahhebrew", 0xfb1f, "yohiragana", 0x3088, "yoikorean", 0x3189, "yokatakana", 0x30e8, "yokatakanahalfwidth", 0xff96, "yokorean", 0x315b, "yosmallhiragana", 0x3087, "yosmallkatakana", 0x30e7, "yosmallkatakanahalfwidth", 0xff6e, "yotgreek", 0x03f3, "yoyaekorean", 0x3188, "yoyakorean", 0x3187, "yoyakthai", 0x0e22, "yoyingthai", 0x0e0d, "yparen", 0x24b4, "ypogegrammeni", 0x037a, "ypogegrammenigreekcmb", 0x0345, "yr", 0x01a6, "yring", 0x1e99, "ysuperior", 0x02b8, "ytilde", 0x1ef9, "yturned", 0x028e, "yuhiragana", 0x3086, "yuikorean", 0x318c, "yukatakana", 0x30e6, "yukatakanahalfwidth", 0xff95, "yukorean", 0x3160, "yusbigcyrillic", 0x046b, "yusbigiotifiedcyrillic", 0x046d, "yuslittlecyrillic", 0x0467, "yuslittleiotifiedcyrillic", 0x0469, "yusmallhiragana", 0x3085, "yusmallkatakana", 0x30e5, "yusmallkatakanahalfwidth", 0xff6d, "yuyekorean", 0x318b, "yuyeokorean", 0x318a, "yyabengali", 0x09df, "yyadeva", 0x095f, "z", 0x007a, "zaarmenian", 0x0566, "zacute", 0x017a, "zadeva", 0x095b, "zagurmukhi", 0x0a5b, "zaharabic", 0x0638, "zahfinalarabic", 0xfec6, "zahinitialarabic", 0xfec7, "zahiragana", 0x3056, "zahmedialarabic", 0xfec8, "zainarabic", 0x0632, "zainfinalarabic", 0xfeb0, "zakatakana", 0x30b6, "zaqefgadolhebrew", 0x0595, "zaqefqatanhebrew", 0x0594, "zarqahebrew", 0x0598, "zayin", 0x05d6, "zayindagesh", 0xfb36, "zayindageshhebrew", 0xfb36, "zayinhebrew", 0x05d6, "zbopomofo", 0x3117, "zcaron", 0x017e, "zcircle", 0x24e9, "zcircumflex", 0x1e91, "zcurl", 0x0291, "zdot", 0x017c, "zdotaccent", 0x017c, "zdotbelow", 0x1e93, "zecyrillic", 0x0437, "zedescendercyrillic", 0x0499, "zedieresiscyrillic", 0x04df, "zehiragana", 0x305c, "zekatakana", 0x30bc, "zero", 0x0030, "zeroarabic", 0x0660, "zerobengali", 0x09e6, "zerodeva", 0x0966, "zerogujarati", 0x0ae6, "zerogurmukhi", 0x0a66, "zerohackarabic", 0x0660, "zeroinferior", 0x2080, "zeromonospace", 0xff10, "zerooldstyle", 0xf730, "zeropersian", 0x06f0, "zerosuperior", 0x2070, "zerothai", 0x0e50, "zerowidthjoiner", 0xfeff, "zerowidthnonjoiner", 0x200c, "zerowidthspace", 0x200b, "zeta", 0x03b6, "zhbopomofo", 0x3113, "zhearmenian", 0x056a, "zhebrevecyrillic", 0x04c2, "zhecyrillic", 0x0436, "zhedescendercyrillic", 0x0497, "zhedieresiscyrillic", 0x04dd, "zihiragana", 0x3058, "zikatakana", 0x30b8, "zinorhebrew", 0x05ae, "zlinebelow", 0x1e95, "zmonospace", 0xff5a, "zohiragana", 0x305e, "zokatakana", 0x30be, "zparen", 0x24b5, "zretroflexhook", 0x0290, "zstroke", 0x01b6, "zuhiragana", 0x305a, "zukatakana", 0x30ba, ".notdef", 0x0000, "angbracketleftbig", 0x2329, "angbracketleftBig", 0x2329, "angbracketleftbigg", 0x2329, "angbracketleftBigg", 0x2329, "angbracketrightBig", 0x232a, "angbracketrightbig", 0x232a, "angbracketrightBigg", 0x232a, "angbracketrightbigg", 0x232a, "arrowhookleft", 0x21aa, "arrowhookright", 0x21a9, "arrowlefttophalf", 0x21bc, "arrowleftbothalf", 0x21bd, "arrownortheast", 0x2197, "arrownorthwest", 0x2196, "arrowrighttophalf", 0x21c0, "arrowrightbothalf", 0x21c1, "arrowsoutheast", 0x2198, "arrowsouthwest", 0x2199, "backslashbig", 0x2216, "backslashBig", 0x2216, "backslashBigg", 0x2216, "backslashbigg", 0x2216, "bardbl", 0x2016, "bracehtipdownleft", 0xfe37, "bracehtipdownright", 0xfe37, "bracehtipupleft", 0xfe38, "bracehtipupright", 0xfe38, "braceleftBig", 0x007b, "braceleftbig", 0x007b, "braceleftbigg", 0x007b, "braceleftBigg", 0x007b, "bracerightBig", 0x007d, "bracerightbig", 0x007d, "bracerightbigg", 0x007d, "bracerightBigg", 0x007d, "bracketleftbig", 0x005b, "bracketleftBig", 0x005b, "bracketleftbigg", 0x005b, "bracketleftBigg", 0x005b, "bracketrightBig", 0x005d, "bracketrightbig", 0x005d, "bracketrightbigg", 0x005d, "bracketrightBigg", 0x005d, "ceilingleftbig", 0x2308, "ceilingleftBig", 0x2308, "ceilingleftBigg", 0x2308, "ceilingleftbigg", 0x2308, "ceilingrightbig", 0x2309, "ceilingrightBig", 0x2309, "ceilingrightbigg", 0x2309, "ceilingrightBigg", 0x2309, "circledotdisplay", 0x2299, "circledottext", 0x2299, "circlemultiplydisplay", 0x2297, "circlemultiplytext", 0x2297, "circleplusdisplay", 0x2295, "circleplustext", 0x2295, "contintegraldisplay", 0x222e, "contintegraltext", 0x222e, "coproductdisplay", 0x2210, "coproducttext", 0x2210, "floorleftBig", 0x230a, "floorleftbig", 0x230a, "floorleftbigg", 0x230a, "floorleftBigg", 0x230a, "floorrightbig", 0x230b, "floorrightBig", 0x230b, "floorrightBigg", 0x230b, "floorrightbigg", 0x230b, "hatwide", 0x0302, "hatwider", 0x0302, "hatwidest", 0x0302, "intercal", 0x1d40, "integraldisplay", 0x222b, "integraltext", 0x222b, "intersectiondisplay", 0x22c2, "intersectiontext", 0x22c2, "logicalanddisplay", 0x2227, "logicalandtext", 0x2227, "logicalordisplay", 0x2228, "logicalortext", 0x2228, "parenleftBig", 0x0028, "parenleftbig", 0x0028, "parenleftBigg", 0x0028, "parenleftbigg", 0x0028, "parenrightBig", 0x0029, "parenrightbig", 0x0029, "parenrightBigg", 0x0029, "parenrightbigg", 0x0029, "prime", 0x2032, "productdisplay", 0x220f, "producttext", 0x220f, "radicalbig", 0x221a, "radicalBig", 0x221a, "radicalBigg", 0x221a, "radicalbigg", 0x221a, "radicalbt", 0x221a, "radicaltp", 0x221a, "radicalvertex", 0x221a, "slashbig", 0x002f, "slashBig", 0x002f, "slashBigg", 0x002f, "slashbigg", 0x002f, "summationdisplay", 0x2211, "summationtext", 0x2211, "tildewide", 0x02dc, "tildewider", 0x02dc, "tildewidest", 0x02dc, "uniondisplay", 0x22c3, "unionmultidisplay", 0x228e, "unionmultitext", 0x228e, "unionsqdisplay", 0x2294, "unionsqtext", 0x2294, "uniontext", 0x22c3, "vextenddouble", 0x2225, "vextendsingle", 0x2223];\n});\nexports.getGlyphsUnicode = getGlyphsUnicode;\nvar getDingbatsGlyphsUnicode = (0, _core_utils.getArrayLookupTableFactory)(function () {\n  return ["space", 0x0020, "a1", 0x2701, "a2", 0x2702, "a202", 0x2703, "a3", 0x2704, "a4", 0x260e, "a5", 0x2706, "a119", 0x2707, "a118", 0x2708, "a117", 0x2709, "a11", 0x261b, "a12", 0x261e, "a13", 0x270c, "a14", 0x270d, "a15", 0x270e, "a16", 0x270f, "a105", 0x2710, "a17", 0x2711, "a18", 0x2712, "a19", 0x2713, "a20", 0x2714, "a21", 0x2715, "a22", 0x2716, "a23", 0x2717, "a24", 0x2718, "a25", 0x2719, "a26", 0x271a, "a27", 0x271b, "a28", 0x271c, "a6", 0x271d, "a7", 0x271e, "a8", 0x271f, "a9", 0x2720, "a10", 0x2721, "a29", 0x2722, "a30", 0x2723, "a31", 0x2724, "a32", 0x2725, "a33", 0x2726, "a34", 0x2727, "a35", 0x2605, "a36", 0x2729, "a37", 0x272a, "a38", 0x272b, "a39", 0x272c, "a40", 0x272d, "a41", 0x272e, "a42", 0x272f, "a43", 0x2730, "a44", 0x2731, "a45", 0x2732, "a46", 0x2733, "a47", 0x2734, "a48", 0x2735, "a49", 0x2736, "a50", 0x2737, "a51", 0x2738, "a52", 0x2739, "a53", 0x273a, "a54", 0x273b, "a55", 0x273c, "a56", 0x273d, "a57", 0x273e, "a58", 0x273f, "a59", 0x2740, "a60", 0x2741, "a61", 0x2742, "a62", 0x2743, "a63", 0x2744, "a64", 0x2745, "a65", 0x2746, "a66", 0x2747, "a67", 0x2748, "a68", 0x2749, "a69", 0x274a, "a70", 0x274b, "a71", 0x25cf, "a72", 0x274d, "a73", 0x25a0, "a74", 0x274f, "a203", 0x2750, "a75", 0x2751, "a204", 0x2752, "a76", 0x25b2, "a77", 0x25bc, "a78", 0x25c6, "a79", 0x2756, "a81", 0x25d7, "a82", 0x2758, "a83", 0x2759, "a84", 0x275a, "a97", 0x275b, "a98", 0x275c, "a99", 0x275d, "a100", 0x275e, "a101", 0x2761, "a102", 0x2762, "a103", 0x2763, "a104", 0x2764, "a106", 0x2765, "a107", 0x2766, "a108", 0x2767, "a112", 0x2663, "a111", 0x2666, "a110", 0x2665, "a109", 0x2660, "a120", 0x2460, "a121", 0x2461, "a122", 0x2462, "a123", 0x2463, "a124", 0x2464, "a125", 0x2465, "a126", 0x2466, "a127", 0x2467, "a128", 0x2468, "a129", 0x2469, "a130", 0x2776, "a131", 0x2777, "a132", 0x2778, "a133", 0x2779, "a134", 0x277a, "a135", 0x277b, "a136", 0x277c, "a137", 0x277d, "a138", 0x277e, "a139", 0x277f, "a140", 0x2780, "a141", 0x2781, "a142", 0x2782, "a143", 0x2783, "a144", 0x2784, "a145", 0x2785, "a146", 0x2786, "a147", 0x2787, "a148", 0x2788, "a149", 0x2789, "a150", 0x278a, "a151", 0x278b, "a152", 0x278c, "a153", 0x278d, "a154", 0x278e, "a155", 0x278f, "a156", 0x2790, "a157", 0x2791, "a158", 0x2792, "a159", 0x2793, "a160", 0x2794, "a161", 0x2192, "a163", 0x2194, "a164", 0x2195, "a196", 0x2798, "a165", 0x2799, "a192", 0x279a, "a166", 0x279b, "a167", 0x279c, "a168", 0x279d, "a169", 0x279e, "a170", 0x279f, "a171", 0x27a0, "a172", 0x27a1, "a173", 0x27a2, "a162", 0x27a3, "a174", 0x27a4, "a175", 0x27a5, "a176", 0x27a6, "a177", 0x27a7, "a178", 0x27a8, "a179", 0x27a9, "a193", 0x27aa, "a180", 0x27ab, "a199", 0x27ac, "a181", 0x27ad, "a200", 0x27ae, "a182", 0x27af, "a201", 0x27b1, "a183", 0x27b2, "a184", 0x27b3, "a197", 0x27b4, "a185", 0x27b5, "a194", 0x27b6, "a198", 0x27b7, "a186", 0x27b8, "a195", 0x27b9, "a187", 0x27ba, "a188", 0x27bb, "a189", 0x27bc, "a190", 0x27bd, "a191", 0x27be, "a89", 0x2768, "a90", 0x2769, "a93", 0x276a, "a94", 0x276b, "a91", 0x276c, "a92", 0x276d, "a205", 0x276e, "a85", 0x276f, "a206", 0x2770, "a86", 0x2771, "a87", 0x2772, "a88", 0x2773, "a95", 0x2774, "a96", 0x2775, ".notdef", 0x0000];\n});\nexports.getDingbatsGlyphsUnicode = getDingbatsGlyphsUnicode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGRmanMtZGlzdC9saWIvY29yZS9nbHlwaGxpc3QuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TaW1wbGVQZGZBbmFseXplci8uL25vZGVfbW9kdWxlcy9wZGZqcy1kaXN0L2xpYi9jb3JlL2dseXBobGlzdC5qcz9jZDRjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY3N0YXJ0IFRoZSBmb2xsb3dpbmcgaXMgdGhlIGVudGlyZSBsaWNlbnNlIG5vdGljZSBmb3IgdGhlXG4gKiBKYXZhc2NyaXB0IGNvZGUgaW4gdGhpcyBwYWdlXG4gKlxuICogQ29weXJpZ2h0IDIwMjAgTW96aWxsYSBGb3VuZGF0aW9uXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqIEBsaWNlbmQgVGhlIGFib3ZlIGlzIHRoZSBlbnRpcmUgbGljZW5zZSBub3RpY2UgZm9yIHRoZVxuICogSmF2YXNjcmlwdCBjb2RlIGluIHRoaXMgcGFnZVxuICovXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0R2x5cGhzVW5pY29kZSA9IGV4cG9ydHMuZ2V0RGluZ2JhdHNHbHlwaHNVbmljb2RlID0gdm9pZCAwO1xuXG52YXIgX2NvcmVfdXRpbHMgPSByZXF1aXJlKFwiLi9jb3JlX3V0aWxzLmpzXCIpO1xuXG52YXIgZ2V0R2x5cGhzVW5pY29kZSA9ICgwLCBfY29yZV91dGlscy5nZXRBcnJheUxvb2t1cFRhYmxlRmFjdG9yeSkoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gW1wiQVwiLCAweDAwNDEsIFwiQUVcIiwgMHgwMGM2LCBcIkFFYWN1dGVcIiwgMHgwMWZjLCBcIkFFbWFjcm9uXCIsIDB4MDFlMiwgXCJBRXNtYWxsXCIsIDB4ZjdlNiwgXCJBYWN1dGVcIiwgMHgwMGMxLCBcIkFhY3V0ZXNtYWxsXCIsIDB4ZjdlMSwgXCJBYnJldmVcIiwgMHgwMTAyLCBcIkFicmV2ZWFjdXRlXCIsIDB4MWVhZSwgXCJBYnJldmVjeXJpbGxpY1wiLCAweDA0ZDAsIFwiQWJyZXZlZG90YmVsb3dcIiwgMHgxZWI2LCBcIkFicmV2ZWdyYXZlXCIsIDB4MWViMCwgXCJBYnJldmVob29rYWJvdmVcIiwgMHgxZWIyLCBcIkFicmV2ZXRpbGRlXCIsIDB4MWViNCwgXCJBY2Fyb25cIiwgMHgwMWNkLCBcIkFjaXJjbGVcIiwgMHgyNGI2LCBcIkFjaXJjdW1mbGV4XCIsIDB4MDBjMiwgXCJBY2lyY3VtZmxleGFjdXRlXCIsIDB4MWVhNCwgXCJBY2lyY3VtZmxleGRvdGJlbG93XCIsIDB4MWVhYywgXCJBY2lyY3VtZmxleGdyYXZlXCIsIDB4MWVhNiwgXCJBY2lyY3VtZmxleGhvb2thYm92ZVwiLCAweDFlYTgsIFwiQWNpcmN1bWZsZXhzbWFsbFwiLCAweGY3ZTIsIFwiQWNpcmN1bWZsZXh0aWxkZVwiLCAweDFlYWEsIFwiQWN1dGVcIiwgMHhmNmM5LCBcIkFjdXRlc21hbGxcIiwgMHhmN2I0LCBcIkFjeXJpbGxpY1wiLCAweDA0MTAsIFwiQWRibGdyYXZlXCIsIDB4MDIwMCwgXCJBZGllcmVzaXNcIiwgMHgwMGM0LCBcIkFkaWVyZXNpc2N5cmlsbGljXCIsIDB4MDRkMiwgXCJBZGllcmVzaXNtYWNyb25cIiwgMHgwMWRlLCBcIkFkaWVyZXNpc3NtYWxsXCIsIDB4ZjdlNCwgXCJBZG90YmVsb3dcIiwgMHgxZWEwLCBcIkFkb3RtYWNyb25cIiwgMHgwMWUwLCBcIkFncmF2ZVwiLCAweDAwYzAsIFwiQWdyYXZlc21hbGxcIiwgMHhmN2UwLCBcIkFob29rYWJvdmVcIiwgMHgxZWEyLCBcIkFpZWN5cmlsbGljXCIsIDB4MDRkNCwgXCJBaW52ZXJ0ZWRicmV2ZVwiLCAweDAyMDIsIFwiQWxwaGFcIiwgMHgwMzkxLCBcIkFscGhhdG9ub3NcIiwgMHgwMzg2LCBcIkFtYWNyb25cIiwgMHgwMTAwLCBcIkFtb25vc3BhY2VcIiwgMHhmZjIxLCBcIkFvZ29uZWtcIiwgMHgwMTA0LCBcIkFyaW5nXCIsIDB4MDBjNSwgXCJBcmluZ2FjdXRlXCIsIDB4MDFmYSwgXCJBcmluZ2JlbG93XCIsIDB4MWUwMCwgXCJBcmluZ3NtYWxsXCIsIDB4ZjdlNSwgXCJBc21hbGxcIiwgMHhmNzYxLCBcIkF0aWxkZVwiLCAweDAwYzMsIFwiQXRpbGRlc21hbGxcIiwgMHhmN2UzLCBcIkF5YmFybWVuaWFuXCIsIDB4MDUzMSwgXCJCXCIsIDB4MDA0MiwgXCJCY2lyY2xlXCIsIDB4MjRiNywgXCJCZG90YWNjZW50XCIsIDB4MWUwMiwgXCJCZG90YmVsb3dcIiwgMHgxZTA0LCBcIkJlY3lyaWxsaWNcIiwgMHgwNDExLCBcIkJlbmFybWVuaWFuXCIsIDB4MDUzMiwgXCJCZXRhXCIsIDB4MDM5MiwgXCJCaG9va1wiLCAweDAxODEsIFwiQmxpbmViZWxvd1wiLCAweDFlMDYsIFwiQm1vbm9zcGFjZVwiLCAweGZmMjIsIFwiQnJldmVzbWFsbFwiLCAweGY2ZjQsIFwiQnNtYWxsXCIsIDB4Zjc2MiwgXCJCdG9wYmFyXCIsIDB4MDE4MiwgXCJDXCIsIDB4MDA0MywgXCJDYWFybWVuaWFuXCIsIDB4MDUzZSwgXCJDYWN1dGVcIiwgMHgwMTA2LCBcIkNhcm9uXCIsIDB4ZjZjYSwgXCJDYXJvbnNtYWxsXCIsIDB4ZjZmNSwgXCJDY2Fyb25cIiwgMHgwMTBjLCBcIkNjZWRpbGxhXCIsIDB4MDBjNywgXCJDY2VkaWxsYWFjdXRlXCIsIDB4MWUwOCwgXCJDY2VkaWxsYXNtYWxsXCIsIDB4ZjdlNywgXCJDY2lyY2xlXCIsIDB4MjRiOCwgXCJDY2lyY3VtZmxleFwiLCAweDAxMDgsIFwiQ2RvdFwiLCAweDAxMGEsIFwiQ2RvdGFjY2VudFwiLCAweDAxMGEsIFwiQ2VkaWxsYXNtYWxsXCIsIDB4ZjdiOCwgXCJDaGFhcm1lbmlhblwiLCAweDA1NDksIFwiQ2hlYWJraGFzaWFuY3lyaWxsaWNcIiwgMHgwNGJjLCBcIkNoZWN5cmlsbGljXCIsIDB4MDQyNywgXCJDaGVkZXNjZW5kZXJhYmtoYXNpYW5jeXJpbGxpY1wiLCAweDA0YmUsIFwiQ2hlZGVzY2VuZGVyY3lyaWxsaWNcIiwgMHgwNGI2LCBcIkNoZWRpZXJlc2lzY3lyaWxsaWNcIiwgMHgwNGY0LCBcIkNoZWhhcm1lbmlhblwiLCAweDA1NDMsIFwiQ2hla2hha2Fzc2lhbmN5cmlsbGljXCIsIDB4MDRjYiwgXCJDaGV2ZXJ0aWNhbHN0cm9rZWN5cmlsbGljXCIsIDB4MDRiOCwgXCJDaGlcIiwgMHgwM2E3LCBcIkNob29rXCIsIDB4MDE4NywgXCJDaXJjdW1mbGV4c21hbGxcIiwgMHhmNmY2LCBcIkNtb25vc3BhY2VcIiwgMHhmZjIzLCBcIkNvYXJtZW5pYW5cIiwgMHgwNTUxLCBcIkNzbWFsbFwiLCAweGY3NjMsIFwiRFwiLCAweDAwNDQsIFwiRFpcIiwgMHgwMWYxLCBcIkRaY2Fyb25cIiwgMHgwMWM0LCBcIkRhYXJtZW5pYW5cIiwgMHgwNTM0LCBcIkRhZnJpY2FuXCIsIDB4MDE4OSwgXCJEY2Fyb25cIiwgMHgwMTBlLCBcIkRjZWRpbGxhXCIsIDB4MWUxMCwgXCJEY2lyY2xlXCIsIDB4MjRiOSwgXCJEY2lyY3VtZmxleGJlbG93XCIsIDB4MWUxMiwgXCJEY3JvYXRcIiwgMHgwMTEwLCBcIkRkb3RhY2NlbnRcIiwgMHgxZTBhLCBcIkRkb3RiZWxvd1wiLCAweDFlMGMsIFwiRGVjeXJpbGxpY1wiLCAweDA0MTQsIFwiRGVpY29wdGljXCIsIDB4MDNlZSwgXCJEZWx0YVwiLCAweDIyMDYsIFwiRGVsdGFncmVla1wiLCAweDAzOTQsIFwiRGhvb2tcIiwgMHgwMThhLCBcIkRpZXJlc2lzXCIsIDB4ZjZjYiwgXCJEaWVyZXNpc0FjdXRlXCIsIDB4ZjZjYywgXCJEaWVyZXNpc0dyYXZlXCIsIDB4ZjZjZCwgXCJEaWVyZXNpc3NtYWxsXCIsIDB4ZjdhOCwgXCJEaWdhbW1hZ3JlZWtcIiwgMHgwM2RjLCBcIkRqZWN5cmlsbGljXCIsIDB4MDQwMiwgXCJEbGluZWJlbG93XCIsIDB4MWUwZSwgXCJEbW9ub3NwYWNlXCIsIDB4ZmYyNCwgXCJEb3RhY2NlbnRzbWFsbFwiLCAweGY2ZjcsIFwiRHNsYXNoXCIsIDB4MDExMCwgXCJEc21hbGxcIiwgMHhmNzY0LCBcIkR0b3BiYXJcIiwgMHgwMThiLCBcIkR6XCIsIDB4MDFmMiwgXCJEemNhcm9uXCIsIDB4MDFjNSwgXCJEemVhYmtoYXNpYW5jeXJpbGxpY1wiLCAweDA0ZTAsIFwiRHplY3lyaWxsaWNcIiwgMHgwNDA1LCBcIkR6aGVjeXJpbGxpY1wiLCAweDA0MGYsIFwiRVwiLCAweDAwNDUsIFwiRWFjdXRlXCIsIDB4MDBjOSwgXCJFYWN1dGVzbWFsbFwiLCAweGY3ZTksIFwiRWJyZXZlXCIsIDB4MDExNCwgXCJFY2Fyb25cIiwgMHgwMTFhLCBcIkVjZWRpbGxhYnJldmVcIiwgMHgxZTFjLCBcIkVjaGFybWVuaWFuXCIsIDB4MDUzNSwgXCJFY2lyY2xlXCIsIDB4MjRiYSwgXCJFY2lyY3VtZmxleFwiLCAweDAwY2EsIFwiRWNpcmN1bWZsZXhhY3V0ZVwiLCAweDFlYmUsIFwiRWNpcmN1bWZsZXhiZWxvd1wiLCAweDFlMTgsIFwiRWNpcmN1bWZsZXhkb3RiZWxvd1wiLCAweDFlYzYsIFwiRWNpcmN1bWZsZXhncmF2ZVwiLCAweDFlYzAsIFwiRWNpcmN1bWZsZXhob29rYWJvdmVcIiwgMHgxZWMyLCBcIkVjaXJjdW1mbGV4c21hbGxcIiwgMHhmN2VhLCBcIkVjaXJjdW1mbGV4dGlsZGVcIiwgMHgxZWM0LCBcIkVjeXJpbGxpY1wiLCAweDA0MDQsIFwiRWRibGdyYXZlXCIsIDB4MDIwNCwgXCJFZGllcmVzaXNcIiwgMHgwMGNiLCBcIkVkaWVyZXNpc3NtYWxsXCIsIDB4ZjdlYiwgXCJFZG90XCIsIDB4MDExNiwgXCJFZG90YWNjZW50XCIsIDB4MDExNiwgXCJFZG90YmVsb3dcIiwgMHgxZWI4LCBcIkVmY3lyaWxsaWNcIiwgMHgwNDI0LCBcIkVncmF2ZVwiLCAweDAwYzgsIFwiRWdyYXZlc21hbGxcIiwgMHhmN2U4LCBcIkVoYXJtZW5pYW5cIiwgMHgwNTM3LCBcIkVob29rYWJvdmVcIiwgMHgxZWJhLCBcIkVpZ2h0cm9tYW5cIiwgMHgyMTY3LCBcIkVpbnZlcnRlZGJyZXZlXCIsIDB4MDIwNiwgXCJFaW90aWZpZWRjeXJpbGxpY1wiLCAweDA0NjQsIFwiRWxjeXJpbGxpY1wiLCAweDA0MWIsIFwiRWxldmVucm9tYW5cIiwgMHgyMTZhLCBcIkVtYWNyb25cIiwgMHgwMTEyLCBcIkVtYWNyb25hY3V0ZVwiLCAweDFlMTYsIFwiRW1hY3JvbmdyYXZlXCIsIDB4MWUxNCwgXCJFbWN5cmlsbGljXCIsIDB4MDQxYywgXCJFbW9ub3NwYWNlXCIsIDB4ZmYyNSwgXCJFbmN5cmlsbGljXCIsIDB4MDQxZCwgXCJFbmRlc2NlbmRlcmN5cmlsbGljXCIsIDB4MDRhMiwgXCJFbmdcIiwgMHgwMTRhLCBcIkVuZ2hlY3lyaWxsaWNcIiwgMHgwNGE0LCBcIkVuaG9va2N5cmlsbGljXCIsIDB4MDRjNywgXCJFb2dvbmVrXCIsIDB4MDExOCwgXCJFb3BlblwiLCAweDAxOTAsIFwiRXBzaWxvblwiLCAweDAzOTUsIFwiRXBzaWxvbnRvbm9zXCIsIDB4MDM4OCwgXCJFcmN5cmlsbGljXCIsIDB4MDQyMCwgXCJFcmV2ZXJzZWRcIiwgMHgwMThlLCBcIkVyZXZlcnNlZGN5cmlsbGljXCIsIDB4MDQyZCwgXCJFc2N5cmlsbGljXCIsIDB4MDQyMSwgXCJFc2Rlc2NlbmRlcmN5cmlsbGljXCIsIDB4MDRhYSwgXCJFc2hcIiwgMHgwMWE5LCBcIkVzbWFsbFwiLCAweGY3NjUsIFwiRXRhXCIsIDB4MDM5NywgXCJFdGFybWVuaWFuXCIsIDB4MDUzOCwgXCJFdGF0b25vc1wiLCAweDAzODksIFwiRXRoXCIsIDB4MDBkMCwgXCJFdGhzbWFsbFwiLCAweGY3ZjAsIFwiRXRpbGRlXCIsIDB4MWViYywgXCJFdGlsZGViZWxvd1wiLCAweDFlMWEsIFwiRXVyb1wiLCAweDIwYWMsIFwiRXpoXCIsIDB4MDFiNywgXCJFemhjYXJvblwiLCAweDAxZWUsIFwiRXpocmV2ZXJzZWRcIiwgMHgwMWI4LCBcIkZcIiwgMHgwMDQ2LCBcIkZjaXJjbGVcIiwgMHgyNGJiLCBcIkZkb3RhY2NlbnRcIiwgMHgxZTFlLCBcIkZlaGFybWVuaWFuXCIsIDB4MDU1NiwgXCJGZWljb3B0aWNcIiwgMHgwM2U0LCBcIkZob29rXCIsIDB4MDE5MSwgXCJGaXRhY3lyaWxsaWNcIiwgMHgwNDcyLCBcIkZpdmVyb21hblwiLCAweDIxNjQsIFwiRm1vbm9zcGFjZVwiLCAweGZmMjYsIFwiRm91cnJvbWFuXCIsIDB4MjE2MywgXCJGc21hbGxcIiwgMHhmNzY2LCBcIkdcIiwgMHgwMDQ3LCBcIkdCc3F1YXJlXCIsIDB4MzM4NywgXCJHYWN1dGVcIiwgMHgwMWY0LCBcIkdhbW1hXCIsIDB4MDM5MywgXCJHYW1tYWFmcmljYW5cIiwgMHgwMTk0LCBcIkdhbmdpYWNvcHRpY1wiLCAweDAzZWEsIFwiR2JyZXZlXCIsIDB4MDExZSwgXCJHY2Fyb25cIiwgMHgwMWU2LCBcIkdjZWRpbGxhXCIsIDB4MDEyMiwgXCJHY2lyY2xlXCIsIDB4MjRiYywgXCJHY2lyY3VtZmxleFwiLCAweDAxMWMsIFwiR2NvbW1hYWNjZW50XCIsIDB4MDEyMiwgXCJHZG90XCIsIDB4MDEyMCwgXCJHZG90YWNjZW50XCIsIDB4MDEyMCwgXCJHZWN5cmlsbGljXCIsIDB4MDQxMywgXCJHaGFkYXJtZW5pYW5cIiwgMHgwNTQyLCBcIkdoZW1pZGRsZWhvb2tjeXJpbGxpY1wiLCAweDA0OTQsIFwiR2hlc3Ryb2tlY3lyaWxsaWNcIiwgMHgwNDkyLCBcIkdoZXVwdHVybmN5cmlsbGljXCIsIDB4MDQ5MCwgXCJHaG9va1wiLCAweDAxOTMsIFwiR2ltYXJtZW5pYW5cIiwgMHgwNTMzLCBcIkdqZWN5cmlsbGljXCIsIDB4MDQwMywgXCJHbWFjcm9uXCIsIDB4MWUyMCwgXCJHbW9ub3NwYWNlXCIsIDB4ZmYyNywgXCJHcmF2ZVwiLCAweGY2Y2UsIFwiR3JhdmVzbWFsbFwiLCAweGY3NjAsIFwiR3NtYWxsXCIsIDB4Zjc2NywgXCJHc21hbGxob29rXCIsIDB4MDI5YiwgXCJHc3Ryb2tlXCIsIDB4MDFlNCwgXCJIXCIsIDB4MDA0OCwgXCJIMTg1MzNcIiwgMHgyNWNmLCBcIkgxODU0M1wiLCAweDI1YWEsIFwiSDE4NTUxXCIsIDB4MjVhYiwgXCJIMjIwNzNcIiwgMHgyNWExLCBcIkhQc3F1YXJlXCIsIDB4MzNjYiwgXCJIYWFia2hhc2lhbmN5cmlsbGljXCIsIDB4MDRhOCwgXCJIYWRlc2NlbmRlcmN5cmlsbGljXCIsIDB4MDRiMiwgXCJIYXJkc2lnbmN5cmlsbGljXCIsIDB4MDQyYSwgXCJIYmFyXCIsIDB4MDEyNiwgXCJIYnJldmViZWxvd1wiLCAweDFlMmEsIFwiSGNlZGlsbGFcIiwgMHgxZTI4LCBcIkhjaXJjbGVcIiwgMHgyNGJkLCBcIkhjaXJjdW1mbGV4XCIsIDB4MDEyNCwgXCJIZGllcmVzaXNcIiwgMHgxZTI2LCBcIkhkb3RhY2NlbnRcIiwgMHgxZTIyLCBcIkhkb3RiZWxvd1wiLCAweDFlMjQsIFwiSG1vbm9zcGFjZVwiLCAweGZmMjgsIFwiSG9hcm1lbmlhblwiLCAweDA1NDAsIFwiSG9yaWNvcHRpY1wiLCAweDAzZTgsIFwiSHNtYWxsXCIsIDB4Zjc2OCwgXCJIdW5nYXJ1bWxhdXRcIiwgMHhmNmNmLCBcIkh1bmdhcnVtbGF1dHNtYWxsXCIsIDB4ZjZmOCwgXCJIenNxdWFyZVwiLCAweDMzOTAsIFwiSVwiLCAweDAwNDksIFwiSUFjeXJpbGxpY1wiLCAweDA0MmYsIFwiSUpcIiwgMHgwMTMyLCBcIklVY3lyaWxsaWNcIiwgMHgwNDJlLCBcIklhY3V0ZVwiLCAweDAwY2QsIFwiSWFjdXRlc21hbGxcIiwgMHhmN2VkLCBcIklicmV2ZVwiLCAweDAxMmMsIFwiSWNhcm9uXCIsIDB4MDFjZiwgXCJJY2lyY2xlXCIsIDB4MjRiZSwgXCJJY2lyY3VtZmxleFwiLCAweDAwY2UsIFwiSWNpcmN1bWZsZXhzbWFsbFwiLCAweGY3ZWUsIFwiSWN5cmlsbGljXCIsIDB4MDQwNiwgXCJJZGJsZ3JhdmVcIiwgMHgwMjA4LCBcIklkaWVyZXNpc1wiLCAweDAwY2YsIFwiSWRpZXJlc2lzYWN1dGVcIiwgMHgxZTJlLCBcIklkaWVyZXNpc2N5cmlsbGljXCIsIDB4MDRlNCwgXCJJZGllcmVzaXNzbWFsbFwiLCAweGY3ZWYsIFwiSWRvdFwiLCAweDAxMzAsIFwiSWRvdGFjY2VudFwiLCAweDAxMzAsIFwiSWRvdGJlbG93XCIsIDB4MWVjYSwgXCJJZWJyZXZlY3lyaWxsaWNcIiwgMHgwNGQ2LCBcIkllY3lyaWxsaWNcIiwgMHgwNDE1LCBcIklmcmFrdHVyXCIsIDB4MjExMSwgXCJJZ3JhdmVcIiwgMHgwMGNjLCBcIklncmF2ZXNtYWxsXCIsIDB4ZjdlYywgXCJJaG9va2Fib3ZlXCIsIDB4MWVjOCwgXCJJaWN5cmlsbGljXCIsIDB4MDQxOCwgXCJJaW52ZXJ0ZWRicmV2ZVwiLCAweDAyMGEsIFwiSWlzaG9ydGN5cmlsbGljXCIsIDB4MDQxOSwgXCJJbWFjcm9uXCIsIDB4MDEyYSwgXCJJbWFjcm9uY3lyaWxsaWNcIiwgMHgwNGUyLCBcIkltb25vc3BhY2VcIiwgMHhmZjI5LCBcIkluaWFybWVuaWFuXCIsIDB4MDUzYiwgXCJJb2N5cmlsbGljXCIsIDB4MDQwMSwgXCJJb2dvbmVrXCIsIDB4MDEyZSwgXCJJb3RhXCIsIDB4MDM5OSwgXCJJb3RhYWZyaWNhblwiLCAweDAxOTYsIFwiSW90YWRpZXJlc2lzXCIsIDB4MDNhYSwgXCJJb3RhdG9ub3NcIiwgMHgwMzhhLCBcIklzbWFsbFwiLCAweGY3NjksIFwiSXN0cm9rZVwiLCAweDAxOTcsIFwiSXRpbGRlXCIsIDB4MDEyOCwgXCJJdGlsZGViZWxvd1wiLCAweDFlMmMsIFwiSXpoaXRzYWN5cmlsbGljXCIsIDB4MDQ3NCwgXCJJemhpdHNhZGJsZ3JhdmVjeXJpbGxpY1wiLCAweDA0NzYsIFwiSlwiLCAweDAwNGEsIFwiSmFhcm1lbmlhblwiLCAweDA1NDEsIFwiSmNpcmNsZVwiLCAweDI0YmYsIFwiSmNpcmN1bWZsZXhcIiwgMHgwMTM0LCBcIkplY3lyaWxsaWNcIiwgMHgwNDA4LCBcIkpoZWhhcm1lbmlhblwiLCAweDA1NGIsIFwiSm1vbm9zcGFjZVwiLCAweGZmMmEsIFwiSnNtYWxsXCIsIDB4Zjc2YSwgXCJLXCIsIDB4MDA0YiwgXCJLQnNxdWFyZVwiLCAweDMzODUsIFwiS0tzcXVhcmVcIiwgMHgzM2NkLCBcIkthYmFzaGtpcmN5cmlsbGljXCIsIDB4MDRhMCwgXCJLYWN1dGVcIiwgMHgxZTMwLCBcIkthY3lyaWxsaWNcIiwgMHgwNDFhLCBcIkthZGVzY2VuZGVyY3lyaWxsaWNcIiwgMHgwNDlhLCBcIkthaG9va2N5cmlsbGljXCIsIDB4MDRjMywgXCJLYXBwYVwiLCAweDAzOWEsIFwiS2FzdHJva2VjeXJpbGxpY1wiLCAweDA0OWUsIFwiS2F2ZXJ0aWNhbHN0cm9rZWN5cmlsbGljXCIsIDB4MDQ5YywgXCJLY2Fyb25cIiwgMHgwMWU4LCBcIktjZWRpbGxhXCIsIDB4MDEzNiwgXCJLY2lyY2xlXCIsIDB4MjRjMCwgXCJLY29tbWFhY2NlbnRcIiwgMHgwMTM2LCBcIktkb3RiZWxvd1wiLCAweDFlMzIsIFwiS2VoYXJtZW5pYW5cIiwgMHgwNTU0LCBcIktlbmFybWVuaWFuXCIsIDB4MDUzZiwgXCJLaGFjeXJpbGxpY1wiLCAweDA0MjUsIFwiS2hlaWNvcHRpY1wiLCAweDAzZTYsIFwiS2hvb2tcIiwgMHgwMTk4LCBcIktqZWN5cmlsbGljXCIsIDB4MDQwYywgXCJLbGluZWJlbG93XCIsIDB4MWUzNCwgXCJLbW9ub3NwYWNlXCIsIDB4ZmYyYiwgXCJLb3BwYWN5cmlsbGljXCIsIDB4MDQ4MCwgXCJLb3BwYWdyZWVrXCIsIDB4MDNkZSwgXCJLc2ljeXJpbGxpY1wiLCAweDA0NmUsIFwiS3NtYWxsXCIsIDB4Zjc2YiwgXCJMXCIsIDB4MDA0YywgXCJMSlwiLCAweDAxYzcsIFwiTExcIiwgMHhmNmJmLCBcIkxhY3V0ZVwiLCAweDAxMzksIFwiTGFtYmRhXCIsIDB4MDM5YiwgXCJMY2Fyb25cIiwgMHgwMTNkLCBcIkxjZWRpbGxhXCIsIDB4MDEzYiwgXCJMY2lyY2xlXCIsIDB4MjRjMSwgXCJMY2lyY3VtZmxleGJlbG93XCIsIDB4MWUzYywgXCJMY29tbWFhY2NlbnRcIiwgMHgwMTNiLCBcIkxkb3RcIiwgMHgwMTNmLCBcIkxkb3RhY2NlbnRcIiwgMHgwMTNmLCBcIkxkb3RiZWxvd1wiLCAweDFlMzYsIFwiTGRvdGJlbG93bWFjcm9uXCIsIDB4MWUzOCwgXCJMaXduYXJtZW5pYW5cIiwgMHgwNTNjLCBcIkxqXCIsIDB4MDFjOCwgXCJMamVjeXJpbGxpY1wiLCAweDA0MDksIFwiTGxpbmViZWxvd1wiLCAweDFlM2EsIFwiTG1vbm9zcGFjZVwiLCAweGZmMmMsIFwiTHNsYXNoXCIsIDB4MDE0MSwgXCJMc2xhc2hzbWFsbFwiLCAweGY2ZjksIFwiTHNtYWxsXCIsIDB4Zjc2YywgXCJNXCIsIDB4MDA0ZCwgXCJNQnNxdWFyZVwiLCAweDMzODYsIFwiTWFjcm9uXCIsIDB4ZjZkMCwgXCJNYWNyb25zbWFsbFwiLCAweGY3YWYsIFwiTWFjdXRlXCIsIDB4MWUzZSwgXCJNY2lyY2xlXCIsIDB4MjRjMiwgXCJNZG90YWNjZW50XCIsIDB4MWU0MCwgXCJNZG90YmVsb3dcIiwgMHgxZTQyLCBcIk1lbmFybWVuaWFuXCIsIDB4MDU0NCwgXCJNbW9ub3NwYWNlXCIsIDB4ZmYyZCwgXCJNc21hbGxcIiwgMHhmNzZkLCBcIk10dXJuZWRcIiwgMHgwMTljLCBcIk11XCIsIDB4MDM5YywgXCJOXCIsIDB4MDA0ZSwgXCJOSlwiLCAweDAxY2EsIFwiTmFjdXRlXCIsIDB4MDE0MywgXCJOY2Fyb25cIiwgMHgwMTQ3LCBcIk5jZWRpbGxhXCIsIDB4MDE0NSwgXCJOY2lyY2xlXCIsIDB4MjRjMywgXCJOY2lyY3VtZmxleGJlbG93XCIsIDB4MWU0YSwgXCJOY29tbWFhY2NlbnRcIiwgMHgwMTQ1LCBcIk5kb3RhY2NlbnRcIiwgMHgxZTQ0LCBcIk5kb3RiZWxvd1wiLCAweDFlNDYsIFwiTmhvb2tsZWZ0XCIsIDB4MDE5ZCwgXCJOaW5lcm9tYW5cIiwgMHgyMTY4LCBcIk5qXCIsIDB4MDFjYiwgXCJOamVjeXJpbGxpY1wiLCAweDA0MGEsIFwiTmxpbmViZWxvd1wiLCAweDFlNDgsIFwiTm1vbm9zcGFjZVwiLCAweGZmMmUsIFwiTm93YXJtZW5pYW5cIiwgMHgwNTQ2LCBcIk5zbWFsbFwiLCAweGY3NmUsIFwiTnRpbGRlXCIsIDB4MDBkMSwgXCJOdGlsZGVzbWFsbFwiLCAweGY3ZjEsIFwiTnVcIiwgMHgwMzlkLCBcIk9cIiwgMHgwMDRmLCBcIk9FXCIsIDB4MDE1MiwgXCJPRXNtYWxsXCIsIDB4ZjZmYSwgXCJPYWN1dGVcIiwgMHgwMGQzLCBcIk9hY3V0ZXNtYWxsXCIsIDB4ZjdmMywgXCJPYmFycmVkY3lyaWxsaWNcIiwgMHgwNGU4LCBcIk9iYXJyZWRkaWVyZXNpc2N5cmlsbGljXCIsIDB4MDRlYSwgXCJPYnJldmVcIiwgMHgwMTRlLCBcIk9jYXJvblwiLCAweDAxZDEsIFwiT2NlbnRlcmVkdGlsZGVcIiwgMHgwMTlmLCBcIk9jaXJjbGVcIiwgMHgyNGM0LCBcIk9jaXJjdW1mbGV4XCIsIDB4MDBkNCwgXCJPY2lyY3VtZmxleGFjdXRlXCIsIDB4MWVkMCwgXCJPY2lyY3VtZmxleGRvdGJlbG93XCIsIDB4MWVkOCwgXCJPY2lyY3VtZmxleGdyYXZlXCIsIDB4MWVkMiwgXCJPY2lyY3VtZmxleGhvb2thYm92ZVwiLCAweDFlZDQsIFwiT2NpcmN1bWZsZXhzbWFsbFwiLCAweGY3ZjQsIFwiT2NpcmN1bWZsZXh0aWxkZVwiLCAweDFlZDYsIFwiT2N5cmlsbGljXCIsIDB4MDQxZSwgXCJPZGJsYWN1dGVcIiwgMHgwMTUwLCBcIk9kYmxncmF2ZVwiLCAweDAyMGMsIFwiT2RpZXJlc2lzXCIsIDB4MDBkNiwgXCJPZGllcmVzaXNjeXJpbGxpY1wiLCAweDA0ZTYsIFwiT2RpZXJlc2lzc21hbGxcIiwgMHhmN2Y2LCBcIk9kb3RiZWxvd1wiLCAweDFlY2MsIFwiT2dvbmVrc21hbGxcIiwgMHhmNmZiLCBcIk9ncmF2ZVwiLCAweDAwZDIsIFwiT2dyYXZlc21hbGxcIiwgMHhmN2YyLCBcIk9oYXJtZW5pYW5cIiwgMHgwNTU1LCBcIk9obVwiLCAweDIxMjYsIFwiT2hvb2thYm92ZVwiLCAweDFlY2UsIFwiT2hvcm5cIiwgMHgwMWEwLCBcIk9ob3JuYWN1dGVcIiwgMHgxZWRhLCBcIk9ob3JuZG90YmVsb3dcIiwgMHgxZWUyLCBcIk9ob3JuZ3JhdmVcIiwgMHgxZWRjLCBcIk9ob3JuaG9va2Fib3ZlXCIsIDB4MWVkZSwgXCJPaG9ybnRpbGRlXCIsIDB4MWVlMCwgXCJPaHVuZ2FydW1sYXV0XCIsIDB4MDE1MCwgXCJPaVwiLCAweDAxYTIsIFwiT2ludmVydGVkYnJldmVcIiwgMHgwMjBlLCBcIk9tYWNyb25cIiwgMHgwMTRjLCBcIk9tYWNyb25hY3V0ZVwiLCAweDFlNTIsIFwiT21hY3JvbmdyYXZlXCIsIDB4MWU1MCwgXCJPbWVnYVwiLCAweDIxMjYsIFwiT21lZ2FjeXJpbGxpY1wiLCAweDA0NjAsIFwiT21lZ2FncmVla1wiLCAweDAzYTksIFwiT21lZ2Fyb3VuZGN5cmlsbGljXCIsIDB4MDQ3YSwgXCJPbWVnYXRpdGxvY3lyaWxsaWNcIiwgMHgwNDdjLCBcIk9tZWdhdG9ub3NcIiwgMHgwMzhmLCBcIk9taWNyb25cIiwgMHgwMzlmLCBcIk9taWNyb250b25vc1wiLCAweDAzOGMsIFwiT21vbm9zcGFjZVwiLCAweGZmMmYsIFwiT25lcm9tYW5cIiwgMHgyMTYwLCBcIk9vZ29uZWtcIiwgMHgwMWVhLCBcIk9vZ29uZWttYWNyb25cIiwgMHgwMWVjLCBcIk9vcGVuXCIsIDB4MDE4NiwgXCJPc2xhc2hcIiwgMHgwMGQ4LCBcIk9zbGFzaGFjdXRlXCIsIDB4MDFmZSwgXCJPc2xhc2hzbWFsbFwiLCAweGY3ZjgsIFwiT3NtYWxsXCIsIDB4Zjc2ZiwgXCJPc3Ryb2tlYWN1dGVcIiwgMHgwMWZlLCBcIk90Y3lyaWxsaWNcIiwgMHgwNDdlLCBcIk90aWxkZVwiLCAweDAwZDUsIFwiT3RpbGRlYWN1dGVcIiwgMHgxZTRjLCBcIk90aWxkZWRpZXJlc2lzXCIsIDB4MWU0ZSwgXCJPdGlsZGVzbWFsbFwiLCAweGY3ZjUsIFwiUFwiLCAweDAwNTAsIFwiUGFjdXRlXCIsIDB4MWU1NCwgXCJQY2lyY2xlXCIsIDB4MjRjNSwgXCJQZG90YWNjZW50XCIsIDB4MWU1NiwgXCJQZWN5cmlsbGljXCIsIDB4MDQxZiwgXCJQZWhhcm1lbmlhblwiLCAweDA1NGEsIFwiUGVtaWRkbGVob29rY3lyaWxsaWNcIiwgMHgwNGE2LCBcIlBoaVwiLCAweDAzYTYsIFwiUGhvb2tcIiwgMHgwMWE0LCBcIlBpXCIsIDB4MDNhMCwgXCJQaXdyYXJtZW5pYW5cIiwgMHgwNTUzLCBcIlBtb25vc3BhY2VcIiwgMHhmZjMwLCBcIlBzaVwiLCAweDAzYTgsIFwiUHNpY3lyaWxsaWNcIiwgMHgwNDcwLCBcIlBzbWFsbFwiLCAweGY3NzAsIFwiUVwiLCAweDAwNTEsIFwiUWNpcmNsZVwiLCAweDI0YzYsIFwiUW1vbm9zcGFjZVwiLCAweGZmMzEsIFwiUXNtYWxsXCIsIDB4Zjc3MSwgXCJSXCIsIDB4MDA1MiwgXCJSYWFybWVuaWFuXCIsIDB4MDU0YywgXCJSYWN1dGVcIiwgMHgwMTU0LCBcIlJjYXJvblwiLCAweDAxNTgsIFwiUmNlZGlsbGFcIiwgMHgwMTU2LCBcIlJjaXJjbGVcIiwgMHgyNGM3LCBcIlJjb21tYWFjY2VudFwiLCAweDAxNTYsIFwiUmRibGdyYXZlXCIsIDB4MDIxMCwgXCJSZG90YWNjZW50XCIsIDB4MWU1OCwgXCJSZG90YmVsb3dcIiwgMHgxZTVhLCBcIlJkb3RiZWxvd21hY3JvblwiLCAweDFlNWMsIFwiUmVoYXJtZW5pYW5cIiwgMHgwNTUwLCBcIlJmcmFrdHVyXCIsIDB4MjExYywgXCJSaG9cIiwgMHgwM2ExLCBcIlJpbmdzbWFsbFwiLCAweGY2ZmMsIFwiUmludmVydGVkYnJldmVcIiwgMHgwMjEyLCBcIlJsaW5lYmVsb3dcIiwgMHgxZTVlLCBcIlJtb25vc3BhY2VcIiwgMHhmZjMyLCBcIlJzbWFsbFwiLCAweGY3NzIsIFwiUnNtYWxsaW52ZXJ0ZWRcIiwgMHgwMjgxLCBcIlJzbWFsbGludmVydGVkc3VwZXJpb3JcIiwgMHgwMmI2LCBcIlNcIiwgMHgwMDUzLCBcIlNGMDEwMDAwXCIsIDB4MjUwYywgXCJTRjAyMDAwMFwiLCAweDI1MTQsIFwiU0YwMzAwMDBcIiwgMHgyNTEwLCBcIlNGMDQwMDAwXCIsIDB4MjUxOCwgXCJTRjA1MDAwMFwiLCAweDI1M2MsIFwiU0YwNjAwMDBcIiwgMHgyNTJjLCBcIlNGMDcwMDAwXCIsIDB4MjUzNCwgXCJTRjA4MDAwMFwiLCAweDI1MWMsIFwiU0YwOTAwMDBcIiwgMHgyNTI0LCBcIlNGMTAwMDAwXCIsIDB4MjUwMCwgXCJTRjExMDAwMFwiLCAweDI1MDIsIFwiU0YxOTAwMDBcIiwgMHgyNTYxLCBcIlNGMjAwMDAwXCIsIDB4MjU2MiwgXCJTRjIxMDAwMFwiLCAweDI1NTYsIFwiU0YyMjAwMDBcIiwgMHgyNTU1LCBcIlNGMjMwMDAwXCIsIDB4MjU2MywgXCJTRjI0MDAwMFwiLCAweDI1NTEsIFwiU0YyNTAwMDBcIiwgMHgyNTU3LCBcIlNGMjYwMDAwXCIsIDB4MjU1ZCwgXCJTRjI3MDAwMFwiLCAweDI1NWMsIFwiU0YyODAwMDBcIiwgMHgyNTViLCBcIlNGMzYwMDAwXCIsIDB4MjU1ZSwgXCJTRjM3MDAwMFwiLCAweDI1NWYsIFwiU0YzODAwMDBcIiwgMHgyNTVhLCBcIlNGMzkwMDAwXCIsIDB4MjU1NCwgXCJTRjQwMDAwMFwiLCAweDI1NjksIFwiU0Y0MTAwMDBcIiwgMHgyNTY2LCBcIlNGNDIwMDAwXCIsIDB4MjU2MCwgXCJTRjQzMDAwMFwiLCAweDI1NTAsIFwiU0Y0NDAwMDBcIiwgMHgyNTZjLCBcIlNGNDUwMDAwXCIsIDB4MjU2NywgXCJTRjQ2MDAwMFwiLCAweDI1NjgsIFwiU0Y0NzAwMDBcIiwgMHgyNTY0LCBcIlNGNDgwMDAwXCIsIDB4MjU2NSwgXCJTRjQ5MDAwMFwiLCAweDI1NTksIFwiU0Y1MDAwMDBcIiwgMHgyNTU4LCBcIlNGNTEwMDAwXCIsIDB4MjU1MiwgXCJTRjUyMDAwMFwiLCAweDI1NTMsIFwiU0Y1MzAwMDBcIiwgMHgyNTZiLCBcIlNGNTQwMDAwXCIsIDB4MjU2YSwgXCJTYWN1dGVcIiwgMHgwMTVhLCBcIlNhY3V0ZWRvdGFjY2VudFwiLCAweDFlNjQsIFwiU2FtcGlncmVla1wiLCAweDAzZTAsIFwiU2Nhcm9uXCIsIDB4MDE2MCwgXCJTY2Fyb25kb3RhY2NlbnRcIiwgMHgxZTY2LCBcIlNjYXJvbnNtYWxsXCIsIDB4ZjZmZCwgXCJTY2VkaWxsYVwiLCAweDAxNWUsIFwiU2Nod2FcIiwgMHgwMThmLCBcIlNjaHdhY3lyaWxsaWNcIiwgMHgwNGQ4LCBcIlNjaHdhZGllcmVzaXNjeXJpbGxpY1wiLCAweDA0ZGEsIFwiU2NpcmNsZVwiLCAweDI0YzgsIFwiU2NpcmN1bWZsZXhcIiwgMHgwMTVjLCBcIlNjb21tYWFjY2VudFwiLCAweDAyMTgsIFwiU2RvdGFjY2VudFwiLCAweDFlNjAsIFwiU2RvdGJlbG93XCIsIDB4MWU2MiwgXCJTZG90YmVsb3dkb3RhY2NlbnRcIiwgMHgxZTY4LCBcIlNlaGFybWVuaWFuXCIsIDB4MDU0ZCwgXCJTZXZlbnJvbWFuXCIsIDB4MjE2NiwgXCJTaGFhcm1lbmlhblwiLCAweDA1NDcsIFwiU2hhY3lyaWxsaWNcIiwgMHgwNDI4LCBcIlNoY2hhY3lyaWxsaWNcIiwgMHgwNDI5LCBcIlNoZWljb3B0aWNcIiwgMHgwM2UyLCBcIlNoaGFjeXJpbGxpY1wiLCAweDA0YmEsIFwiU2hpbWFjb3B0aWNcIiwgMHgwM2VjLCBcIlNpZ21hXCIsIDB4MDNhMywgXCJTaXhyb21hblwiLCAweDIxNjUsIFwiU21vbm9zcGFjZVwiLCAweGZmMzMsIFwiU29mdHNpZ25jeXJpbGxpY1wiLCAweDA0MmMsIFwiU3NtYWxsXCIsIDB4Zjc3MywgXCJTdGlnbWFncmVla1wiLCAweDAzZGEsIFwiVFwiLCAweDAwNTQsIFwiVGF1XCIsIDB4MDNhNCwgXCJUYmFyXCIsIDB4MDE2NiwgXCJUY2Fyb25cIiwgMHgwMTY0LCBcIlRjZWRpbGxhXCIsIDB4MDE2MiwgXCJUY2lyY2xlXCIsIDB4MjRjOSwgXCJUY2lyY3VtZmxleGJlbG93XCIsIDB4MWU3MCwgXCJUY29tbWFhY2NlbnRcIiwgMHgwMTYyLCBcIlRkb3RhY2NlbnRcIiwgMHgxZTZhLCBcIlRkb3RiZWxvd1wiLCAweDFlNmMsIFwiVGVjeXJpbGxpY1wiLCAweDA0MjIsIFwiVGVkZXNjZW5kZXJjeXJpbGxpY1wiLCAweDA0YWMsIFwiVGVucm9tYW5cIiwgMHgyMTY5LCBcIlRldHNlY3lyaWxsaWNcIiwgMHgwNGI0LCBcIlRoZXRhXCIsIDB4MDM5OCwgXCJUaG9va1wiLCAweDAxYWMsIFwiVGhvcm5cIiwgMHgwMGRlLCBcIlRob3Juc21hbGxcIiwgMHhmN2ZlLCBcIlRocmVlcm9tYW5cIiwgMHgyMTYyLCBcIlRpbGRlc21hbGxcIiwgMHhmNmZlLCBcIlRpd25hcm1lbmlhblwiLCAweDA1NGYsIFwiVGxpbmViZWxvd1wiLCAweDFlNmUsIFwiVG1vbm9zcGFjZVwiLCAweGZmMzQsIFwiVG9hcm1lbmlhblwiLCAweDA1MzksIFwiVG9uZWZpdmVcIiwgMHgwMWJjLCBcIlRvbmVzaXhcIiwgMHgwMTg0LCBcIlRvbmV0d29cIiwgMHgwMWE3LCBcIlRyZXRyb2ZsZXhob29rXCIsIDB4MDFhZSwgXCJUc2VjeXJpbGxpY1wiLCAweDA0MjYsIFwiVHNoZWN5cmlsbGljXCIsIDB4MDQwYiwgXCJUc21hbGxcIiwgMHhmNzc0LCBcIlR3ZWx2ZXJvbWFuXCIsIDB4MjE2YiwgXCJUd29yb21hblwiLCAweDIxNjEsIFwiVVwiLCAweDAwNTUsIFwiVWFjdXRlXCIsIDB4MDBkYSwgXCJVYWN1dGVzbWFsbFwiLCAweGY3ZmEsIFwiVWJyZXZlXCIsIDB4MDE2YywgXCJVY2Fyb25cIiwgMHgwMWQzLCBcIlVjaXJjbGVcIiwgMHgyNGNhLCBcIlVjaXJjdW1mbGV4XCIsIDB4MDBkYiwgXCJVY2lyY3VtZmxleGJlbG93XCIsIDB4MWU3NiwgXCJVY2lyY3VtZmxleHNtYWxsXCIsIDB4ZjdmYiwgXCJVY3lyaWxsaWNcIiwgMHgwNDIzLCBcIlVkYmxhY3V0ZVwiLCAweDAxNzAsIFwiVWRibGdyYXZlXCIsIDB4MDIxNCwgXCJVZGllcmVzaXNcIiwgMHgwMGRjLCBcIlVkaWVyZXNpc2FjdXRlXCIsIDB4MDFkNywgXCJVZGllcmVzaXNiZWxvd1wiLCAweDFlNzIsIFwiVWRpZXJlc2lzY2Fyb25cIiwgMHgwMWQ5LCBcIlVkaWVyZXNpc2N5cmlsbGljXCIsIDB4MDRmMCwgXCJVZGllcmVzaXNncmF2ZVwiLCAweDAxZGIsIFwiVWRpZXJlc2lzbWFjcm9uXCIsIDB4MDFkNSwgXCJVZGllcmVzaXNzbWFsbFwiLCAweGY3ZmMsIFwiVWRvdGJlbG93XCIsIDB4MWVlNCwgXCJVZ3JhdmVcIiwgMHgwMGQ5LCBcIlVncmF2ZXNtYWxsXCIsIDB4ZjdmOSwgXCJVaG9va2Fib3ZlXCIsIDB4MWVlNiwgXCJVaG9yblwiLCAweDAxYWYsIFwiVWhvcm5hY3V0ZVwiLCAweDFlZTgsIFwiVWhvcm5kb3RiZWxvd1wiLCAweDFlZjAsIFwiVWhvcm5ncmF2ZVwiLCAweDFlZWEsIFwiVWhvcm5ob29rYWJvdmVcIiwgMHgxZWVjLCBcIlVob3JudGlsZGVcIiwgMHgxZWVlLCBcIlVodW5nYXJ1bWxhdXRcIiwgMHgwMTcwLCBcIlVodW5nYXJ1bWxhdXRjeXJpbGxpY1wiLCAweDA0ZjIsIFwiVWludmVydGVkYnJldmVcIiwgMHgwMjE2LCBcIlVrY3lyaWxsaWNcIiwgMHgwNDc4LCBcIlVtYWNyb25cIiwgMHgwMTZhLCBcIlVtYWNyb25jeXJpbGxpY1wiLCAweDA0ZWUsIFwiVW1hY3JvbmRpZXJlc2lzXCIsIDB4MWU3YSwgXCJVbW9ub3NwYWNlXCIsIDB4ZmYzNSwgXCJVb2dvbmVrXCIsIDB4MDE3MiwgXCJVcHNpbG9uXCIsIDB4MDNhNSwgXCJVcHNpbG9uMVwiLCAweDAzZDIsIFwiVXBzaWxvbmFjdXRlaG9va3N5bWJvbGdyZWVrXCIsIDB4MDNkMywgXCJVcHNpbG9uYWZyaWNhblwiLCAweDAxYjEsIFwiVXBzaWxvbmRpZXJlc2lzXCIsIDB4MDNhYiwgXCJVcHNpbG9uZGllcmVzaXNob29rc3ltYm9sZ3JlZWtcIiwgMHgwM2Q0LCBcIlVwc2lsb25ob29rc3ltYm9sXCIsIDB4MDNkMiwgXCJVcHNpbG9udG9ub3NcIiwgMHgwMzhlLCBcIlVyaW5nXCIsIDB4MDE2ZSwgXCJVc2hvcnRjeXJpbGxpY1wiLCAweDA0MGUsIFwiVXNtYWxsXCIsIDB4Zjc3NSwgXCJVc3RyYWlnaHRjeXJpbGxpY1wiLCAweDA0YWUsIFwiVXN0cmFpZ2h0c3Ryb2tlY3lyaWxsaWNcIiwgMHgwNGIwLCBcIlV0aWxkZVwiLCAweDAxNjgsIFwiVXRpbGRlYWN1dGVcIiwgMHgxZTc4LCBcIlV0aWxkZWJlbG93XCIsIDB4MWU3NCwgXCJWXCIsIDB4MDA1NiwgXCJWY2lyY2xlXCIsIDB4MjRjYiwgXCJWZG90YmVsb3dcIiwgMHgxZTdlLCBcIlZlY3lyaWxsaWNcIiwgMHgwNDEyLCBcIlZld2FybWVuaWFuXCIsIDB4MDU0ZSwgXCJWaG9va1wiLCAweDAxYjIsIFwiVm1vbm9zcGFjZVwiLCAweGZmMzYsIFwiVm9hcm1lbmlhblwiLCAweDA1NDgsIFwiVnNtYWxsXCIsIDB4Zjc3NiwgXCJWdGlsZGVcIiwgMHgxZTdjLCBcIldcIiwgMHgwMDU3LCBcIldhY3V0ZVwiLCAweDFlODIsIFwiV2NpcmNsZVwiLCAweDI0Y2MsIFwiV2NpcmN1bWZsZXhcIiwgMHgwMTc0LCBcIldkaWVyZXNpc1wiLCAweDFlODQsIFwiV2RvdGFjY2VudFwiLCAweDFlODYsIFwiV2RvdGJlbG93XCIsIDB4MWU4OCwgXCJXZ3JhdmVcIiwgMHgxZTgwLCBcIldtb25vc3BhY2VcIiwgMHhmZjM3LCBcIldzbWFsbFwiLCAweGY3NzcsIFwiWFwiLCAweDAwNTgsIFwiWGNpcmNsZVwiLCAweDI0Y2QsIFwiWGRpZXJlc2lzXCIsIDB4MWU4YywgXCJYZG90YWNjZW50XCIsIDB4MWU4YSwgXCJYZWhhcm1lbmlhblwiLCAweDA1M2QsIFwiWGlcIiwgMHgwMzllLCBcIlhtb25vc3BhY2VcIiwgMHhmZjM4LCBcIlhzbWFsbFwiLCAweGY3NzgsIFwiWVwiLCAweDAwNTksIFwiWWFjdXRlXCIsIDB4MDBkZCwgXCJZYWN1dGVzbWFsbFwiLCAweGY3ZmQsIFwiWWF0Y3lyaWxsaWNcIiwgMHgwNDYyLCBcIlljaXJjbGVcIiwgMHgyNGNlLCBcIlljaXJjdW1mbGV4XCIsIDB4MDE3NiwgXCJZZGllcmVzaXNcIiwgMHgwMTc4LCBcIllkaWVyZXNpc3NtYWxsXCIsIDB4ZjdmZiwgXCJZZG90YWNjZW50XCIsIDB4MWU4ZSwgXCJZZG90YmVsb3dcIiwgMHgxZWY0LCBcIlllcmljeXJpbGxpY1wiLCAweDA0MmIsIFwiWWVydWRpZXJlc2lzY3lyaWxsaWNcIiwgMHgwNGY4LCBcIllncmF2ZVwiLCAweDFlZjIsIFwiWWhvb2tcIiwgMHgwMWIzLCBcIllob29rYWJvdmVcIiwgMHgxZWY2LCBcIllpYXJtZW5pYW5cIiwgMHgwNTQ1LCBcIllpY3lyaWxsaWNcIiwgMHgwNDA3LCBcIllpd25hcm1lbmlhblwiLCAweDA1NTIsIFwiWW1vbm9zcGFjZVwiLCAweGZmMzksIFwiWXNtYWxsXCIsIDB4Zjc3OSwgXCJZdGlsZGVcIiwgMHgxZWY4LCBcIll1c2JpZ2N5cmlsbGljXCIsIDB4MDQ2YSwgXCJZdXNiaWdpb3RpZmllZGN5cmlsbGljXCIsIDB4MDQ2YywgXCJZdXNsaXR0bGVjeXJpbGxpY1wiLCAweDA0NjYsIFwiWXVzbGl0dGxlaW90aWZpZWRjeXJpbGxpY1wiLCAweDA0NjgsIFwiWlwiLCAweDAwNWEsIFwiWmFhcm1lbmlhblwiLCAweDA1MzYsIFwiWmFjdXRlXCIsIDB4MDE3OSwgXCJaY2Fyb25cIiwgMHgwMTdkLCBcIlpjYXJvbnNtYWxsXCIsIDB4ZjZmZiwgXCJaY2lyY2xlXCIsIDB4MjRjZiwgXCJaY2lyY3VtZmxleFwiLCAweDFlOTAsIFwiWmRvdFwiLCAweDAxN2IsIFwiWmRvdGFjY2VudFwiLCAweDAxN2IsIFwiWmRvdGJlbG93XCIsIDB4MWU5MiwgXCJaZWN5cmlsbGljXCIsIDB4MDQxNywgXCJaZWRlc2NlbmRlcmN5cmlsbGljXCIsIDB4MDQ5OCwgXCJaZWRpZXJlc2lzY3lyaWxsaWNcIiwgMHgwNGRlLCBcIlpldGFcIiwgMHgwMzk2LCBcIlpoZWFybWVuaWFuXCIsIDB4MDUzYSwgXCJaaGVicmV2ZWN5cmlsbGljXCIsIDB4MDRjMSwgXCJaaGVjeXJpbGxpY1wiLCAweDA0MTYsIFwiWmhlZGVzY2VuZGVyY3lyaWxsaWNcIiwgMHgwNDk2LCBcIlpoZWRpZXJlc2lzY3lyaWxsaWNcIiwgMHgwNGRjLCBcIlpsaW5lYmVsb3dcIiwgMHgxZTk0LCBcIlptb25vc3BhY2VcIiwgMHhmZjNhLCBcIlpzbWFsbFwiLCAweGY3N2EsIFwiWnN0cm9rZVwiLCAweDAxYjUsIFwiYVwiLCAweDAwNjEsIFwiYWFiZW5nYWxpXCIsIDB4MDk4NiwgXCJhYWN1dGVcIiwgMHgwMGUxLCBcImFhZGV2YVwiLCAweDA5MDYsIFwiYWFndWphcmF0aVwiLCAweDBhODYsIFwiYWFndXJtdWtoaVwiLCAweDBhMDYsIFwiYWFtYXRyYWd1cm11a2hpXCIsIDB4MGEzZSwgXCJhYXJ1c3F1YXJlXCIsIDB4MzMwMywgXCJhYXZvd2Vsc2lnbmJlbmdhbGlcIiwgMHgwOWJlLCBcImFhdm93ZWxzaWduZGV2YVwiLCAweDA5M2UsIFwiYWF2b3dlbHNpZ25ndWphcmF0aVwiLCAweDBhYmUsIFwiYWJicmV2aWF0aW9ubWFya2FybWVuaWFuXCIsIDB4MDU1ZiwgXCJhYmJyZXZpYXRpb25zaWduZGV2YVwiLCAweDA5NzAsIFwiYWJlbmdhbGlcIiwgMHgwOTg1LCBcImFib3BvbW9mb1wiLCAweDMxMWEsIFwiYWJyZXZlXCIsIDB4MDEwMywgXCJhYnJldmVhY3V0ZVwiLCAweDFlYWYsIFwiYWJyZXZlY3lyaWxsaWNcIiwgMHgwNGQxLCBcImFicmV2ZWRvdGJlbG93XCIsIDB4MWViNywgXCJhYnJldmVncmF2ZVwiLCAweDFlYjEsIFwiYWJyZXZlaG9va2Fib3ZlXCIsIDB4MWViMywgXCJhYnJldmV0aWxkZVwiLCAweDFlYjUsIFwiYWNhcm9uXCIsIDB4MDFjZSwgXCJhY2lyY2xlXCIsIDB4MjRkMCwgXCJhY2lyY3VtZmxleFwiLCAweDAwZTIsIFwiYWNpcmN1bWZsZXhhY3V0ZVwiLCAweDFlYTUsIFwiYWNpcmN1bWZsZXhkb3RiZWxvd1wiLCAweDFlYWQsIFwiYWNpcmN1bWZsZXhncmF2ZVwiLCAweDFlYTcsIFwiYWNpcmN1bWZsZXhob29rYWJvdmVcIiwgMHgxZWE5LCBcImFjaXJjdW1mbGV4dGlsZGVcIiwgMHgxZWFiLCBcImFjdXRlXCIsIDB4MDBiNCwgXCJhY3V0ZWJlbG93Y21iXCIsIDB4MDMxNywgXCJhY3V0ZWNtYlwiLCAweDAzMDEsIFwiYWN1dGVjb21iXCIsIDB4MDMwMSwgXCJhY3V0ZWRldmFcIiwgMHgwOTU0LCBcImFjdXRlbG93bW9kXCIsIDB4MDJjZiwgXCJhY3V0ZXRvbmVjbWJcIiwgMHgwMzQxLCBcImFjeXJpbGxpY1wiLCAweDA0MzAsIFwiYWRibGdyYXZlXCIsIDB4MDIwMSwgXCJhZGRha2d1cm11a2hpXCIsIDB4MGE3MSwgXCJhZGV2YVwiLCAweDA5MDUsIFwiYWRpZXJlc2lzXCIsIDB4MDBlNCwgXCJhZGllcmVzaXNjeXJpbGxpY1wiLCAweDA0ZDMsIFwiYWRpZXJlc2lzbWFjcm9uXCIsIDB4MDFkZiwgXCJhZG90YmVsb3dcIiwgMHgxZWExLCBcImFkb3RtYWNyb25cIiwgMHgwMWUxLCBcImFlXCIsIDB4MDBlNiwgXCJhZWFjdXRlXCIsIDB4MDFmZCwgXCJhZWtvcmVhblwiLCAweDMxNTAsIFwiYWVtYWNyb25cIiwgMHgwMWUzLCBcImFmaWkwMDIwOFwiLCAweDIwMTUsIFwiYWZpaTA4OTQxXCIsIDB4MjBhNCwgXCJhZmlpMTAwMTdcIiwgMHgwNDEwLCBcImFmaWkxMDAxOFwiLCAweDA0MTEsIFwiYWZpaTEwMDE5XCIsIDB4MDQxMiwgXCJhZmlpMTAwMjBcIiwgMHgwNDEzLCBcImFmaWkxMDAyMVwiLCAweDA0MTQsIFwiYWZpaTEwMDIyXCIsIDB4MDQxNSwgXCJhZmlpMTAwMjNcIiwgMHgwNDAxLCBcImFmaWkxMDAyNFwiLCAweDA0MTYsIFwiYWZpaTEwMDI1XCIsIDB4MDQxNywgXCJhZmlpMTAwMjZcIiwgMHgwNDE4LCBcImFmaWkxMDAyN1wiLCAweDA0MTksIFwiYWZpaTEwMDI4XCIsIDB4MDQxYSwgXCJhZmlpMTAwMjlcIiwgMHgwNDFiLCBcImFmaWkxMDAzMFwiLCAweDA0MWMsIFwiYWZpaTEwMDMxXCIsIDB4MDQxZCwgXCJhZmlpMTAwMzJcIiwgMHgwNDFlLCBcImFmaWkxMDAzM1wiLCAweDA0MWYsIFwiYWZpaTEwMDM0XCIsIDB4MDQyMCwgXCJhZmlpMTAwMzVcIiwgMHgwNDIxLCBcImFmaWkxMDAzNlwiLCAweDA0MjIsIFwiYWZpaTEwMDM3XCIsIDB4MDQyMywgXCJhZmlpMTAwMzhcIiwgMHgwNDI0LCBcImFmaWkxMDAzOVwiLCAweDA0MjUsIFwiYWZpaTEwMDQwXCIsIDB4MDQyNiwgXCJhZmlpMTAwNDFcIiwgMHgwNDI3LCBcImFmaWkxMDA0MlwiLCAweDA0MjgsIFwiYWZpaTEwMDQzXCIsIDB4MDQyOSwgXCJhZmlpMTAwNDRcIiwgMHgwNDJhLCBcImFmaWkxMDA0NVwiLCAweDA0MmIsIFwiYWZpaTEwMDQ2XCIsIDB4MDQyYywgXCJhZmlpMTAwNDdcIiwgMHgwNDJkLCBcImFmaWkxMDA0OFwiLCAweDA0MmUsIFwiYWZpaTEwMDQ5XCIsIDB4MDQyZiwgXCJhZmlpMTAwNTBcIiwgMHgwNDkwLCBcImFmaWkxMDA1MVwiLCAweDA0MDIsIFwiYWZpaTEwMDUyXCIsIDB4MDQwMywgXCJhZmlpMTAwNTNcIiwgMHgwNDA0LCBcImFmaWkxMDA1NFwiLCAweDA0MDUsIFwiYWZpaTEwMDU1XCIsIDB4MDQwNiwgXCJhZmlpMTAwNTZcIiwgMHgwNDA3LCBcImFmaWkxMDA1N1wiLCAweDA0MDgsIFwiYWZpaTEwMDU4XCIsIDB4MDQwOSwgXCJhZmlpMTAwNTlcIiwgMHgwNDBhLCBcImFmaWkxMDA2MFwiLCAweDA0MGIsIFwiYWZpaTEwMDYxXCIsIDB4MDQwYywgXCJhZmlpMTAwNjJcIiwgMHgwNDBlLCBcImFmaWkxMDA2M1wiLCAweGY2YzQsIFwiYWZpaTEwMDY0XCIsIDB4ZjZjNSwgXCJhZmlpMTAwNjVcIiwgMHgwNDMwLCBcImFmaWkxMDA2NlwiLCAweDA0MzEsIFwiYWZpaTEwMDY3XCIsIDB4MDQzMiwgXCJhZmlpMTAwNjhcIiwgMHgwNDMzLCBcImFmaWkxMDA2OVwiLCAweDA0MzQsIFwiYWZpaTEwMDcwXCIsIDB4MDQzNSwgXCJhZmlpMTAwNzFcIiwgMHgwNDUxLCBcImFmaWkxMDA3MlwiLCAweDA0MzYsIFwiYWZpaTEwMDczXCIsIDB4MDQzNywgXCJhZmlpMTAwNzRcIiwgMHgwNDM4LCBcImFmaWkxMDA3NVwiLCAweDA0MzksIFwiYWZpaTEwMDc2XCIsIDB4MDQzYSwgXCJhZmlpMTAwNzdcIiwgMHgwNDNiLCBcImFmaWkxMDA3OFwiLCAweDA0M2MsIFwiYWZpaTEwMDc5XCIsIDB4MDQzZCwgXCJhZmlpMTAwODBcIiwgMHgwNDNlLCBcImFmaWkxMDA4MVwiLCAweDA0M2YsIFwiYWZpaTEwMDgyXCIsIDB4MDQ0MCwgXCJhZmlpMTAwODNcIiwgMHgwNDQxLCBcImFmaWkxMDA4NFwiLCAweDA0NDIsIFwiYWZpaTEwMDg1XCIsIDB4MDQ0MywgXCJhZmlpMTAwODZcIiwgMHgwNDQ0LCBcImFmaWkxMDA4N1wiLCAweDA0NDUsIFwiYWZpaTEwMDg4XCIsIDB4MDQ0NiwgXCJhZmlpMTAwODlcIiwgMHgwNDQ3LCBcImFmaWkxMDA5MFwiLCAweDA0NDgsIFwiYWZpaTEwMDkxXCIsIDB4MDQ0OSwgXCJhZmlpMTAwOTJcIiwgMHgwNDRhLCBcImFmaWkxMDA5M1wiLCAweDA0NGIsIFwiYWZpaTEwMDk0XCIsIDB4MDQ0YywgXCJhZmlpMTAwOTVcIiwgMHgwNDRkLCBcImFmaWkxMDA5NlwiLCAweDA0NGUsIFwiYWZpaTEwMDk3XCIsIDB4MDQ0ZiwgXCJhZmlpMTAwOThcIiwgMHgwNDkxLCBcImFmaWkxMDA5OVwiLCAweDA0NTIsIFwiYWZpaTEwMTAwXCIsIDB4MDQ1MywgXCJhZmlpMTAxMDFcIiwgMHgwNDU0LCBcImFmaWkxMDEwMlwiLCAweDA0NTUsIFwiYWZpaTEwMTAzXCIsIDB4MDQ1NiwgXCJhZmlpMTAxMDRcIiwgMHgwNDU3LCBcImFmaWkxMDEwNVwiLCAweDA0NTgsIFwiYWZpaTEwMTA2XCIsIDB4MDQ1OSwgXCJhZmlpMTAxMDdcIiwgMHgwNDVhLCBcImFmaWkxMDEwOFwiLCAweDA0NWIsIFwiYWZpaTEwMTA5XCIsIDB4MDQ1YywgXCJhZmlpMTAxMTBcIiwgMHgwNDVlLCBcImFmaWkxMDE0NVwiLCAweDA0MGYsIFwiYWZpaTEwMTQ2XCIsIDB4MDQ2MiwgXCJhZmlpMTAxNDdcIiwgMHgwNDcyLCBcImFmaWkxMDE0OFwiLCAweDA0NzQsIFwiYWZpaTEwMTkyXCIsIDB4ZjZjNiwgXCJhZmlpMTAxOTNcIiwgMHgwNDVmLCBcImFmaWkxMDE5NFwiLCAweDA0NjMsIFwiYWZpaTEwMTk1XCIsIDB4MDQ3MywgXCJhZmlpMTAxOTZcIiwgMHgwNDc1LCBcImFmaWkxMDgzMVwiLCAweGY2YzcsIFwiYWZpaTEwODMyXCIsIDB4ZjZjOCwgXCJhZmlpMTA4NDZcIiwgMHgwNGQ5LCBcImFmaWkyOTlcIiwgMHgyMDBlLCBcImFmaWkzMDBcIiwgMHgyMDBmLCBcImFmaWkzMDFcIiwgMHgyMDBkLCBcImFmaWk1NzM4MVwiLCAweDA2NmEsIFwiYWZpaTU3Mzg4XCIsIDB4MDYwYywgXCJhZmlpNTczOTJcIiwgMHgwNjYwLCBcImFmaWk1NzM5M1wiLCAweDA2NjEsIFwiYWZpaTU3Mzk0XCIsIDB4MDY2MiwgXCJhZmlpNTczOTVcIiwgMHgwNjYzLCBcImFmaWk1NzM5NlwiLCAweDA2NjQsIFwiYWZpaTU3Mzk3XCIsIDB4MDY2NSwgXCJhZmlpNTczOThcIiwgMHgwNjY2LCBcImFmaWk1NzM5OVwiLCAweDA2NjcsIFwiYWZpaTU3NDAwXCIsIDB4MDY2OCwgXCJhZmlpNTc0MDFcIiwgMHgwNjY5LCBcImFmaWk1NzQwM1wiLCAweDA2MWIsIFwiYWZpaTU3NDA3XCIsIDB4MDYxZiwgXCJhZmlpNTc0MDlcIiwgMHgwNjIxLCBcImFmaWk1NzQxMFwiLCAweDA2MjIsIFwiYWZpaTU3NDExXCIsIDB4MDYyMywgXCJhZmlpNTc0MTJcIiwgMHgwNjI0LCBcImFmaWk1NzQxM1wiLCAweDA2MjUsIFwiYWZpaTU3NDE0XCIsIDB4MDYyNiwgXCJhZmlpNTc0MTVcIiwgMHgwNjI3LCBcImFmaWk1NzQxNlwiLCAweDA2MjgsIFwiYWZpaTU3NDE3XCIsIDB4MDYyOSwgXCJhZmlpNTc0MThcIiwgMHgwNjJhLCBcImFmaWk1NzQxOVwiLCAweDA2MmIsIFwiYWZpaTU3NDIwXCIsIDB4MDYyYywgXCJhZmlpNTc0MjFcIiwgMHgwNjJkLCBcImFmaWk1NzQyMlwiLCAweDA2MmUsIFwiYWZpaTU3NDIzXCIsIDB4MDYyZiwgXCJhZmlpNTc0MjRcIiwgMHgwNjMwLCBcImFmaWk1NzQyNVwiLCAweDA2MzEsIFwiYWZpaTU3NDI2XCIsIDB4MDYzMiwgXCJhZmlpNTc0MjdcIiwgMHgwNjMzLCBcImFmaWk1NzQyOFwiLCAweDA2MzQsIFwiYWZpaTU3NDI5XCIsIDB4MDYzNSwgXCJhZmlpNTc0MzBcIiwgMHgwNjM2LCBcImFmaWk1NzQzMVwiLCAweDA2MzcsIFwiYWZpaTU3NDMyXCIsIDB4MDYzOCwgXCJhZmlpNTc0MzNcIiwgMHgwNjM5LCBcImFmaWk1NzQzNFwiLCAweDA2M2EsIFwiYWZpaTU3NDQwXCIsIDB4MDY0MCwgXCJhZmlpNTc0NDFcIiwgMHgwNjQxLCBcImFmaWk1NzQ0MlwiLCAweDA2NDIsIFwiYWZpaTU3NDQzXCIsIDB4MDY0MywgXCJhZmlpNTc0NDRcIiwgMHgwNjQ0LCBcImFmaWk1NzQ0NVwiLCAweDA2NDUsIFwiYWZpaTU3NDQ2XCIsIDB4MDY0NiwgXCJhZmlpNTc0NDhcIiwgMHgwNjQ4LCBcImFmaWk1NzQ0OVwiLCAweDA2NDksIFwiYWZpaTU3NDUwXCIsIDB4MDY0YSwgXCJhZmlpNTc0NTFcIiwgMHgwNjRiLCBcImFmaWk1NzQ1MlwiLCAweDA2NGMsIFwiYWZpaTU3NDUzXCIsIDB4MDY0ZCwgXCJhZmlpNTc0NTRcIiwgMHgwNjRlLCBcImFmaWk1NzQ1NVwiLCAweDA2NGYsIFwiYWZpaTU3NDU2XCIsIDB4MDY1MCwgXCJhZmlpNTc0NTdcIiwgMHgwNjUxLCBcImFmaWk1NzQ1OFwiLCAweDA2NTIsIFwiYWZpaTU3NDcwXCIsIDB4MDY0NywgXCJhZmlpNTc1MDVcIiwgMHgwNmE0LCBcImFmaWk1NzUwNlwiLCAweDA2N2UsIFwiYWZpaTU3NTA3XCIsIDB4MDY4NiwgXCJhZmlpNTc1MDhcIiwgMHgwNjk4LCBcImFmaWk1NzUwOVwiLCAweDA2YWYsIFwiYWZpaTU3NTExXCIsIDB4MDY3OSwgXCJhZmlpNTc1MTJcIiwgMHgwNjg4LCBcImFmaWk1NzUxM1wiLCAweDA2OTEsIFwiYWZpaTU3NTE0XCIsIDB4MDZiYSwgXCJhZmlpNTc1MTlcIiwgMHgwNmQyLCBcImFmaWk1NzUzNFwiLCAweDA2ZDUsIFwiYWZpaTU3NjM2XCIsIDB4MjBhYSwgXCJhZmlpNTc2NDVcIiwgMHgwNWJlLCBcImFmaWk1NzY1OFwiLCAweDA1YzMsIFwiYWZpaTU3NjY0XCIsIDB4MDVkMCwgXCJhZmlpNTc2NjVcIiwgMHgwNWQxLCBcImFmaWk1NzY2NlwiLCAweDA1ZDIsIFwiYWZpaTU3NjY3XCIsIDB4MDVkMywgXCJhZmlpNTc2NjhcIiwgMHgwNWQ0LCBcImFmaWk1NzY2OVwiLCAweDA1ZDUsIFwiYWZpaTU3NjcwXCIsIDB4MDVkNiwgXCJhZmlpNTc2NzFcIiwgMHgwNWQ3LCBcImFmaWk1NzY3MlwiLCAweDA1ZDgsIFwiYWZpaTU3NjczXCIsIDB4MDVkOSwgXCJhZmlpNTc2NzRcIiwgMHgwNWRhLCBcImFmaWk1NzY3NVwiLCAweDA1ZGIsIFwiYWZpaTU3Njc2XCIsIDB4MDVkYywgXCJhZmlpNTc2NzdcIiwgMHgwNWRkLCBcImFmaWk1NzY3OFwiLCAweDA1ZGUsIFwiYWZpaTU3Njc5XCIsIDB4MDVkZiwgXCJhZmlpNTc2ODBcIiwgMHgwNWUwLCBcImFmaWk1NzY4MVwiLCAweDA1ZTEsIFwiYWZpaTU3NjgyXCIsIDB4MDVlMiwgXCJhZmlpNTc2ODNcIiwgMHgwNWUzLCBcImFmaWk1NzY4NFwiLCAweDA1ZTQsIFwiYWZpaTU3Njg1XCIsIDB4MDVlNSwgXCJhZmlpNTc2ODZcIiwgMHgwNWU2LCBcImFmaWk1NzY4N1wiLCAweDA1ZTcsIFwiYWZpaTU3Njg4XCIsIDB4MDVlOCwgXCJhZmlpNTc2ODlcIiwgMHgwNWU5LCBcImFmaWk1NzY5MFwiLCAweDA1ZWEsIFwiYWZpaTU3Njk0XCIsIDB4ZmIyYSwgXCJhZmlpNTc2OTVcIiwgMHhmYjJiLCBcImFmaWk1NzcwMFwiLCAweGZiNGIsIFwiYWZpaTU3NzA1XCIsIDB4ZmIxZiwgXCJhZmlpNTc3MTZcIiwgMHgwNWYwLCBcImFmaWk1NzcxN1wiLCAweDA1ZjEsIFwiYWZpaTU3NzE4XCIsIDB4MDVmMiwgXCJhZmlpNTc3MjNcIiwgMHhmYjM1LCBcImFmaWk1Nzc5M1wiLCAweDA1YjQsIFwiYWZpaTU3Nzk0XCIsIDB4MDViNSwgXCJhZmlpNTc3OTVcIiwgMHgwNWI2LCBcImFmaWk1Nzc5NlwiLCAweDA1YmIsIFwiYWZpaTU3Nzk3XCIsIDB4MDViOCwgXCJhZmlpNTc3OThcIiwgMHgwNWI3LCBcImFmaWk1Nzc5OVwiLCAweDA1YjAsIFwiYWZpaTU3ODAwXCIsIDB4MDViMiwgXCJhZmlpNTc4MDFcIiwgMHgwNWIxLCBcImFmaWk1NzgwMlwiLCAweDA1YjMsIFwiYWZpaTU3ODAzXCIsIDB4MDVjMiwgXCJhZmlpNTc4MDRcIiwgMHgwNWMxLCBcImFmaWk1NzgwNlwiLCAweDA1YjksIFwiYWZpaTU3ODA3XCIsIDB4MDViYywgXCJhZmlpNTc4MzlcIiwgMHgwNWJkLCBcImFmaWk1Nzg0MVwiLCAweDA1YmYsIFwiYWZpaTU3ODQyXCIsIDB4MDVjMCwgXCJhZmlpNTc5MjlcIiwgMHgwMmJjLCBcImFmaWk2MTI0OFwiLCAweDIxMDUsIFwiYWZpaTYxMjg5XCIsIDB4MjExMywgXCJhZmlpNjEzNTJcIiwgMHgyMTE2LCBcImFmaWk2MTU3M1wiLCAweDIwMmMsIFwiYWZpaTYxNTc0XCIsIDB4MjAyZCwgXCJhZmlpNjE1NzVcIiwgMHgyMDJlLCBcImFmaWk2MTY2NFwiLCAweDIwMGMsIFwiYWZpaTYzMTY3XCIsIDB4MDY2ZCwgXCJhZmlpNjQ5MzdcIiwgMHgwMmJkLCBcImFncmF2ZVwiLCAweDAwZTAsIFwiYWd1amFyYXRpXCIsIDB4MGE4NSwgXCJhZ3VybXVraGlcIiwgMHgwYTA1LCBcImFoaXJhZ2FuYVwiLCAweDMwNDIsIFwiYWhvb2thYm92ZVwiLCAweDFlYTMsIFwiYWliZW5nYWxpXCIsIDB4MDk5MCwgXCJhaWJvcG9tb2ZvXCIsIDB4MzExZSwgXCJhaWRldmFcIiwgMHgwOTEwLCBcImFpZWN5cmlsbGljXCIsIDB4MDRkNSwgXCJhaWd1amFyYXRpXCIsIDB4MGE5MCwgXCJhaWd1cm11a2hpXCIsIDB4MGExMCwgXCJhaW1hdHJhZ3VybXVraGlcIiwgMHgwYTQ4LCBcImFpbmFyYWJpY1wiLCAweDA2MzksIFwiYWluZmluYWxhcmFiaWNcIiwgMHhmZWNhLCBcImFpbmluaXRpYWxhcmFiaWNcIiwgMHhmZWNiLCBcImFpbm1lZGlhbGFyYWJpY1wiLCAweGZlY2MsIFwiYWludmVydGVkYnJldmVcIiwgMHgwMjAzLCBcImFpdm93ZWxzaWduYmVuZ2FsaVwiLCAweDA5YzgsIFwiYWl2b3dlbHNpZ25kZXZhXCIsIDB4MDk0OCwgXCJhaXZvd2Vsc2lnbmd1amFyYXRpXCIsIDB4MGFjOCwgXCJha2F0YWthbmFcIiwgMHgzMGEyLCBcImFrYXRha2FuYWhhbGZ3aWR0aFwiLCAweGZmNzEsIFwiYWtvcmVhblwiLCAweDMxNGYsIFwiYWxlZlwiLCAweDA1ZDAsIFwiYWxlZmFyYWJpY1wiLCAweDA2MjcsIFwiYWxlZmRhZ2VzaGhlYnJld1wiLCAweGZiMzAsIFwiYWxlZmZpbmFsYXJhYmljXCIsIDB4ZmU4ZSwgXCJhbGVmaGFtemFhYm92ZWFyYWJpY1wiLCAweDA2MjMsIFwiYWxlZmhhbXphYWJvdmVmaW5hbGFyYWJpY1wiLCAweGZlODQsIFwiYWxlZmhhbXphYmVsb3dhcmFiaWNcIiwgMHgwNjI1LCBcImFsZWZoYW16YWJlbG93ZmluYWxhcmFiaWNcIiwgMHhmZTg4LCBcImFsZWZoZWJyZXdcIiwgMHgwNWQwLCBcImFsZWZsYW1lZGhlYnJld1wiLCAweGZiNGYsIFwiYWxlZm1hZGRhYWJvdmVhcmFiaWNcIiwgMHgwNjIyLCBcImFsZWZtYWRkYWFib3ZlZmluYWxhcmFiaWNcIiwgMHhmZTgyLCBcImFsZWZtYWtzdXJhYXJhYmljXCIsIDB4MDY0OSwgXCJhbGVmbWFrc3VyYWZpbmFsYXJhYmljXCIsIDB4ZmVmMCwgXCJhbGVmbWFrc3VyYWluaXRpYWxhcmFiaWNcIiwgMHhmZWYzLCBcImFsZWZtYWtzdXJhbWVkaWFsYXJhYmljXCIsIDB4ZmVmNCwgXCJhbGVmcGF0YWhoZWJyZXdcIiwgMHhmYjJlLCBcImFsZWZxYW1hdHNoZWJyZXdcIiwgMHhmYjJmLCBcImFsZXBoXCIsIDB4MjEzNSwgXCJhbGxlcXVhbFwiLCAweDIyNGMsIFwiYWxwaGFcIiwgMHgwM2IxLCBcImFscGhhdG9ub3NcIiwgMHgwM2FjLCBcImFtYWNyb25cIiwgMHgwMTAxLCBcImFtb25vc3BhY2VcIiwgMHhmZjQxLCBcImFtcGVyc2FuZFwiLCAweDAwMjYsIFwiYW1wZXJzYW5kbW9ub3NwYWNlXCIsIDB4ZmYwNiwgXCJhbXBlcnNhbmRzbWFsbFwiLCAweGY3MjYsIFwiYW1zcXVhcmVcIiwgMHgzM2MyLCBcImFuYm9wb21vZm9cIiwgMHgzMTIyLCBcImFuZ2JvcG9tb2ZvXCIsIDB4MzEyNCwgXCJhbmdicmFja2V0bGVmdFwiLCAweDMwMDgsIFwiYW5nYnJhY2tldHJpZ2h0XCIsIDB4MzAwOSwgXCJhbmdraGFua2h1dGhhaVwiLCAweDBlNWEsIFwiYW5nbGVcIiwgMHgyMjIwLCBcImFuZ2xlYnJhY2tldGxlZnRcIiwgMHgzMDA4LCBcImFuZ2xlYnJhY2tldGxlZnR2ZXJ0aWNhbFwiLCAweGZlM2YsIFwiYW5nbGVicmFja2V0cmlnaHRcIiwgMHgzMDA5LCBcImFuZ2xlYnJhY2tldHJpZ2h0dmVydGljYWxcIiwgMHhmZTQwLCBcImFuZ2xlbGVmdFwiLCAweDIzMjksIFwiYW5nbGVyaWdodFwiLCAweDIzMmEsIFwiYW5nc3Ryb21cIiwgMHgyMTJiLCBcImFub3RlbGVpYVwiLCAweDAzODcsIFwiYW51ZGF0dGFkZXZhXCIsIDB4MDk1MiwgXCJhbnVzdmFyYWJlbmdhbGlcIiwgMHgwOTgyLCBcImFudXN2YXJhZGV2YVwiLCAweDA5MDIsIFwiYW51c3ZhcmFndWphcmF0aVwiLCAweDBhODIsIFwiYW9nb25la1wiLCAweDAxMDUsIFwiYXBhYXRvc3F1YXJlXCIsIDB4MzMwMCwgXCJhcGFyZW5cIiwgMHgyNDljLCBcImFwb3N0cm9waGVhcm1lbmlhblwiLCAweDA1NWEsIFwiYXBvc3Ryb3BoZW1vZFwiLCAweDAyYmMsIFwiYXBwbGVcIiwgMHhmOGZmLCBcImFwcHJvYWNoZXNcIiwgMHgyMjUwLCBcImFwcHJveGVxdWFsXCIsIDB4MjI0OCwgXCJhcHByb3hlcXVhbG9yaW1hZ2VcIiwgMHgyMjUyLCBcImFwcHJveGltYXRlbHllcXVhbFwiLCAweDIyNDUsIFwiYXJhZWFla29yZWFuXCIsIDB4MzE4ZSwgXCJhcmFlYWtvcmVhblwiLCAweDMxOGQsIFwiYXJjXCIsIDB4MjMxMiwgXCJhcmlnaHRoYWxmcmluZ1wiLCAweDFlOWEsIFwiYXJpbmdcIiwgMHgwMGU1LCBcImFyaW5nYWN1dGVcIiwgMHgwMWZiLCBcImFyaW5nYmVsb3dcIiwgMHgxZTAxLCBcImFycm93Ym90aFwiLCAweDIxOTQsIFwiYXJyb3dkYXNoZG93blwiLCAweDIxZTMsIFwiYXJyb3dkYXNobGVmdFwiLCAweDIxZTAsIFwiYXJyb3dkYXNocmlnaHRcIiwgMHgyMWUyLCBcImFycm93ZGFzaHVwXCIsIDB4MjFlMSwgXCJhcnJvd2RibGJvdGhcIiwgMHgyMWQ0LCBcImFycm93ZGJsZG93blwiLCAweDIxZDMsIFwiYXJyb3dkYmxsZWZ0XCIsIDB4MjFkMCwgXCJhcnJvd2RibHJpZ2h0XCIsIDB4MjFkMiwgXCJhcnJvd2RibHVwXCIsIDB4MjFkMSwgXCJhcnJvd2Rvd25cIiwgMHgyMTkzLCBcImFycm93ZG93bmxlZnRcIiwgMHgyMTk5LCBcImFycm93ZG93bnJpZ2h0XCIsIDB4MjE5OCwgXCJhcnJvd2Rvd253aGl0ZVwiLCAweDIxZTksIFwiYXJyb3doZWFkZG93bm1vZFwiLCAweDAyYzUsIFwiYXJyb3doZWFkbGVmdG1vZFwiLCAweDAyYzIsIFwiYXJyb3doZWFkcmlnaHRtb2RcIiwgMHgwMmMzLCBcImFycm93aGVhZHVwbW9kXCIsIDB4MDJjNCwgXCJhcnJvd2hvcml6ZXhcIiwgMHhmOGU3LCBcImFycm93bGVmdFwiLCAweDIxOTAsIFwiYXJyb3dsZWZ0ZGJsXCIsIDB4MjFkMCwgXCJhcnJvd2xlZnRkYmxzdHJva2VcIiwgMHgyMWNkLCBcImFycm93bGVmdG92ZXJyaWdodFwiLCAweDIxYzYsIFwiYXJyb3dsZWZ0d2hpdGVcIiwgMHgyMWU2LCBcImFycm93cmlnaHRcIiwgMHgyMTkyLCBcImFycm93cmlnaHRkYmxzdHJva2VcIiwgMHgyMWNmLCBcImFycm93cmlnaHRoZWF2eVwiLCAweDI3OWUsIFwiYXJyb3dyaWdodG92ZXJsZWZ0XCIsIDB4MjFjNCwgXCJhcnJvd3JpZ2h0d2hpdGVcIiwgMHgyMWU4LCBcImFycm93dGFibGVmdFwiLCAweDIxZTQsIFwiYXJyb3d0YWJyaWdodFwiLCAweDIxZTUsIFwiYXJyb3d1cFwiLCAweDIxOTEsIFwiYXJyb3d1cGRuXCIsIDB4MjE5NSwgXCJhcnJvd3VwZG5ic2VcIiwgMHgyMWE4LCBcImFycm93dXBkb3duYmFzZVwiLCAweDIxYTgsIFwiYXJyb3d1cGxlZnRcIiwgMHgyMTk2LCBcImFycm93dXBsZWZ0b2Zkb3duXCIsIDB4MjFjNSwgXCJhcnJvd3VwcmlnaHRcIiwgMHgyMTk3LCBcImFycm93dXB3aGl0ZVwiLCAweDIxZTcsIFwiYXJyb3d2ZXJ0ZXhcIiwgMHhmOGU2LCBcImFzY2lpY2lyY3VtXCIsIDB4MDA1ZSwgXCJhc2NpaWNpcmN1bW1vbm9zcGFjZVwiLCAweGZmM2UsIFwiYXNjaWl0aWxkZVwiLCAweDAwN2UsIFwiYXNjaWl0aWxkZW1vbm9zcGFjZVwiLCAweGZmNWUsIFwiYXNjcmlwdFwiLCAweDAyNTEsIFwiYXNjcmlwdHR1cm5lZFwiLCAweDAyNTIsIFwiYXNtYWxsaGlyYWdhbmFcIiwgMHgzMDQxLCBcImFzbWFsbGthdGFrYW5hXCIsIDB4MzBhMSwgXCJhc21hbGxrYXRha2FuYWhhbGZ3aWR0aFwiLCAweGZmNjcsIFwiYXN0ZXJpc2tcIiwgMHgwMDJhLCBcImFzdGVyaXNrYWx0b25lYXJhYmljXCIsIDB4MDY2ZCwgXCJhc3Rlcmlza2FyYWJpY1wiLCAweDA2NmQsIFwiYXN0ZXJpc2ttYXRoXCIsIDB4MjIxNywgXCJhc3Rlcmlza21vbm9zcGFjZVwiLCAweGZmMGEsIFwiYXN0ZXJpc2tzbWFsbFwiLCAweGZlNjEsIFwiYXN0ZXJpc21cIiwgMHgyMDQyLCBcImFzdXBlcmlvclwiLCAweGY2ZTksIFwiYXN5bXB0b3RpY2FsbHllcXVhbFwiLCAweDIyNDMsIFwiYXRcIiwgMHgwMDQwLCBcImF0aWxkZVwiLCAweDAwZTMsIFwiYXRtb25vc3BhY2VcIiwgMHhmZjIwLCBcImF0c21hbGxcIiwgMHhmZTZiLCBcImF0dXJuZWRcIiwgMHgwMjUwLCBcImF1YmVuZ2FsaVwiLCAweDA5OTQsIFwiYXVib3BvbW9mb1wiLCAweDMxMjAsIFwiYXVkZXZhXCIsIDB4MDkxNCwgXCJhdWd1amFyYXRpXCIsIDB4MGE5NCwgXCJhdWd1cm11a2hpXCIsIDB4MGExNCwgXCJhdWxlbmd0aG1hcmtiZW5nYWxpXCIsIDB4MDlkNywgXCJhdW1hdHJhZ3VybXVraGlcIiwgMHgwYTRjLCBcImF1dm93ZWxzaWduYmVuZ2FsaVwiLCAweDA5Y2MsIFwiYXV2b3dlbHNpZ25kZXZhXCIsIDB4MDk0YywgXCJhdXZvd2Vsc2lnbmd1amFyYXRpXCIsIDB4MGFjYywgXCJhdmFncmFoYWRldmFcIiwgMHgwOTNkLCBcImF5YmFybWVuaWFuXCIsIDB4MDU2MSwgXCJheWluXCIsIDB4MDVlMiwgXCJheWluYWx0b25laGVicmV3XCIsIDB4ZmIyMCwgXCJheWluaGVicmV3XCIsIDB4MDVlMiwgXCJiXCIsIDB4MDA2MiwgXCJiYWJlbmdhbGlcIiwgMHgwOWFjLCBcImJhY2tzbGFzaFwiLCAweDAwNWMsIFwiYmFja3NsYXNobW9ub3NwYWNlXCIsIDB4ZmYzYywgXCJiYWRldmFcIiwgMHgwOTJjLCBcImJhZ3VqYXJhdGlcIiwgMHgwYWFjLCBcImJhZ3VybXVraGlcIiwgMHgwYTJjLCBcImJhaGlyYWdhbmFcIiwgMHgzMDcwLCBcImJhaHR0aGFpXCIsIDB4MGUzZiwgXCJiYWthdGFrYW5hXCIsIDB4MzBkMCwgXCJiYXJcIiwgMHgwMDdjLCBcImJhcm1vbm9zcGFjZVwiLCAweGZmNWMsIFwiYmJvcG9tb2ZvXCIsIDB4MzEwNSwgXCJiY2lyY2xlXCIsIDB4MjRkMSwgXCJiZG90YWNjZW50XCIsIDB4MWUwMywgXCJiZG90YmVsb3dcIiwgMHgxZTA1LCBcImJlYW1lZHNpeHRlZW50aG5vdGVzXCIsIDB4MjY2YywgXCJiZWNhdXNlXCIsIDB4MjIzNSwgXCJiZWN5cmlsbGljXCIsIDB4MDQzMSwgXCJiZWhhcmFiaWNcIiwgMHgwNjI4LCBcImJlaGZpbmFsYXJhYmljXCIsIDB4ZmU5MCwgXCJiZWhpbml0aWFsYXJhYmljXCIsIDB4ZmU5MSwgXCJiZWhpcmFnYW5hXCIsIDB4MzA3OSwgXCJiZWhtZWRpYWxhcmFiaWNcIiwgMHhmZTkyLCBcImJlaG1lZW1pbml0aWFsYXJhYmljXCIsIDB4ZmM5ZiwgXCJiZWhtZWVtaXNvbGF0ZWRhcmFiaWNcIiwgMHhmYzA4LCBcImJlaG5vb25maW5hbGFyYWJpY1wiLCAweGZjNmQsIFwiYmVrYXRha2FuYVwiLCAweDMwZDksIFwiYmVuYXJtZW5pYW5cIiwgMHgwNTYyLCBcImJldFwiLCAweDA1ZDEsIFwiYmV0YVwiLCAweDAzYjIsIFwiYmV0YXN5bWJvbGdyZWVrXCIsIDB4MDNkMCwgXCJiZXRkYWdlc2hcIiwgMHhmYjMxLCBcImJldGRhZ2VzaGhlYnJld1wiLCAweGZiMzEsIFwiYmV0aGVicmV3XCIsIDB4MDVkMSwgXCJiZXRyYWZlaGVicmV3XCIsIDB4ZmI0YywgXCJiaGFiZW5nYWxpXCIsIDB4MDlhZCwgXCJiaGFkZXZhXCIsIDB4MDkyZCwgXCJiaGFndWphcmF0aVwiLCAweDBhYWQsIFwiYmhhZ3VybXVraGlcIiwgMHgwYTJkLCBcImJob29rXCIsIDB4MDI1MywgXCJiaWhpcmFnYW5hXCIsIDB4MzA3MywgXCJiaWthdGFrYW5hXCIsIDB4MzBkMywgXCJiaWxhYmlhbGNsaWNrXCIsIDB4MDI5OCwgXCJiaW5kaWd1cm11a2hpXCIsIDB4MGEwMiwgXCJiaXJ1c3F1YXJlXCIsIDB4MzMzMSwgXCJibGFja2NpcmNsZVwiLCAweDI1Y2YsIFwiYmxhY2tkaWFtb25kXCIsIDB4MjVjNiwgXCJibGFja2Rvd25wb2ludGluZ3RyaWFuZ2xlXCIsIDB4MjViYywgXCJibGFja2xlZnRwb2ludGluZ3BvaW50ZXJcIiwgMHgyNWM0LCBcImJsYWNrbGVmdHBvaW50aW5ndHJpYW5nbGVcIiwgMHgyNWMwLCBcImJsYWNrbGVudGljdWxhcmJyYWNrZXRsZWZ0XCIsIDB4MzAxMCwgXCJibGFja2xlbnRpY3VsYXJicmFja2V0bGVmdHZlcnRpY2FsXCIsIDB4ZmUzYiwgXCJibGFja2xlbnRpY3VsYXJicmFja2V0cmlnaHRcIiwgMHgzMDExLCBcImJsYWNrbGVudGljdWxhcmJyYWNrZXRyaWdodHZlcnRpY2FsXCIsIDB4ZmUzYywgXCJibGFja2xvd2VybGVmdHRyaWFuZ2xlXCIsIDB4MjVlMywgXCJibGFja2xvd2VycmlnaHR0cmlhbmdsZVwiLCAweDI1ZTIsIFwiYmxhY2tyZWN0YW5nbGVcIiwgMHgyNWFjLCBcImJsYWNrcmlnaHRwb2ludGluZ3BvaW50ZXJcIiwgMHgyNWJhLCBcImJsYWNrcmlnaHRwb2ludGluZ3RyaWFuZ2xlXCIsIDB4MjViNiwgXCJibGFja3NtYWxsc3F1YXJlXCIsIDB4MjVhYSwgXCJibGFja3NtaWxpbmdmYWNlXCIsIDB4MjYzYiwgXCJibGFja3NxdWFyZVwiLCAweDI1YTAsIFwiYmxhY2tzdGFyXCIsIDB4MjYwNSwgXCJibGFja3VwcGVybGVmdHRyaWFuZ2xlXCIsIDB4MjVlNCwgXCJibGFja3VwcGVycmlnaHR0cmlhbmdsZVwiLCAweDI1ZTUsIFwiYmxhY2t1cHBvaW50aW5nc21hbGx0cmlhbmdsZVwiLCAweDI1YjQsIFwiYmxhY2t1cHBvaW50aW5ndHJpYW5nbGVcIiwgMHgyNWIyLCBcImJsYW5rXCIsIDB4MjQyMywgXCJibGluZWJlbG93XCIsIDB4MWUwNywgXCJibG9ja1wiLCAweDI1ODgsIFwiYm1vbm9zcGFjZVwiLCAweGZmNDIsIFwiYm9iYWltYWl0aGFpXCIsIDB4MGUxYSwgXCJib2hpcmFnYW5hXCIsIDB4MzA3YywgXCJib2thdGFrYW5hXCIsIDB4MzBkYywgXCJicGFyZW5cIiwgMHgyNDlkLCBcImJxc3F1YXJlXCIsIDB4MzNjMywgXCJicmFjZWV4XCIsIDB4ZjhmNCwgXCJicmFjZWxlZnRcIiwgMHgwMDdiLCBcImJyYWNlbGVmdGJ0XCIsIDB4ZjhmMywgXCJicmFjZWxlZnRtaWRcIiwgMHhmOGYyLCBcImJyYWNlbGVmdG1vbm9zcGFjZVwiLCAweGZmNWIsIFwiYnJhY2VsZWZ0c21hbGxcIiwgMHhmZTViLCBcImJyYWNlbGVmdHRwXCIsIDB4ZjhmMSwgXCJicmFjZWxlZnR2ZXJ0aWNhbFwiLCAweGZlMzcsIFwiYnJhY2VyaWdodFwiLCAweDAwN2QsIFwiYnJhY2VyaWdodGJ0XCIsIDB4ZjhmZSwgXCJicmFjZXJpZ2h0bWlkXCIsIDB4ZjhmZCwgXCJicmFjZXJpZ2h0bW9ub3NwYWNlXCIsIDB4ZmY1ZCwgXCJicmFjZXJpZ2h0c21hbGxcIiwgMHhmZTVjLCBcImJyYWNlcmlnaHR0cFwiLCAweGY4ZmMsIFwiYnJhY2VyaWdodHZlcnRpY2FsXCIsIDB4ZmUzOCwgXCJicmFja2V0bGVmdFwiLCAweDAwNWIsIFwiYnJhY2tldGxlZnRidFwiLCAweGY4ZjAsIFwiYnJhY2tldGxlZnRleFwiLCAweGY4ZWYsIFwiYnJhY2tldGxlZnRtb25vc3BhY2VcIiwgMHhmZjNiLCBcImJyYWNrZXRsZWZ0dHBcIiwgMHhmOGVlLCBcImJyYWNrZXRyaWdodFwiLCAweDAwNWQsIFwiYnJhY2tldHJpZ2h0YnRcIiwgMHhmOGZiLCBcImJyYWNrZXRyaWdodGV4XCIsIDB4ZjhmYSwgXCJicmFja2V0cmlnaHRtb25vc3BhY2VcIiwgMHhmZjNkLCBcImJyYWNrZXRyaWdodHRwXCIsIDB4ZjhmOSwgXCJicmV2ZVwiLCAweDAyZDgsIFwiYnJldmViZWxvd2NtYlwiLCAweDAzMmUsIFwiYnJldmVjbWJcIiwgMHgwMzA2LCBcImJyZXZlaW52ZXJ0ZWRiZWxvd2NtYlwiLCAweDAzMmYsIFwiYnJldmVpbnZlcnRlZGNtYlwiLCAweDAzMTEsIFwiYnJldmVpbnZlcnRlZGRvdWJsZWNtYlwiLCAweDAzNjEsIFwiYnJpZGdlYmVsb3djbWJcIiwgMHgwMzJhLCBcImJyaWRnZWludmVydGVkYmVsb3djbWJcIiwgMHgwMzNhLCBcImJyb2tlbmJhclwiLCAweDAwYTYsIFwiYnN0cm9rZVwiLCAweDAxODAsIFwiYnN1cGVyaW9yXCIsIDB4ZjZlYSwgXCJidG9wYmFyXCIsIDB4MDE4MywgXCJidWhpcmFnYW5hXCIsIDB4MzA3NiwgXCJidWthdGFrYW5hXCIsIDB4MzBkNiwgXCJidWxsZXRcIiwgMHgyMDIyLCBcImJ1bGxldGludmVyc2VcIiwgMHgyNWQ4LCBcImJ1bGxldG9wZXJhdG9yXCIsIDB4MjIxOSwgXCJidWxsc2V5ZVwiLCAweDI1Y2UsIFwiY1wiLCAweDAwNjMsIFwiY2Fhcm1lbmlhblwiLCAweDA1NmUsIFwiY2FiZW5nYWxpXCIsIDB4MDk5YSwgXCJjYWN1dGVcIiwgMHgwMTA3LCBcImNhZGV2YVwiLCAweDA5MWEsIFwiY2FndWphcmF0aVwiLCAweDBhOWEsIFwiY2FndXJtdWtoaVwiLCAweDBhMWEsIFwiY2Fsc3F1YXJlXCIsIDB4MzM4OCwgXCJjYW5kcmFiaW5kdWJlbmdhbGlcIiwgMHgwOTgxLCBcImNhbmRyYWJpbmR1Y21iXCIsIDB4MDMxMCwgXCJjYW5kcmFiaW5kdWRldmFcIiwgMHgwOTAxLCBcImNhbmRyYWJpbmR1Z3VqYXJhdGlcIiwgMHgwYTgxLCBcImNhcHNsb2NrXCIsIDB4MjFlYSwgXCJjYXJlb2ZcIiwgMHgyMTA1LCBcImNhcm9uXCIsIDB4MDJjNywgXCJjYXJvbmJlbG93Y21iXCIsIDB4MDMyYywgXCJjYXJvbmNtYlwiLCAweDAzMGMsIFwiY2FycmlhZ2VyZXR1cm5cIiwgMHgyMWI1LCBcImNib3BvbW9mb1wiLCAweDMxMTgsIFwiY2Nhcm9uXCIsIDB4MDEwZCwgXCJjY2VkaWxsYVwiLCAweDAwZTcsIFwiY2NlZGlsbGFhY3V0ZVwiLCAweDFlMDksIFwiY2NpcmNsZVwiLCAweDI0ZDIsIFwiY2NpcmN1bWZsZXhcIiwgMHgwMTA5LCBcImNjdXJsXCIsIDB4MDI1NSwgXCJjZG90XCIsIDB4MDEwYiwgXCJjZG90YWNjZW50XCIsIDB4MDEwYiwgXCJjZHNxdWFyZVwiLCAweDMzYzUsIFwiY2VkaWxsYVwiLCAweDAwYjgsIFwiY2VkaWxsYWNtYlwiLCAweDAzMjcsIFwiY2VudFwiLCAweDAwYTIsIFwiY2VudGlncmFkZVwiLCAweDIxMDMsIFwiY2VudGluZmVyaW9yXCIsIDB4ZjZkZiwgXCJjZW50bW9ub3NwYWNlXCIsIDB4ZmZlMCwgXCJjZW50b2xkc3R5bGVcIiwgMHhmN2EyLCBcImNlbnRzdXBlcmlvclwiLCAweGY2ZTAsIFwiY2hhYXJtZW5pYW5cIiwgMHgwNTc5LCBcImNoYWJlbmdhbGlcIiwgMHgwOTliLCBcImNoYWRldmFcIiwgMHgwOTFiLCBcImNoYWd1amFyYXRpXCIsIDB4MGE5YiwgXCJjaGFndXJtdWtoaVwiLCAweDBhMWIsIFwiY2hib3BvbW9mb1wiLCAweDMxMTQsIFwiY2hlYWJraGFzaWFuY3lyaWxsaWNcIiwgMHgwNGJkLCBcImNoZWNrbWFya1wiLCAweDI3MTMsIFwiY2hlY3lyaWxsaWNcIiwgMHgwNDQ3LCBcImNoZWRlc2NlbmRlcmFia2hhc2lhbmN5cmlsbGljXCIsIDB4MDRiZiwgXCJjaGVkZXNjZW5kZXJjeXJpbGxpY1wiLCAweDA0YjcsIFwiY2hlZGllcmVzaXNjeXJpbGxpY1wiLCAweDA0ZjUsIFwiY2hlaGFybWVuaWFuXCIsIDB4MDU3MywgXCJjaGVraGFrYXNzaWFuY3lyaWxsaWNcIiwgMHgwNGNjLCBcImNoZXZlcnRpY2Fsc3Ryb2tlY3lyaWxsaWNcIiwgMHgwNGI5LCBcImNoaVwiLCAweDAzYzcsIFwiY2hpZXVjaGFjaXJjbGVrb3JlYW5cIiwgMHgzMjc3LCBcImNoaWV1Y2hhcGFyZW5rb3JlYW5cIiwgMHgzMjE3LCBcImNoaWV1Y2hjaXJjbGVrb3JlYW5cIiwgMHgzMjY5LCBcImNoaWV1Y2hrb3JlYW5cIiwgMHgzMTRhLCBcImNoaWV1Y2hwYXJlbmtvcmVhblwiLCAweDMyMDksIFwiY2hvY2hhbmd0aGFpXCIsIDB4MGUwYSwgXCJjaG9jaGFudGhhaVwiLCAweDBlMDgsIFwiY2hvY2hpbmd0aGFpXCIsIDB4MGUwOSwgXCJjaG9jaG9ldGhhaVwiLCAweDBlMGMsIFwiY2hvb2tcIiwgMHgwMTg4LCBcImNpZXVjYWNpcmNsZWtvcmVhblwiLCAweDMyNzYsIFwiY2lldWNhcGFyZW5rb3JlYW5cIiwgMHgzMjE2LCBcImNpZXVjY2lyY2xla29yZWFuXCIsIDB4MzI2OCwgXCJjaWV1Y2tvcmVhblwiLCAweDMxNDgsIFwiY2lldWNwYXJlbmtvcmVhblwiLCAweDMyMDgsIFwiY2lldWN1cGFyZW5rb3JlYW5cIiwgMHgzMjFjLCBcImNpcmNsZVwiLCAweDI1Y2IsIFwiY2lyY2xlY29weXJ0XCIsIDB4MDBhOSwgXCJjaXJjbGVtdWx0aXBseVwiLCAweDIyOTcsIFwiY2lyY2xlb3RcIiwgMHgyMjk5LCBcImNpcmNsZXBsdXNcIiwgMHgyMjk1LCBcImNpcmNsZXBvc3RhbG1hcmtcIiwgMHgzMDM2LCBcImNpcmNsZXdpdGhsZWZ0aGFsZmJsYWNrXCIsIDB4MjVkMCwgXCJjaXJjbGV3aXRocmlnaHRoYWxmYmxhY2tcIiwgMHgyNWQxLCBcImNpcmN1bWZsZXhcIiwgMHgwMmM2LCBcImNpcmN1bWZsZXhiZWxvd2NtYlwiLCAweDAzMmQsIFwiY2lyY3VtZmxleGNtYlwiLCAweDAzMDIsIFwiY2xlYXJcIiwgMHgyMzI3LCBcImNsaWNrYWx2ZW9sYXJcIiwgMHgwMWMyLCBcImNsaWNrZGVudGFsXCIsIDB4MDFjMCwgXCJjbGlja2xhdGVyYWxcIiwgMHgwMWMxLCBcImNsaWNrcmV0cm9mbGV4XCIsIDB4MDFjMywgXCJjbHViXCIsIDB4MjY2MywgXCJjbHVic3VpdGJsYWNrXCIsIDB4MjY2MywgXCJjbHVic3VpdHdoaXRlXCIsIDB4MjY2NywgXCJjbWN1YmVkc3F1YXJlXCIsIDB4MzNhNCwgXCJjbW9ub3NwYWNlXCIsIDB4ZmY0MywgXCJjbXNxdWFyZWRzcXVhcmVcIiwgMHgzM2EwLCBcImNvYXJtZW5pYW5cIiwgMHgwNTgxLCBcImNvbG9uXCIsIDB4MDAzYSwgXCJjb2xvbm1vbmV0YXJ5XCIsIDB4MjBhMSwgXCJjb2xvbm1vbm9zcGFjZVwiLCAweGZmMWEsIFwiY29sb25zaWduXCIsIDB4MjBhMSwgXCJjb2xvbnNtYWxsXCIsIDB4ZmU1NSwgXCJjb2xvbnRyaWFuZ3VsYXJoYWxmbW9kXCIsIDB4MDJkMSwgXCJjb2xvbnRyaWFuZ3VsYXJtb2RcIiwgMHgwMmQwLCBcImNvbW1hXCIsIDB4MDAyYywgXCJjb21tYWFib3ZlY21iXCIsIDB4MDMxMywgXCJjb21tYWFib3ZlcmlnaHRjbWJcIiwgMHgwMzE1LCBcImNvbW1hYWNjZW50XCIsIDB4ZjZjMywgXCJjb21tYWFyYWJpY1wiLCAweDA2MGMsIFwiY29tbWFhcm1lbmlhblwiLCAweDA1NWQsIFwiY29tbWFpbmZlcmlvclwiLCAweGY2ZTEsIFwiY29tbWFtb25vc3BhY2VcIiwgMHhmZjBjLCBcImNvbW1hcmV2ZXJzZWRhYm92ZWNtYlwiLCAweDAzMTQsIFwiY29tbWFyZXZlcnNlZG1vZFwiLCAweDAyYmQsIFwiY29tbWFzbWFsbFwiLCAweGZlNTAsIFwiY29tbWFzdXBlcmlvclwiLCAweGY2ZTIsIFwiY29tbWF0dXJuZWRhYm92ZWNtYlwiLCAweDAzMTIsIFwiY29tbWF0dXJuZWRtb2RcIiwgMHgwMmJiLCBcImNvbXBhc3NcIiwgMHgyNjNjLCBcImNvbmdydWVudFwiLCAweDIyNDUsIFwiY29udG91cmludGVncmFsXCIsIDB4MjIyZSwgXCJjb250cm9sXCIsIDB4MjMwMywgXCJjb250cm9sQUNLXCIsIDB4MDAwNiwgXCJjb250cm9sQkVMXCIsIDB4MDAwNywgXCJjb250cm9sQlNcIiwgMHgwMDA4LCBcImNvbnRyb2xDQU5cIiwgMHgwMDE4LCBcImNvbnRyb2xDUlwiLCAweDAwMGQsIFwiY29udHJvbERDMVwiLCAweDAwMTEsIFwiY29udHJvbERDMlwiLCAweDAwMTIsIFwiY29udHJvbERDM1wiLCAweDAwMTMsIFwiY29udHJvbERDNFwiLCAweDAwMTQsIFwiY29udHJvbERFTFwiLCAweDAwN2YsIFwiY29udHJvbERMRVwiLCAweDAwMTAsIFwiY29udHJvbEVNXCIsIDB4MDAxOSwgXCJjb250cm9sRU5RXCIsIDB4MDAwNSwgXCJjb250cm9sRU9UXCIsIDB4MDAwNCwgXCJjb250cm9sRVNDXCIsIDB4MDAxYiwgXCJjb250cm9sRVRCXCIsIDB4MDAxNywgXCJjb250cm9sRVRYXCIsIDB4MDAwMywgXCJjb250cm9sRkZcIiwgMHgwMDBjLCBcImNvbnRyb2xGU1wiLCAweDAwMWMsIFwiY29udHJvbEdTXCIsIDB4MDAxZCwgXCJjb250cm9sSFRcIiwgMHgwMDA5LCBcImNvbnRyb2xMRlwiLCAweDAwMGEsIFwiY29udHJvbE5BS1wiLCAweDAwMTUsIFwiY29udHJvbE5VTExcIiwgMHgwMDAwLCBcImNvbnRyb2xSU1wiLCAweDAwMWUsIFwiY29udHJvbFNJXCIsIDB4MDAwZiwgXCJjb250cm9sU09cIiwgMHgwMDBlLCBcImNvbnRyb2xTT1RcIiwgMHgwMDAyLCBcImNvbnRyb2xTVFhcIiwgMHgwMDAxLCBcImNvbnRyb2xTVUJcIiwgMHgwMDFhLCBcImNvbnRyb2xTWU5cIiwgMHgwMDE2LCBcImNvbnRyb2xVU1wiLCAweDAwMWYsIFwiY29udHJvbFZUXCIsIDB4MDAwYiwgXCJjb3B5cmlnaHRcIiwgMHgwMGE5LCBcImNvcHlyaWdodHNhbnNcIiwgMHhmOGU5LCBcImNvcHlyaWdodHNlcmlmXCIsIDB4ZjZkOSwgXCJjb3JuZXJicmFja2V0bGVmdFwiLCAweDMwMGMsIFwiY29ybmVyYnJhY2tldGxlZnRoYWxmd2lkdGhcIiwgMHhmZjYyLCBcImNvcm5lcmJyYWNrZXRsZWZ0dmVydGljYWxcIiwgMHhmZTQxLCBcImNvcm5lcmJyYWNrZXRyaWdodFwiLCAweDMwMGQsIFwiY29ybmVyYnJhY2tldHJpZ2h0aGFsZndpZHRoXCIsIDB4ZmY2MywgXCJjb3JuZXJicmFja2V0cmlnaHR2ZXJ0aWNhbFwiLCAweGZlNDIsIFwiY29ycG9yYXRpb25zcXVhcmVcIiwgMHgzMzdmLCBcImNvc3F1YXJlXCIsIDB4MzNjNywgXCJjb3Zlcmtnc3F1YXJlXCIsIDB4MzNjNiwgXCJjcGFyZW5cIiwgMHgyNDllLCBcImNydXplaXJvXCIsIDB4MjBhMiwgXCJjc3RyZXRjaGVkXCIsIDB4MDI5NywgXCJjdXJseWFuZFwiLCAweDIyY2YsIFwiY3VybHlvclwiLCAweDIyY2UsIFwiY3VycmVuY3lcIiwgMHgwMGE0LCBcImN5ckJyZXZlXCIsIDB4ZjZkMSwgXCJjeXJGbGV4XCIsIDB4ZjZkMiwgXCJjeXJicmV2ZVwiLCAweGY2ZDQsIFwiY3lyZmxleFwiLCAweGY2ZDUsIFwiZFwiLCAweDAwNjQsIFwiZGFhcm1lbmlhblwiLCAweDA1NjQsIFwiZGFiZW5nYWxpXCIsIDB4MDlhNiwgXCJkYWRhcmFiaWNcIiwgMHgwNjM2LCBcImRhZGV2YVwiLCAweDA5MjYsIFwiZGFkZmluYWxhcmFiaWNcIiwgMHhmZWJlLCBcImRhZGluaXRpYWxhcmFiaWNcIiwgMHhmZWJmLCBcImRhZG1lZGlhbGFyYWJpY1wiLCAweGZlYzAsIFwiZGFnZXNoXCIsIDB4MDViYywgXCJkYWdlc2hoZWJyZXdcIiwgMHgwNWJjLCBcImRhZ2dlclwiLCAweDIwMjAsIFwiZGFnZ2VyZGJsXCIsIDB4MjAyMSwgXCJkYWd1amFyYXRpXCIsIDB4MGFhNiwgXCJkYWd1cm11a2hpXCIsIDB4MGEyNiwgXCJkYWhpcmFnYW5hXCIsIDB4MzA2MCwgXCJkYWthdGFrYW5hXCIsIDB4MzBjMCwgXCJkYWxhcmFiaWNcIiwgMHgwNjJmLCBcImRhbGV0XCIsIDB4MDVkMywgXCJkYWxldGRhZ2VzaFwiLCAweGZiMzMsIFwiZGFsZXRkYWdlc2hoZWJyZXdcIiwgMHhmYjMzLCBcImRhbGV0aGVicmV3XCIsIDB4MDVkMywgXCJkYWxmaW5hbGFyYWJpY1wiLCAweGZlYWEsIFwiZGFtbWFhcmFiaWNcIiwgMHgwNjRmLCBcImRhbW1hbG93YXJhYmljXCIsIDB4MDY0ZiwgXCJkYW1tYXRhbmFsdG9uZWFyYWJpY1wiLCAweDA2NGMsIFwiZGFtbWF0YW5hcmFiaWNcIiwgMHgwNjRjLCBcImRhbmRhXCIsIDB4MDk2NCwgXCJkYXJnYWhlYnJld1wiLCAweDA1YTcsIFwiZGFyZ2FsZWZ0aGVicmV3XCIsIDB4MDVhNywgXCJkYXNpYXBuZXVtYXRhY3lyaWxsaWNjbWJcIiwgMHgwNDg1LCBcImRibEdyYXZlXCIsIDB4ZjZkMywgXCJkYmxhbmdsZWJyYWNrZXRsZWZ0XCIsIDB4MzAwYSwgXCJkYmxhbmdsZWJyYWNrZXRsZWZ0dmVydGljYWxcIiwgMHhmZTNkLCBcImRibGFuZ2xlYnJhY2tldHJpZ2h0XCIsIDB4MzAwYiwgXCJkYmxhbmdsZWJyYWNrZXRyaWdodHZlcnRpY2FsXCIsIDB4ZmUzZSwgXCJkYmxhcmNoaW52ZXJ0ZWRiZWxvd2NtYlwiLCAweDAzMmIsIFwiZGJsYXJyb3dsZWZ0XCIsIDB4MjFkNCwgXCJkYmxhcnJvd3JpZ2h0XCIsIDB4MjFkMiwgXCJkYmxkYW5kYVwiLCAweDA5NjUsIFwiZGJsZ3JhdmVcIiwgMHhmNmQ2LCBcImRibGdyYXZlY21iXCIsIDB4MDMwZiwgXCJkYmxpbnRlZ3JhbFwiLCAweDIyMmMsIFwiZGJsbG93bGluZVwiLCAweDIwMTcsIFwiZGJsbG93bGluZWNtYlwiLCAweDAzMzMsIFwiZGJsb3ZlcmxpbmVjbWJcIiwgMHgwMzNmLCBcImRibHByaW1lbW9kXCIsIDB4MDJiYSwgXCJkYmx2ZXJ0aWNhbGJhclwiLCAweDIwMTYsIFwiZGJsdmVydGljYWxsaW5lYWJvdmVjbWJcIiwgMHgwMzBlLCBcImRib3BvbW9mb1wiLCAweDMxMDksIFwiZGJzcXVhcmVcIiwgMHgzM2M4LCBcImRjYXJvblwiLCAweDAxMGYsIFwiZGNlZGlsbGFcIiwgMHgxZTExLCBcImRjaXJjbGVcIiwgMHgyNGQzLCBcImRjaXJjdW1mbGV4YmVsb3dcIiwgMHgxZTEzLCBcImRjcm9hdFwiLCAweDAxMTEsIFwiZGRhYmVuZ2FsaVwiLCAweDA5YTEsIFwiZGRhZGV2YVwiLCAweDA5MjEsIFwiZGRhZ3VqYXJhdGlcIiwgMHgwYWExLCBcImRkYWd1cm11a2hpXCIsIDB4MGEyMSwgXCJkZGFsYXJhYmljXCIsIDB4MDY4OCwgXCJkZGFsZmluYWxhcmFiaWNcIiwgMHhmYjg5LCBcImRkZGhhZGV2YVwiLCAweDA5NWMsIFwiZGRoYWJlbmdhbGlcIiwgMHgwOWEyLCBcImRkaGFkZXZhXCIsIDB4MDkyMiwgXCJkZGhhZ3VqYXJhdGlcIiwgMHgwYWEyLCBcImRkaGFndXJtdWtoaVwiLCAweDBhMjIsIFwiZGRvdGFjY2VudFwiLCAweDFlMGIsIFwiZGRvdGJlbG93XCIsIDB4MWUwZCwgXCJkZWNpbWFsc2VwYXJhdG9yYXJhYmljXCIsIDB4MDY2YiwgXCJkZWNpbWFsc2VwYXJhdG9ycGVyc2lhblwiLCAweDA2NmIsIFwiZGVjeXJpbGxpY1wiLCAweDA0MzQsIFwiZGVncmVlXCIsIDB4MDBiMCwgXCJkZWhpaGVicmV3XCIsIDB4MDVhZCwgXCJkZWhpcmFnYW5hXCIsIDB4MzA2NywgXCJkZWljb3B0aWNcIiwgMHgwM2VmLCBcImRla2F0YWthbmFcIiwgMHgzMGM3LCBcImRlbGV0ZWxlZnRcIiwgMHgyMzJiLCBcImRlbGV0ZXJpZ2h0XCIsIDB4MjMyNiwgXCJkZWx0YVwiLCAweDAzYjQsIFwiZGVsdGF0dXJuZWRcIiwgMHgwMThkLCBcImRlbm9taW5hdG9ybWludXNvbmVudW1lcmF0b3JiZW5nYWxpXCIsIDB4MDlmOCwgXCJkZXpoXCIsIDB4MDJhNCwgXCJkaGFiZW5nYWxpXCIsIDB4MDlhNywgXCJkaGFkZXZhXCIsIDB4MDkyNywgXCJkaGFndWphcmF0aVwiLCAweDBhYTcsIFwiZGhhZ3VybXVraGlcIiwgMHgwYTI3LCBcImRob29rXCIsIDB4MDI1NywgXCJkaWFseXRpa2F0b25vc1wiLCAweDAzODUsIFwiZGlhbHl0aWthdG9ub3NjbWJcIiwgMHgwMzQ0LCBcImRpYW1vbmRcIiwgMHgyNjY2LCBcImRpYW1vbmRzdWl0d2hpdGVcIiwgMHgyNjYyLCBcImRpZXJlc2lzXCIsIDB4MDBhOCwgXCJkaWVyZXNpc2FjdXRlXCIsIDB4ZjZkNywgXCJkaWVyZXNpc2JlbG93Y21iXCIsIDB4MDMyNCwgXCJkaWVyZXNpc2NtYlwiLCAweDAzMDgsIFwiZGllcmVzaXNncmF2ZVwiLCAweGY2ZDgsIFwiZGllcmVzaXN0b25vc1wiLCAweDAzODUsIFwiZGloaXJhZ2FuYVwiLCAweDMwNjIsIFwiZGlrYXRha2FuYVwiLCAweDMwYzIsIFwiZGl0dG9tYXJrXCIsIDB4MzAwMywgXCJkaXZpZGVcIiwgMHgwMGY3LCBcImRpdmlkZXNcIiwgMHgyMjIzLCBcImRpdmlzaW9uc2xhc2hcIiwgMHgyMjE1LCBcImRqZWN5cmlsbGljXCIsIDB4MDQ1MiwgXCJka3NoYWRlXCIsIDB4MjU5MywgXCJkbGluZWJlbG93XCIsIDB4MWUwZiwgXCJkbHNxdWFyZVwiLCAweDMzOTcsIFwiZG1hY3JvblwiLCAweDAxMTEsIFwiZG1vbm9zcGFjZVwiLCAweGZmNDQsIFwiZG5ibG9ja1wiLCAweDI1ODQsIFwiZG9jaGFkYXRoYWlcIiwgMHgwZTBlLCBcImRvZGVrdGhhaVwiLCAweDBlMTQsIFwiZG9oaXJhZ2FuYVwiLCAweDMwNjksIFwiZG9rYXRha2FuYVwiLCAweDMwYzksIFwiZG9sbGFyXCIsIDB4MDAyNCwgXCJkb2xsYXJpbmZlcmlvclwiLCAweGY2ZTMsIFwiZG9sbGFybW9ub3NwYWNlXCIsIDB4ZmYwNCwgXCJkb2xsYXJvbGRzdHlsZVwiLCAweGY3MjQsIFwiZG9sbGFyc21hbGxcIiwgMHhmZTY5LCBcImRvbGxhcnN1cGVyaW9yXCIsIDB4ZjZlNCwgXCJkb25nXCIsIDB4MjBhYiwgXCJkb3J1c3F1YXJlXCIsIDB4MzMyNiwgXCJkb3RhY2NlbnRcIiwgMHgwMmQ5LCBcImRvdGFjY2VudGNtYlwiLCAweDAzMDcsIFwiZG90YmVsb3djbWJcIiwgMHgwMzIzLCBcImRvdGJlbG93Y29tYlwiLCAweDAzMjMsIFwiZG90a2F0YWthbmFcIiwgMHgzMGZiLCBcImRvdGxlc3NpXCIsIDB4MDEzMSwgXCJkb3RsZXNzalwiLCAweGY2YmUsIFwiZG90bGVzc2pzdHJva2Vob29rXCIsIDB4MDI4NCwgXCJkb3RtYXRoXCIsIDB4MjJjNSwgXCJkb3R0ZWRjaXJjbGVcIiwgMHgyNWNjLCBcImRvdWJsZXlvZHBhdGFoXCIsIDB4ZmIxZiwgXCJkb3VibGV5b2RwYXRhaGhlYnJld1wiLCAweGZiMWYsIFwiZG93bnRhY2tiZWxvd2NtYlwiLCAweDAzMWUsIFwiZG93bnRhY2ttb2RcIiwgMHgwMmQ1LCBcImRwYXJlblwiLCAweDI0OWYsIFwiZHN1cGVyaW9yXCIsIDB4ZjZlYiwgXCJkdGFpbFwiLCAweDAyNTYsIFwiZHRvcGJhclwiLCAweDAxOGMsIFwiZHVoaXJhZ2FuYVwiLCAweDMwNjUsIFwiZHVrYXRha2FuYVwiLCAweDMwYzUsIFwiZHpcIiwgMHgwMWYzLCBcImR6YWx0b25lXCIsIDB4MDJhMywgXCJkemNhcm9uXCIsIDB4MDFjNiwgXCJkemN1cmxcIiwgMHgwMmE1LCBcImR6ZWFia2hhc2lhbmN5cmlsbGljXCIsIDB4MDRlMSwgXCJkemVjeXJpbGxpY1wiLCAweDA0NTUsIFwiZHpoZWN5cmlsbGljXCIsIDB4MDQ1ZiwgXCJlXCIsIDB4MDA2NSwgXCJlYWN1dGVcIiwgMHgwMGU5LCBcImVhcnRoXCIsIDB4MjY0MSwgXCJlYmVuZ2FsaVwiLCAweDA5OGYsIFwiZWJvcG9tb2ZvXCIsIDB4MzExYywgXCJlYnJldmVcIiwgMHgwMTE1LCBcImVjYW5kcmFkZXZhXCIsIDB4MDkwZCwgXCJlY2FuZHJhZ3VqYXJhdGlcIiwgMHgwYThkLCBcImVjYW5kcmF2b3dlbHNpZ25kZXZhXCIsIDB4MDk0NSwgXCJlY2FuZHJhdm93ZWxzaWduZ3VqYXJhdGlcIiwgMHgwYWM1LCBcImVjYXJvblwiLCAweDAxMWIsIFwiZWNlZGlsbGFicmV2ZVwiLCAweDFlMWQsIFwiZWNoYXJtZW5pYW5cIiwgMHgwNTY1LCBcImVjaHlpd25hcm1lbmlhblwiLCAweDA1ODcsIFwiZWNpcmNsZVwiLCAweDI0ZDQsIFwiZWNpcmN1bWZsZXhcIiwgMHgwMGVhLCBcImVjaXJjdW1mbGV4YWN1dGVcIiwgMHgxZWJmLCBcImVjaXJjdW1mbGV4YmVsb3dcIiwgMHgxZTE5LCBcImVjaXJjdW1mbGV4ZG90YmVsb3dcIiwgMHgxZWM3LCBcImVjaXJjdW1mbGV4Z3JhdmVcIiwgMHgxZWMxLCBcImVjaXJjdW1mbGV4aG9va2Fib3ZlXCIsIDB4MWVjMywgXCJlY2lyY3VtZmxleHRpbGRlXCIsIDB4MWVjNSwgXCJlY3lyaWxsaWNcIiwgMHgwNDU0LCBcImVkYmxncmF2ZVwiLCAweDAyMDUsIFwiZWRldmFcIiwgMHgwOTBmLCBcImVkaWVyZXNpc1wiLCAweDAwZWIsIFwiZWRvdFwiLCAweDAxMTcsIFwiZWRvdGFjY2VudFwiLCAweDAxMTcsIFwiZWRvdGJlbG93XCIsIDB4MWViOSwgXCJlZWd1cm11a2hpXCIsIDB4MGEwZiwgXCJlZW1hdHJhZ3VybXVraGlcIiwgMHgwYTQ3LCBcImVmY3lyaWxsaWNcIiwgMHgwNDQ0LCBcImVncmF2ZVwiLCAweDAwZTgsIFwiZWd1amFyYXRpXCIsIDB4MGE4ZiwgXCJlaGFybWVuaWFuXCIsIDB4MDU2NywgXCJlaGJvcG9tb2ZvXCIsIDB4MzExZCwgXCJlaGlyYWdhbmFcIiwgMHgzMDQ4LCBcImVob29rYWJvdmVcIiwgMHgxZWJiLCBcImVpYm9wb21vZm9cIiwgMHgzMTFmLCBcImVpZ2h0XCIsIDB4MDAzOCwgXCJlaWdodGFyYWJpY1wiLCAweDA2NjgsIFwiZWlnaHRiZW5nYWxpXCIsIDB4MDllZSwgXCJlaWdodGNpcmNsZVwiLCAweDI0NjcsIFwiZWlnaHRjaXJjbGVpbnZlcnNlc2Fuc3NlcmlmXCIsIDB4Mjc5MSwgXCJlaWdodGRldmFcIiwgMHgwOTZlLCBcImVpZ2h0ZWVuY2lyY2xlXCIsIDB4MjQ3MSwgXCJlaWdodGVlbnBhcmVuXCIsIDB4MjQ4NSwgXCJlaWdodGVlbnBlcmlvZFwiLCAweDI0OTksIFwiZWlnaHRndWphcmF0aVwiLCAweDBhZWUsIFwiZWlnaHRndXJtdWtoaVwiLCAweDBhNmUsIFwiZWlnaHRoYWNrYXJhYmljXCIsIDB4MDY2OCwgXCJlaWdodGhhbmd6aG91XCIsIDB4MzAyOCwgXCJlaWdodGhub3RlYmVhbWVkXCIsIDB4MjY2YiwgXCJlaWdodGlkZW9ncmFwaGljcGFyZW5cIiwgMHgzMjI3LCBcImVpZ2h0aW5mZXJpb3JcIiwgMHgyMDg4LCBcImVpZ2h0bW9ub3NwYWNlXCIsIDB4ZmYxOCwgXCJlaWdodG9sZHN0eWxlXCIsIDB4ZjczOCwgXCJlaWdodHBhcmVuXCIsIDB4MjQ3YiwgXCJlaWdodHBlcmlvZFwiLCAweDI0OGYsIFwiZWlnaHRwZXJzaWFuXCIsIDB4MDZmOCwgXCJlaWdodHJvbWFuXCIsIDB4MjE3NywgXCJlaWdodHN1cGVyaW9yXCIsIDB4MjA3OCwgXCJlaWdodHRoYWlcIiwgMHgwZTU4LCBcImVpbnZlcnRlZGJyZXZlXCIsIDB4MDIwNywgXCJlaW90aWZpZWRjeXJpbGxpY1wiLCAweDA0NjUsIFwiZWthdGFrYW5hXCIsIDB4MzBhOCwgXCJla2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjc0LCBcImVrb25rYXJndXJtdWtoaVwiLCAweDBhNzQsIFwiZWtvcmVhblwiLCAweDMxNTQsIFwiZWxjeXJpbGxpY1wiLCAweDA0M2IsIFwiZWxlbWVudFwiLCAweDIyMDgsIFwiZWxldmVuY2lyY2xlXCIsIDB4MjQ2YSwgXCJlbGV2ZW5wYXJlblwiLCAweDI0N2UsIFwiZWxldmVucGVyaW9kXCIsIDB4MjQ5MiwgXCJlbGV2ZW5yb21hblwiLCAweDIxN2EsIFwiZWxsaXBzaXNcIiwgMHgyMDI2LCBcImVsbGlwc2lzdmVydGljYWxcIiwgMHgyMmVlLCBcImVtYWNyb25cIiwgMHgwMTEzLCBcImVtYWNyb25hY3V0ZVwiLCAweDFlMTcsIFwiZW1hY3JvbmdyYXZlXCIsIDB4MWUxNSwgXCJlbWN5cmlsbGljXCIsIDB4MDQzYywgXCJlbWRhc2hcIiwgMHgyMDE0LCBcImVtZGFzaHZlcnRpY2FsXCIsIDB4ZmUzMSwgXCJlbW9ub3NwYWNlXCIsIDB4ZmY0NSwgXCJlbXBoYXNpc21hcmthcm1lbmlhblwiLCAweDA1NWIsIFwiZW1wdHlzZXRcIiwgMHgyMjA1LCBcImVuYm9wb21vZm9cIiwgMHgzMTIzLCBcImVuY3lyaWxsaWNcIiwgMHgwNDNkLCBcImVuZGFzaFwiLCAweDIwMTMsIFwiZW5kYXNodmVydGljYWxcIiwgMHhmZTMyLCBcImVuZGVzY2VuZGVyY3lyaWxsaWNcIiwgMHgwNGEzLCBcImVuZ1wiLCAweDAxNGIsIFwiZW5nYm9wb21vZm9cIiwgMHgzMTI1LCBcImVuZ2hlY3lyaWxsaWNcIiwgMHgwNGE1LCBcImVuaG9va2N5cmlsbGljXCIsIDB4MDRjOCwgXCJlbnNwYWNlXCIsIDB4MjAwMiwgXCJlb2dvbmVrXCIsIDB4MDExOSwgXCJlb2tvcmVhblwiLCAweDMxNTMsIFwiZW9wZW5cIiwgMHgwMjViLCBcImVvcGVuY2xvc2VkXCIsIDB4MDI5YSwgXCJlb3BlbnJldmVyc2VkXCIsIDB4MDI1YywgXCJlb3BlbnJldmVyc2VkY2xvc2VkXCIsIDB4MDI1ZSwgXCJlb3BlbnJldmVyc2VkaG9va1wiLCAweDAyNWQsIFwiZXBhcmVuXCIsIDB4MjRhMCwgXCJlcHNpbG9uXCIsIDB4MDNiNSwgXCJlcHNpbG9udG9ub3NcIiwgMHgwM2FkLCBcImVxdWFsXCIsIDB4MDAzZCwgXCJlcXVhbG1vbm9zcGFjZVwiLCAweGZmMWQsIFwiZXF1YWxzbWFsbFwiLCAweGZlNjYsIFwiZXF1YWxzdXBlcmlvclwiLCAweDIwN2MsIFwiZXF1aXZhbGVuY2VcIiwgMHgyMjYxLCBcImVyYm9wb21vZm9cIiwgMHgzMTI2LCBcImVyY3lyaWxsaWNcIiwgMHgwNDQwLCBcImVyZXZlcnNlZFwiLCAweDAyNTgsIFwiZXJldmVyc2VkY3lyaWxsaWNcIiwgMHgwNDRkLCBcImVzY3lyaWxsaWNcIiwgMHgwNDQxLCBcImVzZGVzY2VuZGVyY3lyaWxsaWNcIiwgMHgwNGFiLCBcImVzaFwiLCAweDAyODMsIFwiZXNoY3VybFwiLCAweDAyODYsIFwiZXNob3J0ZGV2YVwiLCAweDA5MGUsIFwiZXNob3J0dm93ZWxzaWduZGV2YVwiLCAweDA5NDYsIFwiZXNocmV2ZXJzZWRsb29wXCIsIDB4MDFhYSwgXCJlc2hzcXVhdHJldmVyc2VkXCIsIDB4MDI4NSwgXCJlc21hbGxoaXJhZ2FuYVwiLCAweDMwNDcsIFwiZXNtYWxsa2F0YWthbmFcIiwgMHgzMGE3LCBcImVzbWFsbGthdGFrYW5haGFsZndpZHRoXCIsIDB4ZmY2YSwgXCJlc3RpbWF0ZWRcIiwgMHgyMTJlLCBcImVzdXBlcmlvclwiLCAweGY2ZWMsIFwiZXRhXCIsIDB4MDNiNywgXCJldGFybWVuaWFuXCIsIDB4MDU2OCwgXCJldGF0b25vc1wiLCAweDAzYWUsIFwiZXRoXCIsIDB4MDBmMCwgXCJldGlsZGVcIiwgMHgxZWJkLCBcImV0aWxkZWJlbG93XCIsIDB4MWUxYiwgXCJldG5haHRhZm91a2hoZWJyZXdcIiwgMHgwNTkxLCBcImV0bmFodGFmb3VraGxlZnRoZWJyZXdcIiwgMHgwNTkxLCBcImV0bmFodGFoZWJyZXdcIiwgMHgwNTkxLCBcImV0bmFodGFsZWZ0aGVicmV3XCIsIDB4MDU5MSwgXCJldHVybmVkXCIsIDB4MDFkZCwgXCJldWtvcmVhblwiLCAweDMxNjEsIFwiZXVyb1wiLCAweDIwYWMsIFwiZXZvd2Vsc2lnbmJlbmdhbGlcIiwgMHgwOWM3LCBcImV2b3dlbHNpZ25kZXZhXCIsIDB4MDk0NywgXCJldm93ZWxzaWduZ3VqYXJhdGlcIiwgMHgwYWM3LCBcImV4Y2xhbVwiLCAweDAwMjEsIFwiZXhjbGFtYXJtZW5pYW5cIiwgMHgwNTVjLCBcImV4Y2xhbWRibFwiLCAweDIwM2MsIFwiZXhjbGFtZG93blwiLCAweDAwYTEsIFwiZXhjbGFtZG93bnNtYWxsXCIsIDB4ZjdhMSwgXCJleGNsYW1tb25vc3BhY2VcIiwgMHhmZjAxLCBcImV4Y2xhbXNtYWxsXCIsIDB4ZjcyMSwgXCJleGlzdGVudGlhbFwiLCAweDIyMDMsIFwiZXpoXCIsIDB4MDI5MiwgXCJlemhjYXJvblwiLCAweDAxZWYsIFwiZXpoY3VybFwiLCAweDAyOTMsIFwiZXpocmV2ZXJzZWRcIiwgMHgwMWI5LCBcImV6aHRhaWxcIiwgMHgwMWJhLCBcImZcIiwgMHgwMDY2LCBcImZhZGV2YVwiLCAweDA5NWUsIFwiZmFndXJtdWtoaVwiLCAweDBhNWUsIFwiZmFocmVuaGVpdFwiLCAweDIxMDksIFwiZmF0aGFhcmFiaWNcIiwgMHgwNjRlLCBcImZhdGhhbG93YXJhYmljXCIsIDB4MDY0ZSwgXCJmYXRoYXRhbmFyYWJpY1wiLCAweDA2NGIsIFwiZmJvcG9tb2ZvXCIsIDB4MzEwOCwgXCJmY2lyY2xlXCIsIDB4MjRkNSwgXCJmZG90YWNjZW50XCIsIDB4MWUxZiwgXCJmZWhhcmFiaWNcIiwgMHgwNjQxLCBcImZlaGFybWVuaWFuXCIsIDB4MDU4NiwgXCJmZWhmaW5hbGFyYWJpY1wiLCAweGZlZDIsIFwiZmVoaW5pdGlhbGFyYWJpY1wiLCAweGZlZDMsIFwiZmVobWVkaWFsYXJhYmljXCIsIDB4ZmVkNCwgXCJmZWljb3B0aWNcIiwgMHgwM2U1LCBcImZlbWFsZVwiLCAweDI2NDAsIFwiZmZcIiwgMHhmYjAwLCBcImZfZlwiLCAweGZiMDAsIFwiZmZpXCIsIDB4ZmIwMywgXCJmZmxcIiwgMHhmYjA0LCBcImZpXCIsIDB4ZmIwMSwgXCJmaWZ0ZWVuY2lyY2xlXCIsIDB4MjQ2ZSwgXCJmaWZ0ZWVucGFyZW5cIiwgMHgyNDgyLCBcImZpZnRlZW5wZXJpb2RcIiwgMHgyNDk2LCBcImZpZ3VyZWRhc2hcIiwgMHgyMDEyLCBcImZpbGxlZGJveFwiLCAweDI1YTAsIFwiZmlsbGVkcmVjdFwiLCAweDI1YWMsIFwiZmluYWxrYWZcIiwgMHgwNWRhLCBcImZpbmFsa2FmZGFnZXNoXCIsIDB4ZmIzYSwgXCJmaW5hbGthZmRhZ2VzaGhlYnJld1wiLCAweGZiM2EsIFwiZmluYWxrYWZoZWJyZXdcIiwgMHgwNWRhLCBcImZpbmFsbWVtXCIsIDB4MDVkZCwgXCJmaW5hbG1lbWhlYnJld1wiLCAweDA1ZGQsIFwiZmluYWxudW5cIiwgMHgwNWRmLCBcImZpbmFsbnVuaGVicmV3XCIsIDB4MDVkZiwgXCJmaW5hbHBlXCIsIDB4MDVlMywgXCJmaW5hbHBlaGVicmV3XCIsIDB4MDVlMywgXCJmaW5hbHRzYWRpXCIsIDB4MDVlNSwgXCJmaW5hbHRzYWRpaGVicmV3XCIsIDB4MDVlNSwgXCJmaXJzdHRvbmVjaGluZXNlXCIsIDB4MDJjOSwgXCJmaXNoZXllXCIsIDB4MjVjOSwgXCJmaXRhY3lyaWxsaWNcIiwgMHgwNDczLCBcImZpdmVcIiwgMHgwMDM1LCBcImZpdmVhcmFiaWNcIiwgMHgwNjY1LCBcImZpdmViZW5nYWxpXCIsIDB4MDllYiwgXCJmaXZlY2lyY2xlXCIsIDB4MjQ2NCwgXCJmaXZlY2lyY2xlaW52ZXJzZXNhbnNzZXJpZlwiLCAweDI3OGUsIFwiZml2ZWRldmFcIiwgMHgwOTZiLCBcImZpdmVlaWdodGhzXCIsIDB4MjE1ZCwgXCJmaXZlZ3VqYXJhdGlcIiwgMHgwYWViLCBcImZpdmVndXJtdWtoaVwiLCAweDBhNmIsIFwiZml2ZWhhY2thcmFiaWNcIiwgMHgwNjY1LCBcImZpdmVoYW5nemhvdVwiLCAweDMwMjUsIFwiZml2ZWlkZW9ncmFwaGljcGFyZW5cIiwgMHgzMjI0LCBcImZpdmVpbmZlcmlvclwiLCAweDIwODUsIFwiZml2ZW1vbm9zcGFjZVwiLCAweGZmMTUsIFwiZml2ZW9sZHN0eWxlXCIsIDB4ZjczNSwgXCJmaXZlcGFyZW5cIiwgMHgyNDc4LCBcImZpdmVwZXJpb2RcIiwgMHgyNDhjLCBcImZpdmVwZXJzaWFuXCIsIDB4MDZmNSwgXCJmaXZlcm9tYW5cIiwgMHgyMTc0LCBcImZpdmVzdXBlcmlvclwiLCAweDIwNzUsIFwiZml2ZXRoYWlcIiwgMHgwZTU1LCBcImZsXCIsIDB4ZmIwMiwgXCJmbG9yaW5cIiwgMHgwMTkyLCBcImZtb25vc3BhY2VcIiwgMHhmZjQ2LCBcImZtc3F1YXJlXCIsIDB4MzM5OSwgXCJmb2ZhbnRoYWlcIiwgMHgwZTFmLCBcImZvZmF0aGFpXCIsIDB4MGUxZCwgXCJmb25nbWFudGhhaVwiLCAweDBlNGYsIFwiZm9yYWxsXCIsIDB4MjIwMCwgXCJmb3VyXCIsIDB4MDAzNCwgXCJmb3VyYXJhYmljXCIsIDB4MDY2NCwgXCJmb3VyYmVuZ2FsaVwiLCAweDA5ZWEsIFwiZm91cmNpcmNsZVwiLCAweDI0NjMsIFwiZm91cmNpcmNsZWludmVyc2VzYW5zc2VyaWZcIiwgMHgyNzhkLCBcImZvdXJkZXZhXCIsIDB4MDk2YSwgXCJmb3VyZ3VqYXJhdGlcIiwgMHgwYWVhLCBcImZvdXJndXJtdWtoaVwiLCAweDBhNmEsIFwiZm91cmhhY2thcmFiaWNcIiwgMHgwNjY0LCBcImZvdXJoYW5nemhvdVwiLCAweDMwMjQsIFwiZm91cmlkZW9ncmFwaGljcGFyZW5cIiwgMHgzMjIzLCBcImZvdXJpbmZlcmlvclwiLCAweDIwODQsIFwiZm91cm1vbm9zcGFjZVwiLCAweGZmMTQsIFwiZm91cm51bWVyYXRvcmJlbmdhbGlcIiwgMHgwOWY3LCBcImZvdXJvbGRzdHlsZVwiLCAweGY3MzQsIFwiZm91cnBhcmVuXCIsIDB4MjQ3NywgXCJmb3VycGVyaW9kXCIsIDB4MjQ4YiwgXCJmb3VycGVyc2lhblwiLCAweDA2ZjQsIFwiZm91cnJvbWFuXCIsIDB4MjE3MywgXCJmb3Vyc3VwZXJpb3JcIiwgMHgyMDc0LCBcImZvdXJ0ZWVuY2lyY2xlXCIsIDB4MjQ2ZCwgXCJmb3VydGVlbnBhcmVuXCIsIDB4MjQ4MSwgXCJmb3VydGVlbnBlcmlvZFwiLCAweDI0OTUsIFwiZm91cnRoYWlcIiwgMHgwZTU0LCBcImZvdXJ0aHRvbmVjaGluZXNlXCIsIDB4MDJjYiwgXCJmcGFyZW5cIiwgMHgyNGExLCBcImZyYWN0aW9uXCIsIDB4MjA0NCwgXCJmcmFuY1wiLCAweDIwYTMsIFwiZ1wiLCAweDAwNjcsIFwiZ2FiZW5nYWxpXCIsIDB4MDk5NywgXCJnYWN1dGVcIiwgMHgwMWY1LCBcImdhZGV2YVwiLCAweDA5MTcsIFwiZ2FmYXJhYmljXCIsIDB4MDZhZiwgXCJnYWZmaW5hbGFyYWJpY1wiLCAweGZiOTMsIFwiZ2FmaW5pdGlhbGFyYWJpY1wiLCAweGZiOTQsIFwiZ2FmbWVkaWFsYXJhYmljXCIsIDB4ZmI5NSwgXCJnYWd1amFyYXRpXCIsIDB4MGE5NywgXCJnYWd1cm11a2hpXCIsIDB4MGExNywgXCJnYWhpcmFnYW5hXCIsIDB4MzA0YywgXCJnYWthdGFrYW5hXCIsIDB4MzBhYywgXCJnYW1tYVwiLCAweDAzYjMsIFwiZ2FtbWFsYXRpbnNtYWxsXCIsIDB4MDI2MywgXCJnYW1tYXN1cGVyaW9yXCIsIDB4MDJlMCwgXCJnYW5naWFjb3B0aWNcIiwgMHgwM2ViLCBcImdib3BvbW9mb1wiLCAweDMxMGQsIFwiZ2JyZXZlXCIsIDB4MDExZiwgXCJnY2Fyb25cIiwgMHgwMWU3LCBcImdjZWRpbGxhXCIsIDB4MDEyMywgXCJnY2lyY2xlXCIsIDB4MjRkNiwgXCJnY2lyY3VtZmxleFwiLCAweDAxMWQsIFwiZ2NvbW1hYWNjZW50XCIsIDB4MDEyMywgXCJnZG90XCIsIDB4MDEyMSwgXCJnZG90YWNjZW50XCIsIDB4MDEyMSwgXCJnZWN5cmlsbGljXCIsIDB4MDQzMywgXCJnZWhpcmFnYW5hXCIsIDB4MzA1MiwgXCJnZWthdGFrYW5hXCIsIDB4MzBiMiwgXCJnZW9tZXRyaWNhbGx5ZXF1YWxcIiwgMHgyMjUxLCBcImdlcmVzaGFjY2VudGhlYnJld1wiLCAweDA1OWMsIFwiZ2VyZXNoaGVicmV3XCIsIDB4MDVmMywgXCJnZXJlc2htdXFkYW1oZWJyZXdcIiwgMHgwNTlkLCBcImdlcm1hbmRibHNcIiwgMHgwMGRmLCBcImdlcnNoYXlpbWFjY2VudGhlYnJld1wiLCAweDA1OWUsIFwiZ2Vyc2hheWltaGVicmV3XCIsIDB4MDVmNCwgXCJnZXRhbWFya1wiLCAweDMwMTMsIFwiZ2hhYmVuZ2FsaVwiLCAweDA5OTgsIFwiZ2hhZGFybWVuaWFuXCIsIDB4MDU3MiwgXCJnaGFkZXZhXCIsIDB4MDkxOCwgXCJnaGFndWphcmF0aVwiLCAweDBhOTgsIFwiZ2hhZ3VybXVraGlcIiwgMHgwYTE4LCBcImdoYWluYXJhYmljXCIsIDB4MDYzYSwgXCJnaGFpbmZpbmFsYXJhYmljXCIsIDB4ZmVjZSwgXCJnaGFpbmluaXRpYWxhcmFiaWNcIiwgMHhmZWNmLCBcImdoYWlubWVkaWFsYXJhYmljXCIsIDB4ZmVkMCwgXCJnaGVtaWRkbGVob29rY3lyaWxsaWNcIiwgMHgwNDk1LCBcImdoZXN0cm9rZWN5cmlsbGljXCIsIDB4MDQ5MywgXCJnaGV1cHR1cm5jeXJpbGxpY1wiLCAweDA0OTEsIFwiZ2hoYWRldmFcIiwgMHgwOTVhLCBcImdoaGFndXJtdWtoaVwiLCAweDBhNWEsIFwiZ2hvb2tcIiwgMHgwMjYwLCBcImdoenNxdWFyZVwiLCAweDMzOTMsIFwiZ2loaXJhZ2FuYVwiLCAweDMwNGUsIFwiZ2lrYXRha2FuYVwiLCAweDMwYWUsIFwiZ2ltYXJtZW5pYW5cIiwgMHgwNTYzLCBcImdpbWVsXCIsIDB4MDVkMiwgXCJnaW1lbGRhZ2VzaFwiLCAweGZiMzIsIFwiZ2ltZWxkYWdlc2hoZWJyZXdcIiwgMHhmYjMyLCBcImdpbWVsaGVicmV3XCIsIDB4MDVkMiwgXCJnamVjeXJpbGxpY1wiLCAweDA0NTMsIFwiZ2xvdHRhbGludmVydGVkc3Ryb2tlXCIsIDB4MDFiZSwgXCJnbG90dGFsc3RvcFwiLCAweDAyOTQsIFwiZ2xvdHRhbHN0b3BpbnZlcnRlZFwiLCAweDAyOTYsIFwiZ2xvdHRhbHN0b3Btb2RcIiwgMHgwMmMwLCBcImdsb3R0YWxzdG9wcmV2ZXJzZWRcIiwgMHgwMjk1LCBcImdsb3R0YWxzdG9wcmV2ZXJzZWRtb2RcIiwgMHgwMmMxLCBcImdsb3R0YWxzdG9wcmV2ZXJzZWRzdXBlcmlvclwiLCAweDAyZTQsIFwiZ2xvdHRhbHN0b3BzdHJva2VcIiwgMHgwMmExLCBcImdsb3R0YWxzdG9wc3Ryb2tlcmV2ZXJzZWRcIiwgMHgwMmEyLCBcImdtYWNyb25cIiwgMHgxZTIxLCBcImdtb25vc3BhY2VcIiwgMHhmZjQ3LCBcImdvaGlyYWdhbmFcIiwgMHgzMDU0LCBcImdva2F0YWthbmFcIiwgMHgzMGI0LCBcImdwYXJlblwiLCAweDI0YTIsIFwiZ3Bhc3F1YXJlXCIsIDB4MzNhYywgXCJncmFkaWVudFwiLCAweDIyMDcsIFwiZ3JhdmVcIiwgMHgwMDYwLCBcImdyYXZlYmVsb3djbWJcIiwgMHgwMzE2LCBcImdyYXZlY21iXCIsIDB4MDMwMCwgXCJncmF2ZWNvbWJcIiwgMHgwMzAwLCBcImdyYXZlZGV2YVwiLCAweDA5NTMsIFwiZ3JhdmVsb3dtb2RcIiwgMHgwMmNlLCBcImdyYXZlbW9ub3NwYWNlXCIsIDB4ZmY0MCwgXCJncmF2ZXRvbmVjbWJcIiwgMHgwMzQwLCBcImdyZWF0ZXJcIiwgMHgwMDNlLCBcImdyZWF0ZXJlcXVhbFwiLCAweDIyNjUsIFwiZ3JlYXRlcmVxdWFsb3JsZXNzXCIsIDB4MjJkYiwgXCJncmVhdGVybW9ub3NwYWNlXCIsIDB4ZmYxZSwgXCJncmVhdGVyb3JlcXVpdmFsZW50XCIsIDB4MjI3MywgXCJncmVhdGVyb3JsZXNzXCIsIDB4MjI3NywgXCJncmVhdGVyb3ZlcmVxdWFsXCIsIDB4MjI2NywgXCJncmVhdGVyc21hbGxcIiwgMHhmZTY1LCBcImdzY3JpcHRcIiwgMHgwMjYxLCBcImdzdHJva2VcIiwgMHgwMWU1LCBcImd1aGlyYWdhbmFcIiwgMHgzMDUwLCBcImd1aWxsZW1vdGxlZnRcIiwgMHgwMGFiLCBcImd1aWxsZW1vdHJpZ2h0XCIsIDB4MDBiYiwgXCJndWlsc2luZ2xsZWZ0XCIsIDB4MjAzOSwgXCJndWlsc2luZ2xyaWdodFwiLCAweDIwM2EsIFwiZ3VrYXRha2FuYVwiLCAweDMwYjAsIFwiZ3VyYW11c3F1YXJlXCIsIDB4MzMxOCwgXCJneXNxdWFyZVwiLCAweDMzYzksIFwiaFwiLCAweDAwNjgsIFwiaGFhYmtoYXNpYW5jeXJpbGxpY1wiLCAweDA0YTksIFwiaGFhbHRvbmVhcmFiaWNcIiwgMHgwNmMxLCBcImhhYmVuZ2FsaVwiLCAweDA5YjksIFwiaGFkZXNjZW5kZXJjeXJpbGxpY1wiLCAweDA0YjMsIFwiaGFkZXZhXCIsIDB4MDkzOSwgXCJoYWd1amFyYXRpXCIsIDB4MGFiOSwgXCJoYWd1cm11a2hpXCIsIDB4MGEzOSwgXCJoYWhhcmFiaWNcIiwgMHgwNjJkLCBcImhhaGZpbmFsYXJhYmljXCIsIDB4ZmVhMiwgXCJoYWhpbml0aWFsYXJhYmljXCIsIDB4ZmVhMywgXCJoYWhpcmFnYW5hXCIsIDB4MzA2ZiwgXCJoYWhtZWRpYWxhcmFiaWNcIiwgMHhmZWE0LCBcImhhaXR1c3F1YXJlXCIsIDB4MzMyYSwgXCJoYWthdGFrYW5hXCIsIDB4MzBjZiwgXCJoYWthdGFrYW5haGFsZndpZHRoXCIsIDB4ZmY4YSwgXCJoYWxhbnRndXJtdWtoaVwiLCAweDBhNGQsIFwiaGFtemFhcmFiaWNcIiwgMHgwNjIxLCBcImhhbXphbG93YXJhYmljXCIsIDB4MDYyMSwgXCJoYW5ndWxmaWxsZXJcIiwgMHgzMTY0LCBcImhhcmRzaWduY3lyaWxsaWNcIiwgMHgwNDRhLCBcImhhcnBvb25sZWZ0YmFyYnVwXCIsIDB4MjFiYywgXCJoYXJwb29ucmlnaHRiYXJidXBcIiwgMHgyMWMwLCBcImhhc3F1YXJlXCIsIDB4MzNjYSwgXCJoYXRhZnBhdGFoXCIsIDB4MDViMiwgXCJoYXRhZnBhdGFoMTZcIiwgMHgwNWIyLCBcImhhdGFmcGF0YWgyM1wiLCAweDA1YjIsIFwiaGF0YWZwYXRhaDJmXCIsIDB4MDViMiwgXCJoYXRhZnBhdGFoaGVicmV3XCIsIDB4MDViMiwgXCJoYXRhZnBhdGFobmFycm93aGVicmV3XCIsIDB4MDViMiwgXCJoYXRhZnBhdGFocXVhcnRlcmhlYnJld1wiLCAweDA1YjIsIFwiaGF0YWZwYXRhaHdpZGVoZWJyZXdcIiwgMHgwNWIyLCBcImhhdGFmcWFtYXRzXCIsIDB4MDViMywgXCJoYXRhZnFhbWF0czFiXCIsIDB4MDViMywgXCJoYXRhZnFhbWF0czI4XCIsIDB4MDViMywgXCJoYXRhZnFhbWF0czM0XCIsIDB4MDViMywgXCJoYXRhZnFhbWF0c2hlYnJld1wiLCAweDA1YjMsIFwiaGF0YWZxYW1hdHNuYXJyb3doZWJyZXdcIiwgMHgwNWIzLCBcImhhdGFmcWFtYXRzcXVhcnRlcmhlYnJld1wiLCAweDA1YjMsIFwiaGF0YWZxYW1hdHN3aWRlaGVicmV3XCIsIDB4MDViMywgXCJoYXRhZnNlZ29sXCIsIDB4MDViMSwgXCJoYXRhZnNlZ29sMTdcIiwgMHgwNWIxLCBcImhhdGFmc2Vnb2wyNFwiLCAweDA1YjEsIFwiaGF0YWZzZWdvbDMwXCIsIDB4MDViMSwgXCJoYXRhZnNlZ29saGVicmV3XCIsIDB4MDViMSwgXCJoYXRhZnNlZ29sbmFycm93aGVicmV3XCIsIDB4MDViMSwgXCJoYXRhZnNlZ29scXVhcnRlcmhlYnJld1wiLCAweDA1YjEsIFwiaGF0YWZzZWdvbHdpZGVoZWJyZXdcIiwgMHgwNWIxLCBcImhiYXJcIiwgMHgwMTI3LCBcImhib3BvbW9mb1wiLCAweDMxMGYsIFwiaGJyZXZlYmVsb3dcIiwgMHgxZTJiLCBcImhjZWRpbGxhXCIsIDB4MWUyOSwgXCJoY2lyY2xlXCIsIDB4MjRkNywgXCJoY2lyY3VtZmxleFwiLCAweDAxMjUsIFwiaGRpZXJlc2lzXCIsIDB4MWUyNywgXCJoZG90YWNjZW50XCIsIDB4MWUyMywgXCJoZG90YmVsb3dcIiwgMHgxZTI1LCBcImhlXCIsIDB4MDVkNCwgXCJoZWFydFwiLCAweDI2NjUsIFwiaGVhcnRzdWl0YmxhY2tcIiwgMHgyNjY1LCBcImhlYXJ0c3VpdHdoaXRlXCIsIDB4MjY2MSwgXCJoZWRhZ2VzaFwiLCAweGZiMzQsIFwiaGVkYWdlc2hoZWJyZXdcIiwgMHhmYjM0LCBcImhlaGFsdG9uZWFyYWJpY1wiLCAweDA2YzEsIFwiaGVoYXJhYmljXCIsIDB4MDY0NywgXCJoZWhlYnJld1wiLCAweDA1ZDQsIFwiaGVoZmluYWxhbHRvbmVhcmFiaWNcIiwgMHhmYmE3LCBcImhlaGZpbmFsYWx0dHdvYXJhYmljXCIsIDB4ZmVlYSwgXCJoZWhmaW5hbGFyYWJpY1wiLCAweGZlZWEsIFwiaGVoaGFtemFhYm92ZWZpbmFsYXJhYmljXCIsIDB4ZmJhNSwgXCJoZWhoYW16YWFib3ZlaXNvbGF0ZWRhcmFiaWNcIiwgMHhmYmE0LCBcImhlaGluaXRpYWxhbHRvbmVhcmFiaWNcIiwgMHhmYmE4LCBcImhlaGluaXRpYWxhcmFiaWNcIiwgMHhmZWViLCBcImhlaGlyYWdhbmFcIiwgMHgzMDc4LCBcImhlaG1lZGlhbGFsdG9uZWFyYWJpY1wiLCAweGZiYTksIFwiaGVobWVkaWFsYXJhYmljXCIsIDB4ZmVlYywgXCJoZWlzZWllcmFzcXVhcmVcIiwgMHgzMzdiLCBcImhla2F0YWthbmFcIiwgMHgzMGQ4LCBcImhla2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjhkLCBcImhla3V0YWFydXNxdWFyZVwiLCAweDMzMzYsIFwiaGVuZ2hvb2tcIiwgMHgwMjY3LCBcImhlcnV0dXNxdWFyZVwiLCAweDMzMzksIFwiaGV0XCIsIDB4MDVkNywgXCJoZXRoZWJyZXdcIiwgMHgwNWQ3LCBcImhob29rXCIsIDB4MDI2NiwgXCJoaG9va3N1cGVyaW9yXCIsIDB4MDJiMSwgXCJoaWV1aGFjaXJjbGVrb3JlYW5cIiwgMHgzMjdiLCBcImhpZXVoYXBhcmVua29yZWFuXCIsIDB4MzIxYiwgXCJoaWV1aGNpcmNsZWtvcmVhblwiLCAweDMyNmQsIFwiaGlldWhrb3JlYW5cIiwgMHgzMTRlLCBcImhpZXVocGFyZW5rb3JlYW5cIiwgMHgzMjBkLCBcImhpaGlyYWdhbmFcIiwgMHgzMDcyLCBcImhpa2F0YWthbmFcIiwgMHgzMGQyLCBcImhpa2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjhiLCBcImhpcmlxXCIsIDB4MDViNCwgXCJoaXJpcTE0XCIsIDB4MDViNCwgXCJoaXJpcTIxXCIsIDB4MDViNCwgXCJoaXJpcTJkXCIsIDB4MDViNCwgXCJoaXJpcWhlYnJld1wiLCAweDA1YjQsIFwiaGlyaXFuYXJyb3doZWJyZXdcIiwgMHgwNWI0LCBcImhpcmlxcXVhcnRlcmhlYnJld1wiLCAweDA1YjQsIFwiaGlyaXF3aWRlaGVicmV3XCIsIDB4MDViNCwgXCJobGluZWJlbG93XCIsIDB4MWU5NiwgXCJobW9ub3NwYWNlXCIsIDB4ZmY0OCwgXCJob2FybWVuaWFuXCIsIDB4MDU3MCwgXCJob2hpcHRoYWlcIiwgMHgwZTJiLCBcImhvaGlyYWdhbmFcIiwgMHgzMDdiLCBcImhva2F0YWthbmFcIiwgMHgzMGRiLCBcImhva2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjhlLCBcImhvbGFtXCIsIDB4MDViOSwgXCJob2xhbTE5XCIsIDB4MDViOSwgXCJob2xhbTI2XCIsIDB4MDViOSwgXCJob2xhbTMyXCIsIDB4MDViOSwgXCJob2xhbWhlYnJld1wiLCAweDA1YjksIFwiaG9sYW1uYXJyb3doZWJyZXdcIiwgMHgwNWI5LCBcImhvbGFtcXVhcnRlcmhlYnJld1wiLCAweDA1YjksIFwiaG9sYW13aWRlaGVicmV3XCIsIDB4MDViOSwgXCJob25va2h1a3RoYWlcIiwgMHgwZTJlLCBcImhvb2thYm92ZWNvbWJcIiwgMHgwMzA5LCBcImhvb2tjbWJcIiwgMHgwMzA5LCBcImhvb2twYWxhdGFsaXplZGJlbG93Y21iXCIsIDB4MDMyMSwgXCJob29rcmV0cm9mbGV4YmVsb3djbWJcIiwgMHgwMzIyLCBcImhvb25zcXVhcmVcIiwgMHgzMzQyLCBcImhvcmljb3B0aWNcIiwgMHgwM2U5LCBcImhvcml6b250YWxiYXJcIiwgMHgyMDE1LCBcImhvcm5jbWJcIiwgMHgwMzFiLCBcImhvdHNwcmluZ3NcIiwgMHgyNjY4LCBcImhvdXNlXCIsIDB4MjMwMiwgXCJocGFyZW5cIiwgMHgyNGEzLCBcImhzdXBlcmlvclwiLCAweDAyYjAsIFwiaHR1cm5lZFwiLCAweDAyNjUsIFwiaHVoaXJhZ2FuYVwiLCAweDMwNzUsIFwiaHVpaXRvc3F1YXJlXCIsIDB4MzMzMywgXCJodWthdGFrYW5hXCIsIDB4MzBkNSwgXCJodWthdGFrYW5haGFsZndpZHRoXCIsIDB4ZmY4YywgXCJodW5nYXJ1bWxhdXRcIiwgMHgwMmRkLCBcImh1bmdhcnVtbGF1dGNtYlwiLCAweDAzMGIsIFwiaHZcIiwgMHgwMTk1LCBcImh5cGhlblwiLCAweDAwMmQsIFwiaHlwaGVuaW5mZXJpb3JcIiwgMHhmNmU1LCBcImh5cGhlbm1vbm9zcGFjZVwiLCAweGZmMGQsIFwiaHlwaGVuc21hbGxcIiwgMHhmZTYzLCBcImh5cGhlbnN1cGVyaW9yXCIsIDB4ZjZlNiwgXCJoeXBoZW50d29cIiwgMHgyMDEwLCBcImlcIiwgMHgwMDY5LCBcImlhY3V0ZVwiLCAweDAwZWQsIFwiaWFjeXJpbGxpY1wiLCAweDA0NGYsIFwiaWJlbmdhbGlcIiwgMHgwOTg3LCBcImlib3BvbW9mb1wiLCAweDMxMjcsIFwiaWJyZXZlXCIsIDB4MDEyZCwgXCJpY2Fyb25cIiwgMHgwMWQwLCBcImljaXJjbGVcIiwgMHgyNGQ4LCBcImljaXJjdW1mbGV4XCIsIDB4MDBlZSwgXCJpY3lyaWxsaWNcIiwgMHgwNDU2LCBcImlkYmxncmF2ZVwiLCAweDAyMDksIFwiaWRlb2dyYXBoZWFydGhjaXJjbGVcIiwgMHgzMjhmLCBcImlkZW9ncmFwaGZpcmVjaXJjbGVcIiwgMHgzMjhiLCBcImlkZW9ncmFwaGljYWxsaWFuY2VwYXJlblwiLCAweDMyM2YsIFwiaWRlb2dyYXBoaWNjYWxscGFyZW5cIiwgMHgzMjNhLCBcImlkZW9ncmFwaGljY2VudHJlY2lyY2xlXCIsIDB4MzJhNSwgXCJpZGVvZ3JhcGhpY2Nsb3NlXCIsIDB4MzAwNiwgXCJpZGVvZ3JhcGhpY2NvbW1hXCIsIDB4MzAwMSwgXCJpZGVvZ3JhcGhpY2NvbW1hbGVmdFwiLCAweGZmNjQsIFwiaWRlb2dyYXBoaWNjb25ncmF0dWxhdGlvbnBhcmVuXCIsIDB4MzIzNywgXCJpZGVvZ3JhcGhpY2NvcnJlY3RjaXJjbGVcIiwgMHgzMmEzLCBcImlkZW9ncmFwaGljZWFydGhwYXJlblwiLCAweDMyMmYsIFwiaWRlb2dyYXBoaWNlbnRlcnByaXNlcGFyZW5cIiwgMHgzMjNkLCBcImlkZW9ncmFwaGljZXhjZWxsZW50Y2lyY2xlXCIsIDB4MzI5ZCwgXCJpZGVvZ3JhcGhpY2Zlc3RpdmFscGFyZW5cIiwgMHgzMjQwLCBcImlkZW9ncmFwaGljZmluYW5jaWFsY2lyY2xlXCIsIDB4MzI5NiwgXCJpZGVvZ3JhcGhpY2ZpbmFuY2lhbHBhcmVuXCIsIDB4MzIzNiwgXCJpZGVvZ3JhcGhpY2ZpcmVwYXJlblwiLCAweDMyMmIsIFwiaWRlb2dyYXBoaWNoYXZlcGFyZW5cIiwgMHgzMjMyLCBcImlkZW9ncmFwaGljaGlnaGNpcmNsZVwiLCAweDMyYTQsIFwiaWRlb2dyYXBoaWNpdGVyYXRpb25tYXJrXCIsIDB4MzAwNSwgXCJpZGVvZ3JhcGhpY2xhYm9yY2lyY2xlXCIsIDB4MzI5OCwgXCJpZGVvZ3JhcGhpY2xhYm9ycGFyZW5cIiwgMHgzMjM4LCBcImlkZW9ncmFwaGljbGVmdGNpcmNsZVwiLCAweDMyYTcsIFwiaWRlb2dyYXBoaWNsb3djaXJjbGVcIiwgMHgzMmE2LCBcImlkZW9ncmFwaGljbWVkaWNpbmVjaXJjbGVcIiwgMHgzMmE5LCBcImlkZW9ncmFwaGljbWV0YWxwYXJlblwiLCAweDMyMmUsIFwiaWRlb2dyYXBoaWNtb29ucGFyZW5cIiwgMHgzMjJhLCBcImlkZW9ncmFwaGljbmFtZXBhcmVuXCIsIDB4MzIzNCwgXCJpZGVvZ3JhcGhpY3BlcmlvZFwiLCAweDMwMDIsIFwiaWRlb2dyYXBoaWNwcmludGNpcmNsZVwiLCAweDMyOWUsIFwiaWRlb2dyYXBoaWNyZWFjaHBhcmVuXCIsIDB4MzI0MywgXCJpZGVvZ3JhcGhpY3JlcHJlc2VudHBhcmVuXCIsIDB4MzIzOSwgXCJpZGVvZ3JhcGhpY3Jlc291cmNlcGFyZW5cIiwgMHgzMjNlLCBcImlkZW9ncmFwaGljcmlnaHRjaXJjbGVcIiwgMHgzMmE4LCBcImlkZW9ncmFwaGljc2VjcmV0Y2lyY2xlXCIsIDB4MzI5OSwgXCJpZGVvZ3JhcGhpY3NlbGZwYXJlblwiLCAweDMyNDIsIFwiaWRlb2dyYXBoaWNzb2NpZXR5cGFyZW5cIiwgMHgzMjMzLCBcImlkZW9ncmFwaGljc3BhY2VcIiwgMHgzMDAwLCBcImlkZW9ncmFwaGljc3BlY2lhbHBhcmVuXCIsIDB4MzIzNSwgXCJpZGVvZ3JhcGhpY3N0b2NrcGFyZW5cIiwgMHgzMjMxLCBcImlkZW9ncmFwaGljc3R1ZHlwYXJlblwiLCAweDMyM2IsIFwiaWRlb2dyYXBoaWNzdW5wYXJlblwiLCAweDMyMzAsIFwiaWRlb2dyYXBoaWNzdXBlcnZpc2VwYXJlblwiLCAweDMyM2MsIFwiaWRlb2dyYXBoaWN3YXRlcnBhcmVuXCIsIDB4MzIyYywgXCJpZGVvZ3JhcGhpY3dvb2RwYXJlblwiLCAweDMyMmQsIFwiaWRlb2dyYXBoaWN6ZXJvXCIsIDB4MzAwNywgXCJpZGVvZ3JhcGhtZXRhbGNpcmNsZVwiLCAweDMyOGUsIFwiaWRlb2dyYXBobW9vbmNpcmNsZVwiLCAweDMyOGEsIFwiaWRlb2dyYXBobmFtZWNpcmNsZVwiLCAweDMyOTQsIFwiaWRlb2dyYXBoc3VuY2lyY2xlXCIsIDB4MzI5MCwgXCJpZGVvZ3JhcGh3YXRlcmNpcmNsZVwiLCAweDMyOGMsIFwiaWRlb2dyYXBod29vZGNpcmNsZVwiLCAweDMyOGQsIFwiaWRldmFcIiwgMHgwOTA3LCBcImlkaWVyZXNpc1wiLCAweDAwZWYsIFwiaWRpZXJlc2lzYWN1dGVcIiwgMHgxZTJmLCBcImlkaWVyZXNpc2N5cmlsbGljXCIsIDB4MDRlNSwgXCJpZG90YmVsb3dcIiwgMHgxZWNiLCBcImllYnJldmVjeXJpbGxpY1wiLCAweDA0ZDcsIFwiaWVjeXJpbGxpY1wiLCAweDA0MzUsIFwiaWV1bmdhY2lyY2xla29yZWFuXCIsIDB4MzI3NSwgXCJpZXVuZ2FwYXJlbmtvcmVhblwiLCAweDMyMTUsIFwiaWV1bmdjaXJjbGVrb3JlYW5cIiwgMHgzMjY3LCBcImlldW5na29yZWFuXCIsIDB4MzE0NywgXCJpZXVuZ3BhcmVua29yZWFuXCIsIDB4MzIwNywgXCJpZ3JhdmVcIiwgMHgwMGVjLCBcImlndWphcmF0aVwiLCAweDBhODcsIFwiaWd1cm11a2hpXCIsIDB4MGEwNywgXCJpaGlyYWdhbmFcIiwgMHgzMDQ0LCBcImlob29rYWJvdmVcIiwgMHgxZWM5LCBcImlpYmVuZ2FsaVwiLCAweDA5ODgsIFwiaWljeXJpbGxpY1wiLCAweDA0MzgsIFwiaWlkZXZhXCIsIDB4MDkwOCwgXCJpaWd1amFyYXRpXCIsIDB4MGE4OCwgXCJpaWd1cm11a2hpXCIsIDB4MGEwOCwgXCJpaW1hdHJhZ3VybXVraGlcIiwgMHgwYTQwLCBcImlpbnZlcnRlZGJyZXZlXCIsIDB4MDIwYiwgXCJpaXNob3J0Y3lyaWxsaWNcIiwgMHgwNDM5LCBcImlpdm93ZWxzaWduYmVuZ2FsaVwiLCAweDA5YzAsIFwiaWl2b3dlbHNpZ25kZXZhXCIsIDB4MDk0MCwgXCJpaXZvd2Vsc2lnbmd1amFyYXRpXCIsIDB4MGFjMCwgXCJpalwiLCAweDAxMzMsIFwiaWthdGFrYW5hXCIsIDB4MzBhNCwgXCJpa2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjcyLCBcImlrb3JlYW5cIiwgMHgzMTYzLCBcImlsZGVcIiwgMHgwMmRjLCBcImlsdXloZWJyZXdcIiwgMHgwNWFjLCBcImltYWNyb25cIiwgMHgwMTJiLCBcImltYWNyb25jeXJpbGxpY1wiLCAweDA0ZTMsIFwiaW1hZ2VvcmFwcHJveGltYXRlbHllcXVhbFwiLCAweDIyNTMsIFwiaW1hdHJhZ3VybXVraGlcIiwgMHgwYTNmLCBcImltb25vc3BhY2VcIiwgMHhmZjQ5LCBcImluY3JlbWVudFwiLCAweDIyMDYsIFwiaW5maW5pdHlcIiwgMHgyMjFlLCBcImluaWFybWVuaWFuXCIsIDB4MDU2YiwgXCJpbnRlZ3JhbFwiLCAweDIyMmIsIFwiaW50ZWdyYWxib3R0b21cIiwgMHgyMzIxLCBcImludGVncmFsYnRcIiwgMHgyMzIxLCBcImludGVncmFsZXhcIiwgMHhmOGY1LCBcImludGVncmFsdG9wXCIsIDB4MjMyMCwgXCJpbnRlZ3JhbHRwXCIsIDB4MjMyMCwgXCJpbnRlcnNlY3Rpb25cIiwgMHgyMjI5LCBcImludGlzcXVhcmVcIiwgMHgzMzA1LCBcImludmJ1bGxldFwiLCAweDI1ZDgsIFwiaW52Y2lyY2xlXCIsIDB4MjVkOSwgXCJpbnZzbWlsZWZhY2VcIiwgMHgyNjNiLCBcImlvY3lyaWxsaWNcIiwgMHgwNDUxLCBcImlvZ29uZWtcIiwgMHgwMTJmLCBcImlvdGFcIiwgMHgwM2I5LCBcImlvdGFkaWVyZXNpc1wiLCAweDAzY2EsIFwiaW90YWRpZXJlc2lzdG9ub3NcIiwgMHgwMzkwLCBcImlvdGFsYXRpblwiLCAweDAyNjksIFwiaW90YXRvbm9zXCIsIDB4MDNhZiwgXCJpcGFyZW5cIiwgMHgyNGE0LCBcImlyaWd1cm11a2hpXCIsIDB4MGE3MiwgXCJpc21hbGxoaXJhZ2FuYVwiLCAweDMwNDMsIFwiaXNtYWxsa2F0YWthbmFcIiwgMHgzMGEzLCBcImlzbWFsbGthdGFrYW5haGFsZndpZHRoXCIsIDB4ZmY2OCwgXCJpc3NoYXJiZW5nYWxpXCIsIDB4MDlmYSwgXCJpc3Ryb2tlXCIsIDB4MDI2OCwgXCJpc3VwZXJpb3JcIiwgMHhmNmVkLCBcIml0ZXJhdGlvbmhpcmFnYW5hXCIsIDB4MzA5ZCwgXCJpdGVyYXRpb25rYXRha2FuYVwiLCAweDMwZmQsIFwiaXRpbGRlXCIsIDB4MDEyOSwgXCJpdGlsZGViZWxvd1wiLCAweDFlMmQsIFwiaXVib3BvbW9mb1wiLCAweDMxMjksIFwiaXVjeXJpbGxpY1wiLCAweDA0NGUsIFwiaXZvd2Vsc2lnbmJlbmdhbGlcIiwgMHgwOWJmLCBcIml2b3dlbHNpZ25kZXZhXCIsIDB4MDkzZiwgXCJpdm93ZWxzaWduZ3VqYXJhdGlcIiwgMHgwYWJmLCBcIml6aGl0c2FjeXJpbGxpY1wiLCAweDA0NzUsIFwiaXpoaXRzYWRibGdyYXZlY3lyaWxsaWNcIiwgMHgwNDc3LCBcImpcIiwgMHgwMDZhLCBcImphYXJtZW5pYW5cIiwgMHgwNTcxLCBcImphYmVuZ2FsaVwiLCAweDA5OWMsIFwiamFkZXZhXCIsIDB4MDkxYywgXCJqYWd1amFyYXRpXCIsIDB4MGE5YywgXCJqYWd1cm11a2hpXCIsIDB4MGExYywgXCJqYm9wb21vZm9cIiwgMHgzMTEwLCBcImpjYXJvblwiLCAweDAxZjAsIFwiamNpcmNsZVwiLCAweDI0ZDksIFwiamNpcmN1bWZsZXhcIiwgMHgwMTM1LCBcImpjcm9zc2VkdGFpbFwiLCAweDAyOWQsIFwiamRvdGxlc3NzdHJva2VcIiwgMHgwMjVmLCBcImplY3lyaWxsaWNcIiwgMHgwNDU4LCBcImplZW1hcmFiaWNcIiwgMHgwNjJjLCBcImplZW1maW5hbGFyYWJpY1wiLCAweGZlOWUsIFwiamVlbWluaXRpYWxhcmFiaWNcIiwgMHhmZTlmLCBcImplZW1tZWRpYWxhcmFiaWNcIiwgMHhmZWEwLCBcImplaGFyYWJpY1wiLCAweDA2OTgsIFwiamVoZmluYWxhcmFiaWNcIiwgMHhmYjhiLCBcImpoYWJlbmdhbGlcIiwgMHgwOTlkLCBcImpoYWRldmFcIiwgMHgwOTFkLCBcImpoYWd1amFyYXRpXCIsIDB4MGE5ZCwgXCJqaGFndXJtdWtoaVwiLCAweDBhMWQsIFwiamhlaGFybWVuaWFuXCIsIDB4MDU3YiwgXCJqaXNcIiwgMHgzMDA0LCBcImptb25vc3BhY2VcIiwgMHhmZjRhLCBcImpwYXJlblwiLCAweDI0YTUsIFwianN1cGVyaW9yXCIsIDB4MDJiMiwgXCJrXCIsIDB4MDA2YiwgXCJrYWJhc2hraXJjeXJpbGxpY1wiLCAweDA0YTEsIFwia2FiZW5nYWxpXCIsIDB4MDk5NSwgXCJrYWN1dGVcIiwgMHgxZTMxLCBcImthY3lyaWxsaWNcIiwgMHgwNDNhLCBcImthZGVzY2VuZGVyY3lyaWxsaWNcIiwgMHgwNDliLCBcImthZGV2YVwiLCAweDA5MTUsIFwia2FmXCIsIDB4MDVkYiwgXCJrYWZhcmFiaWNcIiwgMHgwNjQzLCBcImthZmRhZ2VzaFwiLCAweGZiM2IsIFwia2FmZGFnZXNoaGVicmV3XCIsIDB4ZmIzYiwgXCJrYWZmaW5hbGFyYWJpY1wiLCAweGZlZGEsIFwia2FmaGVicmV3XCIsIDB4MDVkYiwgXCJrYWZpbml0aWFsYXJhYmljXCIsIDB4ZmVkYiwgXCJrYWZtZWRpYWxhcmFiaWNcIiwgMHhmZWRjLCBcImthZnJhZmVoZWJyZXdcIiwgMHhmYjRkLCBcImthZ3VqYXJhdGlcIiwgMHgwYTk1LCBcImthZ3VybXVraGlcIiwgMHgwYTE1LCBcImthaGlyYWdhbmFcIiwgMHgzMDRiLCBcImthaG9va2N5cmlsbGljXCIsIDB4MDRjNCwgXCJrYWthdGFrYW5hXCIsIDB4MzBhYiwgXCJrYWthdGFrYW5haGFsZndpZHRoXCIsIDB4ZmY3NiwgXCJrYXBwYVwiLCAweDAzYmEsIFwia2FwcGFzeW1ib2xncmVla1wiLCAweDAzZjAsIFwia2FweWVvdW5taWV1bWtvcmVhblwiLCAweDMxNzEsIFwia2FweWVvdW5waGlldXBoa29yZWFuXCIsIDB4MzE4NCwgXCJrYXB5ZW91bnBpZXVwa29yZWFuXCIsIDB4MzE3OCwgXCJrYXB5ZW91bnNzYW5ncGlldXBrb3JlYW5cIiwgMHgzMTc5LCBcImthcm9yaWlzcXVhcmVcIiwgMHgzMzBkLCBcImthc2hpZGFhdXRvYXJhYmljXCIsIDB4MDY0MCwgXCJrYXNoaWRhYXV0b25vc2lkZWJlYXJpbmdhcmFiaWNcIiwgMHgwNjQwLCBcImthc21hbGxrYXRha2FuYVwiLCAweDMwZjUsIFwia2FzcXVhcmVcIiwgMHgzMzg0LCBcImthc3JhYXJhYmljXCIsIDB4MDY1MCwgXCJrYXNyYXRhbmFyYWJpY1wiLCAweDA2NGQsIFwia2FzdHJva2VjeXJpbGxpY1wiLCAweDA0OWYsIFwia2F0YWhpcmFwcm9sb25nbWFya2hhbGZ3aWR0aFwiLCAweGZmNzAsIFwia2F2ZXJ0aWNhbHN0cm9rZWN5cmlsbGljXCIsIDB4MDQ5ZCwgXCJrYm9wb21vZm9cIiwgMHgzMTBlLCBcImtjYWxzcXVhcmVcIiwgMHgzMzg5LCBcImtjYXJvblwiLCAweDAxZTksIFwia2NlZGlsbGFcIiwgMHgwMTM3LCBcImtjaXJjbGVcIiwgMHgyNGRhLCBcImtjb21tYWFjY2VudFwiLCAweDAxMzcsIFwia2RvdGJlbG93XCIsIDB4MWUzMywgXCJrZWhhcm1lbmlhblwiLCAweDA1ODQsIFwia2VoaXJhZ2FuYVwiLCAweDMwNTEsIFwia2VrYXRha2FuYVwiLCAweDMwYjEsIFwia2VrYXRha2FuYWhhbGZ3aWR0aFwiLCAweGZmNzksIFwia2VuYXJtZW5pYW5cIiwgMHgwNTZmLCBcImtlc21hbGxrYXRha2FuYVwiLCAweDMwZjYsIFwia2dyZWVubGFuZGljXCIsIDB4MDEzOCwgXCJraGFiZW5nYWxpXCIsIDB4MDk5NiwgXCJraGFjeXJpbGxpY1wiLCAweDA0NDUsIFwia2hhZGV2YVwiLCAweDA5MTYsIFwia2hhZ3VqYXJhdGlcIiwgMHgwYTk2LCBcImtoYWd1cm11a2hpXCIsIDB4MGExNiwgXCJraGFoYXJhYmljXCIsIDB4MDYyZSwgXCJraGFoZmluYWxhcmFiaWNcIiwgMHhmZWE2LCBcImtoYWhpbml0aWFsYXJhYmljXCIsIDB4ZmVhNywgXCJraGFobWVkaWFsYXJhYmljXCIsIDB4ZmVhOCwgXCJraGVpY29wdGljXCIsIDB4MDNlNywgXCJraGhhZGV2YVwiLCAweDA5NTksIFwia2hoYWd1cm11a2hpXCIsIDB4MGE1OSwgXCJraGlldWtoYWNpcmNsZWtvcmVhblwiLCAweDMyNzgsIFwia2hpZXVraGFwYXJlbmtvcmVhblwiLCAweDMyMTgsIFwia2hpZXVraGNpcmNsZWtvcmVhblwiLCAweDMyNmEsIFwia2hpZXVraGtvcmVhblwiLCAweDMxNGIsIFwia2hpZXVraHBhcmVua29yZWFuXCIsIDB4MzIwYSwgXCJraG9raGFpdGhhaVwiLCAweDBlMDIsIFwia2hva2hvbnRoYWlcIiwgMHgwZTA1LCBcImtob2todWF0dGhhaVwiLCAweDBlMDMsIFwia2hva2h3YWl0aGFpXCIsIDB4MGUwNCwgXCJraG9tdXR0aGFpXCIsIDB4MGU1YiwgXCJraG9va1wiLCAweDAxOTksIFwia2hvcmFraGFuZ3RoYWlcIiwgMHgwZTA2LCBcImtoenNxdWFyZVwiLCAweDMzOTEsIFwia2loaXJhZ2FuYVwiLCAweDMwNGQsIFwia2lrYXRha2FuYVwiLCAweDMwYWQsIFwia2lrYXRha2FuYWhhbGZ3aWR0aFwiLCAweGZmNzcsIFwia2lyb2d1cmFtdXNxdWFyZVwiLCAweDMzMTUsIFwia2lyb21lZXRvcnVzcXVhcmVcIiwgMHgzMzE2LCBcImtpcm9zcXVhcmVcIiwgMHgzMzE0LCBcImtpeWVva2FjaXJjbGVrb3JlYW5cIiwgMHgzMjZlLCBcImtpeWVva2FwYXJlbmtvcmVhblwiLCAweDMyMGUsIFwia2l5ZW9rY2lyY2xla29yZWFuXCIsIDB4MzI2MCwgXCJraXllb2trb3JlYW5cIiwgMHgzMTMxLCBcImtpeWVva3BhcmVua29yZWFuXCIsIDB4MzIwMCwgXCJraXllb2tzaW9za29yZWFuXCIsIDB4MzEzMywgXCJramVjeXJpbGxpY1wiLCAweDA0NWMsIFwia2xpbmViZWxvd1wiLCAweDFlMzUsIFwia2xzcXVhcmVcIiwgMHgzMzk4LCBcImttY3ViZWRzcXVhcmVcIiwgMHgzM2E2LCBcImttb25vc3BhY2VcIiwgMHhmZjRiLCBcImttc3F1YXJlZHNxdWFyZVwiLCAweDMzYTIsIFwia29oaXJhZ2FuYVwiLCAweDMwNTMsIFwia29obXNxdWFyZVwiLCAweDMzYzAsIFwia29rYWl0aGFpXCIsIDB4MGUwMSwgXCJrb2thdGFrYW5hXCIsIDB4MzBiMywgXCJrb2thdGFrYW5haGFsZndpZHRoXCIsIDB4ZmY3YSwgXCJrb29wb3NxdWFyZVwiLCAweDMzMWUsIFwia29wcGFjeXJpbGxpY1wiLCAweDA0ODEsIFwia29yZWFuc3RhbmRhcmRzeW1ib2xcIiwgMHgzMjdmLCBcImtvcm9uaXNjbWJcIiwgMHgwMzQzLCBcImtwYXJlblwiLCAweDI0YTYsIFwia3Bhc3F1YXJlXCIsIDB4MzNhYSwgXCJrc2ljeXJpbGxpY1wiLCAweDA0NmYsIFwia3RzcXVhcmVcIiwgMHgzM2NmLCBcImt0dXJuZWRcIiwgMHgwMjllLCBcImt1aGlyYWdhbmFcIiwgMHgzMDRmLCBcImt1a2F0YWthbmFcIiwgMHgzMGFmLCBcImt1a2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjc4LCBcImt2c3F1YXJlXCIsIDB4MzNiOCwgXCJrd3NxdWFyZVwiLCAweDMzYmUsIFwibFwiLCAweDAwNmMsIFwibGFiZW5nYWxpXCIsIDB4MDliMiwgXCJsYWN1dGVcIiwgMHgwMTNhLCBcImxhZGV2YVwiLCAweDA5MzIsIFwibGFndWphcmF0aVwiLCAweDBhYjIsIFwibGFndXJtdWtoaVwiLCAweDBhMzIsIFwibGFra2hhbmd5YW90aGFpXCIsIDB4MGU0NSwgXCJsYW1hbGVmZmluYWxhcmFiaWNcIiwgMHhmZWZjLCBcImxhbWFsZWZoYW16YWFib3ZlZmluYWxhcmFiaWNcIiwgMHhmZWY4LCBcImxhbWFsZWZoYW16YWFib3ZlaXNvbGF0ZWRhcmFiaWNcIiwgMHhmZWY3LCBcImxhbWFsZWZoYW16YWJlbG93ZmluYWxhcmFiaWNcIiwgMHhmZWZhLCBcImxhbWFsZWZoYW16YWJlbG93aXNvbGF0ZWRhcmFiaWNcIiwgMHhmZWY5LCBcImxhbWFsZWZpc29sYXRlZGFyYWJpY1wiLCAweGZlZmIsIFwibGFtYWxlZm1hZGRhYWJvdmVmaW5hbGFyYWJpY1wiLCAweGZlZjYsIFwibGFtYWxlZm1hZGRhYWJvdmVpc29sYXRlZGFyYWJpY1wiLCAweGZlZjUsIFwibGFtYXJhYmljXCIsIDB4MDY0NCwgXCJsYW1iZGFcIiwgMHgwM2JiLCBcImxhbWJkYXN0cm9rZVwiLCAweDAxOWIsIFwibGFtZWRcIiwgMHgwNWRjLCBcImxhbWVkZGFnZXNoXCIsIDB4ZmIzYywgXCJsYW1lZGRhZ2VzaGhlYnJld1wiLCAweGZiM2MsIFwibGFtZWRoZWJyZXdcIiwgMHgwNWRjLCBcImxhbWZpbmFsYXJhYmljXCIsIDB4ZmVkZSwgXCJsYW1oYWhpbml0aWFsYXJhYmljXCIsIDB4ZmNjYSwgXCJsYW1pbml0aWFsYXJhYmljXCIsIDB4ZmVkZiwgXCJsYW1qZWVtaW5pdGlhbGFyYWJpY1wiLCAweGZjYzksIFwibGFta2hhaGluaXRpYWxhcmFiaWNcIiwgMHhmY2NiLCBcImxhbWxhbWhlaGlzb2xhdGVkYXJhYmljXCIsIDB4ZmRmMiwgXCJsYW1tZWRpYWxhcmFiaWNcIiwgMHhmZWUwLCBcImxhbW1lZW1oYWhpbml0aWFsYXJhYmljXCIsIDB4ZmQ4OCwgXCJsYW1tZWVtaW5pdGlhbGFyYWJpY1wiLCAweGZjY2MsIFwibGFyZ2VjaXJjbGVcIiwgMHgyNWVmLCBcImxiYXJcIiwgMHgwMTlhLCBcImxiZWx0XCIsIDB4MDI2YywgXCJsYm9wb21vZm9cIiwgMHgzMTBjLCBcImxjYXJvblwiLCAweDAxM2UsIFwibGNlZGlsbGFcIiwgMHgwMTNjLCBcImxjaXJjbGVcIiwgMHgyNGRiLCBcImxjaXJjdW1mbGV4YmVsb3dcIiwgMHgxZTNkLCBcImxjb21tYWFjY2VudFwiLCAweDAxM2MsIFwibGRvdFwiLCAweDAxNDAsIFwibGRvdGFjY2VudFwiLCAweDAxNDAsIFwibGRvdGJlbG93XCIsIDB4MWUzNywgXCJsZG90YmVsb3dtYWNyb25cIiwgMHgxZTM5LCBcImxlZnRhbmdsZWFib3ZlY21iXCIsIDB4MDMxYSwgXCJsZWZ0dGFja2JlbG93Y21iXCIsIDB4MDMxOCwgXCJsZXNzXCIsIDB4MDAzYywgXCJsZXNzZXF1YWxcIiwgMHgyMjY0LCBcImxlc3NlcXVhbG9yZ3JlYXRlclwiLCAweDIyZGEsIFwibGVzc21vbm9zcGFjZVwiLCAweGZmMWMsIFwibGVzc29yZXF1aXZhbGVudFwiLCAweDIyNzIsIFwibGVzc29yZ3JlYXRlclwiLCAweDIyNzYsIFwibGVzc292ZXJlcXVhbFwiLCAweDIyNjYsIFwibGVzc3NtYWxsXCIsIDB4ZmU2NCwgXCJsZXpoXCIsIDB4MDI2ZSwgXCJsZmJsb2NrXCIsIDB4MjU4YywgXCJsaG9va3JldHJvZmxleFwiLCAweDAyNmQsIFwibGlyYVwiLCAweDIwYTQsIFwibGl3bmFybWVuaWFuXCIsIDB4MDU2YywgXCJsalwiLCAweDAxYzksIFwibGplY3lyaWxsaWNcIiwgMHgwNDU5LCBcImxsXCIsIDB4ZjZjMCwgXCJsbGFkZXZhXCIsIDB4MDkzMywgXCJsbGFndWphcmF0aVwiLCAweDBhYjMsIFwibGxpbmViZWxvd1wiLCAweDFlM2IsIFwibGxsYWRldmFcIiwgMHgwOTM0LCBcImxsdm9jYWxpY2JlbmdhbGlcIiwgMHgwOWUxLCBcImxsdm9jYWxpY2RldmFcIiwgMHgwOTYxLCBcImxsdm9jYWxpY3Zvd2Vsc2lnbmJlbmdhbGlcIiwgMHgwOWUzLCBcImxsdm9jYWxpY3Zvd2Vsc2lnbmRldmFcIiwgMHgwOTYzLCBcImxtaWRkbGV0aWxkZVwiLCAweDAyNmIsIFwibG1vbm9zcGFjZVwiLCAweGZmNGMsIFwibG1zcXVhcmVcIiwgMHgzM2QwLCBcImxvY2h1bGF0aGFpXCIsIDB4MGUyYywgXCJsb2dpY2FsYW5kXCIsIDB4MjIyNywgXCJsb2dpY2Fsbm90XCIsIDB4MDBhYywgXCJsb2dpY2Fsbm90cmV2ZXJzZWRcIiwgMHgyMzEwLCBcImxvZ2ljYWxvclwiLCAweDIyMjgsIFwibG9saW5ndGhhaVwiLCAweDBlMjUsIFwibG9uZ3NcIiwgMHgwMTdmLCBcImxvd2xpbmVjZW50ZXJsaW5lXCIsIDB4ZmU0ZSwgXCJsb3dsaW5lY21iXCIsIDB4MDMzMiwgXCJsb3dsaW5lZGFzaGVkXCIsIDB4ZmU0ZCwgXCJsb3plbmdlXCIsIDB4MjVjYSwgXCJscGFyZW5cIiwgMHgyNGE3LCBcImxzbGFzaFwiLCAweDAxNDIsIFwibHNxdWFyZVwiLCAweDIxMTMsIFwibHN1cGVyaW9yXCIsIDB4ZjZlZSwgXCJsdHNoYWRlXCIsIDB4MjU5MSwgXCJsdXRoYWlcIiwgMHgwZTI2LCBcImx2b2NhbGljYmVuZ2FsaVwiLCAweDA5OGMsIFwibHZvY2FsaWNkZXZhXCIsIDB4MDkwYywgXCJsdm9jYWxpY3Zvd2Vsc2lnbmJlbmdhbGlcIiwgMHgwOWUyLCBcImx2b2NhbGljdm93ZWxzaWduZGV2YVwiLCAweDA5NjIsIFwibHhzcXVhcmVcIiwgMHgzM2QzLCBcIm1cIiwgMHgwMDZkLCBcIm1hYmVuZ2FsaVwiLCAweDA5YWUsIFwibWFjcm9uXCIsIDB4MDBhZiwgXCJtYWNyb25iZWxvd2NtYlwiLCAweDAzMzEsIFwibWFjcm9uY21iXCIsIDB4MDMwNCwgXCJtYWNyb25sb3dtb2RcIiwgMHgwMmNkLCBcIm1hY3Jvbm1vbm9zcGFjZVwiLCAweGZmZTMsIFwibWFjdXRlXCIsIDB4MWUzZiwgXCJtYWRldmFcIiwgMHgwOTJlLCBcIm1hZ3VqYXJhdGlcIiwgMHgwYWFlLCBcIm1hZ3VybXVraGlcIiwgMHgwYTJlLCBcIm1haGFwYWtoaGVicmV3XCIsIDB4MDVhNCwgXCJtYWhhcGFraGxlZnRoZWJyZXdcIiwgMHgwNWE0LCBcIm1haGlyYWdhbmFcIiwgMHgzMDdlLCBcIm1haWNoYXR0YXdhbG93bGVmdHRoYWlcIiwgMHhmODk1LCBcIm1haWNoYXR0YXdhbG93cmlnaHR0aGFpXCIsIDB4Zjg5NCwgXCJtYWljaGF0dGF3YXRoYWlcIiwgMHgwZTRiLCBcIm1haWNoYXR0YXdhdXBwZXJsZWZ0dGhhaVwiLCAweGY4OTMsIFwibWFpZWtsb3dsZWZ0dGhhaVwiLCAweGY4OGMsIFwibWFpZWtsb3dyaWdodHRoYWlcIiwgMHhmODhiLCBcIm1haWVrdGhhaVwiLCAweDBlNDgsIFwibWFpZWt1cHBlcmxlZnR0aGFpXCIsIDB4Zjg4YSwgXCJtYWloYW5ha2F0bGVmdHRoYWlcIiwgMHhmODg0LCBcIm1haWhhbmFrYXR0aGFpXCIsIDB4MGUzMSwgXCJtYWl0YWlraHVsZWZ0dGhhaVwiLCAweGY4ODksIFwibWFpdGFpa2h1dGhhaVwiLCAweDBlNDcsIFwibWFpdGhvbG93bGVmdHRoYWlcIiwgMHhmODhmLCBcIm1haXRob2xvd3JpZ2h0dGhhaVwiLCAweGY4OGUsIFwibWFpdGhvdGhhaVwiLCAweDBlNDksIFwibWFpdGhvdXBwZXJsZWZ0dGhhaVwiLCAweGY4OGQsIFwibWFpdHJpbG93bGVmdHRoYWlcIiwgMHhmODkyLCBcIm1haXRyaWxvd3JpZ2h0dGhhaVwiLCAweGY4OTEsIFwibWFpdHJpdGhhaVwiLCAweDBlNGEsIFwibWFpdHJpdXBwZXJsZWZ0dGhhaVwiLCAweGY4OTAsIFwibWFpeWFtb2t0aGFpXCIsIDB4MGU0NiwgXCJtYWthdGFrYW5hXCIsIDB4MzBkZSwgXCJtYWthdGFrYW5haGFsZndpZHRoXCIsIDB4ZmY4ZiwgXCJtYWxlXCIsIDB4MjY0MiwgXCJtYW5zeW9uc3F1YXJlXCIsIDB4MzM0NywgXCJtYXFhZmhlYnJld1wiLCAweDA1YmUsIFwibWFyc1wiLCAweDI2NDIsIFwibWFzb3JhY2lyY2xlaGVicmV3XCIsIDB4MDVhZiwgXCJtYXNxdWFyZVwiLCAweDMzODMsIFwibWJvcG9tb2ZvXCIsIDB4MzEwNywgXCJtYnNxdWFyZVwiLCAweDMzZDQsIFwibWNpcmNsZVwiLCAweDI0ZGMsIFwibWN1YmVkc3F1YXJlXCIsIDB4MzNhNSwgXCJtZG90YWNjZW50XCIsIDB4MWU0MSwgXCJtZG90YmVsb3dcIiwgMHgxZTQzLCBcIm1lZW1hcmFiaWNcIiwgMHgwNjQ1LCBcIm1lZW1maW5hbGFyYWJpY1wiLCAweGZlZTIsIFwibWVlbWluaXRpYWxhcmFiaWNcIiwgMHhmZWUzLCBcIm1lZW1tZWRpYWxhcmFiaWNcIiwgMHhmZWU0LCBcIm1lZW1tZWVtaW5pdGlhbGFyYWJpY1wiLCAweGZjZDEsIFwibWVlbW1lZW1pc29sYXRlZGFyYWJpY1wiLCAweGZjNDgsIFwibWVldG9ydXNxdWFyZVwiLCAweDMzNGQsIFwibWVoaXJhZ2FuYVwiLCAweDMwODEsIFwibWVpemllcmFzcXVhcmVcIiwgMHgzMzdlLCBcIm1la2F0YWthbmFcIiwgMHgzMGUxLCBcIm1la2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjkyLCBcIm1lbVwiLCAweDA1ZGUsIFwibWVtZGFnZXNoXCIsIDB4ZmIzZSwgXCJtZW1kYWdlc2hoZWJyZXdcIiwgMHhmYjNlLCBcIm1lbWhlYnJld1wiLCAweDA1ZGUsIFwibWVuYXJtZW5pYW5cIiwgMHgwNTc0LCBcIm1lcmtoYWhlYnJld1wiLCAweDA1YTUsIFwibWVya2hha2VmdWxhaGVicmV3XCIsIDB4MDVhNiwgXCJtZXJraGFrZWZ1bGFsZWZ0aGVicmV3XCIsIDB4MDVhNiwgXCJtZXJraGFsZWZ0aGVicmV3XCIsIDB4MDVhNSwgXCJtaG9va1wiLCAweDAyNzEsIFwibWh6c3F1YXJlXCIsIDB4MzM5MiwgXCJtaWRkbGVkb3RrYXRha2FuYWhhbGZ3aWR0aFwiLCAweGZmNjUsIFwibWlkZG90XCIsIDB4MDBiNywgXCJtaWV1bWFjaXJjbGVrb3JlYW5cIiwgMHgzMjcyLCBcIm1pZXVtYXBhcmVua29yZWFuXCIsIDB4MzIxMiwgXCJtaWV1bWNpcmNsZWtvcmVhblwiLCAweDMyNjQsIFwibWlldW1rb3JlYW5cIiwgMHgzMTQxLCBcIm1pZXVtcGFuc2lvc2tvcmVhblwiLCAweDMxNzAsIFwibWlldW1wYXJlbmtvcmVhblwiLCAweDMyMDQsIFwibWlldW1waWV1cGtvcmVhblwiLCAweDMxNmUsIFwibWlldW1zaW9za29yZWFuXCIsIDB4MzE2ZiwgXCJtaWhpcmFnYW5hXCIsIDB4MzA3ZiwgXCJtaWthdGFrYW5hXCIsIDB4MzBkZiwgXCJtaWthdGFrYW5haGFsZndpZHRoXCIsIDB4ZmY5MCwgXCJtaW51c1wiLCAweDIyMTIsIFwibWludXNiZWxvd2NtYlwiLCAweDAzMjAsIFwibWludXNjaXJjbGVcIiwgMHgyMjk2LCBcIm1pbnVzbW9kXCIsIDB4MDJkNywgXCJtaW51c3BsdXNcIiwgMHgyMjEzLCBcIm1pbnV0ZVwiLCAweDIwMzIsIFwibWlyaWJhYXJ1c3F1YXJlXCIsIDB4MzM0YSwgXCJtaXJpc3F1YXJlXCIsIDB4MzM0OSwgXCJtbG9uZ2xlZ3R1cm5lZFwiLCAweDAyNzAsIFwibWxzcXVhcmVcIiwgMHgzMzk2LCBcIm1tY3ViZWRzcXVhcmVcIiwgMHgzM2EzLCBcIm1tb25vc3BhY2VcIiwgMHhmZjRkLCBcIm1tc3F1YXJlZHNxdWFyZVwiLCAweDMzOWYsIFwibW9oaXJhZ2FuYVwiLCAweDMwODIsIFwibW9obXNxdWFyZVwiLCAweDMzYzEsIFwibW9rYXRha2FuYVwiLCAweDMwZTIsIFwibW9rYXRha2FuYWhhbGZ3aWR0aFwiLCAweGZmOTMsIFwibW9sc3F1YXJlXCIsIDB4MzNkNiwgXCJtb21hdGhhaVwiLCAweDBlMjEsIFwibW92ZXJzc3F1YXJlXCIsIDB4MzNhNywgXCJtb3ZlcnNzcXVhcmVkc3F1YXJlXCIsIDB4MzNhOCwgXCJtcGFyZW5cIiwgMHgyNGE4LCBcIm1wYXNxdWFyZVwiLCAweDMzYWIsIFwibXNzcXVhcmVcIiwgMHgzM2IzLCBcIm1zdXBlcmlvclwiLCAweGY2ZWYsIFwibXR1cm5lZFwiLCAweDAyNmYsIFwibXVcIiwgMHgwMGI1LCBcIm11MVwiLCAweDAwYjUsIFwibXVhc3F1YXJlXCIsIDB4MzM4MiwgXCJtdWNoZ3JlYXRlclwiLCAweDIyNmIsIFwibXVjaGxlc3NcIiwgMHgyMjZhLCBcIm11ZnNxdWFyZVwiLCAweDMzOGMsIFwibXVncmVla1wiLCAweDAzYmMsIFwibXVnc3F1YXJlXCIsIDB4MzM4ZCwgXCJtdWhpcmFnYW5hXCIsIDB4MzA4MCwgXCJtdWthdGFrYW5hXCIsIDB4MzBlMCwgXCJtdWthdGFrYW5haGFsZndpZHRoXCIsIDB4ZmY5MSwgXCJtdWxzcXVhcmVcIiwgMHgzMzk1LCBcIm11bHRpcGx5XCIsIDB4MDBkNywgXCJtdW1zcXVhcmVcIiwgMHgzMzliLCBcIm11bmFoaGVicmV3XCIsIDB4MDVhMywgXCJtdW5haGxlZnRoZWJyZXdcIiwgMHgwNWEzLCBcIm11c2ljYWxub3RlXCIsIDB4MjY2YSwgXCJtdXNpY2Fsbm90ZWRibFwiLCAweDI2NmIsIFwibXVzaWNmbGF0c2lnblwiLCAweDI2NmQsIFwibXVzaWNzaGFycHNpZ25cIiwgMHgyNjZmLCBcIm11c3NxdWFyZVwiLCAweDMzYjIsIFwibXV2c3F1YXJlXCIsIDB4MzNiNiwgXCJtdXdzcXVhcmVcIiwgMHgzM2JjLCBcIm12bWVnYXNxdWFyZVwiLCAweDMzYjksIFwibXZzcXVhcmVcIiwgMHgzM2I3LCBcIm13bWVnYXNxdWFyZVwiLCAweDMzYmYsIFwibXdzcXVhcmVcIiwgMHgzM2JkLCBcIm5cIiwgMHgwMDZlLCBcIm5hYmVuZ2FsaVwiLCAweDA5YTgsIFwibmFibGFcIiwgMHgyMjA3LCBcIm5hY3V0ZVwiLCAweDAxNDQsIFwibmFkZXZhXCIsIDB4MDkyOCwgXCJuYWd1amFyYXRpXCIsIDB4MGFhOCwgXCJuYWd1cm11a2hpXCIsIDB4MGEyOCwgXCJuYWhpcmFnYW5hXCIsIDB4MzA2YSwgXCJuYWthdGFrYW5hXCIsIDB4MzBjYSwgXCJuYWthdGFrYW5haGFsZndpZHRoXCIsIDB4ZmY4NSwgXCJuYXBvc3Ryb3BoZVwiLCAweDAxNDksIFwibmFzcXVhcmVcIiwgMHgzMzgxLCBcIm5ib3BvbW9mb1wiLCAweDMxMGIsIFwibmJzcGFjZVwiLCAweDAwYTAsIFwibmNhcm9uXCIsIDB4MDE0OCwgXCJuY2VkaWxsYVwiLCAweDAxNDYsIFwibmNpcmNsZVwiLCAweDI0ZGQsIFwibmNpcmN1bWZsZXhiZWxvd1wiLCAweDFlNGIsIFwibmNvbW1hYWNjZW50XCIsIDB4MDE0NiwgXCJuZG90YWNjZW50XCIsIDB4MWU0NSwgXCJuZG90YmVsb3dcIiwgMHgxZTQ3LCBcIm5laGlyYWdhbmFcIiwgMHgzMDZkLCBcIm5la2F0YWthbmFcIiwgMHgzMGNkLCBcIm5la2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjg4LCBcIm5ld3NoZXFlbHNpZ25cIiwgMHgyMGFhLCBcIm5mc3F1YXJlXCIsIDB4MzM4YiwgXCJuZ2FiZW5nYWxpXCIsIDB4MDk5OSwgXCJuZ2FkZXZhXCIsIDB4MDkxOSwgXCJuZ2FndWphcmF0aVwiLCAweDBhOTksIFwibmdhZ3VybXVraGlcIiwgMHgwYTE5LCBcIm5nb25ndXRoYWlcIiwgMHgwZTA3LCBcIm5oaXJhZ2FuYVwiLCAweDMwOTMsIFwibmhvb2tsZWZ0XCIsIDB4MDI3MiwgXCJuaG9va3JldHJvZmxleFwiLCAweDAyNzMsIFwibmlldW5hY2lyY2xla29yZWFuXCIsIDB4MzI2ZiwgXCJuaWV1bmFwYXJlbmtvcmVhblwiLCAweDMyMGYsIFwibmlldW5jaWV1Y2tvcmVhblwiLCAweDMxMzUsIFwibmlldW5jaXJjbGVrb3JlYW5cIiwgMHgzMjYxLCBcIm5pZXVuaGlldWhrb3JlYW5cIiwgMHgzMTM2LCBcIm5pZXVua29yZWFuXCIsIDB4MzEzNCwgXCJuaWV1bnBhbnNpb3Nrb3JlYW5cIiwgMHgzMTY4LCBcIm5pZXVucGFyZW5rb3JlYW5cIiwgMHgzMjAxLCBcIm5pZXVuc2lvc2tvcmVhblwiLCAweDMxNjcsIFwibmlldW50aWtldXRrb3JlYW5cIiwgMHgzMTY2LCBcIm5paGlyYWdhbmFcIiwgMHgzMDZiLCBcIm5pa2F0YWthbmFcIiwgMHgzMGNiLCBcIm5pa2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjg2LCBcIm5pa2hhaGl0bGVmdHRoYWlcIiwgMHhmODk5LCBcIm5pa2hhaGl0dGhhaVwiLCAweDBlNGQsIFwibmluZVwiLCAweDAwMzksIFwibmluZWFyYWJpY1wiLCAweDA2NjksIFwibmluZWJlbmdhbGlcIiwgMHgwOWVmLCBcIm5pbmVjaXJjbGVcIiwgMHgyNDY4LCBcIm5pbmVjaXJjbGVpbnZlcnNlc2Fuc3NlcmlmXCIsIDB4Mjc5MiwgXCJuaW5lZGV2YVwiLCAweDA5NmYsIFwibmluZWd1amFyYXRpXCIsIDB4MGFlZiwgXCJuaW5lZ3VybXVraGlcIiwgMHgwYTZmLCBcIm5pbmVoYWNrYXJhYmljXCIsIDB4MDY2OSwgXCJuaW5laGFuZ3pob3VcIiwgMHgzMDI5LCBcIm5pbmVpZGVvZ3JhcGhpY3BhcmVuXCIsIDB4MzIyOCwgXCJuaW5laW5mZXJpb3JcIiwgMHgyMDg5LCBcIm5pbmVtb25vc3BhY2VcIiwgMHhmZjE5LCBcIm5pbmVvbGRzdHlsZVwiLCAweGY3MzksIFwibmluZXBhcmVuXCIsIDB4MjQ3YywgXCJuaW5lcGVyaW9kXCIsIDB4MjQ5MCwgXCJuaW5lcGVyc2lhblwiLCAweDA2ZjksIFwibmluZXJvbWFuXCIsIDB4MjE3OCwgXCJuaW5lc3VwZXJpb3JcIiwgMHgyMDc5LCBcIm5pbmV0ZWVuY2lyY2xlXCIsIDB4MjQ3MiwgXCJuaW5ldGVlbnBhcmVuXCIsIDB4MjQ4NiwgXCJuaW5ldGVlbnBlcmlvZFwiLCAweDI0OWEsIFwibmluZXRoYWlcIiwgMHgwZTU5LCBcIm5qXCIsIDB4MDFjYywgXCJuamVjeXJpbGxpY1wiLCAweDA0NWEsIFwibmthdGFrYW5hXCIsIDB4MzBmMywgXCJua2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjlkLCBcIm5sZWdyaWdodGxvbmdcIiwgMHgwMTllLCBcIm5saW5lYmVsb3dcIiwgMHgxZTQ5LCBcIm5tb25vc3BhY2VcIiwgMHhmZjRlLCBcIm5tc3F1YXJlXCIsIDB4MzM5YSwgXCJubmFiZW5nYWxpXCIsIDB4MDlhMywgXCJubmFkZXZhXCIsIDB4MDkyMywgXCJubmFndWphcmF0aVwiLCAweDBhYTMsIFwibm5hZ3VybXVraGlcIiwgMHgwYTIzLCBcIm5ubmFkZXZhXCIsIDB4MDkyOSwgXCJub2hpcmFnYW5hXCIsIDB4MzA2ZSwgXCJub2thdGFrYW5hXCIsIDB4MzBjZSwgXCJub2thdGFrYW5haGFsZndpZHRoXCIsIDB4ZmY4OSwgXCJub25icmVha2luZ3NwYWNlXCIsIDB4MDBhMCwgXCJub25lbnRoYWlcIiwgMHgwZTEzLCBcIm5vbnV0aGFpXCIsIDB4MGUxOSwgXCJub29uYXJhYmljXCIsIDB4MDY0NiwgXCJub29uZmluYWxhcmFiaWNcIiwgMHhmZWU2LCBcIm5vb25naHVubmFhcmFiaWNcIiwgMHgwNmJhLCBcIm5vb25naHVubmFmaW5hbGFyYWJpY1wiLCAweGZiOWYsIFwibm9vbmluaXRpYWxhcmFiaWNcIiwgMHhmZWU3LCBcIm5vb25qZWVtaW5pdGlhbGFyYWJpY1wiLCAweGZjZDIsIFwibm9vbmplZW1pc29sYXRlZGFyYWJpY1wiLCAweGZjNGIsIFwibm9vbm1lZGlhbGFyYWJpY1wiLCAweGZlZTgsIFwibm9vbm1lZW1pbml0aWFsYXJhYmljXCIsIDB4ZmNkNSwgXCJub29ubWVlbWlzb2xhdGVkYXJhYmljXCIsIDB4ZmM0ZSwgXCJub29ubm9vbmZpbmFsYXJhYmljXCIsIDB4ZmM4ZCwgXCJub3Rjb250YWluc1wiLCAweDIyMGMsIFwibm90ZWxlbWVudFwiLCAweDIyMDksIFwibm90ZWxlbWVudG9mXCIsIDB4MjIwOSwgXCJub3RlcXVhbFwiLCAweDIyNjAsIFwibm90Z3JlYXRlclwiLCAweDIyNmYsIFwibm90Z3JlYXRlcm5vcmVxdWFsXCIsIDB4MjI3MSwgXCJub3RncmVhdGVybm9ybGVzc1wiLCAweDIyNzksIFwibm90aWRlbnRpY2FsXCIsIDB4MjI2MiwgXCJub3RsZXNzXCIsIDB4MjI2ZSwgXCJub3RsZXNzbm9yZXF1YWxcIiwgMHgyMjcwLCBcIm5vdHBhcmFsbGVsXCIsIDB4MjIyNiwgXCJub3RwcmVjZWRlc1wiLCAweDIyODAsIFwibm90c3Vic2V0XCIsIDB4MjI4NCwgXCJub3RzdWNjZWVkc1wiLCAweDIyODEsIFwibm90c3VwZXJzZXRcIiwgMHgyMjg1LCBcIm5vd2FybWVuaWFuXCIsIDB4MDU3NiwgXCJucGFyZW5cIiwgMHgyNGE5LCBcIm5zc3F1YXJlXCIsIDB4MzNiMSwgXCJuc3VwZXJpb3JcIiwgMHgyMDdmLCBcIm50aWxkZVwiLCAweDAwZjEsIFwibnVcIiwgMHgwM2JkLCBcIm51aGlyYWdhbmFcIiwgMHgzMDZjLCBcIm51a2F0YWthbmFcIiwgMHgzMGNjLCBcIm51a2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjg3LCBcIm51a3RhYmVuZ2FsaVwiLCAweDA5YmMsIFwibnVrdGFkZXZhXCIsIDB4MDkzYywgXCJudWt0YWd1amFyYXRpXCIsIDB4MGFiYywgXCJudWt0YWd1cm11a2hpXCIsIDB4MGEzYywgXCJudW1iZXJzaWduXCIsIDB4MDAyMywgXCJudW1iZXJzaWdubW9ub3NwYWNlXCIsIDB4ZmYwMywgXCJudW1iZXJzaWduc21hbGxcIiwgMHhmZTVmLCBcIm51bWVyYWxzaWduZ3JlZWtcIiwgMHgwMzc0LCBcIm51bWVyYWxzaWdubG93ZXJncmVla1wiLCAweDAzNzUsIFwibnVtZXJvXCIsIDB4MjExNiwgXCJudW5cIiwgMHgwNWUwLCBcIm51bmRhZ2VzaFwiLCAweGZiNDAsIFwibnVuZGFnZXNoaGVicmV3XCIsIDB4ZmI0MCwgXCJudW5oZWJyZXdcIiwgMHgwNWUwLCBcIm52c3F1YXJlXCIsIDB4MzNiNSwgXCJud3NxdWFyZVwiLCAweDMzYmIsIFwibnlhYmVuZ2FsaVwiLCAweDA5OWUsIFwibnlhZGV2YVwiLCAweDA5MWUsIFwibnlhZ3VqYXJhdGlcIiwgMHgwYTllLCBcIm55YWd1cm11a2hpXCIsIDB4MGExZSwgXCJvXCIsIDB4MDA2ZiwgXCJvYWN1dGVcIiwgMHgwMGYzLCBcIm9hbmd0aGFpXCIsIDB4MGUyZCwgXCJvYmFycmVkXCIsIDB4MDI3NSwgXCJvYmFycmVkY3lyaWxsaWNcIiwgMHgwNGU5LCBcIm9iYXJyZWRkaWVyZXNpc2N5cmlsbGljXCIsIDB4MDRlYiwgXCJvYmVuZ2FsaVwiLCAweDA5OTMsIFwib2JvcG9tb2ZvXCIsIDB4MzExYiwgXCJvYnJldmVcIiwgMHgwMTRmLCBcIm9jYW5kcmFkZXZhXCIsIDB4MDkxMSwgXCJvY2FuZHJhZ3VqYXJhdGlcIiwgMHgwYTkxLCBcIm9jYW5kcmF2b3dlbHNpZ25kZXZhXCIsIDB4MDk0OSwgXCJvY2FuZHJhdm93ZWxzaWduZ3VqYXJhdGlcIiwgMHgwYWM5LCBcIm9jYXJvblwiLCAweDAxZDIsIFwib2NpcmNsZVwiLCAweDI0ZGUsIFwib2NpcmN1bWZsZXhcIiwgMHgwMGY0LCBcIm9jaXJjdW1mbGV4YWN1dGVcIiwgMHgxZWQxLCBcIm9jaXJjdW1mbGV4ZG90YmVsb3dcIiwgMHgxZWQ5LCBcIm9jaXJjdW1mbGV4Z3JhdmVcIiwgMHgxZWQzLCBcIm9jaXJjdW1mbGV4aG9va2Fib3ZlXCIsIDB4MWVkNSwgXCJvY2lyY3VtZmxleHRpbGRlXCIsIDB4MWVkNywgXCJvY3lyaWxsaWNcIiwgMHgwNDNlLCBcIm9kYmxhY3V0ZVwiLCAweDAxNTEsIFwib2RibGdyYXZlXCIsIDB4MDIwZCwgXCJvZGV2YVwiLCAweDA5MTMsIFwib2RpZXJlc2lzXCIsIDB4MDBmNiwgXCJvZGllcmVzaXNjeXJpbGxpY1wiLCAweDA0ZTcsIFwib2RvdGJlbG93XCIsIDB4MWVjZCwgXCJvZVwiLCAweDAxNTMsIFwib2Vrb3JlYW5cIiwgMHgzMTVhLCBcIm9nb25la1wiLCAweDAyZGIsIFwib2dvbmVrY21iXCIsIDB4MDMyOCwgXCJvZ3JhdmVcIiwgMHgwMGYyLCBcIm9ndWphcmF0aVwiLCAweDBhOTMsIFwib2hhcm1lbmlhblwiLCAweDA1ODUsIFwib2hpcmFnYW5hXCIsIDB4MzA0YSwgXCJvaG9va2Fib3ZlXCIsIDB4MWVjZiwgXCJvaG9yblwiLCAweDAxYTEsIFwib2hvcm5hY3V0ZVwiLCAweDFlZGIsIFwib2hvcm5kb3RiZWxvd1wiLCAweDFlZTMsIFwib2hvcm5ncmF2ZVwiLCAweDFlZGQsIFwib2hvcm5ob29rYWJvdmVcIiwgMHgxZWRmLCBcIm9ob3JudGlsZGVcIiwgMHgxZWUxLCBcIm9odW5nYXJ1bWxhdXRcIiwgMHgwMTUxLCBcIm9pXCIsIDB4MDFhMywgXCJvaW52ZXJ0ZWRicmV2ZVwiLCAweDAyMGYsIFwib2thdGFrYW5hXCIsIDB4MzBhYSwgXCJva2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjc1LCBcIm9rb3JlYW5cIiwgMHgzMTU3LCBcIm9sZWhlYnJld1wiLCAweDA1YWIsIFwib21hY3JvblwiLCAweDAxNGQsIFwib21hY3JvbmFjdXRlXCIsIDB4MWU1MywgXCJvbWFjcm9uZ3JhdmVcIiwgMHgxZTUxLCBcIm9tZGV2YVwiLCAweDA5NTAsIFwib21lZ2FcIiwgMHgwM2M5LCBcIm9tZWdhMVwiLCAweDAzZDYsIFwib21lZ2FjeXJpbGxpY1wiLCAweDA0NjEsIFwib21lZ2FsYXRpbmNsb3NlZFwiLCAweDAyNzcsIFwib21lZ2Fyb3VuZGN5cmlsbGljXCIsIDB4MDQ3YiwgXCJvbWVnYXRpdGxvY3lyaWxsaWNcIiwgMHgwNDdkLCBcIm9tZWdhdG9ub3NcIiwgMHgwM2NlLCBcIm9tZ3VqYXJhdGlcIiwgMHgwYWQwLCBcIm9taWNyb25cIiwgMHgwM2JmLCBcIm9taWNyb250b25vc1wiLCAweDAzY2MsIFwib21vbm9zcGFjZVwiLCAweGZmNGYsIFwib25lXCIsIDB4MDAzMSwgXCJvbmVhcmFiaWNcIiwgMHgwNjYxLCBcIm9uZWJlbmdhbGlcIiwgMHgwOWU3LCBcIm9uZWNpcmNsZVwiLCAweDI0NjAsIFwib25lY2lyY2xlaW52ZXJzZXNhbnNzZXJpZlwiLCAweDI3OGEsIFwib25lZGV2YVwiLCAweDA5NjcsIFwib25lZG90ZW5sZWFkZXJcIiwgMHgyMDI0LCBcIm9uZWVpZ2h0aFwiLCAweDIxNWIsIFwib25lZml0dGVkXCIsIDB4ZjZkYywgXCJvbmVndWphcmF0aVwiLCAweDBhZTcsIFwib25lZ3VybXVraGlcIiwgMHgwYTY3LCBcIm9uZWhhY2thcmFiaWNcIiwgMHgwNjYxLCBcIm9uZWhhbGZcIiwgMHgwMGJkLCBcIm9uZWhhbmd6aG91XCIsIDB4MzAyMSwgXCJvbmVpZGVvZ3JhcGhpY3BhcmVuXCIsIDB4MzIyMCwgXCJvbmVpbmZlcmlvclwiLCAweDIwODEsIFwib25lbW9ub3NwYWNlXCIsIDB4ZmYxMSwgXCJvbmVudW1lcmF0b3JiZW5nYWxpXCIsIDB4MDlmNCwgXCJvbmVvbGRzdHlsZVwiLCAweGY3MzEsIFwib25lcGFyZW5cIiwgMHgyNDc0LCBcIm9uZXBlcmlvZFwiLCAweDI0ODgsIFwib25lcGVyc2lhblwiLCAweDA2ZjEsIFwib25lcXVhcnRlclwiLCAweDAwYmMsIFwib25lcm9tYW5cIiwgMHgyMTcwLCBcIm9uZXN1cGVyaW9yXCIsIDB4MDBiOSwgXCJvbmV0aGFpXCIsIDB4MGU1MSwgXCJvbmV0aGlyZFwiLCAweDIxNTMsIFwib29nb25la1wiLCAweDAxZWIsIFwib29nb25la21hY3JvblwiLCAweDAxZWQsIFwib29ndXJtdWtoaVwiLCAweDBhMTMsIFwib29tYXRyYWd1cm11a2hpXCIsIDB4MGE0YiwgXCJvb3BlblwiLCAweDAyNTQsIFwib3BhcmVuXCIsIDB4MjRhYSwgXCJvcGVuYnVsbGV0XCIsIDB4MjVlNiwgXCJvcHRpb25cIiwgMHgyMzI1LCBcIm9yZGZlbWluaW5lXCIsIDB4MDBhYSwgXCJvcmRtYXNjdWxpbmVcIiwgMHgwMGJhLCBcIm9ydGhvZ29uYWxcIiwgMHgyMjFmLCBcIm9zaG9ydGRldmFcIiwgMHgwOTEyLCBcIm9zaG9ydHZvd2Vsc2lnbmRldmFcIiwgMHgwOTRhLCBcIm9zbGFzaFwiLCAweDAwZjgsIFwib3NsYXNoYWN1dGVcIiwgMHgwMWZmLCBcIm9zbWFsbGhpcmFnYW5hXCIsIDB4MzA0OSwgXCJvc21hbGxrYXRha2FuYVwiLCAweDMwYTksIFwib3NtYWxsa2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjZiLCBcIm9zdHJva2VhY3V0ZVwiLCAweDAxZmYsIFwib3N1cGVyaW9yXCIsIDB4ZjZmMCwgXCJvdGN5cmlsbGljXCIsIDB4MDQ3ZiwgXCJvdGlsZGVcIiwgMHgwMGY1LCBcIm90aWxkZWFjdXRlXCIsIDB4MWU0ZCwgXCJvdGlsZGVkaWVyZXNpc1wiLCAweDFlNGYsIFwib3Vib3BvbW9mb1wiLCAweDMxMjEsIFwib3ZlcmxpbmVcIiwgMHgyMDNlLCBcIm92ZXJsaW5lY2VudGVybGluZVwiLCAweGZlNGEsIFwib3ZlcmxpbmVjbWJcIiwgMHgwMzA1LCBcIm92ZXJsaW5lZGFzaGVkXCIsIDB4ZmU0OSwgXCJvdmVybGluZWRibHdhdnlcIiwgMHhmZTRjLCBcIm92ZXJsaW5ld2F2eVwiLCAweGZlNGIsIFwib3ZlcnNjb3JlXCIsIDB4MDBhZiwgXCJvdm93ZWxzaWduYmVuZ2FsaVwiLCAweDA5Y2IsIFwib3Zvd2Vsc2lnbmRldmFcIiwgMHgwOTRiLCBcIm92b3dlbHNpZ25ndWphcmF0aVwiLCAweDBhY2IsIFwicFwiLCAweDAwNzAsIFwicGFhbXBzc3F1YXJlXCIsIDB4MzM4MCwgXCJwYWFzZW50b3NxdWFyZVwiLCAweDMzMmIsIFwicGFiZW5nYWxpXCIsIDB4MDlhYSwgXCJwYWN1dGVcIiwgMHgxZTU1LCBcInBhZGV2YVwiLCAweDA5MmEsIFwicGFnZWRvd25cIiwgMHgyMWRmLCBcInBhZ2V1cFwiLCAweDIxZGUsIFwicGFndWphcmF0aVwiLCAweDBhYWEsIFwicGFndXJtdWtoaVwiLCAweDBhMmEsIFwicGFoaXJhZ2FuYVwiLCAweDMwNzEsIFwicGFpeWFubm9pdGhhaVwiLCAweDBlMmYsIFwicGFrYXRha2FuYVwiLCAweDMwZDEsIFwicGFsYXRhbGl6YXRpb25jeXJpbGxpY2NtYlwiLCAweDA0ODQsIFwicGFsb2Noa2FjeXJpbGxpY1wiLCAweDA0YzAsIFwicGFuc2lvc2tvcmVhblwiLCAweDMxN2YsIFwicGFyYWdyYXBoXCIsIDB4MDBiNiwgXCJwYXJhbGxlbFwiLCAweDIyMjUsIFwicGFyZW5sZWZ0XCIsIDB4MDAyOCwgXCJwYXJlbmxlZnRhbHRvbmVhcmFiaWNcIiwgMHhmZDNlLCBcInBhcmVubGVmdGJ0XCIsIDB4ZjhlZCwgXCJwYXJlbmxlZnRleFwiLCAweGY4ZWMsIFwicGFyZW5sZWZ0aW5mZXJpb3JcIiwgMHgyMDhkLCBcInBhcmVubGVmdG1vbm9zcGFjZVwiLCAweGZmMDgsIFwicGFyZW5sZWZ0c21hbGxcIiwgMHhmZTU5LCBcInBhcmVubGVmdHN1cGVyaW9yXCIsIDB4MjA3ZCwgXCJwYXJlbmxlZnR0cFwiLCAweGY4ZWIsIFwicGFyZW5sZWZ0dmVydGljYWxcIiwgMHhmZTM1LCBcInBhcmVucmlnaHRcIiwgMHgwMDI5LCBcInBhcmVucmlnaHRhbHRvbmVhcmFiaWNcIiwgMHhmZDNmLCBcInBhcmVucmlnaHRidFwiLCAweGY4ZjgsIFwicGFyZW5yaWdodGV4XCIsIDB4ZjhmNywgXCJwYXJlbnJpZ2h0aW5mZXJpb3JcIiwgMHgyMDhlLCBcInBhcmVucmlnaHRtb25vc3BhY2VcIiwgMHhmZjA5LCBcInBhcmVucmlnaHRzbWFsbFwiLCAweGZlNWEsIFwicGFyZW5yaWdodHN1cGVyaW9yXCIsIDB4MjA3ZSwgXCJwYXJlbnJpZ2h0dHBcIiwgMHhmOGY2LCBcInBhcmVucmlnaHR2ZXJ0aWNhbFwiLCAweGZlMzYsIFwicGFydGlhbGRpZmZcIiwgMHgyMjAyLCBcInBhc2VxaGVicmV3XCIsIDB4MDVjMCwgXCJwYXNodGFoZWJyZXdcIiwgMHgwNTk5LCBcInBhc3F1YXJlXCIsIDB4MzNhOSwgXCJwYXRhaFwiLCAweDA1YjcsIFwicGF0YWgxMVwiLCAweDA1YjcsIFwicGF0YWgxZFwiLCAweDA1YjcsIFwicGF0YWgyYVwiLCAweDA1YjcsIFwicGF0YWhoZWJyZXdcIiwgMHgwNWI3LCBcInBhdGFobmFycm93aGVicmV3XCIsIDB4MDViNywgXCJwYXRhaHF1YXJ0ZXJoZWJyZXdcIiwgMHgwNWI3LCBcInBhdGFod2lkZWhlYnJld1wiLCAweDA1YjcsIFwicGF6ZXJoZWJyZXdcIiwgMHgwNWExLCBcInBib3BvbW9mb1wiLCAweDMxMDYsIFwicGNpcmNsZVwiLCAweDI0ZGYsIFwicGRvdGFjY2VudFwiLCAweDFlNTcsIFwicGVcIiwgMHgwNWU0LCBcInBlY3lyaWxsaWNcIiwgMHgwNDNmLCBcInBlZGFnZXNoXCIsIDB4ZmI0NCwgXCJwZWRhZ2VzaGhlYnJld1wiLCAweGZiNDQsIFwicGVlemlzcXVhcmVcIiwgMHgzMzNiLCBcInBlZmluYWxkYWdlc2hoZWJyZXdcIiwgMHhmYjQzLCBcInBlaGFyYWJpY1wiLCAweDA2N2UsIFwicGVoYXJtZW5pYW5cIiwgMHgwNTdhLCBcInBlaGVicmV3XCIsIDB4MDVlNCwgXCJwZWhmaW5hbGFyYWJpY1wiLCAweGZiNTcsIFwicGVoaW5pdGlhbGFyYWJpY1wiLCAweGZiNTgsIFwicGVoaXJhZ2FuYVwiLCAweDMwN2EsIFwicGVobWVkaWFsYXJhYmljXCIsIDB4ZmI1OSwgXCJwZWthdGFrYW5hXCIsIDB4MzBkYSwgXCJwZW1pZGRsZWhvb2tjeXJpbGxpY1wiLCAweDA0YTcsIFwicGVyYWZlaGVicmV3XCIsIDB4ZmI0ZSwgXCJwZXJjZW50XCIsIDB4MDAyNSwgXCJwZXJjZW50YXJhYmljXCIsIDB4MDY2YSwgXCJwZXJjZW50bW9ub3NwYWNlXCIsIDB4ZmYwNSwgXCJwZXJjZW50c21hbGxcIiwgMHhmZTZhLCBcInBlcmlvZFwiLCAweDAwMmUsIFwicGVyaW9kYXJtZW5pYW5cIiwgMHgwNTg5LCBcInBlcmlvZGNlbnRlcmVkXCIsIDB4MDBiNywgXCJwZXJpb2RoYWxmd2lkdGhcIiwgMHhmZjYxLCBcInBlcmlvZGluZmVyaW9yXCIsIDB4ZjZlNywgXCJwZXJpb2Rtb25vc3BhY2VcIiwgMHhmZjBlLCBcInBlcmlvZHNtYWxsXCIsIDB4ZmU1MiwgXCJwZXJpb2RzdXBlcmlvclwiLCAweGY2ZTgsIFwicGVyaXNwb21lbmlncmVla2NtYlwiLCAweDAzNDIsIFwicGVycGVuZGljdWxhclwiLCAweDIyYTUsIFwicGVydGhvdXNhbmRcIiwgMHgyMDMwLCBcInBlc2V0YVwiLCAweDIwYTcsIFwicGZzcXVhcmVcIiwgMHgzMzhhLCBcInBoYWJlbmdhbGlcIiwgMHgwOWFiLCBcInBoYWRldmFcIiwgMHgwOTJiLCBcInBoYWd1amFyYXRpXCIsIDB4MGFhYiwgXCJwaGFndXJtdWtoaVwiLCAweDBhMmIsIFwicGhpXCIsIDB4MDNjNiwgXCJwaGkxXCIsIDB4MDNkNSwgXCJwaGlldXBoYWNpcmNsZWtvcmVhblwiLCAweDMyN2EsIFwicGhpZXVwaGFwYXJlbmtvcmVhblwiLCAweDMyMWEsIFwicGhpZXVwaGNpcmNsZWtvcmVhblwiLCAweDMyNmMsIFwicGhpZXVwaGtvcmVhblwiLCAweDMxNGQsIFwicGhpZXVwaHBhcmVua29yZWFuXCIsIDB4MzIwYywgXCJwaGlsYXRpblwiLCAweDAyNzgsIFwicGhpbnRodXRoYWlcIiwgMHgwZTNhLCBcInBoaXN5bWJvbGdyZWVrXCIsIDB4MDNkNSwgXCJwaG9va1wiLCAweDAxYTUsIFwicGhvcGhhbnRoYWlcIiwgMHgwZTFlLCBcInBob3BodW5ndGhhaVwiLCAweDBlMWMsIFwicGhvc2FtcGhhb3RoYWlcIiwgMHgwZTIwLCBcInBpXCIsIDB4MDNjMCwgXCJwaWV1cGFjaXJjbGVrb3JlYW5cIiwgMHgzMjczLCBcInBpZXVwYXBhcmVua29yZWFuXCIsIDB4MzIxMywgXCJwaWV1cGNpZXVja29yZWFuXCIsIDB4MzE3NiwgXCJwaWV1cGNpcmNsZWtvcmVhblwiLCAweDMyNjUsIFwicGlldXBraXllb2trb3JlYW5cIiwgMHgzMTcyLCBcInBpZXVwa29yZWFuXCIsIDB4MzE0MiwgXCJwaWV1cHBhcmVua29yZWFuXCIsIDB4MzIwNSwgXCJwaWV1cHNpb3NraXllb2trb3JlYW5cIiwgMHgzMTc0LCBcInBpZXVwc2lvc2tvcmVhblwiLCAweDMxNDQsIFwicGlldXBzaW9zdGlrZXV0a29yZWFuXCIsIDB4MzE3NSwgXCJwaWV1cHRoaWV1dGhrb3JlYW5cIiwgMHgzMTc3LCBcInBpZXVwdGlrZXV0a29yZWFuXCIsIDB4MzE3MywgXCJwaWhpcmFnYW5hXCIsIDB4MzA3NCwgXCJwaWthdGFrYW5hXCIsIDB4MzBkNCwgXCJwaXN5bWJvbGdyZWVrXCIsIDB4MDNkNiwgXCJwaXdyYXJtZW5pYW5cIiwgMHgwNTgzLCBcInBsdXNcIiwgMHgwMDJiLCBcInBsdXNiZWxvd2NtYlwiLCAweDAzMWYsIFwicGx1c2NpcmNsZVwiLCAweDIyOTUsIFwicGx1c21pbnVzXCIsIDB4MDBiMSwgXCJwbHVzbW9kXCIsIDB4MDJkNiwgXCJwbHVzbW9ub3NwYWNlXCIsIDB4ZmYwYiwgXCJwbHVzc21hbGxcIiwgMHhmZTYyLCBcInBsdXNzdXBlcmlvclwiLCAweDIwN2EsIFwicG1vbm9zcGFjZVwiLCAweGZmNTAsIFwicG1zcXVhcmVcIiwgMHgzM2Q4LCBcInBvaGlyYWdhbmFcIiwgMHgzMDdkLCBcInBvaW50aW5naW5kZXhkb3dud2hpdGVcIiwgMHgyNjFmLCBcInBvaW50aW5naW5kZXhsZWZ0d2hpdGVcIiwgMHgyNjFjLCBcInBvaW50aW5naW5kZXhyaWdodHdoaXRlXCIsIDB4MjYxZSwgXCJwb2ludGluZ2luZGV4dXB3aGl0ZVwiLCAweDI2MWQsIFwicG9rYXRha2FuYVwiLCAweDMwZGQsIFwicG9wbGF0aGFpXCIsIDB4MGUxYiwgXCJwb3N0YWxtYXJrXCIsIDB4MzAxMiwgXCJwb3N0YWxtYXJrZmFjZVwiLCAweDMwMjAsIFwicHBhcmVuXCIsIDB4MjRhYiwgXCJwcmVjZWRlc1wiLCAweDIyN2EsIFwicHJlc2NyaXB0aW9uXCIsIDB4MjExZSwgXCJwcmltZW1vZFwiLCAweDAyYjksIFwicHJpbWVyZXZlcnNlZFwiLCAweDIwMzUsIFwicHJvZHVjdFwiLCAweDIyMGYsIFwicHJvamVjdGl2ZVwiLCAweDIzMDUsIFwicHJvbG9uZ2Vka2FuYVwiLCAweDMwZmMsIFwicHJvcGVsbG9yXCIsIDB4MjMxOCwgXCJwcm9wZXJzdWJzZXRcIiwgMHgyMjgyLCBcInByb3BlcnN1cGVyc2V0XCIsIDB4MjI4MywgXCJwcm9wb3J0aW9uXCIsIDB4MjIzNywgXCJwcm9wb3J0aW9uYWxcIiwgMHgyMjFkLCBcInBzaVwiLCAweDAzYzgsIFwicHNpY3lyaWxsaWNcIiwgMHgwNDcxLCBcInBzaWxpcG5ldW1hdGFjeXJpbGxpY2NtYlwiLCAweDA0ODYsIFwicHNzcXVhcmVcIiwgMHgzM2IwLCBcInB1aGlyYWdhbmFcIiwgMHgzMDc3LCBcInB1a2F0YWthbmFcIiwgMHgzMGQ3LCBcInB2c3F1YXJlXCIsIDB4MzNiNCwgXCJwd3NxdWFyZVwiLCAweDMzYmEsIFwicVwiLCAweDAwNzEsIFwicWFkZXZhXCIsIDB4MDk1OCwgXCJxYWRtYWhlYnJld1wiLCAweDA1YTgsIFwicWFmYXJhYmljXCIsIDB4MDY0MiwgXCJxYWZmaW5hbGFyYWJpY1wiLCAweGZlZDYsIFwicWFmaW5pdGlhbGFyYWJpY1wiLCAweGZlZDcsIFwicWFmbWVkaWFsYXJhYmljXCIsIDB4ZmVkOCwgXCJxYW1hdHNcIiwgMHgwNWI4LCBcInFhbWF0czEwXCIsIDB4MDViOCwgXCJxYW1hdHMxYVwiLCAweDA1YjgsIFwicWFtYXRzMWNcIiwgMHgwNWI4LCBcInFhbWF0czI3XCIsIDB4MDViOCwgXCJxYW1hdHMyOVwiLCAweDA1YjgsIFwicWFtYXRzMzNcIiwgMHgwNWI4LCBcInFhbWF0c2RlXCIsIDB4MDViOCwgXCJxYW1hdHNoZWJyZXdcIiwgMHgwNWI4LCBcInFhbWF0c25hcnJvd2hlYnJld1wiLCAweDA1YjgsIFwicWFtYXRzcWF0YW5oZWJyZXdcIiwgMHgwNWI4LCBcInFhbWF0c3FhdGFubmFycm93aGVicmV3XCIsIDB4MDViOCwgXCJxYW1hdHNxYXRhbnF1YXJ0ZXJoZWJyZXdcIiwgMHgwNWI4LCBcInFhbWF0c3FhdGFud2lkZWhlYnJld1wiLCAweDA1YjgsIFwicWFtYXRzcXVhcnRlcmhlYnJld1wiLCAweDA1YjgsIFwicWFtYXRzd2lkZWhlYnJld1wiLCAweDA1YjgsIFwicWFybmV5cGFyYWhlYnJld1wiLCAweDA1OWYsIFwicWJvcG9tb2ZvXCIsIDB4MzExMSwgXCJxY2lyY2xlXCIsIDB4MjRlMCwgXCJxaG9va1wiLCAweDAyYTAsIFwicW1vbm9zcGFjZVwiLCAweGZmNTEsIFwicW9mXCIsIDB4MDVlNywgXCJxb2ZkYWdlc2hcIiwgMHhmYjQ3LCBcInFvZmRhZ2VzaGhlYnJld1wiLCAweGZiNDcsIFwicW9maGVicmV3XCIsIDB4MDVlNywgXCJxcGFyZW5cIiwgMHgyNGFjLCBcInF1YXJ0ZXJub3RlXCIsIDB4MjY2OSwgXCJxdWJ1dHNcIiwgMHgwNWJiLCBcInF1YnV0czE4XCIsIDB4MDViYiwgXCJxdWJ1dHMyNVwiLCAweDA1YmIsIFwicXVidXRzMzFcIiwgMHgwNWJiLCBcInF1YnV0c2hlYnJld1wiLCAweDA1YmIsIFwicXVidXRzbmFycm93aGVicmV3XCIsIDB4MDViYiwgXCJxdWJ1dHNxdWFydGVyaGVicmV3XCIsIDB4MDViYiwgXCJxdWJ1dHN3aWRlaGVicmV3XCIsIDB4MDViYiwgXCJxdWVzdGlvblwiLCAweDAwM2YsIFwicXVlc3Rpb25hcmFiaWNcIiwgMHgwNjFmLCBcInF1ZXN0aW9uYXJtZW5pYW5cIiwgMHgwNTVlLCBcInF1ZXN0aW9uZG93blwiLCAweDAwYmYsIFwicXVlc3Rpb25kb3duc21hbGxcIiwgMHhmN2JmLCBcInF1ZXN0aW9uZ3JlZWtcIiwgMHgwMzdlLCBcInF1ZXN0aW9ubW9ub3NwYWNlXCIsIDB4ZmYxZiwgXCJxdWVzdGlvbnNtYWxsXCIsIDB4ZjczZiwgXCJxdW90ZWRibFwiLCAweDAwMjIsIFwicXVvdGVkYmxiYXNlXCIsIDB4MjAxZSwgXCJxdW90ZWRibGxlZnRcIiwgMHgyMDFjLCBcInF1b3RlZGJsbW9ub3NwYWNlXCIsIDB4ZmYwMiwgXCJxdW90ZWRibHByaW1lXCIsIDB4MzAxZSwgXCJxdW90ZWRibHByaW1lcmV2ZXJzZWRcIiwgMHgzMDFkLCBcInF1b3RlZGJscmlnaHRcIiwgMHgyMDFkLCBcInF1b3RlbGVmdFwiLCAweDIwMTgsIFwicXVvdGVsZWZ0cmV2ZXJzZWRcIiwgMHgyMDFiLCBcInF1b3RlcmV2ZXJzZWRcIiwgMHgyMDFiLCBcInF1b3RlcmlnaHRcIiwgMHgyMDE5LCBcInF1b3RlcmlnaHRuXCIsIDB4MDE0OSwgXCJxdW90ZXNpbmdsYmFzZVwiLCAweDIwMWEsIFwicXVvdGVzaW5nbGVcIiwgMHgwMDI3LCBcInF1b3Rlc2luZ2xlbW9ub3NwYWNlXCIsIDB4ZmYwNywgXCJyXCIsIDB4MDA3MiwgXCJyYWFybWVuaWFuXCIsIDB4MDU3YywgXCJyYWJlbmdhbGlcIiwgMHgwOWIwLCBcInJhY3V0ZVwiLCAweDAxNTUsIFwicmFkZXZhXCIsIDB4MDkzMCwgXCJyYWRpY2FsXCIsIDB4MjIxYSwgXCJyYWRpY2FsZXhcIiwgMHhmOGU1LCBcInJhZG92ZXJzc3F1YXJlXCIsIDB4MzNhZSwgXCJyYWRvdmVyc3NxdWFyZWRzcXVhcmVcIiwgMHgzM2FmLCBcInJhZHNxdWFyZVwiLCAweDMzYWQsIFwicmFmZVwiLCAweDA1YmYsIFwicmFmZWhlYnJld1wiLCAweDA1YmYsIFwicmFndWphcmF0aVwiLCAweDBhYjAsIFwicmFndXJtdWtoaVwiLCAweDBhMzAsIFwicmFoaXJhZ2FuYVwiLCAweDMwODksIFwicmFrYXRha2FuYVwiLCAweDMwZTksIFwicmFrYXRha2FuYWhhbGZ3aWR0aFwiLCAweGZmOTcsIFwicmFsb3dlcmRpYWdvbmFsYmVuZ2FsaVwiLCAweDA5ZjEsIFwicmFtaWRkbGVkaWFnb25hbGJlbmdhbGlcIiwgMHgwOWYwLCBcInJhbXNob3JuXCIsIDB4MDI2NCwgXCJyYXRpb1wiLCAweDIyMzYsIFwicmJvcG9tb2ZvXCIsIDB4MzExNiwgXCJyY2Fyb25cIiwgMHgwMTU5LCBcInJjZWRpbGxhXCIsIDB4MDE1NywgXCJyY2lyY2xlXCIsIDB4MjRlMSwgXCJyY29tbWFhY2NlbnRcIiwgMHgwMTU3LCBcInJkYmxncmF2ZVwiLCAweDAyMTEsIFwicmRvdGFjY2VudFwiLCAweDFlNTksIFwicmRvdGJlbG93XCIsIDB4MWU1YiwgXCJyZG90YmVsb3dtYWNyb25cIiwgMHgxZTVkLCBcInJlZmVyZW5jZW1hcmtcIiwgMHgyMDNiLCBcInJlZmxleHN1YnNldFwiLCAweDIyODYsIFwicmVmbGV4c3VwZXJzZXRcIiwgMHgyMjg3LCBcInJlZ2lzdGVyZWRcIiwgMHgwMGFlLCBcInJlZ2lzdGVyc2Fuc1wiLCAweGY4ZTgsIFwicmVnaXN0ZXJzZXJpZlwiLCAweGY2ZGEsIFwicmVoYXJhYmljXCIsIDB4MDYzMSwgXCJyZWhhcm1lbmlhblwiLCAweDA1ODAsIFwicmVoZmluYWxhcmFiaWNcIiwgMHhmZWFlLCBcInJlaGlyYWdhbmFcIiwgMHgzMDhjLCBcInJla2F0YWthbmFcIiwgMHgzMGVjLCBcInJla2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjlhLCBcInJlc2hcIiwgMHgwNWU4LCBcInJlc2hkYWdlc2hoZWJyZXdcIiwgMHhmYjQ4LCBcInJlc2hoZWJyZXdcIiwgMHgwNWU4LCBcInJldmVyc2VkdGlsZGVcIiwgMHgyMjNkLCBcInJldmlhaGVicmV3XCIsIDB4MDU5NywgXCJyZXZpYW11Z3Jhc2hoZWJyZXdcIiwgMHgwNTk3LCBcInJldmxvZ2ljYWxub3RcIiwgMHgyMzEwLCBcInJmaXNoaG9va1wiLCAweDAyN2UsIFwicmZpc2hob29rcmV2ZXJzZWRcIiwgMHgwMjdmLCBcInJoYWJlbmdhbGlcIiwgMHgwOWRkLCBcInJoYWRldmFcIiwgMHgwOTVkLCBcInJob1wiLCAweDAzYzEsIFwicmhvb2tcIiwgMHgwMjdkLCBcInJob29rdHVybmVkXCIsIDB4MDI3YiwgXCJyaG9va3R1cm5lZHN1cGVyaW9yXCIsIDB4MDJiNSwgXCJyaG9zeW1ib2xncmVla1wiLCAweDAzZjEsIFwicmhvdGljaG9va21vZFwiLCAweDAyZGUsIFwicmlldWxhY2lyY2xla29yZWFuXCIsIDB4MzI3MSwgXCJyaWV1bGFwYXJlbmtvcmVhblwiLCAweDMyMTEsIFwicmlldWxjaXJjbGVrb3JlYW5cIiwgMHgzMjYzLCBcInJpZXVsaGlldWhrb3JlYW5cIiwgMHgzMTQwLCBcInJpZXVsa2l5ZW9ra29yZWFuXCIsIDB4MzEzYSwgXCJyaWV1bGtpeWVva3Npb3Nrb3JlYW5cIiwgMHgzMTY5LCBcInJpZXVsa29yZWFuXCIsIDB4MzEzOSwgXCJyaWV1bG1pZXVta29yZWFuXCIsIDB4MzEzYiwgXCJyaWV1bHBhbnNpb3Nrb3JlYW5cIiwgMHgzMTZjLCBcInJpZXVscGFyZW5rb3JlYW5cIiwgMHgzMjAzLCBcInJpZXVscGhpZXVwaGtvcmVhblwiLCAweDMxM2YsIFwicmlldWxwaWV1cGtvcmVhblwiLCAweDMxM2MsIFwicmlldWxwaWV1cHNpb3Nrb3JlYW5cIiwgMHgzMTZiLCBcInJpZXVsc2lvc2tvcmVhblwiLCAweDMxM2QsIFwicmlldWx0aGlldXRoa29yZWFuXCIsIDB4MzEzZSwgXCJyaWV1bHRpa2V1dGtvcmVhblwiLCAweDMxNmEsIFwicmlldWx5ZW9yaW5oaWV1aGtvcmVhblwiLCAweDMxNmQsIFwicmlnaHRhbmdsZVwiLCAweDIyMWYsIFwicmlnaHR0YWNrYmVsb3djbWJcIiwgMHgwMzE5LCBcInJpZ2h0dHJpYW5nbGVcIiwgMHgyMmJmLCBcInJpaGlyYWdhbmFcIiwgMHgzMDhhLCBcInJpa2F0YWthbmFcIiwgMHgzMGVhLCBcInJpa2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjk4LCBcInJpbmdcIiwgMHgwMmRhLCBcInJpbmdiZWxvd2NtYlwiLCAweDAzMjUsIFwicmluZ2NtYlwiLCAweDAzMGEsIFwicmluZ2hhbGZsZWZ0XCIsIDB4MDJiZiwgXCJyaW5naGFsZmxlZnRhcm1lbmlhblwiLCAweDA1NTksIFwicmluZ2hhbGZsZWZ0YmVsb3djbWJcIiwgMHgwMzFjLCBcInJpbmdoYWxmbGVmdGNlbnRlcmVkXCIsIDB4MDJkMywgXCJyaW5naGFsZnJpZ2h0XCIsIDB4MDJiZSwgXCJyaW5naGFsZnJpZ2h0YmVsb3djbWJcIiwgMHgwMzM5LCBcInJpbmdoYWxmcmlnaHRjZW50ZXJlZFwiLCAweDAyZDIsIFwicmludmVydGVkYnJldmVcIiwgMHgwMjEzLCBcInJpdHRvcnVzcXVhcmVcIiwgMHgzMzUxLCBcInJsaW5lYmVsb3dcIiwgMHgxZTVmLCBcInJsb25nbGVnXCIsIDB4MDI3YywgXCJybG9uZ2xlZ3R1cm5lZFwiLCAweDAyN2EsIFwicm1vbm9zcGFjZVwiLCAweGZmNTIsIFwicm9oaXJhZ2FuYVwiLCAweDMwOGQsIFwicm9rYXRha2FuYVwiLCAweDMwZWQsIFwicm9rYXRha2FuYWhhbGZ3aWR0aFwiLCAweGZmOWIsIFwicm9ydWF0aGFpXCIsIDB4MGUyMywgXCJycGFyZW5cIiwgMHgyNGFkLCBcInJyYWJlbmdhbGlcIiwgMHgwOWRjLCBcInJyYWRldmFcIiwgMHgwOTMxLCBcInJyYWd1cm11a2hpXCIsIDB4MGE1YywgXCJycmVoYXJhYmljXCIsIDB4MDY5MSwgXCJycmVoZmluYWxhcmFiaWNcIiwgMHhmYjhkLCBcInJydm9jYWxpY2JlbmdhbGlcIiwgMHgwOWUwLCBcInJydm9jYWxpY2RldmFcIiwgMHgwOTYwLCBcInJydm9jYWxpY2d1amFyYXRpXCIsIDB4MGFlMCwgXCJycnZvY2FsaWN2b3dlbHNpZ25iZW5nYWxpXCIsIDB4MDljNCwgXCJycnZvY2FsaWN2b3dlbHNpZ25kZXZhXCIsIDB4MDk0NCwgXCJycnZvY2FsaWN2b3dlbHNpZ25ndWphcmF0aVwiLCAweDBhYzQsIFwicnN1cGVyaW9yXCIsIDB4ZjZmMSwgXCJydGJsb2NrXCIsIDB4MjU5MCwgXCJydHVybmVkXCIsIDB4MDI3OSwgXCJydHVybmVkc3VwZXJpb3JcIiwgMHgwMmI0LCBcInJ1aGlyYWdhbmFcIiwgMHgzMDhiLCBcInJ1a2F0YWthbmFcIiwgMHgzMGViLCBcInJ1a2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjk5LCBcInJ1cGVlbWFya2JlbmdhbGlcIiwgMHgwOWYyLCBcInJ1cGVlc2lnbmJlbmdhbGlcIiwgMHgwOWYzLCBcInJ1cGlhaFwiLCAweGY2ZGQsIFwicnV0aGFpXCIsIDB4MGUyNCwgXCJydm9jYWxpY2JlbmdhbGlcIiwgMHgwOThiLCBcInJ2b2NhbGljZGV2YVwiLCAweDA5MGIsIFwicnZvY2FsaWNndWphcmF0aVwiLCAweDBhOGIsIFwicnZvY2FsaWN2b3dlbHNpZ25iZW5nYWxpXCIsIDB4MDljMywgXCJydm9jYWxpY3Zvd2Vsc2lnbmRldmFcIiwgMHgwOTQzLCBcInJ2b2NhbGljdm93ZWxzaWduZ3VqYXJhdGlcIiwgMHgwYWMzLCBcInNcIiwgMHgwMDczLCBcInNhYmVuZ2FsaVwiLCAweDA5YjgsIFwic2FjdXRlXCIsIDB4MDE1YiwgXCJzYWN1dGVkb3RhY2NlbnRcIiwgMHgxZTY1LCBcInNhZGFyYWJpY1wiLCAweDA2MzUsIFwic2FkZXZhXCIsIDB4MDkzOCwgXCJzYWRmaW5hbGFyYWJpY1wiLCAweGZlYmEsIFwic2FkaW5pdGlhbGFyYWJpY1wiLCAweGZlYmIsIFwic2FkbWVkaWFsYXJhYmljXCIsIDB4ZmViYywgXCJzYWd1amFyYXRpXCIsIDB4MGFiOCwgXCJzYWd1cm11a2hpXCIsIDB4MGEzOCwgXCJzYWhpcmFnYW5hXCIsIDB4MzA1NSwgXCJzYWthdGFrYW5hXCIsIDB4MzBiNSwgXCJzYWthdGFrYW5haGFsZndpZHRoXCIsIDB4ZmY3YiwgXCJzYWxsYWxsYWhvdWFsYXloZXdhc2FsbGFtYXJhYmljXCIsIDB4ZmRmYSwgXCJzYW1la2hcIiwgMHgwNWUxLCBcInNhbWVraGRhZ2VzaFwiLCAweGZiNDEsIFwic2FtZWtoZGFnZXNoaGVicmV3XCIsIDB4ZmI0MSwgXCJzYW1la2hoZWJyZXdcIiwgMHgwNWUxLCBcInNhcmFhYXRoYWlcIiwgMHgwZTMyLCBcInNhcmFhZXRoYWlcIiwgMHgwZTQxLCBcInNhcmFhaW1haW1hbGFpdGhhaVwiLCAweDBlNDQsIFwic2FyYWFpbWFpbXVhbnRoYWlcIiwgMHgwZTQzLCBcInNhcmFhbXRoYWlcIiwgMHgwZTMzLCBcInNhcmFhdGhhaVwiLCAweDBlMzAsIFwic2FyYWV0aGFpXCIsIDB4MGU0MCwgXCJzYXJhaWlsZWZ0dGhhaVwiLCAweGY4ODYsIFwic2FyYWlpdGhhaVwiLCAweDBlMzUsIFwic2FyYWlsZWZ0dGhhaVwiLCAweGY4ODUsIFwic2FyYWl0aGFpXCIsIDB4MGUzNCwgXCJzYXJhb3RoYWlcIiwgMHgwZTQyLCBcInNhcmF1ZWVsZWZ0dGhhaVwiLCAweGY4ODgsIFwic2FyYXVlZXRoYWlcIiwgMHgwZTM3LCBcInNhcmF1ZWxlZnR0aGFpXCIsIDB4Zjg4NywgXCJzYXJhdWV0aGFpXCIsIDB4MGUzNiwgXCJzYXJhdXRoYWlcIiwgMHgwZTM4LCBcInNhcmF1dXRoYWlcIiwgMHgwZTM5LCBcInNib3BvbW9mb1wiLCAweDMxMTksIFwic2Nhcm9uXCIsIDB4MDE2MSwgXCJzY2Fyb25kb3RhY2NlbnRcIiwgMHgxZTY3LCBcInNjZWRpbGxhXCIsIDB4MDE1ZiwgXCJzY2h3YVwiLCAweDAyNTksIFwic2Nod2FjeXJpbGxpY1wiLCAweDA0ZDksIFwic2Nod2FkaWVyZXNpc2N5cmlsbGljXCIsIDB4MDRkYiwgXCJzY2h3YWhvb2tcIiwgMHgwMjVhLCBcInNjaXJjbGVcIiwgMHgyNGUyLCBcInNjaXJjdW1mbGV4XCIsIDB4MDE1ZCwgXCJzY29tbWFhY2NlbnRcIiwgMHgwMjE5LCBcInNkb3RhY2NlbnRcIiwgMHgxZTYxLCBcInNkb3RiZWxvd1wiLCAweDFlNjMsIFwic2RvdGJlbG93ZG90YWNjZW50XCIsIDB4MWU2OSwgXCJzZWFndWxsYmVsb3djbWJcIiwgMHgwMzNjLCBcInNlY29uZFwiLCAweDIwMzMsIFwic2Vjb25kdG9uZWNoaW5lc2VcIiwgMHgwMmNhLCBcInNlY3Rpb25cIiwgMHgwMGE3LCBcInNlZW5hcmFiaWNcIiwgMHgwNjMzLCBcInNlZW5maW5hbGFyYWJpY1wiLCAweGZlYjIsIFwic2VlbmluaXRpYWxhcmFiaWNcIiwgMHhmZWIzLCBcInNlZW5tZWRpYWxhcmFiaWNcIiwgMHhmZWI0LCBcInNlZ29sXCIsIDB4MDViNiwgXCJzZWdvbDEzXCIsIDB4MDViNiwgXCJzZWdvbDFmXCIsIDB4MDViNiwgXCJzZWdvbDJjXCIsIDB4MDViNiwgXCJzZWdvbGhlYnJld1wiLCAweDA1YjYsIFwic2Vnb2xuYXJyb3doZWJyZXdcIiwgMHgwNWI2LCBcInNlZ29scXVhcnRlcmhlYnJld1wiLCAweDA1YjYsIFwic2Vnb2x0YWhlYnJld1wiLCAweDA1OTIsIFwic2Vnb2x3aWRlaGVicmV3XCIsIDB4MDViNiwgXCJzZWhhcm1lbmlhblwiLCAweDA1N2QsIFwic2VoaXJhZ2FuYVwiLCAweDMwNWIsIFwic2VrYXRha2FuYVwiLCAweDMwYmIsIFwic2VrYXRha2FuYWhhbGZ3aWR0aFwiLCAweGZmN2UsIFwic2VtaWNvbG9uXCIsIDB4MDAzYiwgXCJzZW1pY29sb25hcmFiaWNcIiwgMHgwNjFiLCBcInNlbWljb2xvbm1vbm9zcGFjZVwiLCAweGZmMWIsIFwic2VtaWNvbG9uc21hbGxcIiwgMHhmZTU0LCBcInNlbWl2b2ljZWRtYXJra2FuYVwiLCAweDMwOWMsIFwic2VtaXZvaWNlZG1hcmtrYW5haGFsZndpZHRoXCIsIDB4ZmY5ZiwgXCJzZW50aXNxdWFyZVwiLCAweDMzMjIsIFwic2VudG9zcXVhcmVcIiwgMHgzMzIzLCBcInNldmVuXCIsIDB4MDAzNywgXCJzZXZlbmFyYWJpY1wiLCAweDA2NjcsIFwic2V2ZW5iZW5nYWxpXCIsIDB4MDllZCwgXCJzZXZlbmNpcmNsZVwiLCAweDI0NjYsIFwic2V2ZW5jaXJjbGVpbnZlcnNlc2Fuc3NlcmlmXCIsIDB4Mjc5MCwgXCJzZXZlbmRldmFcIiwgMHgwOTZkLCBcInNldmVuZWlnaHRoc1wiLCAweDIxNWUsIFwic2V2ZW5ndWphcmF0aVwiLCAweDBhZWQsIFwic2V2ZW5ndXJtdWtoaVwiLCAweDBhNmQsIFwic2V2ZW5oYWNrYXJhYmljXCIsIDB4MDY2NywgXCJzZXZlbmhhbmd6aG91XCIsIDB4MzAyNywgXCJzZXZlbmlkZW9ncmFwaGljcGFyZW5cIiwgMHgzMjI2LCBcInNldmVuaW5mZXJpb3JcIiwgMHgyMDg3LCBcInNldmVubW9ub3NwYWNlXCIsIDB4ZmYxNywgXCJzZXZlbm9sZHN0eWxlXCIsIDB4ZjczNywgXCJzZXZlbnBhcmVuXCIsIDB4MjQ3YSwgXCJzZXZlbnBlcmlvZFwiLCAweDI0OGUsIFwic2V2ZW5wZXJzaWFuXCIsIDB4MDZmNywgXCJzZXZlbnJvbWFuXCIsIDB4MjE3NiwgXCJzZXZlbnN1cGVyaW9yXCIsIDB4MjA3NywgXCJzZXZlbnRlZW5jaXJjbGVcIiwgMHgyNDcwLCBcInNldmVudGVlbnBhcmVuXCIsIDB4MjQ4NCwgXCJzZXZlbnRlZW5wZXJpb2RcIiwgMHgyNDk4LCBcInNldmVudGhhaVwiLCAweDBlNTcsIFwic2Z0aHlwaGVuXCIsIDB4MDBhZCwgXCJzaGFhcm1lbmlhblwiLCAweDA1NzcsIFwic2hhYmVuZ2FsaVwiLCAweDA5YjYsIFwic2hhY3lyaWxsaWNcIiwgMHgwNDQ4LCBcInNoYWRkYWFyYWJpY1wiLCAweDA2NTEsIFwic2hhZGRhZGFtbWFhcmFiaWNcIiwgMHhmYzYxLCBcInNoYWRkYWRhbW1hdGFuYXJhYmljXCIsIDB4ZmM1ZSwgXCJzaGFkZGFmYXRoYWFyYWJpY1wiLCAweGZjNjAsIFwic2hhZGRha2FzcmFhcmFiaWNcIiwgMHhmYzYyLCBcInNoYWRkYWthc3JhdGFuYXJhYmljXCIsIDB4ZmM1ZiwgXCJzaGFkZVwiLCAweDI1OTIsIFwic2hhZGVkYXJrXCIsIDB4MjU5MywgXCJzaGFkZWxpZ2h0XCIsIDB4MjU5MSwgXCJzaGFkZW1lZGl1bVwiLCAweDI1OTIsIFwic2hhZGV2YVwiLCAweDA5MzYsIFwic2hhZ3VqYXJhdGlcIiwgMHgwYWI2LCBcInNoYWd1cm11a2hpXCIsIDB4MGEzNiwgXCJzaGFsc2hlbGV0aGVicmV3XCIsIDB4MDU5MywgXCJzaGJvcG9tb2ZvXCIsIDB4MzExNSwgXCJzaGNoYWN5cmlsbGljXCIsIDB4MDQ0OSwgXCJzaGVlbmFyYWJpY1wiLCAweDA2MzQsIFwic2hlZW5maW5hbGFyYWJpY1wiLCAweGZlYjYsIFwic2hlZW5pbml0aWFsYXJhYmljXCIsIDB4ZmViNywgXCJzaGVlbm1lZGlhbGFyYWJpY1wiLCAweGZlYjgsIFwic2hlaWNvcHRpY1wiLCAweDAzZTMsIFwic2hlcWVsXCIsIDB4MjBhYSwgXCJzaGVxZWxoZWJyZXdcIiwgMHgyMGFhLCBcInNoZXZhXCIsIDB4MDViMCwgXCJzaGV2YTExNVwiLCAweDA1YjAsIFwic2hldmExNVwiLCAweDA1YjAsIFwic2hldmEyMlwiLCAweDA1YjAsIFwic2hldmEyZVwiLCAweDA1YjAsIFwic2hldmFoZWJyZXdcIiwgMHgwNWIwLCBcInNoZXZhbmFycm93aGVicmV3XCIsIDB4MDViMCwgXCJzaGV2YXF1YXJ0ZXJoZWJyZXdcIiwgMHgwNWIwLCBcInNoZXZhd2lkZWhlYnJld1wiLCAweDA1YjAsIFwic2hoYWN5cmlsbGljXCIsIDB4MDRiYiwgXCJzaGltYWNvcHRpY1wiLCAweDAzZWQsIFwic2hpblwiLCAweDA1ZTksIFwic2hpbmRhZ2VzaFwiLCAweGZiNDksIFwic2hpbmRhZ2VzaGhlYnJld1wiLCAweGZiNDksIFwic2hpbmRhZ2VzaHNoaW5kb3RcIiwgMHhmYjJjLCBcInNoaW5kYWdlc2hzaGluZG90aGVicmV3XCIsIDB4ZmIyYywgXCJzaGluZGFnZXNoc2luZG90XCIsIDB4ZmIyZCwgXCJzaGluZGFnZXNoc2luZG90aGVicmV3XCIsIDB4ZmIyZCwgXCJzaGluZG90aGVicmV3XCIsIDB4MDVjMSwgXCJzaGluaGVicmV3XCIsIDB4MDVlOSwgXCJzaGluc2hpbmRvdFwiLCAweGZiMmEsIFwic2hpbnNoaW5kb3RoZWJyZXdcIiwgMHhmYjJhLCBcInNoaW5zaW5kb3RcIiwgMHhmYjJiLCBcInNoaW5zaW5kb3RoZWJyZXdcIiwgMHhmYjJiLCBcInNob29rXCIsIDB4MDI4MiwgXCJzaWdtYVwiLCAweDAzYzMsIFwic2lnbWExXCIsIDB4MDNjMiwgXCJzaWdtYWZpbmFsXCIsIDB4MDNjMiwgXCJzaWdtYWx1bmF0ZXN5bWJvbGdyZWVrXCIsIDB4MDNmMiwgXCJzaWhpcmFnYW5hXCIsIDB4MzA1NywgXCJzaWthdGFrYW5hXCIsIDB4MzBiNywgXCJzaWthdGFrYW5haGFsZndpZHRoXCIsIDB4ZmY3YywgXCJzaWx1cWhlYnJld1wiLCAweDA1YmQsIFwic2lsdXFsZWZ0aGVicmV3XCIsIDB4MDViZCwgXCJzaW1pbGFyXCIsIDB4MjIzYywgXCJzaW5kb3RoZWJyZXdcIiwgMHgwNWMyLCBcInNpb3NhY2lyY2xla29yZWFuXCIsIDB4MzI3NCwgXCJzaW9zYXBhcmVua29yZWFuXCIsIDB4MzIxNCwgXCJzaW9zY2lldWNrb3JlYW5cIiwgMHgzMTdlLCBcInNpb3NjaXJjbGVrb3JlYW5cIiwgMHgzMjY2LCBcInNpb3NraXllb2trb3JlYW5cIiwgMHgzMTdhLCBcInNpb3Nrb3JlYW5cIiwgMHgzMTQ1LCBcInNpb3NuaWV1bmtvcmVhblwiLCAweDMxN2IsIFwic2lvc3BhcmVua29yZWFuXCIsIDB4MzIwNiwgXCJzaW9zcGlldXBrb3JlYW5cIiwgMHgzMTdkLCBcInNpb3N0aWtldXRrb3JlYW5cIiwgMHgzMTdjLCBcInNpeFwiLCAweDAwMzYsIFwic2l4YXJhYmljXCIsIDB4MDY2NiwgXCJzaXhiZW5nYWxpXCIsIDB4MDllYywgXCJzaXhjaXJjbGVcIiwgMHgyNDY1LCBcInNpeGNpcmNsZWludmVyc2VzYW5zc2VyaWZcIiwgMHgyNzhmLCBcInNpeGRldmFcIiwgMHgwOTZjLCBcInNpeGd1amFyYXRpXCIsIDB4MGFlYywgXCJzaXhndXJtdWtoaVwiLCAweDBhNmMsIFwic2l4aGFja2FyYWJpY1wiLCAweDA2NjYsIFwic2l4aGFuZ3pob3VcIiwgMHgzMDI2LCBcInNpeGlkZW9ncmFwaGljcGFyZW5cIiwgMHgzMjI1LCBcInNpeGluZmVyaW9yXCIsIDB4MjA4NiwgXCJzaXhtb25vc3BhY2VcIiwgMHhmZjE2LCBcInNpeG9sZHN0eWxlXCIsIDB4ZjczNiwgXCJzaXhwYXJlblwiLCAweDI0NzksIFwic2l4cGVyaW9kXCIsIDB4MjQ4ZCwgXCJzaXhwZXJzaWFuXCIsIDB4MDZmNiwgXCJzaXhyb21hblwiLCAweDIxNzUsIFwic2l4c3VwZXJpb3JcIiwgMHgyMDc2LCBcInNpeHRlZW5jaXJjbGVcIiwgMHgyNDZmLCBcInNpeHRlZW5jdXJyZW5jeWRlbm9taW5hdG9yYmVuZ2FsaVwiLCAweDA5ZjksIFwic2l4dGVlbnBhcmVuXCIsIDB4MjQ4MywgXCJzaXh0ZWVucGVyaW9kXCIsIDB4MjQ5NywgXCJzaXh0aGFpXCIsIDB4MGU1NiwgXCJzbGFzaFwiLCAweDAwMmYsIFwic2xhc2htb25vc3BhY2VcIiwgMHhmZjBmLCBcInNsb25nXCIsIDB4MDE3ZiwgXCJzbG9uZ2RvdGFjY2VudFwiLCAweDFlOWIsIFwic21pbGVmYWNlXCIsIDB4MjYzYSwgXCJzbW9ub3NwYWNlXCIsIDB4ZmY1MywgXCJzb2ZwYXN1cWhlYnJld1wiLCAweDA1YzMsIFwic29mdGh5cGhlblwiLCAweDAwYWQsIFwic29mdHNpZ25jeXJpbGxpY1wiLCAweDA0NGMsIFwic29oaXJhZ2FuYVwiLCAweDMwNWQsIFwic29rYXRha2FuYVwiLCAweDMwYmQsIFwic29rYXRha2FuYWhhbGZ3aWR0aFwiLCAweGZmN2YsIFwic29saWR1c2xvbmdvdmVybGF5Y21iXCIsIDB4MDMzOCwgXCJzb2xpZHVzc2hvcnRvdmVybGF5Y21iXCIsIDB4MDMzNywgXCJzb3J1c2l0aGFpXCIsIDB4MGUyOSwgXCJzb3NhbGF0aGFpXCIsIDB4MGUyOCwgXCJzb3NvdGhhaVwiLCAweDBlMGIsIFwic29zdWF0aGFpXCIsIDB4MGUyYSwgXCJzcGFjZVwiLCAweDAwMjAsIFwic3BhY2VoYWNrYXJhYmljXCIsIDB4MDAyMCwgXCJzcGFkZVwiLCAweDI2NjAsIFwic3BhZGVzdWl0YmxhY2tcIiwgMHgyNjYwLCBcInNwYWRlc3VpdHdoaXRlXCIsIDB4MjY2NCwgXCJzcGFyZW5cIiwgMHgyNGFlLCBcInNxdWFyZWJlbG93Y21iXCIsIDB4MDMzYiwgXCJzcXVhcmVjY1wiLCAweDMzYzQsIFwic3F1YXJlY21cIiwgMHgzMzlkLCBcInNxdWFyZWRpYWdvbmFsY3Jvc3NoYXRjaGZpbGxcIiwgMHgyNWE5LCBcInNxdWFyZWhvcml6b250YWxmaWxsXCIsIDB4MjVhNCwgXCJzcXVhcmVrZ1wiLCAweDMzOGYsIFwic3F1YXJla21cIiwgMHgzMzllLCBcInNxdWFyZWttY2FwaXRhbFwiLCAweDMzY2UsIFwic3F1YXJlbG5cIiwgMHgzM2QxLCBcInNxdWFyZWxvZ1wiLCAweDMzZDIsIFwic3F1YXJlbWdcIiwgMHgzMzhlLCBcInNxdWFyZW1pbFwiLCAweDMzZDUsIFwic3F1YXJlbW1cIiwgMHgzMzljLCBcInNxdWFyZW1zcXVhcmVkXCIsIDB4MzNhMSwgXCJzcXVhcmVvcnRob2dvbmFsY3Jvc3NoYXRjaGZpbGxcIiwgMHgyNWE2LCBcInNxdWFyZXVwcGVybGVmdHRvbG93ZXJyaWdodGZpbGxcIiwgMHgyNWE3LCBcInNxdWFyZXVwcGVycmlnaHR0b2xvd2VybGVmdGZpbGxcIiwgMHgyNWE4LCBcInNxdWFyZXZlcnRpY2FsZmlsbFwiLCAweDI1YTUsIFwic3F1YXJld2hpdGV3aXRoc21hbGxibGFja1wiLCAweDI1YTMsIFwic3JzcXVhcmVcIiwgMHgzM2RiLCBcInNzYWJlbmdhbGlcIiwgMHgwOWI3LCBcInNzYWRldmFcIiwgMHgwOTM3LCBcInNzYWd1amFyYXRpXCIsIDB4MGFiNywgXCJzc2FuZ2NpZXVja29yZWFuXCIsIDB4MzE0OSwgXCJzc2FuZ2hpZXVoa29yZWFuXCIsIDB4MzE4NSwgXCJzc2FuZ2lldW5na29yZWFuXCIsIDB4MzE4MCwgXCJzc2FuZ2tpeWVva2tvcmVhblwiLCAweDMxMzIsIFwic3NhbmduaWV1bmtvcmVhblwiLCAweDMxNjUsIFwic3NhbmdwaWV1cGtvcmVhblwiLCAweDMxNDMsIFwic3NhbmdzaW9za29yZWFuXCIsIDB4MzE0NiwgXCJzc2FuZ3Rpa2V1dGtvcmVhblwiLCAweDMxMzgsIFwic3N1cGVyaW9yXCIsIDB4ZjZmMiwgXCJzdGVybGluZ1wiLCAweDAwYTMsIFwic3Rlcmxpbmdtb25vc3BhY2VcIiwgMHhmZmUxLCBcInN0cm9rZWxvbmdvdmVybGF5Y21iXCIsIDB4MDMzNiwgXCJzdHJva2VzaG9ydG92ZXJsYXljbWJcIiwgMHgwMzM1LCBcInN1YnNldFwiLCAweDIyODIsIFwic3Vic2V0bm90ZXF1YWxcIiwgMHgyMjhhLCBcInN1YnNldG9yZXF1YWxcIiwgMHgyMjg2LCBcInN1Y2NlZWRzXCIsIDB4MjI3YiwgXCJzdWNodGhhdFwiLCAweDIyMGIsIFwic3VoaXJhZ2FuYVwiLCAweDMwNTksIFwic3VrYXRha2FuYVwiLCAweDMwYjksIFwic3VrYXRha2FuYWhhbGZ3aWR0aFwiLCAweGZmN2QsIFwic3VrdW5hcmFiaWNcIiwgMHgwNjUyLCBcInN1bW1hdGlvblwiLCAweDIyMTEsIFwic3VuXCIsIDB4MjYzYywgXCJzdXBlcnNldFwiLCAweDIyODMsIFwic3VwZXJzZXRub3RlcXVhbFwiLCAweDIyOGIsIFwic3VwZXJzZXRvcmVxdWFsXCIsIDB4MjI4NywgXCJzdnNxdWFyZVwiLCAweDMzZGMsIFwic3lvdXdhZXJhc3F1YXJlXCIsIDB4MzM3YywgXCJ0XCIsIDB4MDA3NCwgXCJ0YWJlbmdhbGlcIiwgMHgwOWE0LCBcInRhY2tkb3duXCIsIDB4MjJhNCwgXCJ0YWNrbGVmdFwiLCAweDIyYTMsIFwidGFkZXZhXCIsIDB4MDkyNCwgXCJ0YWd1amFyYXRpXCIsIDB4MGFhNCwgXCJ0YWd1cm11a2hpXCIsIDB4MGEyNCwgXCJ0YWhhcmFiaWNcIiwgMHgwNjM3LCBcInRhaGZpbmFsYXJhYmljXCIsIDB4ZmVjMiwgXCJ0YWhpbml0aWFsYXJhYmljXCIsIDB4ZmVjMywgXCJ0YWhpcmFnYW5hXCIsIDB4MzA1ZiwgXCJ0YWhtZWRpYWxhcmFiaWNcIiwgMHhmZWM0LCBcInRhaXN5b3VlcmFzcXVhcmVcIiwgMHgzMzdkLCBcInRha2F0YWthbmFcIiwgMHgzMGJmLCBcInRha2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjgwLCBcInRhdHdlZWxhcmFiaWNcIiwgMHgwNjQwLCBcInRhdVwiLCAweDAzYzQsIFwidGF2XCIsIDB4MDVlYSwgXCJ0YXZkYWdlc1wiLCAweGZiNGEsIFwidGF2ZGFnZXNoXCIsIDB4ZmI0YSwgXCJ0YXZkYWdlc2hoZWJyZXdcIiwgMHhmYjRhLCBcInRhdmhlYnJld1wiLCAweDA1ZWEsIFwidGJhclwiLCAweDAxNjcsIFwidGJvcG9tb2ZvXCIsIDB4MzEwYSwgXCJ0Y2Fyb25cIiwgMHgwMTY1LCBcInRjY3VybFwiLCAweDAyYTgsIFwidGNlZGlsbGFcIiwgMHgwMTYzLCBcInRjaGVoYXJhYmljXCIsIDB4MDY4NiwgXCJ0Y2hlaGZpbmFsYXJhYmljXCIsIDB4ZmI3YiwgXCJ0Y2hlaGluaXRpYWxhcmFiaWNcIiwgMHhmYjdjLCBcInRjaGVobWVkaWFsYXJhYmljXCIsIDB4ZmI3ZCwgXCJ0Y2lyY2xlXCIsIDB4MjRlMywgXCJ0Y2lyY3VtZmxleGJlbG93XCIsIDB4MWU3MSwgXCJ0Y29tbWFhY2NlbnRcIiwgMHgwMTYzLCBcInRkaWVyZXNpc1wiLCAweDFlOTcsIFwidGRvdGFjY2VudFwiLCAweDFlNmIsIFwidGRvdGJlbG93XCIsIDB4MWU2ZCwgXCJ0ZWN5cmlsbGljXCIsIDB4MDQ0MiwgXCJ0ZWRlc2NlbmRlcmN5cmlsbGljXCIsIDB4MDRhZCwgXCJ0ZWhhcmFiaWNcIiwgMHgwNjJhLCBcInRlaGZpbmFsYXJhYmljXCIsIDB4ZmU5NiwgXCJ0ZWhoYWhpbml0aWFsYXJhYmljXCIsIDB4ZmNhMiwgXCJ0ZWhoYWhpc29sYXRlZGFyYWJpY1wiLCAweGZjMGMsIFwidGVoaW5pdGlhbGFyYWJpY1wiLCAweGZlOTcsIFwidGVoaXJhZ2FuYVwiLCAweDMwNjYsIFwidGVoamVlbWluaXRpYWxhcmFiaWNcIiwgMHhmY2ExLCBcInRlaGplZW1pc29sYXRlZGFyYWJpY1wiLCAweGZjMGIsIFwidGVobWFyYnV0YWFyYWJpY1wiLCAweDA2MjksIFwidGVobWFyYnV0YWZpbmFsYXJhYmljXCIsIDB4ZmU5NCwgXCJ0ZWhtZWRpYWxhcmFiaWNcIiwgMHhmZTk4LCBcInRlaG1lZW1pbml0aWFsYXJhYmljXCIsIDB4ZmNhNCwgXCJ0ZWhtZWVtaXNvbGF0ZWRhcmFiaWNcIiwgMHhmYzBlLCBcInRlaG5vb25maW5hbGFyYWJpY1wiLCAweGZjNzMsIFwidGVrYXRha2FuYVwiLCAweDMwYzYsIFwidGVrYXRha2FuYWhhbGZ3aWR0aFwiLCAweGZmODMsIFwidGVsZXBob25lXCIsIDB4MjEyMSwgXCJ0ZWxlcGhvbmVibGFja1wiLCAweDI2MGUsIFwidGVsaXNoYWdlZG9sYWhlYnJld1wiLCAweDA1YTAsIFwidGVsaXNoYXFldGFuYWhlYnJld1wiLCAweDA1YTksIFwidGVuY2lyY2xlXCIsIDB4MjQ2OSwgXCJ0ZW5pZGVvZ3JhcGhpY3BhcmVuXCIsIDB4MzIyOSwgXCJ0ZW5wYXJlblwiLCAweDI0N2QsIFwidGVucGVyaW9kXCIsIDB4MjQ5MSwgXCJ0ZW5yb21hblwiLCAweDIxNzksIFwidGVzaFwiLCAweDAyYTcsIFwidGV0XCIsIDB4MDVkOCwgXCJ0ZXRkYWdlc2hcIiwgMHhmYjM4LCBcInRldGRhZ2VzaGhlYnJld1wiLCAweGZiMzgsIFwidGV0aGVicmV3XCIsIDB4MDVkOCwgXCJ0ZXRzZWN5cmlsbGljXCIsIDB4MDRiNSwgXCJ0ZXZpcmhlYnJld1wiLCAweDA1OWIsIFwidGV2aXJsZWZ0aGVicmV3XCIsIDB4MDU5YiwgXCJ0aGFiZW5nYWxpXCIsIDB4MDlhNSwgXCJ0aGFkZXZhXCIsIDB4MDkyNSwgXCJ0aGFndWphcmF0aVwiLCAweDBhYTUsIFwidGhhZ3VybXVraGlcIiwgMHgwYTI1LCBcInRoYWxhcmFiaWNcIiwgMHgwNjMwLCBcInRoYWxmaW5hbGFyYWJpY1wiLCAweGZlYWMsIFwidGhhbnRoYWtoYXRsb3dsZWZ0dGhhaVwiLCAweGY4OTgsIFwidGhhbnRoYWtoYXRsb3dyaWdodHRoYWlcIiwgMHhmODk3LCBcInRoYW50aGFraGF0dGhhaVwiLCAweDBlNGMsIFwidGhhbnRoYWtoYXR1cHBlcmxlZnR0aGFpXCIsIDB4Zjg5NiwgXCJ0aGVoYXJhYmljXCIsIDB4MDYyYiwgXCJ0aGVoZmluYWxhcmFiaWNcIiwgMHhmZTlhLCBcInRoZWhpbml0aWFsYXJhYmljXCIsIDB4ZmU5YiwgXCJ0aGVobWVkaWFsYXJhYmljXCIsIDB4ZmU5YywgXCJ0aGVyZWV4aXN0c1wiLCAweDIyMDMsIFwidGhlcmVmb3JlXCIsIDB4MjIzNCwgXCJ0aGV0YVwiLCAweDAzYjgsIFwidGhldGExXCIsIDB4MDNkMSwgXCJ0aGV0YXN5bWJvbGdyZWVrXCIsIDB4MDNkMSwgXCJ0aGlldXRoYWNpcmNsZWtvcmVhblwiLCAweDMyNzksIFwidGhpZXV0aGFwYXJlbmtvcmVhblwiLCAweDMyMTksIFwidGhpZXV0aGNpcmNsZWtvcmVhblwiLCAweDMyNmIsIFwidGhpZXV0aGtvcmVhblwiLCAweDMxNGMsIFwidGhpZXV0aHBhcmVua29yZWFuXCIsIDB4MzIwYiwgXCJ0aGlydGVlbmNpcmNsZVwiLCAweDI0NmMsIFwidGhpcnRlZW5wYXJlblwiLCAweDI0ODAsIFwidGhpcnRlZW5wZXJpb2RcIiwgMHgyNDk0LCBcInRob25hbmdtb250aG90aGFpXCIsIDB4MGUxMSwgXCJ0aG9va1wiLCAweDAxYWQsIFwidGhvcGh1dGhhb3RoYWlcIiwgMHgwZTEyLCBcInRob3JuXCIsIDB4MDBmZSwgXCJ0aG90aGFoYW50aGFpXCIsIDB4MGUxNywgXCJ0aG90aGFudGhhaVwiLCAweDBlMTAsIFwidGhvdGhvbmd0aGFpXCIsIDB4MGUxOCwgXCJ0aG90aHVuZ3RoYWlcIiwgMHgwZTE2LCBcInRob3VzYW5kY3lyaWxsaWNcIiwgMHgwNDgyLCBcInRob3VzYW5kc3NlcGFyYXRvcmFyYWJpY1wiLCAweDA2NmMsIFwidGhvdXNhbmRzc2VwYXJhdG9ycGVyc2lhblwiLCAweDA2NmMsIFwidGhyZWVcIiwgMHgwMDMzLCBcInRocmVlYXJhYmljXCIsIDB4MDY2MywgXCJ0aHJlZWJlbmdhbGlcIiwgMHgwOWU5LCBcInRocmVlY2lyY2xlXCIsIDB4MjQ2MiwgXCJ0aHJlZWNpcmNsZWludmVyc2VzYW5zc2VyaWZcIiwgMHgyNzhjLCBcInRocmVlZGV2YVwiLCAweDA5NjksIFwidGhyZWVlaWdodGhzXCIsIDB4MjE1YywgXCJ0aHJlZWd1amFyYXRpXCIsIDB4MGFlOSwgXCJ0aHJlZWd1cm11a2hpXCIsIDB4MGE2OSwgXCJ0aHJlZWhhY2thcmFiaWNcIiwgMHgwNjYzLCBcInRocmVlaGFuZ3pob3VcIiwgMHgzMDIzLCBcInRocmVlaWRlb2dyYXBoaWNwYXJlblwiLCAweDMyMjIsIFwidGhyZWVpbmZlcmlvclwiLCAweDIwODMsIFwidGhyZWVtb25vc3BhY2VcIiwgMHhmZjEzLCBcInRocmVlbnVtZXJhdG9yYmVuZ2FsaVwiLCAweDA5ZjYsIFwidGhyZWVvbGRzdHlsZVwiLCAweGY3MzMsIFwidGhyZWVwYXJlblwiLCAweDI0NzYsIFwidGhyZWVwZXJpb2RcIiwgMHgyNDhhLCBcInRocmVlcGVyc2lhblwiLCAweDA2ZjMsIFwidGhyZWVxdWFydGVyc1wiLCAweDAwYmUsIFwidGhyZWVxdWFydGVyc2VtZGFzaFwiLCAweGY2ZGUsIFwidGhyZWVyb21hblwiLCAweDIxNzIsIFwidGhyZWVzdXBlcmlvclwiLCAweDAwYjMsIFwidGhyZWV0aGFpXCIsIDB4MGU1MywgXCJ0aHpzcXVhcmVcIiwgMHgzMzk0LCBcInRpaGlyYWdhbmFcIiwgMHgzMDYxLCBcInRpa2F0YWthbmFcIiwgMHgzMGMxLCBcInRpa2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjgxLCBcInRpa2V1dGFjaXJjbGVrb3JlYW5cIiwgMHgzMjcwLCBcInRpa2V1dGFwYXJlbmtvcmVhblwiLCAweDMyMTAsIFwidGlrZXV0Y2lyY2xla29yZWFuXCIsIDB4MzI2MiwgXCJ0aWtldXRrb3JlYW5cIiwgMHgzMTM3LCBcInRpa2V1dHBhcmVua29yZWFuXCIsIDB4MzIwMiwgXCJ0aWxkZVwiLCAweDAyZGMsIFwidGlsZGViZWxvd2NtYlwiLCAweDAzMzAsIFwidGlsZGVjbWJcIiwgMHgwMzAzLCBcInRpbGRlY29tYlwiLCAweDAzMDMsIFwidGlsZGVkb3VibGVjbWJcIiwgMHgwMzYwLCBcInRpbGRlb3BlcmF0b3JcIiwgMHgyMjNjLCBcInRpbGRlb3ZlcmxheWNtYlwiLCAweDAzMzQsIFwidGlsZGV2ZXJ0aWNhbGNtYlwiLCAweDAzM2UsIFwidGltZXNjaXJjbGVcIiwgMHgyMjk3LCBcInRpcGVoYWhlYnJld1wiLCAweDA1OTYsIFwidGlwZWhhbGVmdGhlYnJld1wiLCAweDA1OTYsIFwidGlwcGlndXJtdWtoaVwiLCAweDBhNzAsIFwidGl0bG9jeXJpbGxpY2NtYlwiLCAweDA0ODMsIFwidGl3bmFybWVuaWFuXCIsIDB4MDU3ZiwgXCJ0bGluZWJlbG93XCIsIDB4MWU2ZiwgXCJ0bW9ub3NwYWNlXCIsIDB4ZmY1NCwgXCJ0b2FybWVuaWFuXCIsIDB4MDU2OSwgXCJ0b2hpcmFnYW5hXCIsIDB4MzA2OCwgXCJ0b2thdGFrYW5hXCIsIDB4MzBjOCwgXCJ0b2thdGFrYW5haGFsZndpZHRoXCIsIDB4ZmY4NCwgXCJ0b25lYmFyZXh0cmFoaWdobW9kXCIsIDB4MDJlNSwgXCJ0b25lYmFyZXh0cmFsb3dtb2RcIiwgMHgwMmU5LCBcInRvbmViYXJoaWdobW9kXCIsIDB4MDJlNiwgXCJ0b25lYmFybG93bW9kXCIsIDB4MDJlOCwgXCJ0b25lYmFybWlkbW9kXCIsIDB4MDJlNywgXCJ0b25lZml2ZVwiLCAweDAxYmQsIFwidG9uZXNpeFwiLCAweDAxODUsIFwidG9uZXR3b1wiLCAweDAxYTgsIFwidG9ub3NcIiwgMHgwMzg0LCBcInRvbnNxdWFyZVwiLCAweDMzMjcsIFwidG9wYXRha3RoYWlcIiwgMHgwZTBmLCBcInRvcnRvaXNlc2hlbGxicmFja2V0bGVmdFwiLCAweDMwMTQsIFwidG9ydG9pc2VzaGVsbGJyYWNrZXRsZWZ0c21hbGxcIiwgMHhmZTVkLCBcInRvcnRvaXNlc2hlbGxicmFja2V0bGVmdHZlcnRpY2FsXCIsIDB4ZmUzOSwgXCJ0b3J0b2lzZXNoZWxsYnJhY2tldHJpZ2h0XCIsIDB4MzAxNSwgXCJ0b3J0b2lzZXNoZWxsYnJhY2tldHJpZ2h0c21hbGxcIiwgMHhmZTVlLCBcInRvcnRvaXNlc2hlbGxicmFja2V0cmlnaHR2ZXJ0aWNhbFwiLCAweGZlM2EsIFwidG90YW90aGFpXCIsIDB4MGUxNSwgXCJ0cGFsYXRhbGhvb2tcIiwgMHgwMWFiLCBcInRwYXJlblwiLCAweDI0YWYsIFwidHJhZGVtYXJrXCIsIDB4MjEyMiwgXCJ0cmFkZW1hcmtzYW5zXCIsIDB4ZjhlYSwgXCJ0cmFkZW1hcmtzZXJpZlwiLCAweGY2ZGIsIFwidHJldHJvZmxleGhvb2tcIiwgMHgwMjg4LCBcInRyaWFnZG5cIiwgMHgyNWJjLCBcInRyaWFnbGZcIiwgMHgyNWM0LCBcInRyaWFncnRcIiwgMHgyNWJhLCBcInRyaWFndXBcIiwgMHgyNWIyLCBcInRzXCIsIDB4MDJhNiwgXCJ0c2FkaVwiLCAweDA1ZTYsIFwidHNhZGlkYWdlc2hcIiwgMHhmYjQ2LCBcInRzYWRpZGFnZXNoaGVicmV3XCIsIDB4ZmI0NiwgXCJ0c2FkaWhlYnJld1wiLCAweDA1ZTYsIFwidHNlY3lyaWxsaWNcIiwgMHgwNDQ2LCBcInRzZXJlXCIsIDB4MDViNSwgXCJ0c2VyZTEyXCIsIDB4MDViNSwgXCJ0c2VyZTFlXCIsIDB4MDViNSwgXCJ0c2VyZTJiXCIsIDB4MDViNSwgXCJ0c2VyZWhlYnJld1wiLCAweDA1YjUsIFwidHNlcmVuYXJyb3doZWJyZXdcIiwgMHgwNWI1LCBcInRzZXJlcXVhcnRlcmhlYnJld1wiLCAweDA1YjUsIFwidHNlcmV3aWRlaGVicmV3XCIsIDB4MDViNSwgXCJ0c2hlY3lyaWxsaWNcIiwgMHgwNDViLCBcInRzdXBlcmlvclwiLCAweGY2ZjMsIFwidHRhYmVuZ2FsaVwiLCAweDA5OWYsIFwidHRhZGV2YVwiLCAweDA5MWYsIFwidHRhZ3VqYXJhdGlcIiwgMHgwYTlmLCBcInR0YWd1cm11a2hpXCIsIDB4MGExZiwgXCJ0dGVoYXJhYmljXCIsIDB4MDY3OSwgXCJ0dGVoZmluYWxhcmFiaWNcIiwgMHhmYjY3LCBcInR0ZWhpbml0aWFsYXJhYmljXCIsIDB4ZmI2OCwgXCJ0dGVobWVkaWFsYXJhYmljXCIsIDB4ZmI2OSwgXCJ0dGhhYmVuZ2FsaVwiLCAweDA5YTAsIFwidHRoYWRldmFcIiwgMHgwOTIwLCBcInR0aGFndWphcmF0aVwiLCAweDBhYTAsIFwidHRoYWd1cm11a2hpXCIsIDB4MGEyMCwgXCJ0dHVybmVkXCIsIDB4MDI4NywgXCJ0dWhpcmFnYW5hXCIsIDB4MzA2NCwgXCJ0dWthdGFrYW5hXCIsIDB4MzBjNCwgXCJ0dWthdGFrYW5haGFsZndpZHRoXCIsIDB4ZmY4MiwgXCJ0dXNtYWxsaGlyYWdhbmFcIiwgMHgzMDYzLCBcInR1c21hbGxrYXRha2FuYVwiLCAweDMwYzMsIFwidHVzbWFsbGthdGFrYW5haGFsZndpZHRoXCIsIDB4ZmY2ZiwgXCJ0d2VsdmVjaXJjbGVcIiwgMHgyNDZiLCBcInR3ZWx2ZXBhcmVuXCIsIDB4MjQ3ZiwgXCJ0d2VsdmVwZXJpb2RcIiwgMHgyNDkzLCBcInR3ZWx2ZXJvbWFuXCIsIDB4MjE3YiwgXCJ0d2VudHljaXJjbGVcIiwgMHgyNDczLCBcInR3ZW50eWhhbmd6aG91XCIsIDB4NTM0NCwgXCJ0d2VudHlwYXJlblwiLCAweDI0ODcsIFwidHdlbnR5cGVyaW9kXCIsIDB4MjQ5YiwgXCJ0d29cIiwgMHgwMDMyLCBcInR3b2FyYWJpY1wiLCAweDA2NjIsIFwidHdvYmVuZ2FsaVwiLCAweDA5ZTgsIFwidHdvY2lyY2xlXCIsIDB4MjQ2MSwgXCJ0d29jaXJjbGVpbnZlcnNlc2Fuc3NlcmlmXCIsIDB4Mjc4YiwgXCJ0d29kZXZhXCIsIDB4MDk2OCwgXCJ0d29kb3RlbmxlYWRlclwiLCAweDIwMjUsIFwidHdvZG90bGVhZGVyXCIsIDB4MjAyNSwgXCJ0d29kb3RsZWFkZXJ2ZXJ0aWNhbFwiLCAweGZlMzAsIFwidHdvZ3VqYXJhdGlcIiwgMHgwYWU4LCBcInR3b2d1cm11a2hpXCIsIDB4MGE2OCwgXCJ0d29oYWNrYXJhYmljXCIsIDB4MDY2MiwgXCJ0d29oYW5nemhvdVwiLCAweDMwMjIsIFwidHdvaWRlb2dyYXBoaWNwYXJlblwiLCAweDMyMjEsIFwidHdvaW5mZXJpb3JcIiwgMHgyMDgyLCBcInR3b21vbm9zcGFjZVwiLCAweGZmMTIsIFwidHdvbnVtZXJhdG9yYmVuZ2FsaVwiLCAweDA5ZjUsIFwidHdvb2xkc3R5bGVcIiwgMHhmNzMyLCBcInR3b3BhcmVuXCIsIDB4MjQ3NSwgXCJ0d29wZXJpb2RcIiwgMHgyNDg5LCBcInR3b3BlcnNpYW5cIiwgMHgwNmYyLCBcInR3b3JvbWFuXCIsIDB4MjE3MSwgXCJ0d29zdHJva2VcIiwgMHgwMWJiLCBcInR3b3N1cGVyaW9yXCIsIDB4MDBiMiwgXCJ0d290aGFpXCIsIDB4MGU1MiwgXCJ0d290aGlyZHNcIiwgMHgyMTU0LCBcInVcIiwgMHgwMDc1LCBcInVhY3V0ZVwiLCAweDAwZmEsIFwidWJhclwiLCAweDAyODksIFwidWJlbmdhbGlcIiwgMHgwOTg5LCBcInVib3BvbW9mb1wiLCAweDMxMjgsIFwidWJyZXZlXCIsIDB4MDE2ZCwgXCJ1Y2Fyb25cIiwgMHgwMWQ0LCBcInVjaXJjbGVcIiwgMHgyNGU0LCBcInVjaXJjdW1mbGV4XCIsIDB4MDBmYiwgXCJ1Y2lyY3VtZmxleGJlbG93XCIsIDB4MWU3NywgXCJ1Y3lyaWxsaWNcIiwgMHgwNDQzLCBcInVkYXR0YWRldmFcIiwgMHgwOTUxLCBcInVkYmxhY3V0ZVwiLCAweDAxNzEsIFwidWRibGdyYXZlXCIsIDB4MDIxNSwgXCJ1ZGV2YVwiLCAweDA5MDksIFwidWRpZXJlc2lzXCIsIDB4MDBmYywgXCJ1ZGllcmVzaXNhY3V0ZVwiLCAweDAxZDgsIFwidWRpZXJlc2lzYmVsb3dcIiwgMHgxZTczLCBcInVkaWVyZXNpc2Nhcm9uXCIsIDB4MDFkYSwgXCJ1ZGllcmVzaXNjeXJpbGxpY1wiLCAweDA0ZjEsIFwidWRpZXJlc2lzZ3JhdmVcIiwgMHgwMWRjLCBcInVkaWVyZXNpc21hY3JvblwiLCAweDAxZDYsIFwidWRvdGJlbG93XCIsIDB4MWVlNSwgXCJ1Z3JhdmVcIiwgMHgwMGY5LCBcInVndWphcmF0aVwiLCAweDBhODksIFwidWd1cm11a2hpXCIsIDB4MGEwOSwgXCJ1aGlyYWdhbmFcIiwgMHgzMDQ2LCBcInVob29rYWJvdmVcIiwgMHgxZWU3LCBcInVob3JuXCIsIDB4MDFiMCwgXCJ1aG9ybmFjdXRlXCIsIDB4MWVlOSwgXCJ1aG9ybmRvdGJlbG93XCIsIDB4MWVmMSwgXCJ1aG9ybmdyYXZlXCIsIDB4MWVlYiwgXCJ1aG9ybmhvb2thYm92ZVwiLCAweDFlZWQsIFwidWhvcm50aWxkZVwiLCAweDFlZWYsIFwidWh1bmdhcnVtbGF1dFwiLCAweDAxNzEsIFwidWh1bmdhcnVtbGF1dGN5cmlsbGljXCIsIDB4MDRmMywgXCJ1aW52ZXJ0ZWRicmV2ZVwiLCAweDAyMTcsIFwidWthdGFrYW5hXCIsIDB4MzBhNiwgXCJ1a2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjczLCBcInVrY3lyaWxsaWNcIiwgMHgwNDc5LCBcInVrb3JlYW5cIiwgMHgzMTVjLCBcInVtYWNyb25cIiwgMHgwMTZiLCBcInVtYWNyb25jeXJpbGxpY1wiLCAweDA0ZWYsIFwidW1hY3JvbmRpZXJlc2lzXCIsIDB4MWU3YiwgXCJ1bWF0cmFndXJtdWtoaVwiLCAweDBhNDEsIFwidW1vbm9zcGFjZVwiLCAweGZmNTUsIFwidW5kZXJzY29yZVwiLCAweDAwNWYsIFwidW5kZXJzY29yZWRibFwiLCAweDIwMTcsIFwidW5kZXJzY29yZW1vbm9zcGFjZVwiLCAweGZmM2YsIFwidW5kZXJzY29yZXZlcnRpY2FsXCIsIDB4ZmUzMywgXCJ1bmRlcnNjb3Jld2F2eVwiLCAweGZlNGYsIFwidW5pb25cIiwgMHgyMjJhLCBcInVuaXZlcnNhbFwiLCAweDIyMDAsIFwidW9nb25la1wiLCAweDAxNzMsIFwidXBhcmVuXCIsIDB4MjRiMCwgXCJ1cGJsb2NrXCIsIDB4MjU4MCwgXCJ1cHBlcmRvdGhlYnJld1wiLCAweDA1YzQsIFwidXBzaWxvblwiLCAweDAzYzUsIFwidXBzaWxvbmRpZXJlc2lzXCIsIDB4MDNjYiwgXCJ1cHNpbG9uZGllcmVzaXN0b25vc1wiLCAweDAzYjAsIFwidXBzaWxvbmxhdGluXCIsIDB4MDI4YSwgXCJ1cHNpbG9udG9ub3NcIiwgMHgwM2NkLCBcInVwdGFja2JlbG93Y21iXCIsIDB4MDMxZCwgXCJ1cHRhY2ttb2RcIiwgMHgwMmQ0LCBcInVyYWd1cm11a2hpXCIsIDB4MGE3MywgXCJ1cmluZ1wiLCAweDAxNmYsIFwidXNob3J0Y3lyaWxsaWNcIiwgMHgwNDVlLCBcInVzbWFsbGhpcmFnYW5hXCIsIDB4MzA0NSwgXCJ1c21hbGxrYXRha2FuYVwiLCAweDMwYTUsIFwidXNtYWxsa2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjY5LCBcInVzdHJhaWdodGN5cmlsbGljXCIsIDB4MDRhZiwgXCJ1c3RyYWlnaHRzdHJva2VjeXJpbGxpY1wiLCAweDA0YjEsIFwidXRpbGRlXCIsIDB4MDE2OSwgXCJ1dGlsZGVhY3V0ZVwiLCAweDFlNzksIFwidXRpbGRlYmVsb3dcIiwgMHgxZTc1LCBcInV1YmVuZ2FsaVwiLCAweDA5OGEsIFwidXVkZXZhXCIsIDB4MDkwYSwgXCJ1dWd1amFyYXRpXCIsIDB4MGE4YSwgXCJ1dWd1cm11a2hpXCIsIDB4MGEwYSwgXCJ1dW1hdHJhZ3VybXVraGlcIiwgMHgwYTQyLCBcInV1dm93ZWxzaWduYmVuZ2FsaVwiLCAweDA5YzIsIFwidXV2b3dlbHNpZ25kZXZhXCIsIDB4MDk0MiwgXCJ1dXZvd2Vsc2lnbmd1amFyYXRpXCIsIDB4MGFjMiwgXCJ1dm93ZWxzaWduYmVuZ2FsaVwiLCAweDA5YzEsIFwidXZvd2Vsc2lnbmRldmFcIiwgMHgwOTQxLCBcInV2b3dlbHNpZ25ndWphcmF0aVwiLCAweDBhYzEsIFwidlwiLCAweDAwNzYsIFwidmFkZXZhXCIsIDB4MDkzNSwgXCJ2YWd1amFyYXRpXCIsIDB4MGFiNSwgXCJ2YWd1cm11a2hpXCIsIDB4MGEzNSwgXCJ2YWthdGFrYW5hXCIsIDB4MzBmNywgXCJ2YXZcIiwgMHgwNWQ1LCBcInZhdmRhZ2VzaFwiLCAweGZiMzUsIFwidmF2ZGFnZXNoNjVcIiwgMHhmYjM1LCBcInZhdmRhZ2VzaGhlYnJld1wiLCAweGZiMzUsIFwidmF2aGVicmV3XCIsIDB4MDVkNSwgXCJ2YXZob2xhbVwiLCAweGZiNGIsIFwidmF2aG9sYW1oZWJyZXdcIiwgMHhmYjRiLCBcInZhdnZhdmhlYnJld1wiLCAweDA1ZjAsIFwidmF2eW9kaGVicmV3XCIsIDB4MDVmMSwgXCJ2Y2lyY2xlXCIsIDB4MjRlNSwgXCJ2ZG90YmVsb3dcIiwgMHgxZTdmLCBcInZlY3lyaWxsaWNcIiwgMHgwNDMyLCBcInZlaGFyYWJpY1wiLCAweDA2YTQsIFwidmVoZmluYWxhcmFiaWNcIiwgMHhmYjZiLCBcInZlaGluaXRpYWxhcmFiaWNcIiwgMHhmYjZjLCBcInZlaG1lZGlhbGFyYWJpY1wiLCAweGZiNmQsIFwidmVrYXRha2FuYVwiLCAweDMwZjksIFwidmVudXNcIiwgMHgyNjQwLCBcInZlcnRpY2FsYmFyXCIsIDB4MDA3YywgXCJ2ZXJ0aWNhbGxpbmVhYm92ZWNtYlwiLCAweDAzMGQsIFwidmVydGljYWxsaW5lYmVsb3djbWJcIiwgMHgwMzI5LCBcInZlcnRpY2FsbGluZWxvd21vZFwiLCAweDAyY2MsIFwidmVydGljYWxsaW5lbW9kXCIsIDB4MDJjOCwgXCJ2ZXdhcm1lbmlhblwiLCAweDA1N2UsIFwidmhvb2tcIiwgMHgwMjhiLCBcInZpa2F0YWthbmFcIiwgMHgzMGY4LCBcInZpcmFtYWJlbmdhbGlcIiwgMHgwOWNkLCBcInZpcmFtYWRldmFcIiwgMHgwOTRkLCBcInZpcmFtYWd1amFyYXRpXCIsIDB4MGFjZCwgXCJ2aXNhcmdhYmVuZ2FsaVwiLCAweDA5ODMsIFwidmlzYXJnYWRldmFcIiwgMHgwOTAzLCBcInZpc2FyZ2FndWphcmF0aVwiLCAweDBhODMsIFwidm1vbm9zcGFjZVwiLCAweGZmNTYsIFwidm9hcm1lbmlhblwiLCAweDA1NzgsIFwidm9pY2VkaXRlcmF0aW9uaGlyYWdhbmFcIiwgMHgzMDllLCBcInZvaWNlZGl0ZXJhdGlvbmthdGFrYW5hXCIsIDB4MzBmZSwgXCJ2b2ljZWRtYXJra2FuYVwiLCAweDMwOWIsIFwidm9pY2VkbWFya2thbmFoYWxmd2lkdGhcIiwgMHhmZjllLCBcInZva2F0YWthbmFcIiwgMHgzMGZhLCBcInZwYXJlblwiLCAweDI0YjEsIFwidnRpbGRlXCIsIDB4MWU3ZCwgXCJ2dHVybmVkXCIsIDB4MDI4YywgXCJ2dWhpcmFnYW5hXCIsIDB4MzA5NCwgXCJ2dWthdGFrYW5hXCIsIDB4MzBmNCwgXCJ3XCIsIDB4MDA3NywgXCJ3YWN1dGVcIiwgMHgxZTgzLCBcIndhZWtvcmVhblwiLCAweDMxNTksIFwid2FoaXJhZ2FuYVwiLCAweDMwOGYsIFwid2FrYXRha2FuYVwiLCAweDMwZWYsIFwid2FrYXRha2FuYWhhbGZ3aWR0aFwiLCAweGZmOWMsIFwid2Frb3JlYW5cIiwgMHgzMTU4LCBcIndhc21hbGxoaXJhZ2FuYVwiLCAweDMwOGUsIFwid2FzbWFsbGthdGFrYW5hXCIsIDB4MzBlZSwgXCJ3YXR0b3NxdWFyZVwiLCAweDMzNTcsIFwid2F2ZWRhc2hcIiwgMHgzMDFjLCBcIndhdnl1bmRlcnNjb3JldmVydGljYWxcIiwgMHhmZTM0LCBcIndhd2FyYWJpY1wiLCAweDA2NDgsIFwid2F3ZmluYWxhcmFiaWNcIiwgMHhmZWVlLCBcIndhd2hhbXphYWJvdmVhcmFiaWNcIiwgMHgwNjI0LCBcIndhd2hhbXphYWJvdmVmaW5hbGFyYWJpY1wiLCAweGZlODYsIFwid2JzcXVhcmVcIiwgMHgzM2RkLCBcIndjaXJjbGVcIiwgMHgyNGU2LCBcIndjaXJjdW1mbGV4XCIsIDB4MDE3NSwgXCJ3ZGllcmVzaXNcIiwgMHgxZTg1LCBcIndkb3RhY2NlbnRcIiwgMHgxZTg3LCBcIndkb3RiZWxvd1wiLCAweDFlODksIFwid2VoaXJhZ2FuYVwiLCAweDMwOTEsIFwid2VpZXJzdHJhc3NcIiwgMHgyMTE4LCBcIndla2F0YWthbmFcIiwgMHgzMGYxLCBcIndla29yZWFuXCIsIDB4MzE1ZSwgXCJ3ZW9rb3JlYW5cIiwgMHgzMTVkLCBcIndncmF2ZVwiLCAweDFlODEsIFwid2hpdGVidWxsZXRcIiwgMHgyNWU2LCBcIndoaXRlY2lyY2xlXCIsIDB4MjVjYiwgXCJ3aGl0ZWNpcmNsZWludmVyc2VcIiwgMHgyNWQ5LCBcIndoaXRlY29ybmVyYnJhY2tldGxlZnRcIiwgMHgzMDBlLCBcIndoaXRlY29ybmVyYnJhY2tldGxlZnR2ZXJ0aWNhbFwiLCAweGZlNDMsIFwid2hpdGVjb3JuZXJicmFja2V0cmlnaHRcIiwgMHgzMDBmLCBcIndoaXRlY29ybmVyYnJhY2tldHJpZ2h0dmVydGljYWxcIiwgMHhmZTQ0LCBcIndoaXRlZGlhbW9uZFwiLCAweDI1YzcsIFwid2hpdGVkaWFtb25kY29udGFpbmluZ2JsYWNrc21hbGxkaWFtb25kXCIsIDB4MjVjOCwgXCJ3aGl0ZWRvd25wb2ludGluZ3NtYWxsdHJpYW5nbGVcIiwgMHgyNWJmLCBcIndoaXRlZG93bnBvaW50aW5ndHJpYW5nbGVcIiwgMHgyNWJkLCBcIndoaXRlbGVmdHBvaW50aW5nc21hbGx0cmlhbmdsZVwiLCAweDI1YzMsIFwid2hpdGVsZWZ0cG9pbnRpbmd0cmlhbmdsZVwiLCAweDI1YzEsIFwid2hpdGVsZW50aWN1bGFyYnJhY2tldGxlZnRcIiwgMHgzMDE2LCBcIndoaXRlbGVudGljdWxhcmJyYWNrZXRyaWdodFwiLCAweDMwMTcsIFwid2hpdGVyaWdodHBvaW50aW5nc21hbGx0cmlhbmdsZVwiLCAweDI1YjksIFwid2hpdGVyaWdodHBvaW50aW5ndHJpYW5nbGVcIiwgMHgyNWI3LCBcIndoaXRlc21hbGxzcXVhcmVcIiwgMHgyNWFiLCBcIndoaXRlc21pbGluZ2ZhY2VcIiwgMHgyNjNhLCBcIndoaXRlc3F1YXJlXCIsIDB4MjVhMSwgXCJ3aGl0ZXN0YXJcIiwgMHgyNjA2LCBcIndoaXRldGVsZXBob25lXCIsIDB4MjYwZiwgXCJ3aGl0ZXRvcnRvaXNlc2hlbGxicmFja2V0bGVmdFwiLCAweDMwMTgsIFwid2hpdGV0b3J0b2lzZXNoZWxsYnJhY2tldHJpZ2h0XCIsIDB4MzAxOSwgXCJ3aGl0ZXVwcG9pbnRpbmdzbWFsbHRyaWFuZ2xlXCIsIDB4MjViNSwgXCJ3aGl0ZXVwcG9pbnRpbmd0cmlhbmdsZVwiLCAweDI1YjMsIFwid2loaXJhZ2FuYVwiLCAweDMwOTAsIFwid2lrYXRha2FuYVwiLCAweDMwZjAsIFwid2lrb3JlYW5cIiwgMHgzMTVmLCBcIndtb25vc3BhY2VcIiwgMHhmZjU3LCBcIndvaGlyYWdhbmFcIiwgMHgzMDkyLCBcIndva2F0YWthbmFcIiwgMHgzMGYyLCBcIndva2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjY2LCBcIndvblwiLCAweDIwYTksIFwid29ubW9ub3NwYWNlXCIsIDB4ZmZlNiwgXCJ3b3dhZW50aGFpXCIsIDB4MGUyNywgXCJ3cGFyZW5cIiwgMHgyNGIyLCBcIndyaW5nXCIsIDB4MWU5OCwgXCJ3c3VwZXJpb3JcIiwgMHgwMmI3LCBcInd0dXJuZWRcIiwgMHgwMjhkLCBcInd5bm5cIiwgMHgwMWJmLCBcInhcIiwgMHgwMDc4LCBcInhhYm92ZWNtYlwiLCAweDAzM2QsIFwieGJvcG9tb2ZvXCIsIDB4MzExMiwgXCJ4Y2lyY2xlXCIsIDB4MjRlNywgXCJ4ZGllcmVzaXNcIiwgMHgxZThkLCBcInhkb3RhY2NlbnRcIiwgMHgxZThiLCBcInhlaGFybWVuaWFuXCIsIDB4MDU2ZCwgXCJ4aVwiLCAweDAzYmUsIFwieG1vbm9zcGFjZVwiLCAweGZmNTgsIFwieHBhcmVuXCIsIDB4MjRiMywgXCJ4c3VwZXJpb3JcIiwgMHgwMmUzLCBcInlcIiwgMHgwMDc5LCBcInlhYWRvc3F1YXJlXCIsIDB4MzM0ZSwgXCJ5YWJlbmdhbGlcIiwgMHgwOWFmLCBcInlhY3V0ZVwiLCAweDAwZmQsIFwieWFkZXZhXCIsIDB4MDkyZiwgXCJ5YWVrb3JlYW5cIiwgMHgzMTUyLCBcInlhZ3VqYXJhdGlcIiwgMHgwYWFmLCBcInlhZ3VybXVraGlcIiwgMHgwYTJmLCBcInlhaGlyYWdhbmFcIiwgMHgzMDg0LCBcInlha2F0YWthbmFcIiwgMHgzMGU0LCBcInlha2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjk0LCBcInlha29yZWFuXCIsIDB4MzE1MSwgXCJ5YW1ha2thbnRoYWlcIiwgMHgwZTRlLCBcInlhc21hbGxoaXJhZ2FuYVwiLCAweDMwODMsIFwieWFzbWFsbGthdGFrYW5hXCIsIDB4MzBlMywgXCJ5YXNtYWxsa2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjZjLCBcInlhdGN5cmlsbGljXCIsIDB4MDQ2MywgXCJ5Y2lyY2xlXCIsIDB4MjRlOCwgXCJ5Y2lyY3VtZmxleFwiLCAweDAxNzcsIFwieWRpZXJlc2lzXCIsIDB4MDBmZiwgXCJ5ZG90YWNjZW50XCIsIDB4MWU4ZiwgXCJ5ZG90YmVsb3dcIiwgMHgxZWY1LCBcInllaGFyYWJpY1wiLCAweDA2NGEsIFwieWVoYmFycmVlYXJhYmljXCIsIDB4MDZkMiwgXCJ5ZWhiYXJyZWVmaW5hbGFyYWJpY1wiLCAweGZiYWYsIFwieWVoZmluYWxhcmFiaWNcIiwgMHhmZWYyLCBcInllaGhhbXphYWJvdmVhcmFiaWNcIiwgMHgwNjI2LCBcInllaGhhbXphYWJvdmVmaW5hbGFyYWJpY1wiLCAweGZlOGEsIFwieWVoaGFtemFhYm92ZWluaXRpYWxhcmFiaWNcIiwgMHhmZThiLCBcInllaGhhbXphYWJvdmVtZWRpYWxhcmFiaWNcIiwgMHhmZThjLCBcInllaGluaXRpYWxhcmFiaWNcIiwgMHhmZWYzLCBcInllaG1lZGlhbGFyYWJpY1wiLCAweGZlZjQsIFwieWVobWVlbWluaXRpYWxhcmFiaWNcIiwgMHhmY2RkLCBcInllaG1lZW1pc29sYXRlZGFyYWJpY1wiLCAweGZjNTgsIFwieWVobm9vbmZpbmFsYXJhYmljXCIsIDB4ZmM5NCwgXCJ5ZWh0aHJlZWRvdHNiZWxvd2FyYWJpY1wiLCAweDA2ZDEsIFwieWVrb3JlYW5cIiwgMHgzMTU2LCBcInllblwiLCAweDAwYTUsIFwieWVubW9ub3NwYWNlXCIsIDB4ZmZlNSwgXCJ5ZW9rb3JlYW5cIiwgMHgzMTU1LCBcInllb3JpbmhpZXVoa29yZWFuXCIsIDB4MzE4NiwgXCJ5ZXJhaGJlbnlvbW9oZWJyZXdcIiwgMHgwNWFhLCBcInllcmFoYmVueW9tb2xlZnRoZWJyZXdcIiwgMHgwNWFhLCBcInllcmljeXJpbGxpY1wiLCAweDA0NGIsIFwieWVydWRpZXJlc2lzY3lyaWxsaWNcIiwgMHgwNGY5LCBcInllc2lldW5na29yZWFuXCIsIDB4MzE4MSwgXCJ5ZXNpZXVuZ3BhbnNpb3Nrb3JlYW5cIiwgMHgzMTgzLCBcInllc2lldW5nc2lvc2tvcmVhblwiLCAweDMxODIsIFwieWV0aXZoZWJyZXdcIiwgMHgwNTlhLCBcInlncmF2ZVwiLCAweDFlZjMsIFwieWhvb2tcIiwgMHgwMWI0LCBcInlob29rYWJvdmVcIiwgMHgxZWY3LCBcInlpYXJtZW5pYW5cIiwgMHgwNTc1LCBcInlpY3lyaWxsaWNcIiwgMHgwNDU3LCBcInlpa29yZWFuXCIsIDB4MzE2MiwgXCJ5aW55YW5nXCIsIDB4MjYyZiwgXCJ5aXduYXJtZW5pYW5cIiwgMHgwNTgyLCBcInltb25vc3BhY2VcIiwgMHhmZjU5LCBcInlvZFwiLCAweDA1ZDksIFwieW9kZGFnZXNoXCIsIDB4ZmIzOSwgXCJ5b2RkYWdlc2hoZWJyZXdcIiwgMHhmYjM5LCBcInlvZGhlYnJld1wiLCAweDA1ZDksIFwieW9keW9kaGVicmV3XCIsIDB4MDVmMiwgXCJ5b2R5b2RwYXRhaGhlYnJld1wiLCAweGZiMWYsIFwieW9oaXJhZ2FuYVwiLCAweDMwODgsIFwieW9pa29yZWFuXCIsIDB4MzE4OSwgXCJ5b2thdGFrYW5hXCIsIDB4MzBlOCwgXCJ5b2thdGFrYW5haGFsZndpZHRoXCIsIDB4ZmY5NiwgXCJ5b2tvcmVhblwiLCAweDMxNWIsIFwieW9zbWFsbGhpcmFnYW5hXCIsIDB4MzA4NywgXCJ5b3NtYWxsa2F0YWthbmFcIiwgMHgzMGU3LCBcInlvc21hbGxrYXRha2FuYWhhbGZ3aWR0aFwiLCAweGZmNmUsIFwieW90Z3JlZWtcIiwgMHgwM2YzLCBcInlveWFla29yZWFuXCIsIDB4MzE4OCwgXCJ5b3lha29yZWFuXCIsIDB4MzE4NywgXCJ5b3lha3RoYWlcIiwgMHgwZTIyLCBcInlveWluZ3RoYWlcIiwgMHgwZTBkLCBcInlwYXJlblwiLCAweDI0YjQsIFwieXBvZ2VncmFtbWVuaVwiLCAweDAzN2EsIFwieXBvZ2VncmFtbWVuaWdyZWVrY21iXCIsIDB4MDM0NSwgXCJ5clwiLCAweDAxYTYsIFwieXJpbmdcIiwgMHgxZTk5LCBcInlzdXBlcmlvclwiLCAweDAyYjgsIFwieXRpbGRlXCIsIDB4MWVmOSwgXCJ5dHVybmVkXCIsIDB4MDI4ZSwgXCJ5dWhpcmFnYW5hXCIsIDB4MzA4NiwgXCJ5dWlrb3JlYW5cIiwgMHgzMThjLCBcInl1a2F0YWthbmFcIiwgMHgzMGU2LCBcInl1a2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjk1LCBcInl1a29yZWFuXCIsIDB4MzE2MCwgXCJ5dXNiaWdjeXJpbGxpY1wiLCAweDA0NmIsIFwieXVzYmlnaW90aWZpZWRjeXJpbGxpY1wiLCAweDA0NmQsIFwieXVzbGl0dGxlY3lyaWxsaWNcIiwgMHgwNDY3LCBcInl1c2xpdHRsZWlvdGlmaWVkY3lyaWxsaWNcIiwgMHgwNDY5LCBcInl1c21hbGxoaXJhZ2FuYVwiLCAweDMwODUsIFwieXVzbWFsbGthdGFrYW5hXCIsIDB4MzBlNSwgXCJ5dXNtYWxsa2F0YWthbmFoYWxmd2lkdGhcIiwgMHhmZjZkLCBcInl1eWVrb3JlYW5cIiwgMHgzMThiLCBcInl1eWVva29yZWFuXCIsIDB4MzE4YSwgXCJ5eWFiZW5nYWxpXCIsIDB4MDlkZiwgXCJ5eWFkZXZhXCIsIDB4MDk1ZiwgXCJ6XCIsIDB4MDA3YSwgXCJ6YWFybWVuaWFuXCIsIDB4MDU2NiwgXCJ6YWN1dGVcIiwgMHgwMTdhLCBcInphZGV2YVwiLCAweDA5NWIsIFwiemFndXJtdWtoaVwiLCAweDBhNWIsIFwiemFoYXJhYmljXCIsIDB4MDYzOCwgXCJ6YWhmaW5hbGFyYWJpY1wiLCAweGZlYzYsIFwiemFoaW5pdGlhbGFyYWJpY1wiLCAweGZlYzcsIFwiemFoaXJhZ2FuYVwiLCAweDMwNTYsIFwiemFobWVkaWFsYXJhYmljXCIsIDB4ZmVjOCwgXCJ6YWluYXJhYmljXCIsIDB4MDYzMiwgXCJ6YWluZmluYWxhcmFiaWNcIiwgMHhmZWIwLCBcInpha2F0YWthbmFcIiwgMHgzMGI2LCBcInphcWVmZ2Fkb2xoZWJyZXdcIiwgMHgwNTk1LCBcInphcWVmcWF0YW5oZWJyZXdcIiwgMHgwNTk0LCBcInphcnFhaGVicmV3XCIsIDB4MDU5OCwgXCJ6YXlpblwiLCAweDA1ZDYsIFwiemF5aW5kYWdlc2hcIiwgMHhmYjM2LCBcInpheWluZGFnZXNoaGVicmV3XCIsIDB4ZmIzNiwgXCJ6YXlpbmhlYnJld1wiLCAweDA1ZDYsIFwiemJvcG9tb2ZvXCIsIDB4MzExNywgXCJ6Y2Fyb25cIiwgMHgwMTdlLCBcInpjaXJjbGVcIiwgMHgyNGU5LCBcInpjaXJjdW1mbGV4XCIsIDB4MWU5MSwgXCJ6Y3VybFwiLCAweDAyOTEsIFwiemRvdFwiLCAweDAxN2MsIFwiemRvdGFjY2VudFwiLCAweDAxN2MsIFwiemRvdGJlbG93XCIsIDB4MWU5MywgXCJ6ZWN5cmlsbGljXCIsIDB4MDQzNywgXCJ6ZWRlc2NlbmRlcmN5cmlsbGljXCIsIDB4MDQ5OSwgXCJ6ZWRpZXJlc2lzY3lyaWxsaWNcIiwgMHgwNGRmLCBcInplaGlyYWdhbmFcIiwgMHgzMDVjLCBcInpla2F0YWthbmFcIiwgMHgzMGJjLCBcInplcm9cIiwgMHgwMDMwLCBcInplcm9hcmFiaWNcIiwgMHgwNjYwLCBcInplcm9iZW5nYWxpXCIsIDB4MDllNiwgXCJ6ZXJvZGV2YVwiLCAweDA5NjYsIFwiemVyb2d1amFyYXRpXCIsIDB4MGFlNiwgXCJ6ZXJvZ3VybXVraGlcIiwgMHgwYTY2LCBcInplcm9oYWNrYXJhYmljXCIsIDB4MDY2MCwgXCJ6ZXJvaW5mZXJpb3JcIiwgMHgyMDgwLCBcInplcm9tb25vc3BhY2VcIiwgMHhmZjEwLCBcInplcm9vbGRzdHlsZVwiLCAweGY3MzAsIFwiemVyb3BlcnNpYW5cIiwgMHgwNmYwLCBcInplcm9zdXBlcmlvclwiLCAweDIwNzAsIFwiemVyb3RoYWlcIiwgMHgwZTUwLCBcInplcm93aWR0aGpvaW5lclwiLCAweGZlZmYsIFwiemVyb3dpZHRobm9uam9pbmVyXCIsIDB4MjAwYywgXCJ6ZXJvd2lkdGhzcGFjZVwiLCAweDIwMGIsIFwiemV0YVwiLCAweDAzYjYsIFwiemhib3BvbW9mb1wiLCAweDMxMTMsIFwiemhlYXJtZW5pYW5cIiwgMHgwNTZhLCBcInpoZWJyZXZlY3lyaWxsaWNcIiwgMHgwNGMyLCBcInpoZWN5cmlsbGljXCIsIDB4MDQzNiwgXCJ6aGVkZXNjZW5kZXJjeXJpbGxpY1wiLCAweDA0OTcsIFwiemhlZGllcmVzaXNjeXJpbGxpY1wiLCAweDA0ZGQsIFwiemloaXJhZ2FuYVwiLCAweDMwNTgsIFwiemlrYXRha2FuYVwiLCAweDMwYjgsIFwiemlub3JoZWJyZXdcIiwgMHgwNWFlLCBcInpsaW5lYmVsb3dcIiwgMHgxZTk1LCBcInptb25vc3BhY2VcIiwgMHhmZjVhLCBcInpvaGlyYWdhbmFcIiwgMHgzMDVlLCBcInpva2F0YWthbmFcIiwgMHgzMGJlLCBcInpwYXJlblwiLCAweDI0YjUsIFwienJldHJvZmxleGhvb2tcIiwgMHgwMjkwLCBcInpzdHJva2VcIiwgMHgwMWI2LCBcInp1aGlyYWdhbmFcIiwgMHgzMDVhLCBcInp1a2F0YWthbmFcIiwgMHgzMGJhLCBcIi5ub3RkZWZcIiwgMHgwMDAwLCBcImFuZ2JyYWNrZXRsZWZ0YmlnXCIsIDB4MjMyOSwgXCJhbmdicmFja2V0bGVmdEJpZ1wiLCAweDIzMjksIFwiYW5nYnJhY2tldGxlZnRiaWdnXCIsIDB4MjMyOSwgXCJhbmdicmFja2V0bGVmdEJpZ2dcIiwgMHgyMzI5LCBcImFuZ2JyYWNrZXRyaWdodEJpZ1wiLCAweDIzMmEsIFwiYW5nYnJhY2tldHJpZ2h0YmlnXCIsIDB4MjMyYSwgXCJhbmdicmFja2V0cmlnaHRCaWdnXCIsIDB4MjMyYSwgXCJhbmdicmFja2V0cmlnaHRiaWdnXCIsIDB4MjMyYSwgXCJhcnJvd2hvb2tsZWZ0XCIsIDB4MjFhYSwgXCJhcnJvd2hvb2tyaWdodFwiLCAweDIxYTksIFwiYXJyb3dsZWZ0dG9waGFsZlwiLCAweDIxYmMsIFwiYXJyb3dsZWZ0Ym90aGFsZlwiLCAweDIxYmQsIFwiYXJyb3dub3J0aGVhc3RcIiwgMHgyMTk3LCBcImFycm93bm9ydGh3ZXN0XCIsIDB4MjE5NiwgXCJhcnJvd3JpZ2h0dG9waGFsZlwiLCAweDIxYzAsIFwiYXJyb3dyaWdodGJvdGhhbGZcIiwgMHgyMWMxLCBcImFycm93c291dGhlYXN0XCIsIDB4MjE5OCwgXCJhcnJvd3NvdXRod2VzdFwiLCAweDIxOTksIFwiYmFja3NsYXNoYmlnXCIsIDB4MjIxNiwgXCJiYWNrc2xhc2hCaWdcIiwgMHgyMjE2LCBcImJhY2tzbGFzaEJpZ2dcIiwgMHgyMjE2LCBcImJhY2tzbGFzaGJpZ2dcIiwgMHgyMjE2LCBcImJhcmRibFwiLCAweDIwMTYsIFwiYnJhY2VodGlwZG93bmxlZnRcIiwgMHhmZTM3LCBcImJyYWNlaHRpcGRvd25yaWdodFwiLCAweGZlMzcsIFwiYnJhY2VodGlwdXBsZWZ0XCIsIDB4ZmUzOCwgXCJicmFjZWh0aXB1cHJpZ2h0XCIsIDB4ZmUzOCwgXCJicmFjZWxlZnRCaWdcIiwgMHgwMDdiLCBcImJyYWNlbGVmdGJpZ1wiLCAweDAwN2IsIFwiYnJhY2VsZWZ0YmlnZ1wiLCAweDAwN2IsIFwiYnJhY2VsZWZ0QmlnZ1wiLCAweDAwN2IsIFwiYnJhY2VyaWdodEJpZ1wiLCAweDAwN2QsIFwiYnJhY2VyaWdodGJpZ1wiLCAweDAwN2QsIFwiYnJhY2VyaWdodGJpZ2dcIiwgMHgwMDdkLCBcImJyYWNlcmlnaHRCaWdnXCIsIDB4MDA3ZCwgXCJicmFja2V0bGVmdGJpZ1wiLCAweDAwNWIsIFwiYnJhY2tldGxlZnRCaWdcIiwgMHgwMDViLCBcImJyYWNrZXRsZWZ0YmlnZ1wiLCAweDAwNWIsIFwiYnJhY2tldGxlZnRCaWdnXCIsIDB4MDA1YiwgXCJicmFja2V0cmlnaHRCaWdcIiwgMHgwMDVkLCBcImJyYWNrZXRyaWdodGJpZ1wiLCAweDAwNWQsIFwiYnJhY2tldHJpZ2h0YmlnZ1wiLCAweDAwNWQsIFwiYnJhY2tldHJpZ2h0QmlnZ1wiLCAweDAwNWQsIFwiY2VpbGluZ2xlZnRiaWdcIiwgMHgyMzA4LCBcImNlaWxpbmdsZWZ0QmlnXCIsIDB4MjMwOCwgXCJjZWlsaW5nbGVmdEJpZ2dcIiwgMHgyMzA4LCBcImNlaWxpbmdsZWZ0YmlnZ1wiLCAweDIzMDgsIFwiY2VpbGluZ3JpZ2h0YmlnXCIsIDB4MjMwOSwgXCJjZWlsaW5ncmlnaHRCaWdcIiwgMHgyMzA5LCBcImNlaWxpbmdyaWdodGJpZ2dcIiwgMHgyMzA5LCBcImNlaWxpbmdyaWdodEJpZ2dcIiwgMHgyMzA5LCBcImNpcmNsZWRvdGRpc3BsYXlcIiwgMHgyMjk5LCBcImNpcmNsZWRvdHRleHRcIiwgMHgyMjk5LCBcImNpcmNsZW11bHRpcGx5ZGlzcGxheVwiLCAweDIyOTcsIFwiY2lyY2xlbXVsdGlwbHl0ZXh0XCIsIDB4MjI5NywgXCJjaXJjbGVwbHVzZGlzcGxheVwiLCAweDIyOTUsIFwiY2lyY2xlcGx1c3RleHRcIiwgMHgyMjk1LCBcImNvbnRpbnRlZ3JhbGRpc3BsYXlcIiwgMHgyMjJlLCBcImNvbnRpbnRlZ3JhbHRleHRcIiwgMHgyMjJlLCBcImNvcHJvZHVjdGRpc3BsYXlcIiwgMHgyMjEwLCBcImNvcHJvZHVjdHRleHRcIiwgMHgyMjEwLCBcImZsb29ybGVmdEJpZ1wiLCAweDIzMGEsIFwiZmxvb3JsZWZ0YmlnXCIsIDB4MjMwYSwgXCJmbG9vcmxlZnRiaWdnXCIsIDB4MjMwYSwgXCJmbG9vcmxlZnRCaWdnXCIsIDB4MjMwYSwgXCJmbG9vcnJpZ2h0YmlnXCIsIDB4MjMwYiwgXCJmbG9vcnJpZ2h0QmlnXCIsIDB4MjMwYiwgXCJmbG9vcnJpZ2h0QmlnZ1wiLCAweDIzMGIsIFwiZmxvb3JyaWdodGJpZ2dcIiwgMHgyMzBiLCBcImhhdHdpZGVcIiwgMHgwMzAyLCBcImhhdHdpZGVyXCIsIDB4MDMwMiwgXCJoYXR3aWRlc3RcIiwgMHgwMzAyLCBcImludGVyY2FsXCIsIDB4MWQ0MCwgXCJpbnRlZ3JhbGRpc3BsYXlcIiwgMHgyMjJiLCBcImludGVncmFsdGV4dFwiLCAweDIyMmIsIFwiaW50ZXJzZWN0aW9uZGlzcGxheVwiLCAweDIyYzIsIFwiaW50ZXJzZWN0aW9udGV4dFwiLCAweDIyYzIsIFwibG9naWNhbGFuZGRpc3BsYXlcIiwgMHgyMjI3LCBcImxvZ2ljYWxhbmR0ZXh0XCIsIDB4MjIyNywgXCJsb2dpY2Fsb3JkaXNwbGF5XCIsIDB4MjIyOCwgXCJsb2dpY2Fsb3J0ZXh0XCIsIDB4MjIyOCwgXCJwYXJlbmxlZnRCaWdcIiwgMHgwMDI4LCBcInBhcmVubGVmdGJpZ1wiLCAweDAwMjgsIFwicGFyZW5sZWZ0QmlnZ1wiLCAweDAwMjgsIFwicGFyZW5sZWZ0YmlnZ1wiLCAweDAwMjgsIFwicGFyZW5yaWdodEJpZ1wiLCAweDAwMjksIFwicGFyZW5yaWdodGJpZ1wiLCAweDAwMjksIFwicGFyZW5yaWdodEJpZ2dcIiwgMHgwMDI5LCBcInBhcmVucmlnaHRiaWdnXCIsIDB4MDAyOSwgXCJwcmltZVwiLCAweDIwMzIsIFwicHJvZHVjdGRpc3BsYXlcIiwgMHgyMjBmLCBcInByb2R1Y3R0ZXh0XCIsIDB4MjIwZiwgXCJyYWRpY2FsYmlnXCIsIDB4MjIxYSwgXCJyYWRpY2FsQmlnXCIsIDB4MjIxYSwgXCJyYWRpY2FsQmlnZ1wiLCAweDIyMWEsIFwicmFkaWNhbGJpZ2dcIiwgMHgyMjFhLCBcInJhZGljYWxidFwiLCAweDIyMWEsIFwicmFkaWNhbHRwXCIsIDB4MjIxYSwgXCJyYWRpY2FsdmVydGV4XCIsIDB4MjIxYSwgXCJzbGFzaGJpZ1wiLCAweDAwMmYsIFwic2xhc2hCaWdcIiwgMHgwMDJmLCBcInNsYXNoQmlnZ1wiLCAweDAwMmYsIFwic2xhc2hiaWdnXCIsIDB4MDAyZiwgXCJzdW1tYXRpb25kaXNwbGF5XCIsIDB4MjIxMSwgXCJzdW1tYXRpb250ZXh0XCIsIDB4MjIxMSwgXCJ0aWxkZXdpZGVcIiwgMHgwMmRjLCBcInRpbGRld2lkZXJcIiwgMHgwMmRjLCBcInRpbGRld2lkZXN0XCIsIDB4MDJkYywgXCJ1bmlvbmRpc3BsYXlcIiwgMHgyMmMzLCBcInVuaW9ubXVsdGlkaXNwbGF5XCIsIDB4MjI4ZSwgXCJ1bmlvbm11bHRpdGV4dFwiLCAweDIyOGUsIFwidW5pb25zcWRpc3BsYXlcIiwgMHgyMjk0LCBcInVuaW9uc3F0ZXh0XCIsIDB4MjI5NCwgXCJ1bmlvbnRleHRcIiwgMHgyMmMzLCBcInZleHRlbmRkb3VibGVcIiwgMHgyMjI1LCBcInZleHRlbmRzaW5nbGVcIiwgMHgyMjIzXTtcbn0pO1xuZXhwb3J0cy5nZXRHbHlwaHNVbmljb2RlID0gZ2V0R2x5cGhzVW5pY29kZTtcbnZhciBnZXREaW5nYmF0c0dseXBoc1VuaWNvZGUgPSAoMCwgX2NvcmVfdXRpbHMuZ2V0QXJyYXlMb29rdXBUYWJsZUZhY3RvcnkpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFtcInNwYWNlXCIsIDB4MDAyMCwgXCJhMVwiLCAweDI3MDEsIFwiYTJcIiwgMHgyNzAyLCBcImEyMDJcIiwgMHgyNzAzLCBcImEzXCIsIDB4MjcwNCwgXCJhNFwiLCAweDI2MGUsIFwiYTVcIiwgMHgyNzA2LCBcImExMTlcIiwgMHgyNzA3LCBcImExMThcIiwgMHgyNzA4LCBcImExMTdcIiwgMHgyNzA5LCBcImExMVwiLCAweDI2MWIsIFwiYTEyXCIsIDB4MjYxZSwgXCJhMTNcIiwgMHgyNzBjLCBcImExNFwiLCAweDI3MGQsIFwiYTE1XCIsIDB4MjcwZSwgXCJhMTZcIiwgMHgyNzBmLCBcImExMDVcIiwgMHgyNzEwLCBcImExN1wiLCAweDI3MTEsIFwiYTE4XCIsIDB4MjcxMiwgXCJhMTlcIiwgMHgyNzEzLCBcImEyMFwiLCAweDI3MTQsIFwiYTIxXCIsIDB4MjcxNSwgXCJhMjJcIiwgMHgyNzE2LCBcImEyM1wiLCAweDI3MTcsIFwiYTI0XCIsIDB4MjcxOCwgXCJhMjVcIiwgMHgyNzE5LCBcImEyNlwiLCAweDI3MWEsIFwiYTI3XCIsIDB4MjcxYiwgXCJhMjhcIiwgMHgyNzFjLCBcImE2XCIsIDB4MjcxZCwgXCJhN1wiLCAweDI3MWUsIFwiYThcIiwgMHgyNzFmLCBcImE5XCIsIDB4MjcyMCwgXCJhMTBcIiwgMHgyNzIxLCBcImEyOVwiLCAweDI3MjIsIFwiYTMwXCIsIDB4MjcyMywgXCJhMzFcIiwgMHgyNzI0LCBcImEzMlwiLCAweDI3MjUsIFwiYTMzXCIsIDB4MjcyNiwgXCJhMzRcIiwgMHgyNzI3LCBcImEzNVwiLCAweDI2MDUsIFwiYTM2XCIsIDB4MjcyOSwgXCJhMzdcIiwgMHgyNzJhLCBcImEzOFwiLCAweDI3MmIsIFwiYTM5XCIsIDB4MjcyYywgXCJhNDBcIiwgMHgyNzJkLCBcImE0MVwiLCAweDI3MmUsIFwiYTQyXCIsIDB4MjcyZiwgXCJhNDNcIiwgMHgyNzMwLCBcImE0NFwiLCAweDI3MzEsIFwiYTQ1XCIsIDB4MjczMiwgXCJhNDZcIiwgMHgyNzMzLCBcImE0N1wiLCAweDI3MzQsIFwiYTQ4XCIsIDB4MjczNSwgXCJhNDlcIiwgMHgyNzM2LCBcImE1MFwiLCAweDI3MzcsIFwiYTUxXCIsIDB4MjczOCwgXCJhNTJcIiwgMHgyNzM5LCBcImE1M1wiLCAweDI3M2EsIFwiYTU0XCIsIDB4MjczYiwgXCJhNTVcIiwgMHgyNzNjLCBcImE1NlwiLCAweDI3M2QsIFwiYTU3XCIsIDB4MjczZSwgXCJhNThcIiwgMHgyNzNmLCBcImE1OVwiLCAweDI3NDAsIFwiYTYwXCIsIDB4Mjc0MSwgXCJhNjFcIiwgMHgyNzQyLCBcImE2MlwiLCAweDI3NDMsIFwiYTYzXCIsIDB4Mjc0NCwgXCJhNjRcIiwgMHgyNzQ1LCBcImE2NVwiLCAweDI3NDYsIFwiYTY2XCIsIDB4Mjc0NywgXCJhNjdcIiwgMHgyNzQ4LCBcImE2OFwiLCAweDI3NDksIFwiYTY5XCIsIDB4Mjc0YSwgXCJhNzBcIiwgMHgyNzRiLCBcImE3MVwiLCAweDI1Y2YsIFwiYTcyXCIsIDB4Mjc0ZCwgXCJhNzNcIiwgMHgyNWEwLCBcImE3NFwiLCAweDI3NGYsIFwiYTIwM1wiLCAweDI3NTAsIFwiYTc1XCIsIDB4Mjc1MSwgXCJhMjA0XCIsIDB4Mjc1MiwgXCJhNzZcIiwgMHgyNWIyLCBcImE3N1wiLCAweDI1YmMsIFwiYTc4XCIsIDB4MjVjNiwgXCJhNzlcIiwgMHgyNzU2LCBcImE4MVwiLCAweDI1ZDcsIFwiYTgyXCIsIDB4Mjc1OCwgXCJhODNcIiwgMHgyNzU5LCBcImE4NFwiLCAweDI3NWEsIFwiYTk3XCIsIDB4Mjc1YiwgXCJhOThcIiwgMHgyNzVjLCBcImE5OVwiLCAweDI3NWQsIFwiYTEwMFwiLCAweDI3NWUsIFwiYTEwMVwiLCAweDI3NjEsIFwiYTEwMlwiLCAweDI3NjIsIFwiYTEwM1wiLCAweDI3NjMsIFwiYTEwNFwiLCAweDI3NjQsIFwiYTEwNlwiLCAweDI3NjUsIFwiYTEwN1wiLCAweDI3NjYsIFwiYTEwOFwiLCAweDI3NjcsIFwiYTExMlwiLCAweDI2NjMsIFwiYTExMVwiLCAweDI2NjYsIFwiYTExMFwiLCAweDI2NjUsIFwiYTEwOVwiLCAweDI2NjAsIFwiYTEyMFwiLCAweDI0NjAsIFwiYTEyMVwiLCAweDI0NjEsIFwiYTEyMlwiLCAweDI0NjIsIFwiYTEyM1wiLCAweDI0NjMsIFwiYTEyNFwiLCAweDI0NjQsIFwiYTEyNVwiLCAweDI0NjUsIFwiYTEyNlwiLCAweDI0NjYsIFwiYTEyN1wiLCAweDI0NjcsIFwiYTEyOFwiLCAweDI0NjgsIFwiYTEyOVwiLCAweDI0NjksIFwiYTEzMFwiLCAweDI3NzYsIFwiYTEzMVwiLCAweDI3NzcsIFwiYTEzMlwiLCAweDI3NzgsIFwiYTEzM1wiLCAweDI3NzksIFwiYTEzNFwiLCAweDI3N2EsIFwiYTEzNVwiLCAweDI3N2IsIFwiYTEzNlwiLCAweDI3N2MsIFwiYTEzN1wiLCAweDI3N2QsIFwiYTEzOFwiLCAweDI3N2UsIFwiYTEzOVwiLCAweDI3N2YsIFwiYTE0MFwiLCAweDI3ODAsIFwiYTE0MVwiLCAweDI3ODEsIFwiYTE0MlwiLCAweDI3ODIsIFwiYTE0M1wiLCAweDI3ODMsIFwiYTE0NFwiLCAweDI3ODQsIFwiYTE0NVwiLCAweDI3ODUsIFwiYTE0NlwiLCAweDI3ODYsIFwiYTE0N1wiLCAweDI3ODcsIFwiYTE0OFwiLCAweDI3ODgsIFwiYTE0OVwiLCAweDI3ODksIFwiYTE1MFwiLCAweDI3OGEsIFwiYTE1MVwiLCAweDI3OGIsIFwiYTE1MlwiLCAweDI3OGMsIFwiYTE1M1wiLCAweDI3OGQsIFwiYTE1NFwiLCAweDI3OGUsIFwiYTE1NVwiLCAweDI3OGYsIFwiYTE1NlwiLCAweDI3OTAsIFwiYTE1N1wiLCAweDI3OTEsIFwiYTE1OFwiLCAweDI3OTIsIFwiYTE1OVwiLCAweDI3OTMsIFwiYTE2MFwiLCAweDI3OTQsIFwiYTE2MVwiLCAweDIxOTIsIFwiYTE2M1wiLCAweDIxOTQsIFwiYTE2NFwiLCAweDIxOTUsIFwiYTE5NlwiLCAweDI3OTgsIFwiYTE2NVwiLCAweDI3OTksIFwiYTE5MlwiLCAweDI3OWEsIFwiYTE2NlwiLCAweDI3OWIsIFwiYTE2N1wiLCAweDI3OWMsIFwiYTE2OFwiLCAweDI3OWQsIFwiYTE2OVwiLCAweDI3OWUsIFwiYTE3MFwiLCAweDI3OWYsIFwiYTE3MVwiLCAweDI3YTAsIFwiYTE3MlwiLCAweDI3YTEsIFwiYTE3M1wiLCAweDI3YTIsIFwiYTE2MlwiLCAweDI3YTMsIFwiYTE3NFwiLCAweDI3YTQsIFwiYTE3NVwiLCAweDI3YTUsIFwiYTE3NlwiLCAweDI3YTYsIFwiYTE3N1wiLCAweDI3YTcsIFwiYTE3OFwiLCAweDI3YTgsIFwiYTE3OVwiLCAweDI3YTksIFwiYTE5M1wiLCAweDI3YWEsIFwiYTE4MFwiLCAweDI3YWIsIFwiYTE5OVwiLCAweDI3YWMsIFwiYTE4MVwiLCAweDI3YWQsIFwiYTIwMFwiLCAweDI3YWUsIFwiYTE4MlwiLCAweDI3YWYsIFwiYTIwMVwiLCAweDI3YjEsIFwiYTE4M1wiLCAweDI3YjIsIFwiYTE4NFwiLCAweDI3YjMsIFwiYTE5N1wiLCAweDI3YjQsIFwiYTE4NVwiLCAweDI3YjUsIFwiYTE5NFwiLCAweDI3YjYsIFwiYTE5OFwiLCAweDI3YjcsIFwiYTE4NlwiLCAweDI3YjgsIFwiYTE5NVwiLCAweDI3YjksIFwiYTE4N1wiLCAweDI3YmEsIFwiYTE4OFwiLCAweDI3YmIsIFwiYTE4OVwiLCAweDI3YmMsIFwiYTE5MFwiLCAweDI3YmQsIFwiYTE5MVwiLCAweDI3YmUsIFwiYTg5XCIsIDB4Mjc2OCwgXCJhOTBcIiwgMHgyNzY5LCBcImE5M1wiLCAweDI3NmEsIFwiYTk0XCIsIDB4Mjc2YiwgXCJhOTFcIiwgMHgyNzZjLCBcImE5MlwiLCAweDI3NmQsIFwiYTIwNVwiLCAweDI3NmUsIFwiYTg1XCIsIDB4Mjc2ZiwgXCJhMjA2XCIsIDB4Mjc3MCwgXCJhODZcIiwgMHgyNzcxLCBcImE4N1wiLCAweDI3NzIsIFwiYTg4XCIsIDB4Mjc3MywgXCJhOTVcIiwgMHgyNzc0LCBcImE5NlwiLCAweDI3NzUsIFwiLm5vdGRlZlwiLCAweDAwMDBdO1xufSk7XG5leHBvcnRzLmdldERpbmdiYXRzR2x5cGhzVW5pY29kZSA9IGdldERpbmdiYXRzR2x5cGhzVW5pY29kZTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/glyphlist.js\n')},"./node_modules/pdfjs-dist/lib/core/image.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.PDFImage = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _primitives = __webpack_require__(/*! ./primitives.js */ "./node_modules/pdfjs-dist/lib/core/primitives.js");\n\nvar _colorspace = __webpack_require__(/*! ./colorspace.js */ "./node_modules/pdfjs-dist/lib/core/colorspace.js");\n\nvar _stream = __webpack_require__(/*! ./stream.js */ "./node_modules/pdfjs-dist/lib/core/stream.js");\n\nvar _jpeg_stream = __webpack_require__(/*! ./jpeg_stream.js */ "./node_modules/pdfjs-dist/lib/core/jpeg_stream.js");\n\nvar _jpx = __webpack_require__(/*! ./jpx.js */ "./node_modules/pdfjs-dist/lib/core/jpx.js");\n\nfunction decodeAndClamp(value, addend, coefficient, max) {\n  value = addend + value * coefficient;\n\n  if (value < 0) {\n    value = 0;\n  } else if (value > max) {\n    value = max;\n  }\n\n  return value;\n}\n\nfunction resizeImageMask(src, bpc, w1, h1, w2, h2) {\n  var length = w2 * h2;\n  let dest;\n\n  if (bpc <= 8) {\n    dest = new Uint8Array(length);\n  } else if (bpc <= 16) {\n    dest = new Uint16Array(length);\n  } else {\n    dest = new Uint32Array(length);\n  }\n\n  var xRatio = w1 / w2;\n  var yRatio = h1 / h2;\n  var i,\n      j,\n      py,\n      newIndex = 0,\n      oldIndex;\n  var xScaled = new Uint16Array(w2);\n  var w1Scanline = w1;\n\n  for (i = 0; i < w2; i++) {\n    xScaled[i] = Math.floor(i * xRatio);\n  }\n\n  for (i = 0; i < h2; i++) {\n    py = Math.floor(i * yRatio) * w1Scanline;\n\n    for (j = 0; j < w2; j++) {\n      oldIndex = py + xScaled[j];\n      dest[newIndex++] = src[oldIndex];\n    }\n  }\n\n  return dest;\n}\n\nclass PDFImage {\n  constructor({\n    xref,\n    res,\n    image,\n    isInline = false,\n    smask = null,\n    mask = null,\n    isMask = false,\n    pdfFunctionFactory,\n    localColorSpaceCache\n  }) {\n    this.image = image;\n    var dict = image.dict;\n    const filter = dict.get("Filter");\n\n    if ((0, _primitives.isName)(filter)) {\n      switch (filter.name) {\n        case "JPXDecode":\n          var jpxImage = new _jpx.JpxImage();\n          jpxImage.parseImageProperties(image.stream);\n          image.stream.reset();\n          image.width = jpxImage.width;\n          image.height = jpxImage.height;\n          image.bitsPerComponent = jpxImage.bitsPerComponent;\n          image.numComps = jpxImage.componentsCount;\n          break;\n\n        case "JBIG2Decode":\n          image.bitsPerComponent = 1;\n          image.numComps = 1;\n          break;\n      }\n    }\n\n    let width = dict.get("Width", "W");\n    let height = dict.get("Height", "H");\n\n    if (Number.isInteger(image.width) && image.width > 0 && Number.isInteger(image.height) && image.height > 0 && (image.width !== width || image.height !== height)) {\n      (0, _util.warn)("PDFImage - using the Width/Height of the image data, " + "rather than the image dictionary.");\n      width = image.width;\n      height = image.height;\n    }\n\n    if (width < 1 || height < 1) {\n      throw new _util.FormatError(`Invalid image width: ${width} or height: ${height}`);\n    }\n\n    this.width = width;\n    this.height = height;\n    this.interpolate = dict.get("Interpolate", "I") || false;\n    this.imageMask = dict.get("ImageMask", "IM") || false;\n    this.matte = dict.get("Matte") || false;\n    var bitsPerComponent = image.bitsPerComponent;\n\n    if (!bitsPerComponent) {\n      bitsPerComponent = dict.get("BitsPerComponent", "BPC");\n\n      if (!bitsPerComponent) {\n        if (this.imageMask) {\n          bitsPerComponent = 1;\n        } else {\n          throw new _util.FormatError(`Bits per component missing in image: ${this.imageMask}`);\n        }\n      }\n    }\n\n    this.bpc = bitsPerComponent;\n\n    if (!this.imageMask) {\n      let colorSpace = dict.getRaw("ColorSpace") || dict.getRaw("CS");\n\n      if (!colorSpace) {\n        (0, _util.info)("JPX images (which do not require color spaces)");\n\n        switch (image.numComps) {\n          case 1:\n            colorSpace = _primitives.Name.get("DeviceGray");\n            break;\n\n          case 3:\n            colorSpace = _primitives.Name.get("DeviceRGB");\n            break;\n\n          case 4:\n            colorSpace = _primitives.Name.get("DeviceCMYK");\n            break;\n\n          default:\n            throw new Error(`JPX images with ${image.numComps} ` + "color components not supported.");\n        }\n      }\n\n      this.colorSpace = _colorspace.ColorSpace.parse({\n        cs: colorSpace,\n        xref,\n        resources: isInline ? res : null,\n        pdfFunctionFactory,\n        localColorSpaceCache\n      });\n      this.numComps = this.colorSpace.numComps;\n    }\n\n    this.decode = dict.getArray("Decode", "D");\n    this.needsDecode = false;\n\n    if (this.decode && (this.colorSpace && !this.colorSpace.isDefaultDecode(this.decode, bitsPerComponent) || isMask && !_colorspace.ColorSpace.isDefaultDecode(this.decode, 1))) {\n      this.needsDecode = true;\n      var max = (1 << bitsPerComponent) - 1;\n      this.decodeCoefficients = [];\n      this.decodeAddends = [];\n      const isIndexed = this.colorSpace && this.colorSpace.name === "Indexed";\n\n      for (var i = 0, j = 0; i < this.decode.length; i += 2, ++j) {\n        var dmin = this.decode[i];\n        var dmax = this.decode[i + 1];\n        this.decodeCoefficients[j] = isIndexed ? (dmax - dmin) / max : dmax - dmin;\n        this.decodeAddends[j] = isIndexed ? dmin : max * dmin;\n      }\n    }\n\n    if (smask) {\n      this.smask = new PDFImage({\n        xref,\n        res,\n        image: smask,\n        isInline,\n        pdfFunctionFactory,\n        localColorSpaceCache\n      });\n    } else if (mask) {\n      if ((0, _primitives.isStream)(mask)) {\n        var maskDict = mask.dict,\n            imageMask = maskDict.get("ImageMask", "IM");\n\n        if (!imageMask) {\n          (0, _util.warn)("Ignoring /Mask in image without /ImageMask.");\n        } else {\n          this.mask = new PDFImage({\n            xref,\n            res,\n            image: mask,\n            isInline,\n            isMask: true,\n            pdfFunctionFactory,\n            localColorSpaceCache\n          });\n        }\n      } else {\n        this.mask = mask;\n      }\n    }\n  }\n\n  static async buildImage({\n    xref,\n    res,\n    image,\n    isInline = false,\n    pdfFunctionFactory,\n    localColorSpaceCache\n  }) {\n    const imageData = image;\n    let smaskData = null;\n    let maskData = null;\n    const smask = image.dict.get("SMask");\n    const mask = image.dict.get("Mask");\n\n    if (smask) {\n      smaskData = smask;\n    } else if (mask) {\n      if ((0, _primitives.isStream)(mask) || Array.isArray(mask)) {\n        maskData = mask;\n      } else {\n        (0, _util.warn)("Unsupported mask format.");\n      }\n    }\n\n    return new PDFImage({\n      xref,\n      res,\n      image: imageData,\n      isInline,\n      smask: smaskData,\n      mask: maskData,\n      pdfFunctionFactory,\n      localColorSpaceCache\n    });\n  }\n\n  static createMask({\n    imgArray,\n    width,\n    height,\n    imageIsFromDecodeStream,\n    inverseDecode\n  }) {\n    var computedLength = (width + 7 >> 3) * height;\n    var actualLength = imgArray.byteLength;\n    var haveFullData = computedLength === actualLength;\n    var data, i;\n\n    if (imageIsFromDecodeStream && (!inverseDecode || haveFullData)) {\n      data = imgArray;\n    } else if (!inverseDecode) {\n      data = new Uint8ClampedArray(actualLength);\n      data.set(imgArray);\n    } else {\n      data = new Uint8ClampedArray(computedLength);\n      data.set(imgArray);\n\n      for (i = actualLength; i < computedLength; i++) {\n        data[i] = 0xff;\n      }\n    }\n\n    if (inverseDecode) {\n      for (i = 0; i < actualLength; i++) {\n        data[i] ^= 0xff;\n      }\n    }\n\n    return {\n      data,\n      width,\n      height\n    };\n  }\n\n  get drawWidth() {\n    return Math.max(this.width, this.smask && this.smask.width || 0, this.mask && this.mask.width || 0);\n  }\n\n  get drawHeight() {\n    return Math.max(this.height, this.smask && this.smask.height || 0, this.mask && this.mask.height || 0);\n  }\n\n  decodeBuffer(buffer) {\n    var bpc = this.bpc;\n    var numComps = this.numComps;\n    var decodeAddends = this.decodeAddends;\n    var decodeCoefficients = this.decodeCoefficients;\n    var max = (1 << bpc) - 1;\n    var i, ii;\n\n    if (bpc === 1) {\n      for (i = 0, ii = buffer.length; i < ii; i++) {\n        buffer[i] = +!buffer[i];\n      }\n\n      return;\n    }\n\n    var index = 0;\n\n    for (i = 0, ii = this.width * this.height; i < ii; i++) {\n      for (var j = 0; j < numComps; j++) {\n        buffer[index] = decodeAndClamp(buffer[index], decodeAddends[j], decodeCoefficients[j], max);\n        index++;\n      }\n    }\n  }\n\n  getComponents(buffer) {\n    var bpc = this.bpc;\n\n    if (bpc === 8) {\n      return buffer;\n    }\n\n    var width = this.width;\n    var height = this.height;\n    var numComps = this.numComps;\n    var length = width * height * numComps;\n    var bufferPos = 0;\n    let output;\n\n    if (bpc <= 8) {\n      output = new Uint8Array(length);\n    } else if (bpc <= 16) {\n      output = new Uint16Array(length);\n    } else {\n      output = new Uint32Array(length);\n    }\n\n    var rowComps = width * numComps;\n    var max = (1 << bpc) - 1;\n    var i = 0,\n        ii,\n        buf;\n\n    if (bpc === 1) {\n      var mask, loop1End, loop2End;\n\n      for (var j = 0; j < height; j++) {\n        loop1End = i + (rowComps & ~7);\n        loop2End = i + rowComps;\n\n        while (i < loop1End) {\n          buf = buffer[bufferPos++];\n          output[i] = buf >> 7 & 1;\n          output[i + 1] = buf >> 6 & 1;\n          output[i + 2] = buf >> 5 & 1;\n          output[i + 3] = buf >> 4 & 1;\n          output[i + 4] = buf >> 3 & 1;\n          output[i + 5] = buf >> 2 & 1;\n          output[i + 6] = buf >> 1 & 1;\n          output[i + 7] = buf & 1;\n          i += 8;\n        }\n\n        if (i < loop2End) {\n          buf = buffer[bufferPos++];\n          mask = 128;\n\n          while (i < loop2End) {\n            output[i++] = +!!(buf & mask);\n            mask >>= 1;\n          }\n        }\n      }\n    } else {\n      var bits = 0;\n      buf = 0;\n\n      for (i = 0, ii = length; i < ii; ++i) {\n        if (i % rowComps === 0) {\n          buf = 0;\n          bits = 0;\n        }\n\n        while (bits < bpc) {\n          buf = buf << 8 | buffer[bufferPos++];\n          bits += 8;\n        }\n\n        var remainingBits = bits - bpc;\n        let value = buf >> remainingBits;\n\n        if (value < 0) {\n          value = 0;\n        } else if (value > max) {\n          value = max;\n        }\n\n        output[i] = value;\n        buf = buf & (1 << remainingBits) - 1;\n        bits = remainingBits;\n      }\n    }\n\n    return output;\n  }\n\n  fillOpacity(rgbaBuf, width, height, actualHeight, image) {\n    var smask = this.smask;\n    var mask = this.mask;\n    var alphaBuf, sw, sh, i, ii, j;\n\n    if (smask) {\n      sw = smask.width;\n      sh = smask.height;\n      alphaBuf = new Uint8ClampedArray(sw * sh);\n      smask.fillGrayBuffer(alphaBuf);\n\n      if (sw !== width || sh !== height) {\n        alphaBuf = resizeImageMask(alphaBuf, smask.bpc, sw, sh, width, height);\n      }\n    } else if (mask) {\n      if (mask instanceof PDFImage) {\n        sw = mask.width;\n        sh = mask.height;\n        alphaBuf = new Uint8ClampedArray(sw * sh);\n        mask.numComps = 1;\n        mask.fillGrayBuffer(alphaBuf);\n\n        for (i = 0, ii = sw * sh; i < ii; ++i) {\n          alphaBuf[i] = 255 - alphaBuf[i];\n        }\n\n        if (sw !== width || sh !== height) {\n          alphaBuf = resizeImageMask(alphaBuf, mask.bpc, sw, sh, width, height);\n        }\n      } else if (Array.isArray(mask)) {\n        alphaBuf = new Uint8ClampedArray(width * height);\n        var numComps = this.numComps;\n\n        for (i = 0, ii = width * height; i < ii; ++i) {\n          var opacity = 0;\n          var imageOffset = i * numComps;\n\n          for (j = 0; j < numComps; ++j) {\n            var color = image[imageOffset + j];\n            var maskOffset = j * 2;\n\n            if (color < mask[maskOffset] || color > mask[maskOffset + 1]) {\n              opacity = 255;\n              break;\n            }\n          }\n\n          alphaBuf[i] = opacity;\n        }\n      } else {\n        throw new _util.FormatError("Unknown mask format.");\n      }\n    }\n\n    if (alphaBuf) {\n      for (i = 0, j = 3, ii = width * actualHeight; i < ii; ++i, j += 4) {\n        rgbaBuf[j] = alphaBuf[i];\n      }\n    } else {\n      for (i = 0, j = 3, ii = width * actualHeight; i < ii; ++i, j += 4) {\n        rgbaBuf[j] = 255;\n      }\n    }\n  }\n\n  undoPreblend(buffer, width, height) {\n    var matte = this.smask && this.smask.matte;\n\n    if (!matte) {\n      return;\n    }\n\n    var matteRgb = this.colorSpace.getRgb(matte, 0);\n    var matteR = matteRgb[0];\n    var matteG = matteRgb[1];\n    var matteB = matteRgb[2];\n    var length = width * height * 4;\n\n    for (var i = 0; i < length; i += 4) {\n      var alpha = buffer[i + 3];\n\n      if (alpha === 0) {\n        buffer[i] = 255;\n        buffer[i + 1] = 255;\n        buffer[i + 2] = 255;\n        continue;\n      }\n\n      var k = 255 / alpha;\n      buffer[i] = (buffer[i] - matteR) * k + matteR;\n      buffer[i + 1] = (buffer[i + 1] - matteG) * k + matteG;\n      buffer[i + 2] = (buffer[i + 2] - matteB) * k + matteB;\n    }\n  }\n\n  createImageData(forceRGBA = false) {\n    var drawWidth = this.drawWidth;\n    var drawHeight = this.drawHeight;\n    var imgData = {\n      width: drawWidth,\n      height: drawHeight,\n      kind: 0,\n      data: null\n    };\n    var numComps = this.numComps;\n    var originalWidth = this.width;\n    var originalHeight = this.height;\n    var bpc = this.bpc;\n    var rowBytes = originalWidth * numComps * bpc + 7 >> 3;\n    var imgArray;\n\n    if (!forceRGBA) {\n      var kind;\n\n      if (this.colorSpace.name === "DeviceGray" && bpc === 1) {\n        kind = _util.ImageKind.GRAYSCALE_1BPP;\n      } else if (this.colorSpace.name === "DeviceRGB" && bpc === 8 && !this.needsDecode) {\n        kind = _util.ImageKind.RGB_24BPP;\n      }\n\n      if (kind && !this.smask && !this.mask && drawWidth === originalWidth && drawHeight === originalHeight) {\n        imgData.kind = kind;\n        imgArray = this.getImageBytes(originalHeight * rowBytes);\n\n        if (this.image instanceof _stream.DecodeStream) {\n          imgData.data = imgArray;\n        } else {\n          var newArray = new Uint8ClampedArray(imgArray.length);\n          newArray.set(imgArray);\n          imgData.data = newArray;\n        }\n\n        if (this.needsDecode) {\n          (0, _util.assert)(kind === _util.ImageKind.GRAYSCALE_1BPP, "PDFImage.createImageData: The image must be grayscale.");\n          var buffer = imgData.data;\n\n          for (var i = 0, ii = buffer.length; i < ii; i++) {\n            buffer[i] ^= 0xff;\n          }\n        }\n\n        return imgData;\n      }\n\n      if (this.image instanceof _jpeg_stream.JpegStream && !this.smask && !this.mask) {\n        let imageLength = originalHeight * rowBytes;\n\n        switch (this.colorSpace.name) {\n          case "DeviceGray":\n            imageLength *= 3;\n\n          case "DeviceRGB":\n          case "DeviceCMYK":\n            imgData.kind = _util.ImageKind.RGB_24BPP;\n            imgData.data = this.getImageBytes(imageLength, drawWidth, drawHeight, true);\n            return imgData;\n        }\n      }\n    }\n\n    imgArray = this.getImageBytes(originalHeight * rowBytes);\n    var actualHeight = 0 | imgArray.length / rowBytes * drawHeight / originalHeight;\n    var comps = this.getComponents(imgArray);\n    var alpha01, maybeUndoPreblend;\n\n    if (!forceRGBA && !this.smask && !this.mask) {\n      imgData.kind = _util.ImageKind.RGB_24BPP;\n      imgData.data = new Uint8ClampedArray(drawWidth * drawHeight * 3);\n      alpha01 = 0;\n      maybeUndoPreblend = false;\n    } else {\n      imgData.kind = _util.ImageKind.RGBA_32BPP;\n      imgData.data = new Uint8ClampedArray(drawWidth * drawHeight * 4);\n      alpha01 = 1;\n      maybeUndoPreblend = true;\n      this.fillOpacity(imgData.data, drawWidth, drawHeight, actualHeight, comps);\n    }\n\n    if (this.needsDecode) {\n      this.decodeBuffer(comps);\n    }\n\n    this.colorSpace.fillRgb(imgData.data, originalWidth, originalHeight, drawWidth, drawHeight, actualHeight, bpc, comps, alpha01);\n\n    if (maybeUndoPreblend) {\n      this.undoPreblend(imgData.data, drawWidth, actualHeight);\n    }\n\n    return imgData;\n  }\n\n  fillGrayBuffer(buffer) {\n    var numComps = this.numComps;\n\n    if (numComps !== 1) {\n      throw new _util.FormatError(`Reading gray scale from a color image: ${numComps}`);\n    }\n\n    var width = this.width;\n    var height = this.height;\n    var bpc = this.bpc;\n    var rowBytes = width * numComps * bpc + 7 >> 3;\n    var imgArray = this.getImageBytes(height * rowBytes);\n    var comps = this.getComponents(imgArray);\n    var i, length;\n\n    if (bpc === 1) {\n      length = width * height;\n\n      if (this.needsDecode) {\n        for (i = 0; i < length; ++i) {\n          buffer[i] = comps[i] - 1 & 255;\n        }\n      } else {\n        for (i = 0; i < length; ++i) {\n          buffer[i] = -comps[i] & 255;\n        }\n      }\n\n      return;\n    }\n\n    if (this.needsDecode) {\n      this.decodeBuffer(comps);\n    }\n\n    length = width * height;\n    var scale = 255 / ((1 << bpc) - 1);\n\n    for (i = 0; i < length; ++i) {\n      buffer[i] = scale * comps[i];\n    }\n  }\n\n  getImageBytes(length, drawWidth, drawHeight, forceRGB = false) {\n    this.image.reset();\n    this.image.drawWidth = drawWidth || this.width;\n    this.image.drawHeight = drawHeight || this.height;\n    this.image.forceRGB = !!forceRGB;\n    return this.image.getBytes(length, true);\n  }\n\n}\n\nexports.PDFImage = PDFImage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/image.js\n')},"./node_modules/pdfjs-dist/lib/core/image_utils.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.LocalTilingPatternCache = exports.LocalImageCache = exports.LocalGStateCache = exports.LocalFunctionCache = exports.LocalColorSpaceCache = exports.GlobalImageCache = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _primitives = __webpack_require__(/*! ./primitives.js */ "./node_modules/pdfjs-dist/lib/core/primitives.js");\n\nclass BaseLocalCache {\n  constructor(options) {\n    if (this.constructor === BaseLocalCache) {\n      (0, _util.unreachable)("Cannot initialize BaseLocalCache.");\n    }\n\n    if (!options || !options.onlyRefs) {\n      this._nameRefMap = new Map();\n      this._imageMap = new Map();\n    }\n\n    this._imageCache = new _primitives.RefSetCache();\n  }\n\n  getByName(name) {\n    const ref = this._nameRefMap.get(name);\n\n    if (ref) {\n      return this.getByRef(ref);\n    }\n\n    return this._imageMap.get(name) || null;\n  }\n\n  getByRef(ref) {\n    return this._imageCache.get(ref) || null;\n  }\n\n  set(name, ref, data) {\n    (0, _util.unreachable)("Abstract method `set` called.");\n  }\n\n}\n\nclass LocalImageCache extends BaseLocalCache {\n  set(name, ref = null, data) {\n    if (!name) {\n      throw new Error(\'LocalImageCache.set - expected "name" argument.\');\n    }\n\n    if (ref) {\n      if (this._imageCache.has(ref)) {\n        return;\n      }\n\n      this._nameRefMap.set(name, ref);\n\n      this._imageCache.put(ref, data);\n\n      return;\n    }\n\n    if (this._imageMap.has(name)) {\n      return;\n    }\n\n    this._imageMap.set(name, data);\n  }\n\n}\n\nexports.LocalImageCache = LocalImageCache;\n\nclass LocalColorSpaceCache extends BaseLocalCache {\n  set(name = null, ref = null, data) {\n    if (!name && !ref) {\n      throw new Error(\'LocalColorSpaceCache.set - expected "name" and/or "ref" argument.\');\n    }\n\n    if (ref) {\n      if (this._imageCache.has(ref)) {\n        return;\n      }\n\n      if (name) {\n        this._nameRefMap.set(name, ref);\n      }\n\n      this._imageCache.put(ref, data);\n\n      return;\n    }\n\n    if (this._imageMap.has(name)) {\n      return;\n    }\n\n    this._imageMap.set(name, data);\n  }\n\n}\n\nexports.LocalColorSpaceCache = LocalColorSpaceCache;\n\nclass LocalFunctionCache extends BaseLocalCache {\n  constructor(options) {\n    super({\n      onlyRefs: true\n    });\n  }\n\n  getByName(name) {\n    (0, _util.unreachable)("Should not call `getByName` method.");\n  }\n\n  set(name = null, ref, data) {\n    if (!ref) {\n      throw new Error(\'LocalFunctionCache.set - expected "ref" argument.\');\n    }\n\n    if (this._imageCache.has(ref)) {\n      return;\n    }\n\n    this._imageCache.put(ref, data);\n  }\n\n}\n\nexports.LocalFunctionCache = LocalFunctionCache;\n\nclass LocalGStateCache extends BaseLocalCache {\n  set(name, ref = null, data) {\n    if (!name) {\n      throw new Error(\'LocalGStateCache.set - expected "name" argument.\');\n    }\n\n    if (ref) {\n      if (this._imageCache.has(ref)) {\n        return;\n      }\n\n      this._nameRefMap.set(name, ref);\n\n      this._imageCache.put(ref, data);\n\n      return;\n    }\n\n    if (this._imageMap.has(name)) {\n      return;\n    }\n\n    this._imageMap.set(name, data);\n  }\n\n}\n\nexports.LocalGStateCache = LocalGStateCache;\n\nclass LocalTilingPatternCache extends BaseLocalCache {\n  set(name, ref = null, data) {\n    if (!name) {\n      throw new Error(\'LocalTilingPatternCache.set - expected "name" argument.\');\n    }\n\n    if (ref) {\n      if (this._imageCache.has(ref)) {\n        return;\n      }\n\n      this._nameRefMap.set(name, ref);\n\n      this._imageCache.put(ref, data);\n\n      return;\n    }\n\n    if (this._imageMap.has(name)) {\n      return;\n    }\n\n    this._imageMap.set(name, data);\n  }\n\n}\n\nexports.LocalTilingPatternCache = LocalTilingPatternCache;\n\nclass GlobalImageCache {\n  static get NUM_PAGES_THRESHOLD() {\n    return (0, _util.shadow)(this, "NUM_PAGES_THRESHOLD", 2);\n  }\n\n  static get MAX_IMAGES_TO_CACHE() {\n    return (0, _util.shadow)(this, "MAX_IMAGES_TO_CACHE", 10);\n  }\n\n  constructor() {\n    this._refCache = new _primitives.RefSetCache();\n    this._imageCache = new _primitives.RefSetCache();\n  }\n\n  shouldCache(ref, pageIndex) {\n    const pageIndexSet = this._refCache.get(ref);\n\n    const numPages = pageIndexSet ? pageIndexSet.size + (pageIndexSet.has(pageIndex) ? 0 : 1) : 1;\n\n    if (numPages < GlobalImageCache.NUM_PAGES_THRESHOLD) {\n      return false;\n    }\n\n    if (!this._imageCache.has(ref) && this._imageCache.size >= GlobalImageCache.MAX_IMAGES_TO_CACHE) {\n      return false;\n    }\n\n    return true;\n  }\n\n  addPageIndex(ref, pageIndex) {\n    let pageIndexSet = this._refCache.get(ref);\n\n    if (!pageIndexSet) {\n      pageIndexSet = new Set();\n\n      this._refCache.put(ref, pageIndexSet);\n    }\n\n    pageIndexSet.add(pageIndex);\n  }\n\n  getData(ref, pageIndex) {\n    const pageIndexSet = this._refCache.get(ref);\n\n    if (!pageIndexSet) {\n      return null;\n    }\n\n    if (pageIndexSet.size < GlobalImageCache.NUM_PAGES_THRESHOLD) {\n      return null;\n    }\n\n    if (!this._imageCache.has(ref)) {\n      return null;\n    }\n\n    pageIndexSet.add(pageIndex);\n    return this._imageCache.get(ref);\n  }\n\n  setData(ref, data) {\n    if (!this._refCache.has(ref)) {\n      throw new Error(\'GlobalImageCache.setData - expected "addPageIndex" to have been called.\');\n    }\n\n    if (this._imageCache.has(ref)) {\n      return;\n    }\n\n    if (this._imageCache.size >= GlobalImageCache.MAX_IMAGES_TO_CACHE) {\n      (0, _util.info)("GlobalImageCache.setData - ignoring image above MAX_IMAGES_TO_CACHE.");\n      return;\n    }\n\n    this._imageCache.put(ref, data);\n  }\n\n  clear(onlyData = false) {\n    if (!onlyData) {\n      this._refCache.clear();\n    }\n\n    this._imageCache.clear();\n  }\n\n}\n\nexports.GlobalImageCache = GlobalImageCache;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/image_utils.js\n')},"./node_modules/pdfjs-dist/lib/core/jbig2.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.Jbig2Image = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nvar _arithmetic_decoder = __webpack_require__(/*! ./arithmetic_decoder.js */ "./node_modules/pdfjs-dist/lib/core/arithmetic_decoder.js");\n\nvar _ccitt = __webpack_require__(/*! ./ccitt.js */ "./node_modules/pdfjs-dist/lib/core/ccitt.js");\n\nclass Jbig2Error extends _util.BaseException {\n  constructor(msg) {\n    super(`JBIG2 error: ${msg}`);\n  }\n\n}\n\nvar Jbig2Image = function Jbig2ImageClosure() {\n  function ContextCache() {}\n\n  ContextCache.prototype = {\n    getContexts(id) {\n      if (id in this) {\n        return this[id];\n      }\n\n      return this[id] = new Int8Array(1 << 16);\n    }\n\n  };\n\n  function DecodingContext(data, start, end) {\n    this.data = data;\n    this.start = start;\n    this.end = end;\n  }\n\n  DecodingContext.prototype = {\n    get decoder() {\n      var decoder = new _arithmetic_decoder.ArithmeticDecoder(this.data, this.start, this.end);\n      return (0, _util.shadow)(this, "decoder", decoder);\n    },\n\n    get contextCache() {\n      var cache = new ContextCache();\n      return (0, _util.shadow)(this, "contextCache", cache);\n    }\n\n  };\n\n  function decodeInteger(contextCache, procedure, decoder) {\n    var contexts = contextCache.getContexts(procedure);\n    var prev = 1;\n\n    function readBits(length) {\n      var v = 0;\n\n      for (var i = 0; i < length; i++) {\n        var bit = decoder.readBit(contexts, prev);\n        prev = prev < 256 ? prev << 1 | bit : (prev << 1 | bit) & 511 | 256;\n        v = v << 1 | bit;\n      }\n\n      return v >>> 0;\n    }\n\n    var sign = readBits(1);\n    var value = readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(32) + 4436 : readBits(12) + 340 : readBits(8) + 84 : readBits(6) + 20 : readBits(4) + 4 : readBits(2);\n\n    if (sign === 0) {\n      return value;\n    } else if (value > 0) {\n      return -value;\n    }\n\n    return null;\n  }\n\n  function decodeIAID(contextCache, decoder, codeLength) {\n    var contexts = contextCache.getContexts("IAID");\n    var prev = 1;\n\n    for (var i = 0; i < codeLength; i++) {\n      var bit = decoder.readBit(contexts, prev);\n      prev = prev << 1 | bit;\n    }\n\n    if (codeLength < 31) {\n      return prev & (1 << codeLength) - 1;\n    }\n\n    return prev & 0x7fffffff;\n  }\n\n  var SegmentTypes = ["SymbolDictionary", null, null, null, "IntermediateTextRegion", null, "ImmediateTextRegion", "ImmediateLosslessTextRegion", null, null, null, null, null, null, null, null, "PatternDictionary", null, null, null, "IntermediateHalftoneRegion", null, "ImmediateHalftoneRegion", "ImmediateLosslessHalftoneRegion", null, null, null, null, null, null, null, null, null, null, null, null, "IntermediateGenericRegion", null, "ImmediateGenericRegion", "ImmediateLosslessGenericRegion", "IntermediateGenericRefinementRegion", null, "ImmediateGenericRefinementRegion", "ImmediateLosslessGenericRefinementRegion", null, null, null, null, "PageInformation", "EndOfPage", "EndOfStripe", "EndOfFile", "Profiles", "Tables", null, null, null, null, null, null, null, null, "Extension"];\n  var CodingTemplates = [[{\n    x: -1,\n    y: -2\n  }, {\n    x: 0,\n    y: -2\n  }, {\n    x: 1,\n    y: -2\n  }, {\n    x: -2,\n    y: -1\n  }, {\n    x: -1,\n    y: -1\n  }, {\n    x: 0,\n    y: -1\n  }, {\n    x: 1,\n    y: -1\n  }, {\n    x: 2,\n    y: -1\n  }, {\n    x: -4,\n    y: 0\n  }, {\n    x: -3,\n    y: 0\n  }, {\n    x: -2,\n    y: 0\n  }, {\n    x: -1,\n    y: 0\n  }], [{\n    x: -1,\n    y: -2\n  }, {\n    x: 0,\n    y: -2\n  }, {\n    x: 1,\n    y: -2\n  }, {\n    x: 2,\n    y: -2\n  }, {\n    x: -2,\n    y: -1\n  }, {\n    x: -1,\n    y: -1\n  }, {\n    x: 0,\n    y: -1\n  }, {\n    x: 1,\n    y: -1\n  }, {\n    x: 2,\n    y: -1\n  }, {\n    x: -3,\n    y: 0\n  }, {\n    x: -2,\n    y: 0\n  }, {\n    x: -1,\n    y: 0\n  }], [{\n    x: -1,\n    y: -2\n  }, {\n    x: 0,\n    y: -2\n  }, {\n    x: 1,\n    y: -2\n  }, {\n    x: -2,\n    y: -1\n  }, {\n    x: -1,\n    y: -1\n  }, {\n    x: 0,\n    y: -1\n  }, {\n    x: 1,\n    y: -1\n  }, {\n    x: -2,\n    y: 0\n  }, {\n    x: -1,\n    y: 0\n  }], [{\n    x: -3,\n    y: -1\n  }, {\n    x: -2,\n    y: -1\n  }, {\n    x: -1,\n    y: -1\n  }, {\n    x: 0,\n    y: -1\n  }, {\n    x: 1,\n    y: -1\n  }, {\n    x: -4,\n    y: 0\n  }, {\n    x: -3,\n    y: 0\n  }, {\n    x: -2,\n    y: 0\n  }, {\n    x: -1,\n    y: 0\n  }]];\n  var RefinementTemplates = [{\n    coding: [{\n      x: 0,\n      y: -1\n    }, {\n      x: 1,\n      y: -1\n    }, {\n      x: -1,\n      y: 0\n    }],\n    reference: [{\n      x: 0,\n      y: -1\n    }, {\n      x: 1,\n      y: -1\n    }, {\n      x: -1,\n      y: 0\n    }, {\n      x: 0,\n      y: 0\n    }, {\n      x: 1,\n      y: 0\n    }, {\n      x: -1,\n      y: 1\n    }, {\n      x: 0,\n      y: 1\n    }, {\n      x: 1,\n      y: 1\n    }]\n  }, {\n    coding: [{\n      x: -1,\n      y: -1\n    }, {\n      x: 0,\n      y: -1\n    }, {\n      x: 1,\n      y: -1\n    }, {\n      x: -1,\n      y: 0\n    }],\n    reference: [{\n      x: 0,\n      y: -1\n    }, {\n      x: -1,\n      y: 0\n    }, {\n      x: 0,\n      y: 0\n    }, {\n      x: 1,\n      y: 0\n    }, {\n      x: 0,\n      y: 1\n    }, {\n      x: 1,\n      y: 1\n    }]\n  }];\n  var ReusedContexts = [0x9b25, 0x0795, 0x00e5, 0x0195];\n  var RefinementReusedContexts = [0x0020, 0x0008];\n\n  function decodeBitmapTemplate0(width, height, decodingContext) {\n    var decoder = decodingContext.decoder;\n    var contexts = decodingContext.contextCache.getContexts("GB");\n    var contextLabel,\n        i,\n        j,\n        pixel,\n        row,\n        row1,\n        row2,\n        bitmap = [];\n    var OLD_PIXEL_MASK = 0x7bf7;\n\n    for (i = 0; i < height; i++) {\n      row = bitmap[i] = new Uint8Array(width);\n      row1 = i < 1 ? row : bitmap[i - 1];\n      row2 = i < 2 ? row : bitmap[i - 2];\n      contextLabel = row2[0] << 13 | row2[1] << 12 | row2[2] << 11 | row1[0] << 7 | row1[1] << 6 | row1[2] << 5 | row1[3] << 4;\n\n      for (j = 0; j < width; j++) {\n        row[j] = pixel = decoder.readBit(contexts, contextLabel);\n        contextLabel = (contextLabel & OLD_PIXEL_MASK) << 1 | (j + 3 < width ? row2[j + 3] << 11 : 0) | (j + 4 < width ? row1[j + 4] << 4 : 0) | pixel;\n      }\n    }\n\n    return bitmap;\n  }\n\n  function decodeBitmap(mmr, width, height, templateIndex, prediction, skip, at, decodingContext) {\n    if (mmr) {\n      const input = new Reader(decodingContext.data, decodingContext.start, decodingContext.end);\n      return decodeMMRBitmap(input, width, height, false);\n    }\n\n    if (templateIndex === 0 && !skip && !prediction && at.length === 4 && at[0].x === 3 && at[0].y === -1 && at[1].x === -3 && at[1].y === -1 && at[2].x === 2 && at[2].y === -2 && at[3].x === -2 && at[3].y === -2) {\n      return decodeBitmapTemplate0(width, height, decodingContext);\n    }\n\n    var useskip = !!skip;\n    var template = CodingTemplates[templateIndex].concat(at);\n    template.sort(function (a, b) {\n      return a.y - b.y || a.x - b.x;\n    });\n    var templateLength = template.length;\n    var templateX = new Int8Array(templateLength);\n    var templateY = new Int8Array(templateLength);\n    var changingTemplateEntries = [];\n    var reuseMask = 0,\n        minX = 0,\n        maxX = 0,\n        minY = 0;\n    var c, k;\n\n    for (k = 0; k < templateLength; k++) {\n      templateX[k] = template[k].x;\n      templateY[k] = template[k].y;\n      minX = Math.min(minX, template[k].x);\n      maxX = Math.max(maxX, template[k].x);\n      minY = Math.min(minY, template[k].y);\n\n      if (k < templateLength - 1 && template[k].y === template[k + 1].y && template[k].x === template[k + 1].x - 1) {\n        reuseMask |= 1 << templateLength - 1 - k;\n      } else {\n        changingTemplateEntries.push(k);\n      }\n    }\n\n    var changingEntriesLength = changingTemplateEntries.length;\n    var changingTemplateX = new Int8Array(changingEntriesLength);\n    var changingTemplateY = new Int8Array(changingEntriesLength);\n    var changingTemplateBit = new Uint16Array(changingEntriesLength);\n\n    for (c = 0; c < changingEntriesLength; c++) {\n      k = changingTemplateEntries[c];\n      changingTemplateX[c] = template[k].x;\n      changingTemplateY[c] = template[k].y;\n      changingTemplateBit[c] = 1 << templateLength - 1 - k;\n    }\n\n    var sbb_left = -minX;\n    var sbb_top = -minY;\n    var sbb_right = width - maxX;\n    var pseudoPixelContext = ReusedContexts[templateIndex];\n    var row = new Uint8Array(width);\n    var bitmap = [];\n    var decoder = decodingContext.decoder;\n    var contexts = decodingContext.contextCache.getContexts("GB");\n    var ltp = 0,\n        j,\n        i0,\n        j0,\n        contextLabel = 0,\n        bit,\n        shift;\n\n    for (var i = 0; i < height; i++) {\n      if (prediction) {\n        var sltp = decoder.readBit(contexts, pseudoPixelContext);\n        ltp ^= sltp;\n\n        if (ltp) {\n          bitmap.push(row);\n          continue;\n        }\n      }\n\n      row = new Uint8Array(row);\n      bitmap.push(row);\n\n      for (j = 0; j < width; j++) {\n        if (useskip && skip[i][j]) {\n          row[j] = 0;\n          continue;\n        }\n\n        if (j >= sbb_left && j < sbb_right && i >= sbb_top) {\n          contextLabel = contextLabel << 1 & reuseMask;\n\n          for (k = 0; k < changingEntriesLength; k++) {\n            i0 = i + changingTemplateY[k];\n            j0 = j + changingTemplateX[k];\n            bit = bitmap[i0][j0];\n\n            if (bit) {\n              bit = changingTemplateBit[k];\n              contextLabel |= bit;\n            }\n          }\n        } else {\n          contextLabel = 0;\n          shift = templateLength - 1;\n\n          for (k = 0; k < templateLength; k++, shift--) {\n            j0 = j + templateX[k];\n\n            if (j0 >= 0 && j0 < width) {\n              i0 = i + templateY[k];\n\n              if (i0 >= 0) {\n                bit = bitmap[i0][j0];\n\n                if (bit) {\n                  contextLabel |= bit << shift;\n                }\n              }\n            }\n          }\n        }\n\n        var pixel = decoder.readBit(contexts, contextLabel);\n        row[j] = pixel;\n      }\n    }\n\n    return bitmap;\n  }\n\n  function decodeRefinement(width, height, templateIndex, referenceBitmap, offsetX, offsetY, prediction, at, decodingContext) {\n    var codingTemplate = RefinementTemplates[templateIndex].coding;\n\n    if (templateIndex === 0) {\n      codingTemplate = codingTemplate.concat([at[0]]);\n    }\n\n    var codingTemplateLength = codingTemplate.length;\n    var codingTemplateX = new Int32Array(codingTemplateLength);\n    var codingTemplateY = new Int32Array(codingTemplateLength);\n    var k;\n\n    for (k = 0; k < codingTemplateLength; k++) {\n      codingTemplateX[k] = codingTemplate[k].x;\n      codingTemplateY[k] = codingTemplate[k].y;\n    }\n\n    var referenceTemplate = RefinementTemplates[templateIndex].reference;\n\n    if (templateIndex === 0) {\n      referenceTemplate = referenceTemplate.concat([at[1]]);\n    }\n\n    var referenceTemplateLength = referenceTemplate.length;\n    var referenceTemplateX = new Int32Array(referenceTemplateLength);\n    var referenceTemplateY = new Int32Array(referenceTemplateLength);\n\n    for (k = 0; k < referenceTemplateLength; k++) {\n      referenceTemplateX[k] = referenceTemplate[k].x;\n      referenceTemplateY[k] = referenceTemplate[k].y;\n    }\n\n    var referenceWidth = referenceBitmap[0].length;\n    var referenceHeight = referenceBitmap.length;\n    var pseudoPixelContext = RefinementReusedContexts[templateIndex];\n    var bitmap = [];\n    var decoder = decodingContext.decoder;\n    var contexts = decodingContext.contextCache.getContexts("GR");\n    var ltp = 0;\n\n    for (var i = 0; i < height; i++) {\n      if (prediction) {\n        var sltp = decoder.readBit(contexts, pseudoPixelContext);\n        ltp ^= sltp;\n\n        if (ltp) {\n          throw new Jbig2Error("prediction is not supported");\n        }\n      }\n\n      var row = new Uint8Array(width);\n      bitmap.push(row);\n\n      for (var j = 0; j < width; j++) {\n        var i0, j0;\n        var contextLabel = 0;\n\n        for (k = 0; k < codingTemplateLength; k++) {\n          i0 = i + codingTemplateY[k];\n          j0 = j + codingTemplateX[k];\n\n          if (i0 < 0 || j0 < 0 || j0 >= width) {\n            contextLabel <<= 1;\n          } else {\n            contextLabel = contextLabel << 1 | bitmap[i0][j0];\n          }\n        }\n\n        for (k = 0; k < referenceTemplateLength; k++) {\n          i0 = i + referenceTemplateY[k] - offsetY;\n          j0 = j + referenceTemplateX[k] - offsetX;\n\n          if (i0 < 0 || i0 >= referenceHeight || j0 < 0 || j0 >= referenceWidth) {\n            contextLabel <<= 1;\n          } else {\n            contextLabel = contextLabel << 1 | referenceBitmap[i0][j0];\n          }\n        }\n\n        var pixel = decoder.readBit(contexts, contextLabel);\n        row[j] = pixel;\n      }\n    }\n\n    return bitmap;\n  }\n\n  function decodeSymbolDictionary(huffman, refinement, symbols, numberOfNewSymbols, numberOfExportedSymbols, huffmanTables, templateIndex, at, refinementTemplateIndex, refinementAt, decodingContext, huffmanInput) {\n    if (huffman && refinement) {\n      throw new Jbig2Error("symbol refinement with Huffman is not supported");\n    }\n\n    var newSymbols = [];\n    var currentHeight = 0;\n    var symbolCodeLength = (0, _core_utils.log2)(symbols.length + numberOfNewSymbols);\n    var decoder = decodingContext.decoder;\n    var contextCache = decodingContext.contextCache;\n    let tableB1, symbolWidths;\n\n    if (huffman) {\n      tableB1 = getStandardTable(1);\n      symbolWidths = [];\n      symbolCodeLength = Math.max(symbolCodeLength, 1);\n    }\n\n    while (newSymbols.length < numberOfNewSymbols) {\n      var deltaHeight = huffman ? huffmanTables.tableDeltaHeight.decode(huffmanInput) : decodeInteger(contextCache, "IADH", decoder);\n      currentHeight += deltaHeight;\n      let currentWidth = 0,\n          totalWidth = 0;\n      const firstSymbol = huffman ? symbolWidths.length : 0;\n\n      while (true) {\n        var deltaWidth = huffman ? huffmanTables.tableDeltaWidth.decode(huffmanInput) : decodeInteger(contextCache, "IADW", decoder);\n\n        if (deltaWidth === null) {\n          break;\n        }\n\n        currentWidth += deltaWidth;\n        totalWidth += currentWidth;\n        var bitmap;\n\n        if (refinement) {\n          var numberOfInstances = decodeInteger(contextCache, "IAAI", decoder);\n\n          if (numberOfInstances > 1) {\n            bitmap = decodeTextRegion(huffman, refinement, currentWidth, currentHeight, 0, numberOfInstances, 1, symbols.concat(newSymbols), symbolCodeLength, 0, 0, 1, 0, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext, 0, huffmanInput);\n          } else {\n            var symbolId = decodeIAID(contextCache, decoder, symbolCodeLength);\n            var rdx = decodeInteger(contextCache, "IARDX", decoder);\n            var rdy = decodeInteger(contextCache, "IARDY", decoder);\n            var symbol = symbolId < symbols.length ? symbols[symbolId] : newSymbols[symbolId - symbols.length];\n            bitmap = decodeRefinement(currentWidth, currentHeight, refinementTemplateIndex, symbol, rdx, rdy, false, refinementAt, decodingContext);\n          }\n\n          newSymbols.push(bitmap);\n        } else if (huffman) {\n          symbolWidths.push(currentWidth);\n        } else {\n          bitmap = decodeBitmap(false, currentWidth, currentHeight, templateIndex, false, null, at, decodingContext);\n          newSymbols.push(bitmap);\n        }\n      }\n\n      if (huffman && !refinement) {\n        const bitmapSize = huffmanTables.tableBitmapSize.decode(huffmanInput);\n        huffmanInput.byteAlign();\n        let collectiveBitmap;\n\n        if (bitmapSize === 0) {\n          collectiveBitmap = readUncompressedBitmap(huffmanInput, totalWidth, currentHeight);\n        } else {\n          const originalEnd = huffmanInput.end;\n          const bitmapEnd = huffmanInput.position + bitmapSize;\n          huffmanInput.end = bitmapEnd;\n          collectiveBitmap = decodeMMRBitmap(huffmanInput, totalWidth, currentHeight, false);\n          huffmanInput.end = originalEnd;\n          huffmanInput.position = bitmapEnd;\n        }\n\n        const numberOfSymbolsDecoded = symbolWidths.length;\n\n        if (firstSymbol === numberOfSymbolsDecoded - 1) {\n          newSymbols.push(collectiveBitmap);\n        } else {\n          let i,\n              y,\n              xMin = 0,\n              xMax,\n              bitmapWidth,\n              symbolBitmap;\n\n          for (i = firstSymbol; i < numberOfSymbolsDecoded; i++) {\n            bitmapWidth = symbolWidths[i];\n            xMax = xMin + bitmapWidth;\n            symbolBitmap = [];\n\n            for (y = 0; y < currentHeight; y++) {\n              symbolBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));\n            }\n\n            newSymbols.push(symbolBitmap);\n            xMin = xMax;\n          }\n        }\n      }\n    }\n\n    var exportedSymbols = [];\n    var flags = [],\n        currentFlag = false;\n    var totalSymbolsLength = symbols.length + numberOfNewSymbols;\n\n    while (flags.length < totalSymbolsLength) {\n      var runLength = huffman ? tableB1.decode(huffmanInput) : decodeInteger(contextCache, "IAEX", decoder);\n\n      while (runLength--) {\n        flags.push(currentFlag);\n      }\n\n      currentFlag = !currentFlag;\n    }\n\n    for (var i = 0, ii = symbols.length; i < ii; i++) {\n      if (flags[i]) {\n        exportedSymbols.push(symbols[i]);\n      }\n    }\n\n    for (var j = 0; j < numberOfNewSymbols; i++, j++) {\n      if (flags[i]) {\n        exportedSymbols.push(newSymbols[j]);\n      }\n    }\n\n    return exportedSymbols;\n  }\n\n  function decodeTextRegion(huffman, refinement, width, height, defaultPixelValue, numberOfSymbolInstances, stripSize, inputSymbols, symbolCodeLength, transposed, dsOffset, referenceCorner, combinationOperator, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext, logStripSize, huffmanInput) {\n    if (huffman && refinement) {\n      throw new Jbig2Error("refinement with Huffman is not supported");\n    }\n\n    var bitmap = [];\n    var i, row;\n\n    for (i = 0; i < height; i++) {\n      row = new Uint8Array(width);\n\n      if (defaultPixelValue) {\n        for (var j = 0; j < width; j++) {\n          row[j] = defaultPixelValue;\n        }\n      }\n\n      bitmap.push(row);\n    }\n\n    var decoder = decodingContext.decoder;\n    var contextCache = decodingContext.contextCache;\n    var stripT = huffman ? -huffmanTables.tableDeltaT.decode(huffmanInput) : -decodeInteger(contextCache, "IADT", decoder);\n    var firstS = 0;\n    i = 0;\n\n    while (i < numberOfSymbolInstances) {\n      var deltaT = huffman ? huffmanTables.tableDeltaT.decode(huffmanInput) : decodeInteger(contextCache, "IADT", decoder);\n      stripT += deltaT;\n      var deltaFirstS = huffman ? huffmanTables.tableFirstS.decode(huffmanInput) : decodeInteger(contextCache, "IAFS", decoder);\n      firstS += deltaFirstS;\n      var currentS = firstS;\n\n      do {\n        let currentT = 0;\n\n        if (stripSize > 1) {\n          currentT = huffman ? huffmanInput.readBits(logStripSize) : decodeInteger(contextCache, "IAIT", decoder);\n        }\n\n        var t = stripSize * stripT + currentT;\n        var symbolId = huffman ? huffmanTables.symbolIDTable.decode(huffmanInput) : decodeIAID(contextCache, decoder, symbolCodeLength);\n        var applyRefinement = refinement && (huffman ? huffmanInput.readBit() : decodeInteger(contextCache, "IARI", decoder));\n        var symbolBitmap = inputSymbols[symbolId];\n        var symbolWidth = symbolBitmap[0].length;\n        var symbolHeight = symbolBitmap.length;\n\n        if (applyRefinement) {\n          var rdw = decodeInteger(contextCache, "IARDW", decoder);\n          var rdh = decodeInteger(contextCache, "IARDH", decoder);\n          var rdx = decodeInteger(contextCache, "IARDX", decoder);\n          var rdy = decodeInteger(contextCache, "IARDY", decoder);\n          symbolWidth += rdw;\n          symbolHeight += rdh;\n          symbolBitmap = decodeRefinement(symbolWidth, symbolHeight, refinementTemplateIndex, symbolBitmap, (rdw >> 1) + rdx, (rdh >> 1) + rdy, false, refinementAt, decodingContext);\n        }\n\n        var offsetT = t - (referenceCorner & 1 ? 0 : symbolHeight - 1);\n        var offsetS = currentS - (referenceCorner & 2 ? symbolWidth - 1 : 0);\n        var s2, t2, symbolRow;\n\n        if (transposed) {\n          for (s2 = 0; s2 < symbolHeight; s2++) {\n            row = bitmap[offsetS + s2];\n\n            if (!row) {\n              continue;\n            }\n\n            symbolRow = symbolBitmap[s2];\n            var maxWidth = Math.min(width - offsetT, symbolWidth);\n\n            switch (combinationOperator) {\n              case 0:\n                for (t2 = 0; t2 < maxWidth; t2++) {\n                  row[offsetT + t2] |= symbolRow[t2];\n                }\n\n                break;\n\n              case 2:\n                for (t2 = 0; t2 < maxWidth; t2++) {\n                  row[offsetT + t2] ^= symbolRow[t2];\n                }\n\n                break;\n\n              default:\n                throw new Jbig2Error(`operator ${combinationOperator} is not supported`);\n            }\n          }\n\n          currentS += symbolHeight - 1;\n        } else {\n          for (t2 = 0; t2 < symbolHeight; t2++) {\n            row = bitmap[offsetT + t2];\n\n            if (!row) {\n              continue;\n            }\n\n            symbolRow = symbolBitmap[t2];\n\n            switch (combinationOperator) {\n              case 0:\n                for (s2 = 0; s2 < symbolWidth; s2++) {\n                  row[offsetS + s2] |= symbolRow[s2];\n                }\n\n                break;\n\n              case 2:\n                for (s2 = 0; s2 < symbolWidth; s2++) {\n                  row[offsetS + s2] ^= symbolRow[s2];\n                }\n\n                break;\n\n              default:\n                throw new Jbig2Error(`operator ${combinationOperator} is not supported`);\n            }\n          }\n\n          currentS += symbolWidth - 1;\n        }\n\n        i++;\n        var deltaS = huffman ? huffmanTables.tableDeltaS.decode(huffmanInput) : decodeInteger(contextCache, "IADS", decoder);\n\n        if (deltaS === null) {\n          break;\n        }\n\n        currentS += deltaS + dsOffset;\n      } while (true);\n    }\n\n    return bitmap;\n  }\n\n  function decodePatternDictionary(mmr, patternWidth, patternHeight, maxPatternIndex, template, decodingContext) {\n    const at = [];\n\n    if (!mmr) {\n      at.push({\n        x: -patternWidth,\n        y: 0\n      });\n\n      if (template === 0) {\n        at.push({\n          x: -3,\n          y: -1\n        });\n        at.push({\n          x: 2,\n          y: -2\n        });\n        at.push({\n          x: -2,\n          y: -2\n        });\n      }\n    }\n\n    const collectiveWidth = (maxPatternIndex + 1) * patternWidth;\n    const collectiveBitmap = decodeBitmap(mmr, collectiveWidth, patternHeight, template, false, null, at, decodingContext);\n    const patterns = [];\n\n    for (let i = 0; i <= maxPatternIndex; i++) {\n      const patternBitmap = [];\n      const xMin = patternWidth * i;\n      const xMax = xMin + patternWidth;\n\n      for (let y = 0; y < patternHeight; y++) {\n        patternBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));\n      }\n\n      patterns.push(patternBitmap);\n    }\n\n    return patterns;\n  }\n\n  function decodeHalftoneRegion(mmr, patterns, template, regionWidth, regionHeight, defaultPixelValue, enableSkip, combinationOperator, gridWidth, gridHeight, gridOffsetX, gridOffsetY, gridVectorX, gridVectorY, decodingContext) {\n    const skip = null;\n\n    if (enableSkip) {\n      throw new Jbig2Error("skip is not supported");\n    }\n\n    if (combinationOperator !== 0) {\n      throw new Jbig2Error("operator " + combinationOperator + " is not supported in halftone region");\n    }\n\n    const regionBitmap = [];\n    let i, j, row;\n\n    for (i = 0; i < regionHeight; i++) {\n      row = new Uint8Array(regionWidth);\n\n      if (defaultPixelValue) {\n        for (j = 0; j < regionWidth; j++) {\n          row[j] = defaultPixelValue;\n        }\n      }\n\n      regionBitmap.push(row);\n    }\n\n    const numberOfPatterns = patterns.length;\n    const pattern0 = patterns[0];\n    const patternWidth = pattern0[0].length,\n          patternHeight = pattern0.length;\n    const bitsPerValue = (0, _core_utils.log2)(numberOfPatterns);\n    const at = [];\n\n    if (!mmr) {\n      at.push({\n        x: template <= 1 ? 3 : 2,\n        y: -1\n      });\n\n      if (template === 0) {\n        at.push({\n          x: -3,\n          y: -1\n        });\n        at.push({\n          x: 2,\n          y: -2\n        });\n        at.push({\n          x: -2,\n          y: -2\n        });\n      }\n    }\n\n    const grayScaleBitPlanes = [];\n    let mmrInput, bitmap;\n\n    if (mmr) {\n      mmrInput = new Reader(decodingContext.data, decodingContext.start, decodingContext.end);\n    }\n\n    for (i = bitsPerValue - 1; i >= 0; i--) {\n      if (mmr) {\n        bitmap = decodeMMRBitmap(mmrInput, gridWidth, gridHeight, true);\n      } else {\n        bitmap = decodeBitmap(false, gridWidth, gridHeight, template, false, skip, at, decodingContext);\n      }\n\n      grayScaleBitPlanes[i] = bitmap;\n    }\n\n    let mg, ng, bit, patternIndex, patternBitmap, x, y, patternRow, regionRow;\n\n    for (mg = 0; mg < gridHeight; mg++) {\n      for (ng = 0; ng < gridWidth; ng++) {\n        bit = 0;\n        patternIndex = 0;\n\n        for (j = bitsPerValue - 1; j >= 0; j--) {\n          bit = grayScaleBitPlanes[j][mg][ng] ^ bit;\n          patternIndex |= bit << j;\n        }\n\n        patternBitmap = patterns[patternIndex];\n        x = gridOffsetX + mg * gridVectorY + ng * gridVectorX >> 8;\n        y = gridOffsetY + mg * gridVectorX - ng * gridVectorY >> 8;\n\n        if (x >= 0 && x + patternWidth <= regionWidth && y >= 0 && y + patternHeight <= regionHeight) {\n          for (i = 0; i < patternHeight; i++) {\n            regionRow = regionBitmap[y + i];\n            patternRow = patternBitmap[i];\n\n            for (j = 0; j < patternWidth; j++) {\n              regionRow[x + j] |= patternRow[j];\n            }\n          }\n        } else {\n          let regionX, regionY;\n\n          for (i = 0; i < patternHeight; i++) {\n            regionY = y + i;\n\n            if (regionY < 0 || regionY >= regionHeight) {\n              continue;\n            }\n\n            regionRow = regionBitmap[regionY];\n            patternRow = patternBitmap[i];\n\n            for (j = 0; j < patternWidth; j++) {\n              regionX = x + j;\n\n              if (regionX >= 0 && regionX < regionWidth) {\n                regionRow[regionX] |= patternRow[j];\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return regionBitmap;\n  }\n\n  function readSegmentHeader(data, start) {\n    var segmentHeader = {};\n    segmentHeader.number = (0, _core_utils.readUint32)(data, start);\n    var flags = data[start + 4];\n    var segmentType = flags & 0x3f;\n\n    if (!SegmentTypes[segmentType]) {\n      throw new Jbig2Error("invalid segment type: " + segmentType);\n    }\n\n    segmentHeader.type = segmentType;\n    segmentHeader.typeName = SegmentTypes[segmentType];\n    segmentHeader.deferredNonRetain = !!(flags & 0x80);\n    var pageAssociationFieldSize = !!(flags & 0x40);\n    var referredFlags = data[start + 5];\n    var referredToCount = referredFlags >> 5 & 7;\n    var retainBits = [referredFlags & 31];\n    var position = start + 6;\n\n    if (referredFlags === 7) {\n      referredToCount = (0, _core_utils.readUint32)(data, position - 1) & 0x1fffffff;\n      position += 3;\n      var bytes = referredToCount + 7 >> 3;\n      retainBits[0] = data[position++];\n\n      while (--bytes > 0) {\n        retainBits.push(data[position++]);\n      }\n    } else if (referredFlags === 5 || referredFlags === 6) {\n      throw new Jbig2Error("invalid referred-to flags");\n    }\n\n    segmentHeader.retainBits = retainBits;\n    let referredToSegmentNumberSize = 4;\n\n    if (segmentHeader.number <= 256) {\n      referredToSegmentNumberSize = 1;\n    } else if (segmentHeader.number <= 65536) {\n      referredToSegmentNumberSize = 2;\n    }\n\n    var referredTo = [];\n    var i, ii;\n\n    for (i = 0; i < referredToCount; i++) {\n      let number;\n\n      if (referredToSegmentNumberSize === 1) {\n        number = data[position];\n      } else if (referredToSegmentNumberSize === 2) {\n        number = (0, _core_utils.readUint16)(data, position);\n      } else {\n        number = (0, _core_utils.readUint32)(data, position);\n      }\n\n      referredTo.push(number);\n      position += referredToSegmentNumberSize;\n    }\n\n    segmentHeader.referredTo = referredTo;\n\n    if (!pageAssociationFieldSize) {\n      segmentHeader.pageAssociation = data[position++];\n    } else {\n      segmentHeader.pageAssociation = (0, _core_utils.readUint32)(data, position);\n      position += 4;\n    }\n\n    segmentHeader.length = (0, _core_utils.readUint32)(data, position);\n    position += 4;\n\n    if (segmentHeader.length === 0xffffffff) {\n      if (segmentType === 38) {\n        var genericRegionInfo = readRegionSegmentInformation(data, position);\n        var genericRegionSegmentFlags = data[position + RegionSegmentInformationFieldLength];\n        var genericRegionMmr = !!(genericRegionSegmentFlags & 1);\n        var searchPatternLength = 6;\n        var searchPattern = new Uint8Array(searchPatternLength);\n\n        if (!genericRegionMmr) {\n          searchPattern[0] = 0xff;\n          searchPattern[1] = 0xac;\n        }\n\n        searchPattern[2] = genericRegionInfo.height >>> 24 & 0xff;\n        searchPattern[3] = genericRegionInfo.height >> 16 & 0xff;\n        searchPattern[4] = genericRegionInfo.height >> 8 & 0xff;\n        searchPattern[5] = genericRegionInfo.height & 0xff;\n\n        for (i = position, ii = data.length; i < ii; i++) {\n          var j = 0;\n\n          while (j < searchPatternLength && searchPattern[j] === data[i + j]) {\n            j++;\n          }\n\n          if (j === searchPatternLength) {\n            segmentHeader.length = i + searchPatternLength;\n            break;\n          }\n        }\n\n        if (segmentHeader.length === 0xffffffff) {\n          throw new Jbig2Error("segment end was not found");\n        }\n      } else {\n        throw new Jbig2Error("invalid unknown segment length");\n      }\n    }\n\n    segmentHeader.headerEnd = position;\n    return segmentHeader;\n  }\n\n  function readSegments(header, data, start, end) {\n    var segments = [];\n    var position = start;\n\n    while (position < end) {\n      var segmentHeader = readSegmentHeader(data, position);\n      position = segmentHeader.headerEnd;\n      var segment = {\n        header: segmentHeader,\n        data\n      };\n\n      if (!header.randomAccess) {\n        segment.start = position;\n        position += segmentHeader.length;\n        segment.end = position;\n      }\n\n      segments.push(segment);\n\n      if (segmentHeader.type === 51) {\n        break;\n      }\n    }\n\n    if (header.randomAccess) {\n      for (var i = 0, ii = segments.length; i < ii; i++) {\n        segments[i].start = position;\n        position += segments[i].header.length;\n        segments[i].end = position;\n      }\n    }\n\n    return segments;\n  }\n\n  function readRegionSegmentInformation(data, start) {\n    return {\n      width: (0, _core_utils.readUint32)(data, start),\n      height: (0, _core_utils.readUint32)(data, start + 4),\n      x: (0, _core_utils.readUint32)(data, start + 8),\n      y: (0, _core_utils.readUint32)(data, start + 12),\n      combinationOperator: data[start + 16] & 7\n    };\n  }\n\n  var RegionSegmentInformationFieldLength = 17;\n\n  function processSegment(segment, visitor) {\n    var header = segment.header;\n    var data = segment.data,\n        position = segment.start,\n        end = segment.end;\n    var args, at, i, atLength;\n\n    switch (header.type) {\n      case 0:\n        var dictionary = {};\n        var dictionaryFlags = (0, _core_utils.readUint16)(data, position);\n        dictionary.huffman = !!(dictionaryFlags & 1);\n        dictionary.refinement = !!(dictionaryFlags & 2);\n        dictionary.huffmanDHSelector = dictionaryFlags >> 2 & 3;\n        dictionary.huffmanDWSelector = dictionaryFlags >> 4 & 3;\n        dictionary.bitmapSizeSelector = dictionaryFlags >> 6 & 1;\n        dictionary.aggregationInstancesSelector = dictionaryFlags >> 7 & 1;\n        dictionary.bitmapCodingContextUsed = !!(dictionaryFlags & 256);\n        dictionary.bitmapCodingContextRetained = !!(dictionaryFlags & 512);\n        dictionary.template = dictionaryFlags >> 10 & 3;\n        dictionary.refinementTemplate = dictionaryFlags >> 12 & 1;\n        position += 2;\n\n        if (!dictionary.huffman) {\n          atLength = dictionary.template === 0 ? 4 : 1;\n          at = [];\n\n          for (i = 0; i < atLength; i++) {\n            at.push({\n              x: (0, _core_utils.readInt8)(data, position),\n              y: (0, _core_utils.readInt8)(data, position + 1)\n            });\n            position += 2;\n          }\n\n          dictionary.at = at;\n        }\n\n        if (dictionary.refinement && !dictionary.refinementTemplate) {\n          at = [];\n\n          for (i = 0; i < 2; i++) {\n            at.push({\n              x: (0, _core_utils.readInt8)(data, position),\n              y: (0, _core_utils.readInt8)(data, position + 1)\n            });\n            position += 2;\n          }\n\n          dictionary.refinementAt = at;\n        }\n\n        dictionary.numberOfExportedSymbols = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        dictionary.numberOfNewSymbols = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        args = [dictionary, header.number, header.referredTo, data, position, end];\n        break;\n\n      case 6:\n      case 7:\n        var textRegion = {};\n        textRegion.info = readRegionSegmentInformation(data, position);\n        position += RegionSegmentInformationFieldLength;\n        var textRegionSegmentFlags = (0, _core_utils.readUint16)(data, position);\n        position += 2;\n        textRegion.huffman = !!(textRegionSegmentFlags & 1);\n        textRegion.refinement = !!(textRegionSegmentFlags & 2);\n        textRegion.logStripSize = textRegionSegmentFlags >> 2 & 3;\n        textRegion.stripSize = 1 << textRegion.logStripSize;\n        textRegion.referenceCorner = textRegionSegmentFlags >> 4 & 3;\n        textRegion.transposed = !!(textRegionSegmentFlags & 64);\n        textRegion.combinationOperator = textRegionSegmentFlags >> 7 & 3;\n        textRegion.defaultPixelValue = textRegionSegmentFlags >> 9 & 1;\n        textRegion.dsOffset = textRegionSegmentFlags << 17 >> 27;\n        textRegion.refinementTemplate = textRegionSegmentFlags >> 15 & 1;\n\n        if (textRegion.huffman) {\n          var textRegionHuffmanFlags = (0, _core_utils.readUint16)(data, position);\n          position += 2;\n          textRegion.huffmanFS = textRegionHuffmanFlags & 3;\n          textRegion.huffmanDS = textRegionHuffmanFlags >> 2 & 3;\n          textRegion.huffmanDT = textRegionHuffmanFlags >> 4 & 3;\n          textRegion.huffmanRefinementDW = textRegionHuffmanFlags >> 6 & 3;\n          textRegion.huffmanRefinementDH = textRegionHuffmanFlags >> 8 & 3;\n          textRegion.huffmanRefinementDX = textRegionHuffmanFlags >> 10 & 3;\n          textRegion.huffmanRefinementDY = textRegionHuffmanFlags >> 12 & 3;\n          textRegion.huffmanRefinementSizeSelector = !!(textRegionHuffmanFlags & 0x4000);\n        }\n\n        if (textRegion.refinement && !textRegion.refinementTemplate) {\n          at = [];\n\n          for (i = 0; i < 2; i++) {\n            at.push({\n              x: (0, _core_utils.readInt8)(data, position),\n              y: (0, _core_utils.readInt8)(data, position + 1)\n            });\n            position += 2;\n          }\n\n          textRegion.refinementAt = at;\n        }\n\n        textRegion.numberOfSymbolInstances = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        args = [textRegion, header.referredTo, data, position, end];\n        break;\n\n      case 16:\n        const patternDictionary = {};\n        const patternDictionaryFlags = data[position++];\n        patternDictionary.mmr = !!(patternDictionaryFlags & 1);\n        patternDictionary.template = patternDictionaryFlags >> 1 & 3;\n        patternDictionary.patternWidth = data[position++];\n        patternDictionary.patternHeight = data[position++];\n        patternDictionary.maxPatternIndex = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        args = [patternDictionary, header.number, data, position, end];\n        break;\n\n      case 22:\n      case 23:\n        const halftoneRegion = {};\n        halftoneRegion.info = readRegionSegmentInformation(data, position);\n        position += RegionSegmentInformationFieldLength;\n        const halftoneRegionFlags = data[position++];\n        halftoneRegion.mmr = !!(halftoneRegionFlags & 1);\n        halftoneRegion.template = halftoneRegionFlags >> 1 & 3;\n        halftoneRegion.enableSkip = !!(halftoneRegionFlags & 8);\n        halftoneRegion.combinationOperator = halftoneRegionFlags >> 4 & 7;\n        halftoneRegion.defaultPixelValue = halftoneRegionFlags >> 7 & 1;\n        halftoneRegion.gridWidth = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        halftoneRegion.gridHeight = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        halftoneRegion.gridOffsetX = (0, _core_utils.readUint32)(data, position) & 0xffffffff;\n        position += 4;\n        halftoneRegion.gridOffsetY = (0, _core_utils.readUint32)(data, position) & 0xffffffff;\n        position += 4;\n        halftoneRegion.gridVectorX = (0, _core_utils.readUint16)(data, position);\n        position += 2;\n        halftoneRegion.gridVectorY = (0, _core_utils.readUint16)(data, position);\n        position += 2;\n        args = [halftoneRegion, header.referredTo, data, position, end];\n        break;\n\n      case 38:\n      case 39:\n        var genericRegion = {};\n        genericRegion.info = readRegionSegmentInformation(data, position);\n        position += RegionSegmentInformationFieldLength;\n        var genericRegionSegmentFlags = data[position++];\n        genericRegion.mmr = !!(genericRegionSegmentFlags & 1);\n        genericRegion.template = genericRegionSegmentFlags >> 1 & 3;\n        genericRegion.prediction = !!(genericRegionSegmentFlags & 8);\n\n        if (!genericRegion.mmr) {\n          atLength = genericRegion.template === 0 ? 4 : 1;\n          at = [];\n\n          for (i = 0; i < atLength; i++) {\n            at.push({\n              x: (0, _core_utils.readInt8)(data, position),\n              y: (0, _core_utils.readInt8)(data, position + 1)\n            });\n            position += 2;\n          }\n\n          genericRegion.at = at;\n        }\n\n        args = [genericRegion, data, position, end];\n        break;\n\n      case 48:\n        var pageInfo = {\n          width: (0, _core_utils.readUint32)(data, position),\n          height: (0, _core_utils.readUint32)(data, position + 4),\n          resolutionX: (0, _core_utils.readUint32)(data, position + 8),\n          resolutionY: (0, _core_utils.readUint32)(data, position + 12)\n        };\n\n        if (pageInfo.height === 0xffffffff) {\n          delete pageInfo.height;\n        }\n\n        var pageSegmentFlags = data[position + 16];\n        (0, _core_utils.readUint16)(data, position + 17);\n        pageInfo.lossless = !!(pageSegmentFlags & 1);\n        pageInfo.refinement = !!(pageSegmentFlags & 2);\n        pageInfo.defaultPixelValue = pageSegmentFlags >> 2 & 1;\n        pageInfo.combinationOperator = pageSegmentFlags >> 3 & 3;\n        pageInfo.requiresBuffer = !!(pageSegmentFlags & 32);\n        pageInfo.combinationOperatorOverride = !!(pageSegmentFlags & 64);\n        args = [pageInfo];\n        break;\n\n      case 49:\n        break;\n\n      case 50:\n        break;\n\n      case 51:\n        break;\n\n      case 53:\n        args = [header.number, data, position, end];\n        break;\n\n      case 62:\n        break;\n\n      default:\n        throw new Jbig2Error(`segment type ${header.typeName}(${header.type})` + " is not implemented");\n    }\n\n    var callbackName = "on" + header.typeName;\n\n    if (callbackName in visitor) {\n      visitor[callbackName].apply(visitor, args);\n    }\n  }\n\n  function processSegments(segments, visitor) {\n    for (var i = 0, ii = segments.length; i < ii; i++) {\n      processSegment(segments[i], visitor);\n    }\n  }\n\n  function parseJbig2Chunks(chunks) {\n    var visitor = new SimpleSegmentVisitor();\n\n    for (var i = 0, ii = chunks.length; i < ii; i++) {\n      var chunk = chunks[i];\n      var segments = readSegments({}, chunk.data, chunk.start, chunk.end);\n      processSegments(segments, visitor);\n    }\n\n    return visitor.buffer;\n  }\n\n  function parseJbig2(data) {\n    const end = data.length;\n    let position = 0;\n\n    if (data[position] !== 0x97 || data[position + 1] !== 0x4a || data[position + 2] !== 0x42 || data[position + 3] !== 0x32 || data[position + 4] !== 0x0d || data[position + 5] !== 0x0a || data[position + 6] !== 0x1a || data[position + 7] !== 0x0a) {\n      throw new Jbig2Error("parseJbig2 - invalid header.");\n    }\n\n    const header = Object.create(null);\n    position += 8;\n    const flags = data[position++];\n    header.randomAccess = !(flags & 1);\n\n    if (!(flags & 2)) {\n      header.numberOfPages = (0, _core_utils.readUint32)(data, position);\n      position += 4;\n    }\n\n    const segments = readSegments(header, data, position, end);\n    const visitor = new SimpleSegmentVisitor();\n    processSegments(segments, visitor);\n    const {\n      width,\n      height\n    } = visitor.currentPageInfo;\n    const bitPacked = visitor.buffer;\n    const imgData = new Uint8ClampedArray(width * height);\n    let q = 0,\n        k = 0;\n\n    for (let i = 0; i < height; i++) {\n      let mask = 0,\n          buffer;\n\n      for (let j = 0; j < width; j++) {\n        if (!mask) {\n          mask = 128;\n          buffer = bitPacked[k++];\n        }\n\n        imgData[q++] = buffer & mask ? 0 : 255;\n        mask >>= 1;\n      }\n    }\n\n    return {\n      imgData,\n      width,\n      height\n    };\n  }\n\n  function SimpleSegmentVisitor() {}\n\n  SimpleSegmentVisitor.prototype = {\n    onPageInformation: function SimpleSegmentVisitor_onPageInformation(info) {\n      this.currentPageInfo = info;\n      var rowSize = info.width + 7 >> 3;\n      var buffer = new Uint8ClampedArray(rowSize * info.height);\n\n      if (info.defaultPixelValue) {\n        for (var i = 0, ii = buffer.length; i < ii; i++) {\n          buffer[i] = 0xff;\n        }\n      }\n\n      this.buffer = buffer;\n    },\n    drawBitmap: function SimpleSegmentVisitor_drawBitmap(regionInfo, bitmap) {\n      var pageInfo = this.currentPageInfo;\n      var width = regionInfo.width,\n          height = regionInfo.height;\n      var rowSize = pageInfo.width + 7 >> 3;\n      var combinationOperator = pageInfo.combinationOperatorOverride ? regionInfo.combinationOperator : pageInfo.combinationOperator;\n      var buffer = this.buffer;\n      var mask0 = 128 >> (regionInfo.x & 7);\n      var offset0 = regionInfo.y * rowSize + (regionInfo.x >> 3);\n      var i, j, mask, offset;\n\n      switch (combinationOperator) {\n        case 0:\n          for (i = 0; i < height; i++) {\n            mask = mask0;\n            offset = offset0;\n\n            for (j = 0; j < width; j++) {\n              if (bitmap[i][j]) {\n                buffer[offset] |= mask;\n              }\n\n              mask >>= 1;\n\n              if (!mask) {\n                mask = 128;\n                offset++;\n              }\n            }\n\n            offset0 += rowSize;\n          }\n\n          break;\n\n        case 2:\n          for (i = 0; i < height; i++) {\n            mask = mask0;\n            offset = offset0;\n\n            for (j = 0; j < width; j++) {\n              if (bitmap[i][j]) {\n                buffer[offset] ^= mask;\n              }\n\n              mask >>= 1;\n\n              if (!mask) {\n                mask = 128;\n                offset++;\n              }\n            }\n\n            offset0 += rowSize;\n          }\n\n          break;\n\n        default:\n          throw new Jbig2Error(`operator ${combinationOperator} is not supported`);\n      }\n    },\n    onImmediateGenericRegion: function SimpleSegmentVisitor_onImmediateGenericRegion(region, data, start, end) {\n      var regionInfo = region.info;\n      var decodingContext = new DecodingContext(data, start, end);\n      var bitmap = decodeBitmap(region.mmr, regionInfo.width, regionInfo.height, region.template, region.prediction, null, region.at, decodingContext);\n      this.drawBitmap(regionInfo, bitmap);\n    },\n    onImmediateLosslessGenericRegion: function SimpleSegmentVisitor_onImmediateLosslessGenericRegion() {\n      this.onImmediateGenericRegion.apply(this, arguments);\n    },\n    onSymbolDictionary: function SimpleSegmentVisitor_onSymbolDictionary(dictionary, currentSegment, referredSegments, data, start, end) {\n      let huffmanTables, huffmanInput;\n\n      if (dictionary.huffman) {\n        huffmanTables = getSymbolDictionaryHuffmanTables(dictionary, referredSegments, this.customTables);\n        huffmanInput = new Reader(data, start, end);\n      }\n\n      var symbols = this.symbols;\n\n      if (!symbols) {\n        this.symbols = symbols = {};\n      }\n\n      var inputSymbols = [];\n\n      for (var i = 0, ii = referredSegments.length; i < ii; i++) {\n        const referredSymbols = symbols[referredSegments[i]];\n\n        if (referredSymbols) {\n          inputSymbols = inputSymbols.concat(referredSymbols);\n        }\n      }\n\n      var decodingContext = new DecodingContext(data, start, end);\n      symbols[currentSegment] = decodeSymbolDictionary(dictionary.huffman, dictionary.refinement, inputSymbols, dictionary.numberOfNewSymbols, dictionary.numberOfExportedSymbols, huffmanTables, dictionary.template, dictionary.at, dictionary.refinementTemplate, dictionary.refinementAt, decodingContext, huffmanInput);\n    },\n    onImmediateTextRegion: function SimpleSegmentVisitor_onImmediateTextRegion(region, referredSegments, data, start, end) {\n      var regionInfo = region.info;\n      let huffmanTables, huffmanInput;\n      var symbols = this.symbols;\n      var inputSymbols = [];\n\n      for (var i = 0, ii = referredSegments.length; i < ii; i++) {\n        const referredSymbols = symbols[referredSegments[i]];\n\n        if (referredSymbols) {\n          inputSymbols = inputSymbols.concat(referredSymbols);\n        }\n      }\n\n      var symbolCodeLength = (0, _core_utils.log2)(inputSymbols.length);\n\n      if (region.huffman) {\n        huffmanInput = new Reader(data, start, end);\n        huffmanTables = getTextRegionHuffmanTables(region, referredSegments, this.customTables, inputSymbols.length, huffmanInput);\n      }\n\n      var decodingContext = new DecodingContext(data, start, end);\n      var bitmap = decodeTextRegion(region.huffman, region.refinement, regionInfo.width, regionInfo.height, region.defaultPixelValue, region.numberOfSymbolInstances, region.stripSize, inputSymbols, symbolCodeLength, region.transposed, region.dsOffset, region.referenceCorner, region.combinationOperator, huffmanTables, region.refinementTemplate, region.refinementAt, decodingContext, region.logStripSize, huffmanInput);\n      this.drawBitmap(regionInfo, bitmap);\n    },\n    onImmediateLosslessTextRegion: function SimpleSegmentVisitor_onImmediateLosslessTextRegion() {\n      this.onImmediateTextRegion.apply(this, arguments);\n    },\n\n    onPatternDictionary(dictionary, currentSegment, data, start, end) {\n      let patterns = this.patterns;\n\n      if (!patterns) {\n        this.patterns = patterns = {};\n      }\n\n      const decodingContext = new DecodingContext(data, start, end);\n      patterns[currentSegment] = decodePatternDictionary(dictionary.mmr, dictionary.patternWidth, dictionary.patternHeight, dictionary.maxPatternIndex, dictionary.template, decodingContext);\n    },\n\n    onImmediateHalftoneRegion(region, referredSegments, data, start, end) {\n      const patterns = this.patterns[referredSegments[0]];\n      const regionInfo = region.info;\n      const decodingContext = new DecodingContext(data, start, end);\n      const bitmap = decodeHalftoneRegion(region.mmr, patterns, region.template, regionInfo.width, regionInfo.height, region.defaultPixelValue, region.enableSkip, region.combinationOperator, region.gridWidth, region.gridHeight, region.gridOffsetX, region.gridOffsetY, region.gridVectorX, region.gridVectorY, decodingContext);\n      this.drawBitmap(regionInfo, bitmap);\n    },\n\n    onImmediateLosslessHalftoneRegion() {\n      this.onImmediateHalftoneRegion.apply(this, arguments);\n    },\n\n    onTables(currentSegment, data, start, end) {\n      let customTables = this.customTables;\n\n      if (!customTables) {\n        this.customTables = customTables = {};\n      }\n\n      customTables[currentSegment] = decodeTablesSegment(data, start, end);\n    }\n\n  };\n\n  function HuffmanLine(lineData) {\n    if (lineData.length === 2) {\n      this.isOOB = true;\n      this.rangeLow = 0;\n      this.prefixLength = lineData[0];\n      this.rangeLength = 0;\n      this.prefixCode = lineData[1];\n      this.isLowerRange = false;\n    } else {\n      this.isOOB = false;\n      this.rangeLow = lineData[0];\n      this.prefixLength = lineData[1];\n      this.rangeLength = lineData[2];\n      this.prefixCode = lineData[3];\n      this.isLowerRange = lineData[4] === "lower";\n    }\n  }\n\n  function HuffmanTreeNode(line) {\n    this.children = [];\n\n    if (line) {\n      this.isLeaf = true;\n      this.rangeLength = line.rangeLength;\n      this.rangeLow = line.rangeLow;\n      this.isLowerRange = line.isLowerRange;\n      this.isOOB = line.isOOB;\n    } else {\n      this.isLeaf = false;\n    }\n  }\n\n  HuffmanTreeNode.prototype = {\n    buildTree(line, shift) {\n      const bit = line.prefixCode >> shift & 1;\n\n      if (shift <= 0) {\n        this.children[bit] = new HuffmanTreeNode(line);\n      } else {\n        let node = this.children[bit];\n\n        if (!node) {\n          this.children[bit] = node = new HuffmanTreeNode(null);\n        }\n\n        node.buildTree(line, shift - 1);\n      }\n    },\n\n    decodeNode(reader) {\n      if (this.isLeaf) {\n        if (this.isOOB) {\n          return null;\n        }\n\n        const htOffset = reader.readBits(this.rangeLength);\n        return this.rangeLow + (this.isLowerRange ? -htOffset : htOffset);\n      }\n\n      const node = this.children[reader.readBit()];\n\n      if (!node) {\n        throw new Jbig2Error("invalid Huffman data");\n      }\n\n      return node.decodeNode(reader);\n    }\n\n  };\n\n  function HuffmanTable(lines, prefixCodesDone) {\n    if (!prefixCodesDone) {\n      this.assignPrefixCodes(lines);\n    }\n\n    this.rootNode = new HuffmanTreeNode(null);\n\n    for (let i = 0, ii = lines.length; i < ii; i++) {\n      const line = lines[i];\n\n      if (line.prefixLength > 0) {\n        this.rootNode.buildTree(line, line.prefixLength - 1);\n      }\n    }\n  }\n\n  HuffmanTable.prototype = {\n    decode(reader) {\n      return this.rootNode.decodeNode(reader);\n    },\n\n    assignPrefixCodes(lines) {\n      const linesLength = lines.length;\n      let prefixLengthMax = 0;\n\n      for (let i = 0; i < linesLength; i++) {\n        prefixLengthMax = Math.max(prefixLengthMax, lines[i].prefixLength);\n      }\n\n      const histogram = new Uint32Array(prefixLengthMax + 1);\n\n      for (let i = 0; i < linesLength; i++) {\n        histogram[lines[i].prefixLength]++;\n      }\n\n      let currentLength = 1,\n          firstCode = 0,\n          currentCode,\n          currentTemp,\n          line;\n      histogram[0] = 0;\n\n      while (currentLength <= prefixLengthMax) {\n        firstCode = firstCode + histogram[currentLength - 1] << 1;\n        currentCode = firstCode;\n        currentTemp = 0;\n\n        while (currentTemp < linesLength) {\n          line = lines[currentTemp];\n\n          if (line.prefixLength === currentLength) {\n            line.prefixCode = currentCode;\n            currentCode++;\n          }\n\n          currentTemp++;\n        }\n\n        currentLength++;\n      }\n    }\n\n  };\n\n  function decodeTablesSegment(data, start, end) {\n    const flags = data[start];\n    const lowestValue = (0, _core_utils.readUint32)(data, start + 1) & 0xffffffff;\n    const highestValue = (0, _core_utils.readUint32)(data, start + 5) & 0xffffffff;\n    const reader = new Reader(data, start + 9, end);\n    const prefixSizeBits = (flags >> 1 & 7) + 1;\n    const rangeSizeBits = (flags >> 4 & 7) + 1;\n    const lines = [];\n    let prefixLength,\n        rangeLength,\n        currentRangeLow = lowestValue;\n\n    do {\n      prefixLength = reader.readBits(prefixSizeBits);\n      rangeLength = reader.readBits(rangeSizeBits);\n      lines.push(new HuffmanLine([currentRangeLow, prefixLength, rangeLength, 0]));\n      currentRangeLow += 1 << rangeLength;\n    } while (currentRangeLow < highestValue);\n\n    prefixLength = reader.readBits(prefixSizeBits);\n    lines.push(new HuffmanLine([lowestValue - 1, prefixLength, 32, 0, "lower"]));\n    prefixLength = reader.readBits(prefixSizeBits);\n    lines.push(new HuffmanLine([highestValue, prefixLength, 32, 0]));\n\n    if (flags & 1) {\n      prefixLength = reader.readBits(prefixSizeBits);\n      lines.push(new HuffmanLine([prefixLength, 0]));\n    }\n\n    return new HuffmanTable(lines, false);\n  }\n\n  const standardTablesCache = {};\n\n  function getStandardTable(number) {\n    let table = standardTablesCache[number];\n\n    if (table) {\n      return table;\n    }\n\n    let lines;\n\n    switch (number) {\n      case 1:\n        lines = [[0, 1, 4, 0x0], [16, 2, 8, 0x2], [272, 3, 16, 0x6], [65808, 3, 32, 0x7]];\n        break;\n\n      case 2:\n        lines = [[0, 1, 0, 0x0], [1, 2, 0, 0x2], [2, 3, 0, 0x6], [3, 4, 3, 0xe], [11, 5, 6, 0x1e], [75, 6, 32, 0x3e], [6, 0x3f]];\n        break;\n\n      case 3:\n        lines = [[-256, 8, 8, 0xfe], [0, 1, 0, 0x0], [1, 2, 0, 0x2], [2, 3, 0, 0x6], [3, 4, 3, 0xe], [11, 5, 6, 0x1e], [-257, 8, 32, 0xff, "lower"], [75, 7, 32, 0x7e], [6, 0x3e]];\n        break;\n\n      case 4:\n        lines = [[1, 1, 0, 0x0], [2, 2, 0, 0x2], [3, 3, 0, 0x6], [4, 4, 3, 0xe], [12, 5, 6, 0x1e], [76, 5, 32, 0x1f]];\n        break;\n\n      case 5:\n        lines = [[-255, 7, 8, 0x7e], [1, 1, 0, 0x0], [2, 2, 0, 0x2], [3, 3, 0, 0x6], [4, 4, 3, 0xe], [12, 5, 6, 0x1e], [-256, 7, 32, 0x7f, "lower"], [76, 6, 32, 0x3e]];\n        break;\n\n      case 6:\n        lines = [[-2048, 5, 10, 0x1c], [-1024, 4, 9, 0x8], [-512, 4, 8, 0x9], [-256, 4, 7, 0xa], [-128, 5, 6, 0x1d], [-64, 5, 5, 0x1e], [-32, 4, 5, 0xb], [0, 2, 7, 0x0], [128, 3, 7, 0x2], [256, 3, 8, 0x3], [512, 4, 9, 0xc], [1024, 4, 10, 0xd], [-2049, 6, 32, 0x3e, "lower"], [2048, 6, 32, 0x3f]];\n        break;\n\n      case 7:\n        lines = [[-1024, 4, 9, 0x8], [-512, 3, 8, 0x0], [-256, 4, 7, 0x9], [-128, 5, 6, 0x1a], [-64, 5, 5, 0x1b], [-32, 4, 5, 0xa], [0, 4, 5, 0xb], [32, 5, 5, 0x1c], [64, 5, 6, 0x1d], [128, 4, 7, 0xc], [256, 3, 8, 0x1], [512, 3, 9, 0x2], [1024, 3, 10, 0x3], [-1025, 5, 32, 0x1e, "lower"], [2048, 5, 32, 0x1f]];\n        break;\n\n      case 8:\n        lines = [[-15, 8, 3, 0xfc], [-7, 9, 1, 0x1fc], [-5, 8, 1, 0xfd], [-3, 9, 0, 0x1fd], [-2, 7, 0, 0x7c], [-1, 4, 0, 0xa], [0, 2, 1, 0x0], [2, 5, 0, 0x1a], [3, 6, 0, 0x3a], [4, 3, 4, 0x4], [20, 6, 1, 0x3b], [22, 4, 4, 0xb], [38, 4, 5, 0xc], [70, 5, 6, 0x1b], [134, 5, 7, 0x1c], [262, 6, 7, 0x3c], [390, 7, 8, 0x7d], [646, 6, 10, 0x3d], [-16, 9, 32, 0x1fe, "lower"], [1670, 9, 32, 0x1ff], [2, 0x1]];\n        break;\n\n      case 9:\n        lines = [[-31, 8, 4, 0xfc], [-15, 9, 2, 0x1fc], [-11, 8, 2, 0xfd], [-7, 9, 1, 0x1fd], [-5, 7, 1, 0x7c], [-3, 4, 1, 0xa], [-1, 3, 1, 0x2], [1, 3, 1, 0x3], [3, 5, 1, 0x1a], [5, 6, 1, 0x3a], [7, 3, 5, 0x4], [39, 6, 2, 0x3b], [43, 4, 5, 0xb], [75, 4, 6, 0xc], [139, 5, 7, 0x1b], [267, 5, 8, 0x1c], [523, 6, 8, 0x3c], [779, 7, 9, 0x7d], [1291, 6, 11, 0x3d], [-32, 9, 32, 0x1fe, "lower"], [3339, 9, 32, 0x1ff], [2, 0x0]];\n        break;\n\n      case 10:\n        lines = [[-21, 7, 4, 0x7a], [-5, 8, 0, 0xfc], [-4, 7, 0, 0x7b], [-3, 5, 0, 0x18], [-2, 2, 2, 0x0], [2, 5, 0, 0x19], [3, 6, 0, 0x36], [4, 7, 0, 0x7c], [5, 8, 0, 0xfd], [6, 2, 6, 0x1], [70, 5, 5, 0x1a], [102, 6, 5, 0x37], [134, 6, 6, 0x38], [198, 6, 7, 0x39], [326, 6, 8, 0x3a], [582, 6, 9, 0x3b], [1094, 6, 10, 0x3c], [2118, 7, 11, 0x7d], [-22, 8, 32, 0xfe, "lower"], [4166, 8, 32, 0xff], [2, 0x2]];\n        break;\n\n      case 11:\n        lines = [[1, 1, 0, 0x0], [2, 2, 1, 0x2], [4, 4, 0, 0xc], [5, 4, 1, 0xd], [7, 5, 1, 0x1c], [9, 5, 2, 0x1d], [13, 6, 2, 0x3c], [17, 7, 2, 0x7a], [21, 7, 3, 0x7b], [29, 7, 4, 0x7c], [45, 7, 5, 0x7d], [77, 7, 6, 0x7e], [141, 7, 32, 0x7f]];\n        break;\n\n      case 12:\n        lines = [[1, 1, 0, 0x0], [2, 2, 0, 0x2], [3, 3, 1, 0x6], [5, 5, 0, 0x1c], [6, 5, 1, 0x1d], [8, 6, 1, 0x3c], [10, 7, 0, 0x7a], [11, 7, 1, 0x7b], [13, 7, 2, 0x7c], [17, 7, 3, 0x7d], [25, 7, 4, 0x7e], [41, 8, 5, 0xfe], [73, 8, 32, 0xff]];\n        break;\n\n      case 13:\n        lines = [[1, 1, 0, 0x0], [2, 3, 0, 0x4], [3, 4, 0, 0xc], [4, 5, 0, 0x1c], [5, 4, 1, 0xd], [7, 3, 3, 0x5], [15, 6, 1, 0x3a], [17, 6, 2, 0x3b], [21, 6, 3, 0x3c], [29, 6, 4, 0x3d], [45, 6, 5, 0x3e], [77, 7, 6, 0x7e], [141, 7, 32, 0x7f]];\n        break;\n\n      case 14:\n        lines = [[-2, 3, 0, 0x4], [-1, 3, 0, 0x5], [0, 1, 0, 0x0], [1, 3, 0, 0x6], [2, 3, 0, 0x7]];\n        break;\n\n      case 15:\n        lines = [[-24, 7, 4, 0x7c], [-8, 6, 2, 0x3c], [-4, 5, 1, 0x1c], [-2, 4, 0, 0xc], [-1, 3, 0, 0x4], [0, 1, 0, 0x0], [1, 3, 0, 0x5], [2, 4, 0, 0xd], [3, 5, 1, 0x1d], [5, 6, 2, 0x3d], [9, 7, 4, 0x7d], [-25, 7, 32, 0x7e, "lower"], [25, 7, 32, 0x7f]];\n        break;\n\n      default:\n        throw new Jbig2Error(`standard table B.${number} does not exist`);\n    }\n\n    for (let i = 0, ii = lines.length; i < ii; i++) {\n      lines[i] = new HuffmanLine(lines[i]);\n    }\n\n    table = new HuffmanTable(lines, true);\n    standardTablesCache[number] = table;\n    return table;\n  }\n\n  function Reader(data, start, end) {\n    this.data = data;\n    this.start = start;\n    this.end = end;\n    this.position = start;\n    this.shift = -1;\n    this.currentByte = 0;\n  }\n\n  Reader.prototype = {\n    readBit() {\n      if (this.shift < 0) {\n        if (this.position >= this.end) {\n          throw new Jbig2Error("end of data while reading bit");\n        }\n\n        this.currentByte = this.data[this.position++];\n        this.shift = 7;\n      }\n\n      const bit = this.currentByte >> this.shift & 1;\n      this.shift--;\n      return bit;\n    },\n\n    readBits(numBits) {\n      let result = 0,\n          i;\n\n      for (i = numBits - 1; i >= 0; i--) {\n        result |= this.readBit() << i;\n      }\n\n      return result;\n    },\n\n    byteAlign() {\n      this.shift = -1;\n    },\n\n    next() {\n      if (this.position >= this.end) {\n        return -1;\n      }\n\n      return this.data[this.position++];\n    }\n\n  };\n\n  function getCustomHuffmanTable(index, referredTo, customTables) {\n    let currentIndex = 0;\n\n    for (let i = 0, ii = referredTo.length; i < ii; i++) {\n      const table = customTables[referredTo[i]];\n\n      if (table) {\n        if (index === currentIndex) {\n          return table;\n        }\n\n        currentIndex++;\n      }\n    }\n\n    throw new Jbig2Error("can\'t find custom Huffman table");\n  }\n\n  function getTextRegionHuffmanTables(textRegion, referredTo, customTables, numberOfSymbols, reader) {\n    const codes = [];\n\n    for (let i = 0; i <= 34; i++) {\n      const codeLength = reader.readBits(4);\n      codes.push(new HuffmanLine([i, codeLength, 0, 0]));\n    }\n\n    const runCodesTable = new HuffmanTable(codes, false);\n    codes.length = 0;\n\n    for (let i = 0; i < numberOfSymbols;) {\n      const codeLength = runCodesTable.decode(reader);\n\n      if (codeLength >= 32) {\n        let repeatedLength, numberOfRepeats, j;\n\n        switch (codeLength) {\n          case 32:\n            if (i === 0) {\n              throw new Jbig2Error("no previous value in symbol ID table");\n            }\n\n            numberOfRepeats = reader.readBits(2) + 3;\n            repeatedLength = codes[i - 1].prefixLength;\n            break;\n\n          case 33:\n            numberOfRepeats = reader.readBits(3) + 3;\n            repeatedLength = 0;\n            break;\n\n          case 34:\n            numberOfRepeats = reader.readBits(7) + 11;\n            repeatedLength = 0;\n            break;\n\n          default:\n            throw new Jbig2Error("invalid code length in symbol ID table");\n        }\n\n        for (j = 0; j < numberOfRepeats; j++) {\n          codes.push(new HuffmanLine([i, repeatedLength, 0, 0]));\n          i++;\n        }\n      } else {\n        codes.push(new HuffmanLine([i, codeLength, 0, 0]));\n        i++;\n      }\n    }\n\n    reader.byteAlign();\n    const symbolIDTable = new HuffmanTable(codes, false);\n    let customIndex = 0,\n        tableFirstS,\n        tableDeltaS,\n        tableDeltaT;\n\n    switch (textRegion.huffmanFS) {\n      case 0:\n      case 1:\n        tableFirstS = getStandardTable(textRegion.huffmanFS + 6);\n        break;\n\n      case 3:\n        tableFirstS = getCustomHuffmanTable(customIndex, referredTo, customTables);\n        customIndex++;\n        break;\n\n      default:\n        throw new Jbig2Error("invalid Huffman FS selector");\n    }\n\n    switch (textRegion.huffmanDS) {\n      case 0:\n      case 1:\n      case 2:\n        tableDeltaS = getStandardTable(textRegion.huffmanDS + 8);\n        break;\n\n      case 3:\n        tableDeltaS = getCustomHuffmanTable(customIndex, referredTo, customTables);\n        customIndex++;\n        break;\n\n      default:\n        throw new Jbig2Error("invalid Huffman DS selector");\n    }\n\n    switch (textRegion.huffmanDT) {\n      case 0:\n      case 1:\n      case 2:\n        tableDeltaT = getStandardTable(textRegion.huffmanDT + 11);\n        break;\n\n      case 3:\n        tableDeltaT = getCustomHuffmanTable(customIndex, referredTo, customTables);\n        customIndex++;\n        break;\n\n      default:\n        throw new Jbig2Error("invalid Huffman DT selector");\n    }\n\n    if (textRegion.refinement) {\n      throw new Jbig2Error("refinement with Huffman is not supported");\n    }\n\n    return {\n      symbolIDTable,\n      tableFirstS,\n      tableDeltaS,\n      tableDeltaT\n    };\n  }\n\n  function getSymbolDictionaryHuffmanTables(dictionary, referredTo, customTables) {\n    let customIndex = 0,\n        tableDeltaHeight,\n        tableDeltaWidth;\n\n    switch (dictionary.huffmanDHSelector) {\n      case 0:\n      case 1:\n        tableDeltaHeight = getStandardTable(dictionary.huffmanDHSelector + 4);\n        break;\n\n      case 3:\n        tableDeltaHeight = getCustomHuffmanTable(customIndex, referredTo, customTables);\n        customIndex++;\n        break;\n\n      default:\n        throw new Jbig2Error("invalid Huffman DH selector");\n    }\n\n    switch (dictionary.huffmanDWSelector) {\n      case 0:\n      case 1:\n        tableDeltaWidth = getStandardTable(dictionary.huffmanDWSelector + 2);\n        break;\n\n      case 3:\n        tableDeltaWidth = getCustomHuffmanTable(customIndex, referredTo, customTables);\n        customIndex++;\n        break;\n\n      default:\n        throw new Jbig2Error("invalid Huffman DW selector");\n    }\n\n    let tableBitmapSize, tableAggregateInstances;\n\n    if (dictionary.bitmapSizeSelector) {\n      tableBitmapSize = getCustomHuffmanTable(customIndex, referredTo, customTables);\n      customIndex++;\n    } else {\n      tableBitmapSize = getStandardTable(1);\n    }\n\n    if (dictionary.aggregationInstancesSelector) {\n      tableAggregateInstances = getCustomHuffmanTable(customIndex, referredTo, customTables);\n    } else {\n      tableAggregateInstances = getStandardTable(1);\n    }\n\n    return {\n      tableDeltaHeight,\n      tableDeltaWidth,\n      tableBitmapSize,\n      tableAggregateInstances\n    };\n  }\n\n  function readUncompressedBitmap(reader, width, height) {\n    const bitmap = [];\n\n    for (let y = 0; y < height; y++) {\n      const row = new Uint8Array(width);\n      bitmap.push(row);\n\n      for (let x = 0; x < width; x++) {\n        row[x] = reader.readBit();\n      }\n\n      reader.byteAlign();\n    }\n\n    return bitmap;\n  }\n\n  function decodeMMRBitmap(input, width, height, endOfBlock) {\n    const params = {\n      K: -1,\n      Columns: width,\n      Rows: height,\n      BlackIs1: true,\n      EndOfBlock: endOfBlock\n    };\n    const decoder = new _ccitt.CCITTFaxDecoder(input, params);\n    const bitmap = [];\n    let currentByte,\n        eof = false;\n\n    for (let y = 0; y < height; y++) {\n      const row = new Uint8Array(width);\n      bitmap.push(row);\n      let shift = -1;\n\n      for (let x = 0; x < width; x++) {\n        if (shift < 0) {\n          currentByte = decoder.readNextChar();\n\n          if (currentByte === -1) {\n            currentByte = 0;\n            eof = true;\n          }\n\n          shift = 7;\n        }\n\n        row[x] = currentByte >> shift & 1;\n        shift--;\n      }\n    }\n\n    if (endOfBlock && !eof) {\n      const lookForEOFLimit = 5;\n\n      for (let i = 0; i < lookForEOFLimit; i++) {\n        if (decoder.readNextChar() === -1) {\n          break;\n        }\n      }\n    }\n\n    return bitmap;\n  }\n\n  function Jbig2Image() {}\n\n  Jbig2Image.prototype = {\n    parseChunks(chunks) {\n      return parseJbig2Chunks(chunks);\n    },\n\n    parse(data) {\n      const {\n        imgData,\n        width,\n        height\n      } = parseJbig2(data);\n      this.width = width;\n      this.height = height;\n      return imgData;\n    }\n\n  };\n  return Jbig2Image;\n}();\n\nexports.Jbig2Image = Jbig2Image;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/jbig2.js\n')},"./node_modules/pdfjs-dist/lib/core/jbig2_stream.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.Jbig2Stream = void 0;\n\nvar _primitives = __webpack_require__(/*! ./primitives.js */ "./node_modules/pdfjs-dist/lib/core/primitives.js");\n\nvar _stream = __webpack_require__(/*! ./stream.js */ "./node_modules/pdfjs-dist/lib/core/stream.js");\n\nvar _jbig = __webpack_require__(/*! ./jbig2.js */ "./node_modules/pdfjs-dist/lib/core/jbig2.js");\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nconst Jbig2Stream = function Jbig2StreamClosure() {\n  function Jbig2Stream(stream, maybeLength, dict, params) {\n    this.stream = stream;\n    this.maybeLength = maybeLength;\n    this.dict = dict;\n    this.params = params;\n\n    _stream.DecodeStream.call(this, maybeLength);\n  }\n\n  Jbig2Stream.prototype = Object.create(_stream.DecodeStream.prototype);\n  Object.defineProperty(Jbig2Stream.prototype, "bytes", {\n    get() {\n      return (0, _util.shadow)(this, "bytes", this.stream.getBytes(this.maybeLength));\n    },\n\n    configurable: true\n  });\n\n  Jbig2Stream.prototype.ensureBuffer = function (requested) {};\n\n  Jbig2Stream.prototype.readBlock = function () {\n    if (this.eof) {\n      return;\n    }\n\n    const jbig2Image = new _jbig.Jbig2Image();\n    const chunks = [];\n\n    if ((0, _primitives.isDict)(this.params)) {\n      const globalsStream = this.params.get("JBIG2Globals");\n\n      if ((0, _primitives.isStream)(globalsStream)) {\n        const globals = globalsStream.getBytes();\n        chunks.push({\n          data: globals,\n          start: 0,\n          end: globals.length\n        });\n      }\n    }\n\n    chunks.push({\n      data: this.bytes,\n      start: 0,\n      end: this.bytes.length\n    });\n    const data = jbig2Image.parseChunks(chunks);\n    const dataLength = data.length;\n\n    for (let i = 0; i < dataLength; i++) {\n      data[i] ^= 0xff;\n    }\n\n    this.buffer = data;\n    this.bufferLength = dataLength;\n    this.eof = true;\n  };\n\n  return Jbig2Stream;\n}();\n\nexports.Jbig2Stream = Jbig2Stream;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGRmanMtZGlzdC9saWIvY29yZS9qYmlnMl9zdHJlYW0uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TaW1wbGVQZGZBbmFseXplci8uL25vZGVfbW9kdWxlcy9wZGZqcy1kaXN0L2xpYi9jb3JlL2piaWcyX3N0cmVhbS5qcz9hNGQzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY3N0YXJ0IFRoZSBmb2xsb3dpbmcgaXMgdGhlIGVudGlyZSBsaWNlbnNlIG5vdGljZSBmb3IgdGhlXG4gKiBKYXZhc2NyaXB0IGNvZGUgaW4gdGhpcyBwYWdlXG4gKlxuICogQ29weXJpZ2h0IDIwMjAgTW96aWxsYSBGb3VuZGF0aW9uXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqIEBsaWNlbmQgVGhlIGFib3ZlIGlzIHRoZSBlbnRpcmUgbGljZW5zZSBub3RpY2UgZm9yIHRoZVxuICogSmF2YXNjcmlwdCBjb2RlIGluIHRoaXMgcGFnZVxuICovXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuSmJpZzJTdHJlYW0gPSB2b2lkIDA7XG5cbnZhciBfcHJpbWl0aXZlcyA9IHJlcXVpcmUoXCIuL3ByaW1pdGl2ZXMuanNcIik7XG5cbnZhciBfc3RyZWFtID0gcmVxdWlyZShcIi4vc3RyZWFtLmpzXCIpO1xuXG52YXIgX2piaWcgPSByZXF1aXJlKFwiLi9qYmlnMi5qc1wiKTtcblxudmFyIF91dGlsID0gcmVxdWlyZShcIi4uL3NoYXJlZC91dGlsLmpzXCIpO1xuXG5jb25zdCBKYmlnMlN0cmVhbSA9IGZ1bmN0aW9uIEpiaWcyU3RyZWFtQ2xvc3VyZSgpIHtcbiAgZnVuY3Rpb24gSmJpZzJTdHJlYW0oc3RyZWFtLCBtYXliZUxlbmd0aCwgZGljdCwgcGFyYW1zKSB7XG4gICAgdGhpcy5zdHJlYW0gPSBzdHJlYW07XG4gICAgdGhpcy5tYXliZUxlbmd0aCA9IG1heWJlTGVuZ3RoO1xuICAgIHRoaXMuZGljdCA9IGRpY3Q7XG4gICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XG5cbiAgICBfc3RyZWFtLkRlY29kZVN0cmVhbS5jYWxsKHRoaXMsIG1heWJlTGVuZ3RoKTtcbiAgfVxuXG4gIEpiaWcyU3RyZWFtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoX3N0cmVhbS5EZWNvZGVTdHJlYW0ucHJvdG90eXBlKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEpiaWcyU3RyZWFtLnByb3RvdHlwZSwgXCJieXRlc1wiLCB7XG4gICAgZ2V0KCkge1xuICAgICAgcmV0dXJuICgwLCBfdXRpbC5zaGFkb3cpKHRoaXMsIFwiYnl0ZXNcIiwgdGhpcy5zdHJlYW0uZ2V0Qnl0ZXModGhpcy5tYXliZUxlbmd0aCkpO1xuICAgIH0sXG5cbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG5cbiAgSmJpZzJTdHJlYW0ucHJvdG90eXBlLmVuc3VyZUJ1ZmZlciA9IGZ1bmN0aW9uIChyZXF1ZXN0ZWQpIHt9O1xuXG4gIEpiaWcyU3RyZWFtLnByb3RvdHlwZS5yZWFkQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuZW9mKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgamJpZzJJbWFnZSA9IG5ldyBfamJpZy5KYmlnMkltYWdlKCk7XG4gICAgY29uc3QgY2h1bmtzID0gW107XG5cbiAgICBpZiAoKDAsIF9wcmltaXRpdmVzLmlzRGljdCkodGhpcy5wYXJhbXMpKSB7XG4gICAgICBjb25zdCBnbG9iYWxzU3RyZWFtID0gdGhpcy5wYXJhbXMuZ2V0KFwiSkJJRzJHbG9iYWxzXCIpO1xuXG4gICAgICBpZiAoKDAsIF9wcmltaXRpdmVzLmlzU3RyZWFtKShnbG9iYWxzU3RyZWFtKSkge1xuICAgICAgICBjb25zdCBnbG9iYWxzID0gZ2xvYmFsc1N0cmVhbS5nZXRCeXRlcygpO1xuICAgICAgICBjaHVua3MucHVzaCh7XG4gICAgICAgICAgZGF0YTogZ2xvYmFscyxcbiAgICAgICAgICBzdGFydDogMCxcbiAgICAgICAgICBlbmQ6IGdsb2JhbHMubGVuZ3RoXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNodW5rcy5wdXNoKHtcbiAgICAgIGRhdGE6IHRoaXMuYnl0ZXMsXG4gICAgICBzdGFydDogMCxcbiAgICAgIGVuZDogdGhpcy5ieXRlcy5sZW5ndGhcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gamJpZzJJbWFnZS5wYXJzZUNodW5rcyhjaHVua3MpO1xuICAgIGNvbnN0IGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YUxlbmd0aDsgaSsrKSB7XG4gICAgICBkYXRhW2ldIF49IDB4ZmY7XG4gICAgfVxuXG4gICAgdGhpcy5idWZmZXIgPSBkYXRhO1xuICAgIHRoaXMuYnVmZmVyTGVuZ3RoID0gZGF0YUxlbmd0aDtcbiAgICB0aGlzLmVvZiA9IHRydWU7XG4gIH07XG5cbiAgcmV0dXJuIEpiaWcyU3RyZWFtO1xufSgpO1xuXG5leHBvcnRzLkpiaWcyU3RyZWFtID0gSmJpZzJTdHJlYW07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/jbig2_stream.js\n')},"./node_modules/pdfjs-dist/lib/core/jpeg_stream.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.JpegStream = void 0;\n\nvar _stream = __webpack_require__(/*! ./stream.js */ "./node_modules/pdfjs-dist/lib/core/stream.js");\n\nvar _primitives = __webpack_require__(/*! ./primitives.js */ "./node_modules/pdfjs-dist/lib/core/primitives.js");\n\nvar _jpg = __webpack_require__(/*! ./jpg.js */ "./node_modules/pdfjs-dist/lib/core/jpg.js");\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nconst JpegStream = function JpegStreamClosure() {\n  function JpegStream(stream, maybeLength, dict, params) {\n    let ch;\n\n    while ((ch = stream.getByte()) !== -1) {\n      if (ch === 0xff) {\n        stream.skip(-1);\n        break;\n      }\n    }\n\n    this.stream = stream;\n    this.maybeLength = maybeLength;\n    this.dict = dict;\n    this.params = params;\n\n    _stream.DecodeStream.call(this, maybeLength);\n  }\n\n  JpegStream.prototype = Object.create(_stream.DecodeStream.prototype);\n  Object.defineProperty(JpegStream.prototype, "bytes", {\n    get: function JpegStream_bytes() {\n      return (0, _util.shadow)(this, "bytes", this.stream.getBytes(this.maybeLength));\n    },\n    configurable: true\n  });\n\n  JpegStream.prototype.ensureBuffer = function (requested) {};\n\n  JpegStream.prototype.readBlock = function () {\n    if (this.eof) {\n      return;\n    }\n\n    const jpegOptions = {\n      decodeTransform: undefined,\n      colorTransform: undefined\n    };\n    const decodeArr = this.dict.getArray("Decode", "D");\n\n    if (this.forceRGB && Array.isArray(decodeArr)) {\n      const bitsPerComponent = this.dict.get("BitsPerComponent") || 8;\n      const decodeArrLength = decodeArr.length;\n      const transform = new Int32Array(decodeArrLength);\n      let transformNeeded = false;\n      const maxValue = (1 << bitsPerComponent) - 1;\n\n      for (let i = 0; i < decodeArrLength; i += 2) {\n        transform[i] = (decodeArr[i + 1] - decodeArr[i]) * 256 | 0;\n        transform[i + 1] = decodeArr[i] * maxValue | 0;\n\n        if (transform[i] !== 256 || transform[i + 1] !== 0) {\n          transformNeeded = true;\n        }\n      }\n\n      if (transformNeeded) {\n        jpegOptions.decodeTransform = transform;\n      }\n    }\n\n    if ((0, _primitives.isDict)(this.params)) {\n      const colorTransform = this.params.get("ColorTransform");\n\n      if (Number.isInteger(colorTransform)) {\n        jpegOptions.colorTransform = colorTransform;\n      }\n    }\n\n    const jpegImage = new _jpg.JpegImage(jpegOptions);\n    jpegImage.parse(this.bytes);\n    const data = jpegImage.getData({\n      width: this.drawWidth,\n      height: this.drawHeight,\n      forceRGB: this.forceRGB,\n      isSourcePDF: true\n    });\n    this.buffer = data;\n    this.bufferLength = data.length;\n    this.eof = true;\n  };\n\n  return JpegStream;\n}();\n\nexports.JpegStream = JpegStream;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGRmanMtZGlzdC9saWIvY29yZS9qcGVnX3N0cmVhbS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1NpbXBsZVBkZkFuYWx5emVyLy4vbm9kZV9tb2R1bGVzL3BkZmpzLWRpc3QvbGliL2NvcmUvanBlZ19zdHJlYW0uanM/MzU3NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNzdGFydCBUaGUgZm9sbG93aW5nIGlzIHRoZSBlbnRpcmUgbGljZW5zZSBub3RpY2UgZm9yIHRoZVxuICogSmF2YXNjcmlwdCBjb2RlIGluIHRoaXMgcGFnZVxuICpcbiAqIENvcHlyaWdodCAyMDIwIE1vemlsbGEgRm91bmRhdGlvblxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBAbGljZW5kIFRoZSBhYm92ZSBpcyB0aGUgZW50aXJlIGxpY2Vuc2Ugbm90aWNlIGZvciB0aGVcbiAqIEphdmFzY3JpcHQgY29kZSBpbiB0aGlzIHBhZ2VcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkpwZWdTdHJlYW0gPSB2b2lkIDA7XG5cbnZhciBfc3RyZWFtID0gcmVxdWlyZShcIi4vc3RyZWFtLmpzXCIpO1xuXG52YXIgX3ByaW1pdGl2ZXMgPSByZXF1aXJlKFwiLi9wcmltaXRpdmVzLmpzXCIpO1xuXG52YXIgX2pwZyA9IHJlcXVpcmUoXCIuL2pwZy5qc1wiKTtcblxudmFyIF91dGlsID0gcmVxdWlyZShcIi4uL3NoYXJlZC91dGlsLmpzXCIpO1xuXG5jb25zdCBKcGVnU3RyZWFtID0gZnVuY3Rpb24gSnBlZ1N0cmVhbUNsb3N1cmUoKSB7XG4gIGZ1bmN0aW9uIEpwZWdTdHJlYW0oc3RyZWFtLCBtYXliZUxlbmd0aCwgZGljdCwgcGFyYW1zKSB7XG4gICAgbGV0IGNoO1xuXG4gICAgd2hpbGUgKChjaCA9IHN0cmVhbS5nZXRCeXRlKCkpICE9PSAtMSkge1xuICAgICAgaWYgKGNoID09PSAweGZmKSB7XG4gICAgICAgIHN0cmVhbS5za2lwKC0xKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zdHJlYW0gPSBzdHJlYW07XG4gICAgdGhpcy5tYXliZUxlbmd0aCA9IG1heWJlTGVuZ3RoO1xuICAgIHRoaXMuZGljdCA9IGRpY3Q7XG4gICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XG5cbiAgICBfc3RyZWFtLkRlY29kZVN0cmVhbS5jYWxsKHRoaXMsIG1heWJlTGVuZ3RoKTtcbiAgfVxuXG4gIEpwZWdTdHJlYW0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShfc3RyZWFtLkRlY29kZVN0cmVhbS5wcm90b3R5cGUpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSnBlZ1N0cmVhbS5wcm90b3R5cGUsIFwiYnl0ZXNcIiwge1xuICAgIGdldDogZnVuY3Rpb24gSnBlZ1N0cmVhbV9ieXRlcygpIHtcbiAgICAgIHJldHVybiAoMCwgX3V0aWwuc2hhZG93KSh0aGlzLCBcImJ5dGVzXCIsIHRoaXMuc3RyZWFtLmdldEJ5dGVzKHRoaXMubWF5YmVMZW5ndGgpKTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcblxuICBKcGVnU3RyZWFtLnByb3RvdHlwZS5lbnN1cmVCdWZmZXIgPSBmdW5jdGlvbiAocmVxdWVzdGVkKSB7fTtcblxuICBKcGVnU3RyZWFtLnByb3RvdHlwZS5yZWFkQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuZW9mKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QganBlZ09wdGlvbnMgPSB7XG4gICAgICBkZWNvZGVUcmFuc2Zvcm06IHVuZGVmaW5lZCxcbiAgICAgIGNvbG9yVHJhbnNmb3JtOiB1bmRlZmluZWRcbiAgICB9O1xuICAgIGNvbnN0IGRlY29kZUFyciA9IHRoaXMuZGljdC5nZXRBcnJheShcIkRlY29kZVwiLCBcIkRcIik7XG5cbiAgICBpZiAodGhpcy5mb3JjZVJHQiAmJiBBcnJheS5pc0FycmF5KGRlY29kZUFycikpIHtcbiAgICAgIGNvbnN0IGJpdHNQZXJDb21wb25lbnQgPSB0aGlzLmRpY3QuZ2V0KFwiQml0c1BlckNvbXBvbmVudFwiKSB8fCA4O1xuICAgICAgY29uc3QgZGVjb2RlQXJyTGVuZ3RoID0gZGVjb2RlQXJyLmxlbmd0aDtcbiAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IG5ldyBJbnQzMkFycmF5KGRlY29kZUFyckxlbmd0aCk7XG4gICAgICBsZXQgdHJhbnNmb3JtTmVlZGVkID0gZmFsc2U7XG4gICAgICBjb25zdCBtYXhWYWx1ZSA9ICgxIDw8IGJpdHNQZXJDb21wb25lbnQpIC0gMTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZWNvZGVBcnJMZW5ndGg7IGkgKz0gMikge1xuICAgICAgICB0cmFuc2Zvcm1baV0gPSAoZGVjb2RlQXJyW2kgKyAxXSAtIGRlY29kZUFycltpXSkgKiAyNTYgfCAwO1xuICAgICAgICB0cmFuc2Zvcm1baSArIDFdID0gZGVjb2RlQXJyW2ldICogbWF4VmFsdWUgfCAwO1xuXG4gICAgICAgIGlmICh0cmFuc2Zvcm1baV0gIT09IDI1NiB8fCB0cmFuc2Zvcm1baSArIDFdICE9PSAwKSB7XG4gICAgICAgICAgdHJhbnNmb3JtTmVlZGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHJhbnNmb3JtTmVlZGVkKSB7XG4gICAgICAgIGpwZWdPcHRpb25zLmRlY29kZVRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoKDAsIF9wcmltaXRpdmVzLmlzRGljdCkodGhpcy5wYXJhbXMpKSB7XG4gICAgICBjb25zdCBjb2xvclRyYW5zZm9ybSA9IHRoaXMucGFyYW1zLmdldChcIkNvbG9yVHJhbnNmb3JtXCIpO1xuXG4gICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihjb2xvclRyYW5zZm9ybSkpIHtcbiAgICAgICAganBlZ09wdGlvbnMuY29sb3JUcmFuc2Zvcm0gPSBjb2xvclRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBqcGVnSW1hZ2UgPSBuZXcgX2pwZy5KcGVnSW1hZ2UoanBlZ09wdGlvbnMpO1xuICAgIGpwZWdJbWFnZS5wYXJzZSh0aGlzLmJ5dGVzKTtcbiAgICBjb25zdCBkYXRhID0ganBlZ0ltYWdlLmdldERhdGEoe1xuICAgICAgd2lkdGg6IHRoaXMuZHJhd1dpZHRoLFxuICAgICAgaGVpZ2h0OiB0aGlzLmRyYXdIZWlnaHQsXG4gICAgICBmb3JjZVJHQjogdGhpcy5mb3JjZVJHQixcbiAgICAgIGlzU291cmNlUERGOiB0cnVlXG4gICAgfSk7XG4gICAgdGhpcy5idWZmZXIgPSBkYXRhO1xuICAgIHRoaXMuYnVmZmVyTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG4gICAgdGhpcy5lb2YgPSB0cnVlO1xuICB9O1xuXG4gIHJldHVybiBKcGVnU3RyZWFtO1xufSgpO1xuXG5leHBvcnRzLkpwZWdTdHJlYW0gPSBKcGVnU3RyZWFtOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/jpeg_stream.js\n')},"./node_modules/pdfjs-dist/lib/core/jpg.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.JpegImage = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nclass JpegError extends _util.BaseException {\n  constructor(msg) {\n    super(`JPEG error: ${msg}`);\n  }\n\n}\n\nclass DNLMarkerError extends _util.BaseException {\n  constructor(message, scanLines) {\n    super(message);\n    this.scanLines = scanLines;\n  }\n\n}\n\nclass EOIMarkerError extends _util.BaseException {}\n\nvar JpegImage = function JpegImageClosure() {\n  var dctZigZag = new Uint8Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]);\n  var dctCos1 = 4017;\n  var dctSin1 = 799;\n  var dctCos3 = 3406;\n  var dctSin3 = 2276;\n  var dctCos6 = 1567;\n  var dctSin6 = 3784;\n  var dctSqrt2 = 5793;\n  var dctSqrt1d2 = 2896;\n\n  function JpegImage({\n    decodeTransform = null,\n    colorTransform = -1\n  } = {}) {\n    this._decodeTransform = decodeTransform;\n    this._colorTransform = colorTransform;\n  }\n\n  function buildHuffmanTable(codeLengths, values) {\n    var k = 0,\n        code = [],\n        i,\n        j,\n        length = 16;\n\n    while (length > 0 && !codeLengths[length - 1]) {\n      length--;\n    }\n\n    code.push({\n      children: [],\n      index: 0\n    });\n    var p = code[0],\n        q;\n\n    for (i = 0; i < length; i++) {\n      for (j = 0; j < codeLengths[i]; j++) {\n        p = code.pop();\n        p.children[p.index] = values[k];\n\n        while (p.index > 0) {\n          p = code.pop();\n        }\n\n        p.index++;\n        code.push(p);\n\n        while (code.length <= i) {\n          code.push(q = {\n            children: [],\n            index: 0\n          });\n          p.children[p.index] = q.children;\n          p = q;\n        }\n\n        k++;\n      }\n\n      if (i + 1 < length) {\n        code.push(q = {\n          children: [],\n          index: 0\n        });\n        p.children[p.index] = q.children;\n        p = q;\n      }\n    }\n\n    return code[0].children;\n  }\n\n  function getBlockBufferOffset(component, row, col) {\n    return 64 * ((component.blocksPerLine + 1) * row + col);\n  }\n\n  function decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive, parseDNLMarker = false) {\n    var mcusPerLine = frame.mcusPerLine;\n    var progressive = frame.progressive;\n    const startOffset = offset;\n    let bitsData = 0,\n        bitsCount = 0;\n\n    function readBit() {\n      if (bitsCount > 0) {\n        bitsCount--;\n        return bitsData >> bitsCount & 1;\n      }\n\n      bitsData = data[offset++];\n\n      if (bitsData === 0xff) {\n        var nextByte = data[offset++];\n\n        if (nextByte) {\n          if (nextByte === 0xdc && parseDNLMarker) {\n            offset += 2;\n            const scanLines = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n\n            if (scanLines > 0 && scanLines !== frame.scanLines) {\n              throw new DNLMarkerError("Found DNL marker (0xFFDC) while parsing scan data", scanLines);\n            }\n          } else if (nextByte === 0xd9) {\n            if (parseDNLMarker) {\n              const maybeScanLines = blockRow * (frame.precision === 8 ? 8 : 0);\n\n              if (maybeScanLines > 0 && Math.round(frame.scanLines / maybeScanLines) >= 10) {\n                throw new DNLMarkerError("Found EOI marker (0xFFD9) while parsing scan data, " + "possibly caused by incorrect `scanLines` parameter", maybeScanLines);\n              }\n            }\n\n            throw new EOIMarkerError("Found EOI marker (0xFFD9) while parsing scan data");\n          }\n\n          throw new JpegError(`unexpected marker ${(bitsData << 8 | nextByte).toString(16)}`);\n        }\n      }\n\n      bitsCount = 7;\n      return bitsData >>> 7;\n    }\n\n    function decodeHuffman(tree) {\n      var node = tree;\n\n      while (true) {\n        node = node[readBit()];\n\n        switch (typeof node) {\n          case "number":\n            return node;\n\n          case "object":\n            continue;\n        }\n\n        throw new JpegError("invalid huffman sequence");\n      }\n    }\n\n    function receive(length) {\n      var n = 0;\n\n      while (length > 0) {\n        n = n << 1 | readBit();\n        length--;\n      }\n\n      return n;\n    }\n\n    function receiveAndExtend(length) {\n      if (length === 1) {\n        return readBit() === 1 ? 1 : -1;\n      }\n\n      var n = receive(length);\n\n      if (n >= 1 << length - 1) {\n        return n;\n      }\n\n      return n + (-1 << length) + 1;\n    }\n\n    function decodeBaseline(component, blockOffset) {\n      var t = decodeHuffman(component.huffmanTableDC);\n      var diff = t === 0 ? 0 : receiveAndExtend(t);\n      component.blockData[blockOffset] = component.pred += diff;\n      var k = 1;\n\n      while (k < 64) {\n        var rs = decodeHuffman(component.huffmanTableAC);\n        var s = rs & 15,\n            r = rs >> 4;\n\n        if (s === 0) {\n          if (r < 15) {\n            break;\n          }\n\n          k += 16;\n          continue;\n        }\n\n        k += r;\n        var z = dctZigZag[k];\n        component.blockData[blockOffset + z] = receiveAndExtend(s);\n        k++;\n      }\n    }\n\n    function decodeDCFirst(component, blockOffset) {\n      var t = decodeHuffman(component.huffmanTableDC);\n      var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;\n      component.blockData[blockOffset] = component.pred += diff;\n    }\n\n    function decodeDCSuccessive(component, blockOffset) {\n      component.blockData[blockOffset] |= readBit() << successive;\n    }\n\n    var eobrun = 0;\n\n    function decodeACFirst(component, blockOffset) {\n      if (eobrun > 0) {\n        eobrun--;\n        return;\n      }\n\n      var k = spectralStart,\n          e = spectralEnd;\n\n      while (k <= e) {\n        var rs = decodeHuffman(component.huffmanTableAC);\n        var s = rs & 15,\n            r = rs >> 4;\n\n        if (s === 0) {\n          if (r < 15) {\n            eobrun = receive(r) + (1 << r) - 1;\n            break;\n          }\n\n          k += 16;\n          continue;\n        }\n\n        k += r;\n        var z = dctZigZag[k];\n        component.blockData[blockOffset + z] = receiveAndExtend(s) * (1 << successive);\n        k++;\n      }\n    }\n\n    var successiveACState = 0,\n        successiveACNextValue;\n\n    function decodeACSuccessive(component, blockOffset) {\n      var k = spectralStart;\n      var e = spectralEnd;\n      var r = 0;\n      var s;\n      var rs;\n\n      while (k <= e) {\n        const offsetZ = blockOffset + dctZigZag[k];\n        const sign = component.blockData[offsetZ] < 0 ? -1 : 1;\n\n        switch (successiveACState) {\n          case 0:\n            rs = decodeHuffman(component.huffmanTableAC);\n            s = rs & 15;\n            r = rs >> 4;\n\n            if (s === 0) {\n              if (r < 15) {\n                eobrun = receive(r) + (1 << r);\n                successiveACState = 4;\n              } else {\n                r = 16;\n                successiveACState = 1;\n              }\n            } else {\n              if (s !== 1) {\n                throw new JpegError("invalid ACn encoding");\n              }\n\n              successiveACNextValue = receiveAndExtend(s);\n              successiveACState = r ? 2 : 3;\n            }\n\n            continue;\n\n          case 1:\n          case 2:\n            if (component.blockData[offsetZ]) {\n              component.blockData[offsetZ] += sign * (readBit() << successive);\n            } else {\n              r--;\n\n              if (r === 0) {\n                successiveACState = successiveACState === 2 ? 3 : 0;\n              }\n            }\n\n            break;\n\n          case 3:\n            if (component.blockData[offsetZ]) {\n              component.blockData[offsetZ] += sign * (readBit() << successive);\n            } else {\n              component.blockData[offsetZ] = successiveACNextValue << successive;\n              successiveACState = 0;\n            }\n\n            break;\n\n          case 4:\n            if (component.blockData[offsetZ]) {\n              component.blockData[offsetZ] += sign * (readBit() << successive);\n            }\n\n            break;\n        }\n\n        k++;\n      }\n\n      if (successiveACState === 4) {\n        eobrun--;\n\n        if (eobrun === 0) {\n          successiveACState = 0;\n        }\n      }\n    }\n\n    let blockRow = 0;\n\n    function decodeMcu(component, decode, mcu, row, col) {\n      var mcuRow = mcu / mcusPerLine | 0;\n      var mcuCol = mcu % mcusPerLine;\n      blockRow = mcuRow * component.v + row;\n      var blockCol = mcuCol * component.h + col;\n      const blockOffset = getBlockBufferOffset(component, blockRow, blockCol);\n      decode(component, blockOffset);\n    }\n\n    function decodeBlock(component, decode, mcu) {\n      blockRow = mcu / component.blocksPerLine | 0;\n      var blockCol = mcu % component.blocksPerLine;\n      const blockOffset = getBlockBufferOffset(component, blockRow, blockCol);\n      decode(component, blockOffset);\n    }\n\n    var componentsLength = components.length;\n    var component, i, j, k, n;\n    var decodeFn;\n\n    if (progressive) {\n      if (spectralStart === 0) {\n        decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\n      } else {\n        decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\n      }\n    } else {\n      decodeFn = decodeBaseline;\n    }\n\n    var mcu = 0,\n        fileMarker;\n    var mcuExpected;\n\n    if (componentsLength === 1) {\n      mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\n    } else {\n      mcuExpected = mcusPerLine * frame.mcusPerColumn;\n    }\n\n    var h, v;\n\n    while (mcu <= mcuExpected) {\n      var mcuToRead = resetInterval ? Math.min(mcuExpected - mcu, resetInterval) : mcuExpected;\n\n      if (mcuToRead > 0) {\n        for (i = 0; i < componentsLength; i++) {\n          components[i].pred = 0;\n        }\n\n        eobrun = 0;\n\n        if (componentsLength === 1) {\n          component = components[0];\n\n          for (n = 0; n < mcuToRead; n++) {\n            decodeBlock(component, decodeFn, mcu);\n            mcu++;\n          }\n        } else {\n          for (n = 0; n < mcuToRead; n++) {\n            for (i = 0; i < componentsLength; i++) {\n              component = components[i];\n              h = component.h;\n              v = component.v;\n\n              for (j = 0; j < v; j++) {\n                for (k = 0; k < h; k++) {\n                  decodeMcu(component, decodeFn, mcu, j, k);\n                }\n              }\n            }\n\n            mcu++;\n          }\n        }\n      }\n\n      bitsCount = 0;\n      fileMarker = findNextFileMarker(data, offset);\n\n      if (!fileMarker) {\n        break;\n      }\n\n      if (fileMarker.invalid) {\n        const partialMsg = mcuToRead > 0 ? "unexpected" : "excessive";\n        (0, _util.warn)(`decodeScan - ${partialMsg} MCU data, current marker is: ${fileMarker.invalid}`);\n        offset = fileMarker.offset;\n      }\n\n      if (fileMarker.marker >= 0xffd0 && fileMarker.marker <= 0xffd7) {\n        offset += 2;\n      } else {\n        break;\n      }\n    }\n\n    return offset - startOffset;\n  }\n\n  function quantizeAndInverse(component, blockBufferOffset, p) {\n    var qt = component.quantizationTable,\n        blockData = component.blockData;\n    var v0, v1, v2, v3, v4, v5, v6, v7;\n    var p0, p1, p2, p3, p4, p5, p6, p7;\n    var t;\n\n    if (!qt) {\n      throw new JpegError("missing required Quantization Table.");\n    }\n\n    for (var row = 0; row < 64; row += 8) {\n      p0 = blockData[blockBufferOffset + row];\n      p1 = blockData[blockBufferOffset + row + 1];\n      p2 = blockData[blockBufferOffset + row + 2];\n      p3 = blockData[blockBufferOffset + row + 3];\n      p4 = blockData[blockBufferOffset + row + 4];\n      p5 = blockData[blockBufferOffset + row + 5];\n      p6 = blockData[blockBufferOffset + row + 6];\n      p7 = blockData[blockBufferOffset + row + 7];\n      p0 *= qt[row];\n\n      if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\n        t = dctSqrt2 * p0 + 512 >> 10;\n        p[row] = t;\n        p[row + 1] = t;\n        p[row + 2] = t;\n        p[row + 3] = t;\n        p[row + 4] = t;\n        p[row + 5] = t;\n        p[row + 6] = t;\n        p[row + 7] = t;\n        continue;\n      }\n\n      p1 *= qt[row + 1];\n      p2 *= qt[row + 2];\n      p3 *= qt[row + 3];\n      p4 *= qt[row + 4];\n      p5 *= qt[row + 5];\n      p6 *= qt[row + 6];\n      p7 *= qt[row + 7];\n      v0 = dctSqrt2 * p0 + 128 >> 8;\n      v1 = dctSqrt2 * p4 + 128 >> 8;\n      v2 = p2;\n      v3 = p6;\n      v4 = dctSqrt1d2 * (p1 - p7) + 128 >> 8;\n      v7 = dctSqrt1d2 * (p1 + p7) + 128 >> 8;\n      v5 = p3 << 4;\n      v6 = p5 << 4;\n      v0 = v0 + v1 + 1 >> 1;\n      v1 = v0 - v1;\n      t = v2 * dctSin6 + v3 * dctCos6 + 128 >> 8;\n      v2 = v2 * dctCos6 - v3 * dctSin6 + 128 >> 8;\n      v3 = t;\n      v4 = v4 + v6 + 1 >> 1;\n      v6 = v4 - v6;\n      v7 = v7 + v5 + 1 >> 1;\n      v5 = v7 - v5;\n      v0 = v0 + v3 + 1 >> 1;\n      v3 = v0 - v3;\n      v1 = v1 + v2 + 1 >> 1;\n      v2 = v1 - v2;\n      t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;\n      v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;\n      v7 = t;\n      t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;\n      v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;\n      v6 = t;\n      p[row] = v0 + v7;\n      p[row + 7] = v0 - v7;\n      p[row + 1] = v1 + v6;\n      p[row + 6] = v1 - v6;\n      p[row + 2] = v2 + v5;\n      p[row + 5] = v2 - v5;\n      p[row + 3] = v3 + v4;\n      p[row + 4] = v3 - v4;\n    }\n\n    for (var col = 0; col < 8; ++col) {\n      p0 = p[col];\n      p1 = p[col + 8];\n      p2 = p[col + 16];\n      p3 = p[col + 24];\n      p4 = p[col + 32];\n      p5 = p[col + 40];\n      p6 = p[col + 48];\n      p7 = p[col + 56];\n\n      if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\n        t = dctSqrt2 * p0 + 8192 >> 14;\n\n        if (t < -2040) {\n          t = 0;\n        } else if (t >= 2024) {\n          t = 255;\n        } else {\n          t = t + 2056 >> 4;\n        }\n\n        blockData[blockBufferOffset + col] = t;\n        blockData[blockBufferOffset + col + 8] = t;\n        blockData[blockBufferOffset + col + 16] = t;\n        blockData[blockBufferOffset + col + 24] = t;\n        blockData[blockBufferOffset + col + 32] = t;\n        blockData[blockBufferOffset + col + 40] = t;\n        blockData[blockBufferOffset + col + 48] = t;\n        blockData[blockBufferOffset + col + 56] = t;\n        continue;\n      }\n\n      v0 = dctSqrt2 * p0 + 2048 >> 12;\n      v1 = dctSqrt2 * p4 + 2048 >> 12;\n      v2 = p2;\n      v3 = p6;\n      v4 = dctSqrt1d2 * (p1 - p7) + 2048 >> 12;\n      v7 = dctSqrt1d2 * (p1 + p7) + 2048 >> 12;\n      v5 = p3;\n      v6 = p5;\n      v0 = (v0 + v1 + 1 >> 1) + 4112;\n      v1 = v0 - v1;\n      t = v2 * dctSin6 + v3 * dctCos6 + 2048 >> 12;\n      v2 = v2 * dctCos6 - v3 * dctSin6 + 2048 >> 12;\n      v3 = t;\n      v4 = v4 + v6 + 1 >> 1;\n      v6 = v4 - v6;\n      v7 = v7 + v5 + 1 >> 1;\n      v5 = v7 - v5;\n      v0 = v0 + v3 + 1 >> 1;\n      v3 = v0 - v3;\n      v1 = v1 + v2 + 1 >> 1;\n      v2 = v1 - v2;\n      t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;\n      v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;\n      v7 = t;\n      t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;\n      v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;\n      v6 = t;\n      p0 = v0 + v7;\n      p7 = v0 - v7;\n      p1 = v1 + v6;\n      p6 = v1 - v6;\n      p2 = v2 + v5;\n      p5 = v2 - v5;\n      p3 = v3 + v4;\n      p4 = v3 - v4;\n\n      if (p0 < 16) {\n        p0 = 0;\n      } else if (p0 >= 4080) {\n        p0 = 255;\n      } else {\n        p0 >>= 4;\n      }\n\n      if (p1 < 16) {\n        p1 = 0;\n      } else if (p1 >= 4080) {\n        p1 = 255;\n      } else {\n        p1 >>= 4;\n      }\n\n      if (p2 < 16) {\n        p2 = 0;\n      } else if (p2 >= 4080) {\n        p2 = 255;\n      } else {\n        p2 >>= 4;\n      }\n\n      if (p3 < 16) {\n        p3 = 0;\n      } else if (p3 >= 4080) {\n        p3 = 255;\n      } else {\n        p3 >>= 4;\n      }\n\n      if (p4 < 16) {\n        p4 = 0;\n      } else if (p4 >= 4080) {\n        p4 = 255;\n      } else {\n        p4 >>= 4;\n      }\n\n      if (p5 < 16) {\n        p5 = 0;\n      } else if (p5 >= 4080) {\n        p5 = 255;\n      } else {\n        p5 >>= 4;\n      }\n\n      if (p6 < 16) {\n        p6 = 0;\n      } else if (p6 >= 4080) {\n        p6 = 255;\n      } else {\n        p6 >>= 4;\n      }\n\n      if (p7 < 16) {\n        p7 = 0;\n      } else if (p7 >= 4080) {\n        p7 = 255;\n      } else {\n        p7 >>= 4;\n      }\n\n      blockData[blockBufferOffset + col] = p0;\n      blockData[blockBufferOffset + col + 8] = p1;\n      blockData[blockBufferOffset + col + 16] = p2;\n      blockData[blockBufferOffset + col + 24] = p3;\n      blockData[blockBufferOffset + col + 32] = p4;\n      blockData[blockBufferOffset + col + 40] = p5;\n      blockData[blockBufferOffset + col + 48] = p6;\n      blockData[blockBufferOffset + col + 56] = p7;\n    }\n  }\n\n  function buildComponentData(frame, component) {\n    var blocksPerLine = component.blocksPerLine;\n    var blocksPerColumn = component.blocksPerColumn;\n    var computationBuffer = new Int16Array(64);\n\n    for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n      for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n        var offset = getBlockBufferOffset(component, blockRow, blockCol);\n        quantizeAndInverse(component, offset, computationBuffer);\n      }\n    }\n\n    return component.blockData;\n  }\n\n  function findNextFileMarker(data, currentPos, startPos = currentPos) {\n    const maxPos = data.length - 1;\n    var newPos = startPos < currentPos ? startPos : currentPos;\n\n    if (currentPos >= maxPos) {\n      return null;\n    }\n\n    var currentMarker = (0, _core_utils.readUint16)(data, currentPos);\n\n    if (currentMarker >= 0xffc0 && currentMarker <= 0xfffe) {\n      return {\n        invalid: null,\n        marker: currentMarker,\n        offset: currentPos\n      };\n    }\n\n    var newMarker = (0, _core_utils.readUint16)(data, newPos);\n\n    while (!(newMarker >= 0xffc0 && newMarker <= 0xfffe)) {\n      if (++newPos >= maxPos) {\n        return null;\n      }\n\n      newMarker = (0, _core_utils.readUint16)(data, newPos);\n    }\n\n    return {\n      invalid: currentMarker.toString(16),\n      marker: newMarker,\n      offset: newPos\n    };\n  }\n\n  JpegImage.prototype = {\n    parse(data, {\n      dnlScanLines = null\n    } = {}) {\n      function readDataBlock() {\n        const length = (0, _core_utils.readUint16)(data, offset);\n        offset += 2;\n        let endOffset = offset + length - 2;\n        var fileMarker = findNextFileMarker(data, endOffset, offset);\n\n        if (fileMarker && fileMarker.invalid) {\n          (0, _util.warn)("readDataBlock - incorrect length, current marker is: " + fileMarker.invalid);\n          endOffset = fileMarker.offset;\n        }\n\n        var array = data.subarray(offset, endOffset);\n        offset += array.length;\n        return array;\n      }\n\n      function prepareComponents(frame) {\n        var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);\n        var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);\n\n        for (var i = 0; i < frame.components.length; i++) {\n          component = frame.components[i];\n          var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / frame.maxH);\n          var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / frame.maxV);\n          var blocksPerLineForMcu = mcusPerLine * component.h;\n          var blocksPerColumnForMcu = mcusPerColumn * component.v;\n          var blocksBufferSize = 64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);\n          component.blockData = new Int16Array(blocksBufferSize);\n          component.blocksPerLine = blocksPerLine;\n          component.blocksPerColumn = blocksPerColumn;\n        }\n\n        frame.mcusPerLine = mcusPerLine;\n        frame.mcusPerColumn = mcusPerColumn;\n      }\n\n      var offset = 0;\n      var jfif = null;\n      var adobe = null;\n      var frame, resetInterval;\n      let numSOSMarkers = 0;\n      var quantizationTables = [];\n      var huffmanTablesAC = [],\n          huffmanTablesDC = [];\n      let fileMarker = (0, _core_utils.readUint16)(data, offset);\n      offset += 2;\n\n      if (fileMarker !== 0xffd8) {\n        throw new JpegError("SOI not found");\n      }\n\n      fileMarker = (0, _core_utils.readUint16)(data, offset);\n      offset += 2;\n\n      markerLoop: while (fileMarker !== 0xffd9) {\n        var i, j, l;\n\n        switch (fileMarker) {\n          case 0xffe0:\n          case 0xffe1:\n          case 0xffe2:\n          case 0xffe3:\n          case 0xffe4:\n          case 0xffe5:\n          case 0xffe6:\n          case 0xffe7:\n          case 0xffe8:\n          case 0xffe9:\n          case 0xffea:\n          case 0xffeb:\n          case 0xffec:\n          case 0xffed:\n          case 0xffee:\n          case 0xffef:\n          case 0xfffe:\n            var appData = readDataBlock();\n\n            if (fileMarker === 0xffe0) {\n              if (appData[0] === 0x4a && appData[1] === 0x46 && appData[2] === 0x49 && appData[3] === 0x46 && appData[4] === 0) {\n                jfif = {\n                  version: {\n                    major: appData[5],\n                    minor: appData[6]\n                  },\n                  densityUnits: appData[7],\n                  xDensity: appData[8] << 8 | appData[9],\n                  yDensity: appData[10] << 8 | appData[11],\n                  thumbWidth: appData[12],\n                  thumbHeight: appData[13],\n                  thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])\n                };\n              }\n            }\n\n            if (fileMarker === 0xffee) {\n              if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6f && appData[3] === 0x62 && appData[4] === 0x65) {\n                adobe = {\n                  version: appData[5] << 8 | appData[6],\n                  flags0: appData[7] << 8 | appData[8],\n                  flags1: appData[9] << 8 | appData[10],\n                  transformCode: appData[11]\n                };\n              }\n            }\n\n            break;\n\n          case 0xffdb:\n            const quantizationTablesLength = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n            var quantizationTablesEnd = quantizationTablesLength + offset - 2;\n            var z;\n\n            while (offset < quantizationTablesEnd) {\n              var quantizationTableSpec = data[offset++];\n              var tableData = new Uint16Array(64);\n\n              if (quantizationTableSpec >> 4 === 0) {\n                for (j = 0; j < 64; j++) {\n                  z = dctZigZag[j];\n                  tableData[z] = data[offset++];\n                }\n              } else if (quantizationTableSpec >> 4 === 1) {\n                for (j = 0; j < 64; j++) {\n                  z = dctZigZag[j];\n                  tableData[z] = (0, _core_utils.readUint16)(data, offset);\n                  offset += 2;\n                }\n              } else {\n                throw new JpegError("DQT - invalid table spec");\n              }\n\n              quantizationTables[quantizationTableSpec & 15] = tableData;\n            }\n\n            break;\n\n          case 0xffc0:\n          case 0xffc1:\n          case 0xffc2:\n            if (frame) {\n              throw new JpegError("Only single frame JPEGs supported");\n            }\n\n            offset += 2;\n            frame = {};\n            frame.extended = fileMarker === 0xffc1;\n            frame.progressive = fileMarker === 0xffc2;\n            frame.precision = data[offset++];\n            const sofScanLines = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n            frame.scanLines = dnlScanLines || sofScanLines;\n            frame.samplesPerLine = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n            frame.components = [];\n            frame.componentIds = {};\n            var componentsCount = data[offset++],\n                componentId;\n            var maxH = 0,\n                maxV = 0;\n\n            for (i = 0; i < componentsCount; i++) {\n              componentId = data[offset];\n              var h = data[offset + 1] >> 4;\n              var v = data[offset + 1] & 15;\n\n              if (maxH < h) {\n                maxH = h;\n              }\n\n              if (maxV < v) {\n                maxV = v;\n              }\n\n              var qId = data[offset + 2];\n              l = frame.components.push({\n                h,\n                v,\n                quantizationId: qId,\n                quantizationTable: null\n              });\n              frame.componentIds[componentId] = l - 1;\n              offset += 3;\n            }\n\n            frame.maxH = maxH;\n            frame.maxV = maxV;\n            prepareComponents(frame);\n            break;\n\n          case 0xffc4:\n            const huffmanLength = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n\n            for (i = 2; i < huffmanLength;) {\n              var huffmanTableSpec = data[offset++];\n              var codeLengths = new Uint8Array(16);\n              var codeLengthSum = 0;\n\n              for (j = 0; j < 16; j++, offset++) {\n                codeLengthSum += codeLengths[j] = data[offset];\n              }\n\n              var huffmanValues = new Uint8Array(codeLengthSum);\n\n              for (j = 0; j < codeLengthSum; j++, offset++) {\n                huffmanValues[j] = data[offset];\n              }\n\n              i += 17 + codeLengthSum;\n              (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);\n            }\n\n            break;\n\n          case 0xffdd:\n            offset += 2;\n            resetInterval = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n            break;\n\n          case 0xffda:\n            const parseDNLMarker = ++numSOSMarkers === 1 && !dnlScanLines;\n            offset += 2;\n            var selectorsCount = data[offset++];\n            var components = [],\n                component;\n\n            for (i = 0; i < selectorsCount; i++) {\n              const index = data[offset++];\n              var componentIndex = frame.componentIds[index];\n              component = frame.components[componentIndex];\n              component.index = index;\n              var tableSpec = data[offset++];\n              component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\n              component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\n              components.push(component);\n            }\n\n            var spectralStart = data[offset++];\n            var spectralEnd = data[offset++];\n            var successiveApproximation = data[offset++];\n\n            try {\n              var processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15, parseDNLMarker);\n              offset += processed;\n            } catch (ex) {\n              if (ex instanceof DNLMarkerError) {\n                (0, _util.warn)(`${ex.message} -- attempting to re-parse the JPEG image.`);\n                return this.parse(data, {\n                  dnlScanLines: ex.scanLines\n                });\n              } else if (ex instanceof EOIMarkerError) {\n                (0, _util.warn)(`${ex.message} -- ignoring the rest of the image data.`);\n                break markerLoop;\n              }\n\n              throw ex;\n            }\n\n            break;\n\n          case 0xffdc:\n            offset += 4;\n            break;\n\n          case 0xffff:\n            if (data[offset] !== 0xff) {\n              offset--;\n            }\n\n            break;\n\n          default:\n            const nextFileMarker = findNextFileMarker(data, offset - 2, offset - 3);\n\n            if (nextFileMarker && nextFileMarker.invalid) {\n              (0, _util.warn)("JpegImage.parse - unexpected data, current marker is: " + nextFileMarker.invalid);\n              offset = nextFileMarker.offset;\n              break;\n            }\n\n            if (!nextFileMarker || offset >= data.length - 1) {\n              (0, _util.warn)("JpegImage.parse - reached the end of the image data " + "without finding an EOI marker (0xFFD9).");\n              break markerLoop;\n            }\n\n            throw new JpegError("JpegImage.parse - unknown marker: " + fileMarker.toString(16));\n        }\n\n        fileMarker = (0, _core_utils.readUint16)(data, offset);\n        offset += 2;\n      }\n\n      this.width = frame.samplesPerLine;\n      this.height = frame.scanLines;\n      this.jfif = jfif;\n      this.adobe = adobe;\n      this.components = [];\n\n      for (i = 0; i < frame.components.length; i++) {\n        component = frame.components[i];\n        var quantizationTable = quantizationTables[component.quantizationId];\n\n        if (quantizationTable) {\n          component.quantizationTable = quantizationTable;\n        }\n\n        this.components.push({\n          index: component.index,\n          output: buildComponentData(frame, component),\n          scaleX: component.h / frame.maxH,\n          scaleY: component.v / frame.maxV,\n          blocksPerLine: component.blocksPerLine,\n          blocksPerColumn: component.blocksPerColumn\n        });\n      }\n\n      this.numComponents = this.components.length;\n      return undefined;\n    },\n\n    _getLinearizedBlockData(width, height, isSourcePDF = false) {\n      var scaleX = this.width / width,\n          scaleY = this.height / height;\n      var component, componentScaleX, componentScaleY, blocksPerScanline;\n      var x, y, i, j, k;\n      var index;\n      var offset = 0;\n      var output;\n      var numComponents = this.components.length;\n      var dataLength = width * height * numComponents;\n      var data = new Uint8ClampedArray(dataLength);\n      var xScaleBlockOffset = new Uint32Array(width);\n      var mask3LSB = 0xfffffff8;\n      let lastComponentScaleX;\n\n      for (i = 0; i < numComponents; i++) {\n        component = this.components[i];\n        componentScaleX = component.scaleX * scaleX;\n        componentScaleY = component.scaleY * scaleY;\n        offset = i;\n        output = component.output;\n        blocksPerScanline = component.blocksPerLine + 1 << 3;\n\n        if (componentScaleX !== lastComponentScaleX) {\n          for (x = 0; x < width; x++) {\n            j = 0 | x * componentScaleX;\n            xScaleBlockOffset[x] = (j & mask3LSB) << 3 | j & 7;\n          }\n\n          lastComponentScaleX = componentScaleX;\n        }\n\n        for (y = 0; y < height; y++) {\n          j = 0 | y * componentScaleY;\n          index = blocksPerScanline * (j & mask3LSB) | (j & 7) << 3;\n\n          for (x = 0; x < width; x++) {\n            data[offset] = output[index + xScaleBlockOffset[x]];\n            offset += numComponents;\n          }\n        }\n      }\n\n      let transform = this._decodeTransform;\n\n      if (!isSourcePDF && numComponents === 4 && !transform) {\n        transform = new Int32Array([-256, 255, -256, 255, -256, 255, -256, 255]);\n      }\n\n      if (transform) {\n        for (i = 0; i < dataLength;) {\n          for (j = 0, k = 0; j < numComponents; j++, i++, k += 2) {\n            data[i] = (data[i] * transform[k] >> 8) + transform[k + 1];\n          }\n        }\n      }\n\n      return data;\n    },\n\n    get _isColorConversionNeeded() {\n      if (this.adobe) {\n        return !!this.adobe.transformCode;\n      }\n\n      if (this.numComponents === 3) {\n        if (this._colorTransform === 0) {\n          return false;\n        } else if (this.components[0].index === 0x52 && this.components[1].index === 0x47 && this.components[2].index === 0x42) {\n          return false;\n        }\n\n        return true;\n      }\n\n      if (this._colorTransform === 1) {\n        return true;\n      }\n\n      return false;\n    },\n\n    _convertYccToRgb: function convertYccToRgb(data) {\n      var Y, Cb, Cr;\n\n      for (var i = 0, length = data.length; i < length; i += 3) {\n        Y = data[i];\n        Cb = data[i + 1];\n        Cr = data[i + 2];\n        data[i] = Y - 179.456 + 1.402 * Cr;\n        data[i + 1] = Y + 135.459 - 0.344 * Cb - 0.714 * Cr;\n        data[i + 2] = Y - 226.816 + 1.772 * Cb;\n      }\n\n      return data;\n    },\n    _convertYcckToRgb: function convertYcckToRgb(data) {\n      var Y, Cb, Cr, k;\n      var offset = 0;\n\n      for (var i = 0, length = data.length; i < length; i += 4) {\n        Y = data[i];\n        Cb = data[i + 1];\n        Cr = data[i + 2];\n        k = data[i + 3];\n        data[offset++] = -122.67195406894 + Cb * (-6.60635669420364e-5 * Cb + 0.000437130475926232 * Cr - 5.4080610064599e-5 * Y + 0.00048449797120281 * k - 0.154362151871126) + Cr * (-0.000957964378445773 * Cr + 0.000817076911346625 * Y - 0.00477271405408747 * k + 1.53380253221734) + Y * (0.000961250184130688 * Y - 0.00266257332283933 * k + 0.48357088451265) + k * (-0.000336197177618394 * k + 0.484791561490776);\n        data[offset++] = 107.268039397724 + Cb * (2.19927104525741e-5 * Cb - 0.000640992018297945 * Cr + 0.000659397001245577 * Y + 0.000426105652938837 * k - 0.176491792462875) + Cr * (-0.000778269941513683 * Cr + 0.00130872261408275 * Y + 0.000770482631801132 * k - 0.151051492775562) + Y * (0.00126935368114843 * Y - 0.00265090189010898 * k + 0.25802910206845) + k * (-0.000318913117588328 * k - 0.213742400323665);\n        data[offset++] = -20.810012546947 + Cb * (-0.000570115196973677 * Cb - 2.63409051004589e-5 * Cr + 0.0020741088115012 * Y - 0.00288260236853442 * k + 0.814272968359295) + Cr * (-1.53496057440975e-5 * Cr - 0.000132689043961446 * Y + 0.000560833691242812 * k - 0.195152027534049) + Y * (0.00174418132927582 * Y - 0.00255243321439347 * k + 0.116935020465145) + k * (-0.000343531996510555 * k + 0.24165260232407);\n      }\n\n      return data.subarray(0, offset);\n    },\n    _convertYcckToCmyk: function convertYcckToCmyk(data) {\n      var Y, Cb, Cr;\n\n      for (var i = 0, length = data.length; i < length; i += 4) {\n        Y = data[i];\n        Cb = data[i + 1];\n        Cr = data[i + 2];\n        data[i] = 434.456 - Y - 1.402 * Cr;\n        data[i + 1] = 119.541 - Y + 0.344 * Cb + 0.714 * Cr;\n        data[i + 2] = 481.816 - Y - 1.772 * Cb;\n      }\n\n      return data;\n    },\n    _convertCmykToRgb: function convertCmykToRgb(data) {\n      var c, m, y, k;\n      var offset = 0;\n\n      for (var i = 0, length = data.length; i < length; i += 4) {\n        c = data[i];\n        m = data[i + 1];\n        y = data[i + 2];\n        k = data[i + 3];\n        data[offset++] = 255 + c * (-0.00006747147073602441 * c + 0.0008379262121013727 * m + 0.0002894718188643294 * y + 0.003264231057537806 * k - 1.1185611867203937) + m * (0.000026374107616089405 * m - 0.00008626949158638572 * y - 0.0002748769067499491 * k - 0.02155688794978967) + y * (-0.00003878099212869363 * y - 0.0003267808279485286 * k + 0.0686742238595345) - k * (0.0003361971776183937 * k + 0.7430659151342254);\n        data[offset++] = 255 + c * (0.00013596372813588848 * c + 0.000924537132573585 * m + 0.00010567359618683593 * y + 0.0004791864687436512 * k - 0.3109689587515875) + m * (-0.00023545346108370344 * m + 0.0002702845253534714 * y + 0.0020200308977307156 * k - 0.7488052167015494) + y * (0.00006834815998235662 * y + 0.00015168452363460973 * k - 0.09751927774728933) - k * (0.00031891311758832814 * k + 0.7364883807733168);\n        data[offset++] = 255 + c * (0.000013598650411385307 * c + 0.00012423956175490851 * m + 0.0004751985097583589 * y - 0.0000036729317476630422 * k - 0.05562186980264034) + m * (0.00016141380598724676 * m + 0.0009692239130725186 * y + 0.0007782692450036253 * k - 0.44015232367526463) + y * (5.068882914068769e-7 * y + 0.0017778369011375071 * k - 0.7591454649749609) - k * (0.0003435319965105553 * k + 0.7063770186160144);\n      }\n\n      return data.subarray(0, offset);\n    },\n\n    getData({\n      width,\n      height,\n      forceRGB = false,\n      isSourcePDF = false\n    }) {\n      if (this.numComponents > 4) {\n        throw new JpegError("Unsupported color mode");\n      }\n\n      var data = this._getLinearizedBlockData(width, height, isSourcePDF);\n\n      if (this.numComponents === 1 && forceRGB) {\n        var dataLength = data.length;\n        var rgbData = new Uint8ClampedArray(dataLength * 3);\n        var offset = 0;\n\n        for (var i = 0; i < dataLength; i++) {\n          var grayColor = data[i];\n          rgbData[offset++] = grayColor;\n          rgbData[offset++] = grayColor;\n          rgbData[offset++] = grayColor;\n        }\n\n        return rgbData;\n      } else if (this.numComponents === 3 && this._isColorConversionNeeded) {\n        return this._convertYccToRgb(data);\n      } else if (this.numComponents === 4) {\n        if (this._isColorConversionNeeded) {\n          if (forceRGB) {\n            return this._convertYcckToRgb(data);\n          }\n\n          return this._convertYcckToCmyk(data);\n        } else if (forceRGB) {\n          return this._convertCmykToRgb(data);\n        }\n      }\n\n      return data;\n    }\n\n  };\n  return JpegImage;\n}();\n\nexports.JpegImage = JpegImage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/jpg.js\n')},"./node_modules/pdfjs-dist/lib/core/jpx.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.JpxImage = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nvar _arithmetic_decoder = __webpack_require__(/*! ./arithmetic_decoder.js */ "./node_modules/pdfjs-dist/lib/core/arithmetic_decoder.js");\n\nclass JpxError extends _util.BaseException {\n  constructor(msg) {\n    super(`JPX error: ${msg}`);\n  }\n\n}\n\nvar JpxImage = function JpxImageClosure() {\n  var SubbandsGainLog2 = {\n    LL: 0,\n    LH: 1,\n    HL: 1,\n    HH: 2\n  };\n\n  function JpxImage() {\n    this.failOnCorruptedImage = false;\n  }\n\n  JpxImage.prototype = {\n    parse: function JpxImage_parse(data) {\n      var head = (0, _core_utils.readUint16)(data, 0);\n\n      if (head === 0xff4f) {\n        this.parseCodestream(data, 0, data.length);\n        return;\n      }\n\n      var position = 0,\n          length = data.length;\n\n      while (position < length) {\n        var headerSize = 8;\n        var lbox = (0, _core_utils.readUint32)(data, position);\n        var tbox = (0, _core_utils.readUint32)(data, position + 4);\n        position += headerSize;\n\n        if (lbox === 1) {\n          lbox = (0, _core_utils.readUint32)(data, position) * 4294967296 + (0, _core_utils.readUint32)(data, position + 4);\n          position += 8;\n          headerSize += 8;\n        }\n\n        if (lbox === 0) {\n          lbox = length - position + headerSize;\n        }\n\n        if (lbox < headerSize) {\n          throw new JpxError("Invalid box field size");\n        }\n\n        var dataLength = lbox - headerSize;\n        var jumpDataLength = true;\n\n        switch (tbox) {\n          case 0x6a703268:\n            jumpDataLength = false;\n            break;\n\n          case 0x636f6c72:\n            var method = data[position];\n\n            if (method === 1) {\n              var colorspace = (0, _core_utils.readUint32)(data, position + 3);\n\n              switch (colorspace) {\n                case 16:\n                case 17:\n                case 18:\n                  break;\n\n                default:\n                  (0, _util.warn)("Unknown colorspace " + colorspace);\n                  break;\n              }\n            } else if (method === 2) {\n              (0, _util.info)("ICC profile not supported");\n            }\n\n            break;\n\n          case 0x6a703263:\n            this.parseCodestream(data, position, position + dataLength);\n            break;\n\n          case 0x6a502020:\n            if ((0, _core_utils.readUint32)(data, position) !== 0x0d0a870a) {\n              (0, _util.warn)("Invalid JP2 signature");\n            }\n\n            break;\n\n          case 0x6a501a1a:\n          case 0x66747970:\n          case 0x72726571:\n          case 0x72657320:\n          case 0x69686472:\n            break;\n\n          default:\n            var headerType = String.fromCharCode(tbox >> 24 & 0xff, tbox >> 16 & 0xff, tbox >> 8 & 0xff, tbox & 0xff);\n            (0, _util.warn)("Unsupported header type " + tbox + " (" + headerType + ")");\n            break;\n        }\n\n        if (jumpDataLength) {\n          position += dataLength;\n        }\n      }\n    },\n    parseImageProperties: function JpxImage_parseImageProperties(stream) {\n      var newByte = stream.getByte();\n\n      while (newByte >= 0) {\n        var oldByte = newByte;\n        newByte = stream.getByte();\n        var code = oldByte << 8 | newByte;\n\n        if (code === 0xff51) {\n          stream.skip(4);\n          var Xsiz = stream.getInt32() >>> 0;\n          var Ysiz = stream.getInt32() >>> 0;\n          var XOsiz = stream.getInt32() >>> 0;\n          var YOsiz = stream.getInt32() >>> 0;\n          stream.skip(16);\n          var Csiz = stream.getUint16();\n          this.width = Xsiz - XOsiz;\n          this.height = Ysiz - YOsiz;\n          this.componentsCount = Csiz;\n          this.bitsPerComponent = 8;\n          return;\n        }\n      }\n\n      throw new JpxError("No size marker found in JPX stream");\n    },\n    parseCodestream: function JpxImage_parseCodestream(data, start, end) {\n      var context = {};\n      var doNotRecover = false;\n\n      try {\n        var position = start;\n\n        while (position + 1 < end) {\n          var code = (0, _core_utils.readUint16)(data, position);\n          position += 2;\n          var length = 0,\n              j,\n              sqcd,\n              spqcds,\n              spqcdSize,\n              scalarExpounded,\n              tile;\n\n          switch (code) {\n            case 0xff4f:\n              context.mainHeader = true;\n              break;\n\n            case 0xffd9:\n              break;\n\n            case 0xff51:\n              length = (0, _core_utils.readUint16)(data, position);\n              var siz = {};\n              siz.Xsiz = (0, _core_utils.readUint32)(data, position + 4);\n              siz.Ysiz = (0, _core_utils.readUint32)(data, position + 8);\n              siz.XOsiz = (0, _core_utils.readUint32)(data, position + 12);\n              siz.YOsiz = (0, _core_utils.readUint32)(data, position + 16);\n              siz.XTsiz = (0, _core_utils.readUint32)(data, position + 20);\n              siz.YTsiz = (0, _core_utils.readUint32)(data, position + 24);\n              siz.XTOsiz = (0, _core_utils.readUint32)(data, position + 28);\n              siz.YTOsiz = (0, _core_utils.readUint32)(data, position + 32);\n              var componentsCount = (0, _core_utils.readUint16)(data, position + 36);\n              siz.Csiz = componentsCount;\n              var components = [];\n              j = position + 38;\n\n              for (var i = 0; i < componentsCount; i++) {\n                var component = {\n                  precision: (data[j] & 0x7f) + 1,\n                  isSigned: !!(data[j] & 0x80),\n                  XRsiz: data[j + 1],\n                  YRsiz: data[j + 2]\n                };\n                j += 3;\n                calculateComponentDimensions(component, siz);\n                components.push(component);\n              }\n\n              context.SIZ = siz;\n              context.components = components;\n              calculateTileGrids(context, components);\n              context.QCC = [];\n              context.COC = [];\n              break;\n\n            case 0xff5c:\n              length = (0, _core_utils.readUint16)(data, position);\n              var qcd = {};\n              j = position + 2;\n              sqcd = data[j++];\n\n              switch (sqcd & 0x1f) {\n                case 0:\n                  spqcdSize = 8;\n                  scalarExpounded = true;\n                  break;\n\n                case 1:\n                  spqcdSize = 16;\n                  scalarExpounded = false;\n                  break;\n\n                case 2:\n                  spqcdSize = 16;\n                  scalarExpounded = true;\n                  break;\n\n                default:\n                  throw new Error("Invalid SQcd value " + sqcd);\n              }\n\n              qcd.noQuantization = spqcdSize === 8;\n              qcd.scalarExpounded = scalarExpounded;\n              qcd.guardBits = sqcd >> 5;\n              spqcds = [];\n\n              while (j < length + position) {\n                var spqcd = {};\n\n                if (spqcdSize === 8) {\n                  spqcd.epsilon = data[j++] >> 3;\n                  spqcd.mu = 0;\n                } else {\n                  spqcd.epsilon = data[j] >> 3;\n                  spqcd.mu = (data[j] & 0x7) << 8 | data[j + 1];\n                  j += 2;\n                }\n\n                spqcds.push(spqcd);\n              }\n\n              qcd.SPqcds = spqcds;\n\n              if (context.mainHeader) {\n                context.QCD = qcd;\n              } else {\n                context.currentTile.QCD = qcd;\n                context.currentTile.QCC = [];\n              }\n\n              break;\n\n            case 0xff5d:\n              length = (0, _core_utils.readUint16)(data, position);\n              var qcc = {};\n              j = position + 2;\n              var cqcc;\n\n              if (context.SIZ.Csiz < 257) {\n                cqcc = data[j++];\n              } else {\n                cqcc = (0, _core_utils.readUint16)(data, j);\n                j += 2;\n              }\n\n              sqcd = data[j++];\n\n              switch (sqcd & 0x1f) {\n                case 0:\n                  spqcdSize = 8;\n                  scalarExpounded = true;\n                  break;\n\n                case 1:\n                  spqcdSize = 16;\n                  scalarExpounded = false;\n                  break;\n\n                case 2:\n                  spqcdSize = 16;\n                  scalarExpounded = true;\n                  break;\n\n                default:\n                  throw new Error("Invalid SQcd value " + sqcd);\n              }\n\n              qcc.noQuantization = spqcdSize === 8;\n              qcc.scalarExpounded = scalarExpounded;\n              qcc.guardBits = sqcd >> 5;\n              spqcds = [];\n\n              while (j < length + position) {\n                spqcd = {};\n\n                if (spqcdSize === 8) {\n                  spqcd.epsilon = data[j++] >> 3;\n                  spqcd.mu = 0;\n                } else {\n                  spqcd.epsilon = data[j] >> 3;\n                  spqcd.mu = (data[j] & 0x7) << 8 | data[j + 1];\n                  j += 2;\n                }\n\n                spqcds.push(spqcd);\n              }\n\n              qcc.SPqcds = spqcds;\n\n              if (context.mainHeader) {\n                context.QCC[cqcc] = qcc;\n              } else {\n                context.currentTile.QCC[cqcc] = qcc;\n              }\n\n              break;\n\n            case 0xff52:\n              length = (0, _core_utils.readUint16)(data, position);\n              var cod = {};\n              j = position + 2;\n              var scod = data[j++];\n              cod.entropyCoderWithCustomPrecincts = !!(scod & 1);\n              cod.sopMarkerUsed = !!(scod & 2);\n              cod.ephMarkerUsed = !!(scod & 4);\n              cod.progressionOrder = data[j++];\n              cod.layersCount = (0, _core_utils.readUint16)(data, j);\n              j += 2;\n              cod.multipleComponentTransform = data[j++];\n              cod.decompositionLevelsCount = data[j++];\n              cod.xcb = (data[j++] & 0xf) + 2;\n              cod.ycb = (data[j++] & 0xf) + 2;\n              var blockStyle = data[j++];\n              cod.selectiveArithmeticCodingBypass = !!(blockStyle & 1);\n              cod.resetContextProbabilities = !!(blockStyle & 2);\n              cod.terminationOnEachCodingPass = !!(blockStyle & 4);\n              cod.verticallyStripe = !!(blockStyle & 8);\n              cod.predictableTermination = !!(blockStyle & 16);\n              cod.segmentationSymbolUsed = !!(blockStyle & 32);\n              cod.reversibleTransformation = data[j++];\n\n              if (cod.entropyCoderWithCustomPrecincts) {\n                var precinctsSizes = [];\n\n                while (j < length + position) {\n                  var precinctsSize = data[j++];\n                  precinctsSizes.push({\n                    PPx: precinctsSize & 0xf,\n                    PPy: precinctsSize >> 4\n                  });\n                }\n\n                cod.precinctsSizes = precinctsSizes;\n              }\n\n              var unsupported = [];\n\n              if (cod.selectiveArithmeticCodingBypass) {\n                unsupported.push("selectiveArithmeticCodingBypass");\n              }\n\n              if (cod.resetContextProbabilities) {\n                unsupported.push("resetContextProbabilities");\n              }\n\n              if (cod.terminationOnEachCodingPass) {\n                unsupported.push("terminationOnEachCodingPass");\n              }\n\n              if (cod.verticallyStripe) {\n                unsupported.push("verticallyStripe");\n              }\n\n              if (cod.predictableTermination) {\n                unsupported.push("predictableTermination");\n              }\n\n              if (unsupported.length > 0) {\n                doNotRecover = true;\n                (0, _util.warn)(`JPX: Unsupported COD options (${unsupported.join(", ")}).`);\n              }\n\n              if (context.mainHeader) {\n                context.COD = cod;\n              } else {\n                context.currentTile.COD = cod;\n                context.currentTile.COC = [];\n              }\n\n              break;\n\n            case 0xff90:\n              length = (0, _core_utils.readUint16)(data, position);\n              tile = {};\n              tile.index = (0, _core_utils.readUint16)(data, position + 2);\n              tile.length = (0, _core_utils.readUint32)(data, position + 4);\n              tile.dataEnd = tile.length + position - 2;\n              tile.partIndex = data[position + 8];\n              tile.partsCount = data[position + 9];\n              context.mainHeader = false;\n\n              if (tile.partIndex === 0) {\n                tile.COD = context.COD;\n                tile.COC = context.COC.slice(0);\n                tile.QCD = context.QCD;\n                tile.QCC = context.QCC.slice(0);\n              }\n\n              context.currentTile = tile;\n              break;\n\n            case 0xff93:\n              tile = context.currentTile;\n\n              if (tile.partIndex === 0) {\n                initializeTile(context, tile.index);\n                buildPackets(context);\n              }\n\n              length = tile.dataEnd - position;\n              parseTilePackets(context, data, position, length);\n              break;\n\n            case 0xff53:\n              (0, _util.warn)("JPX: Codestream code 0xFF53 (COC) is not implemented.");\n\n            case 0xff55:\n            case 0xff57:\n            case 0xff58:\n            case 0xff64:\n              length = (0, _core_utils.readUint16)(data, position);\n              break;\n\n            default:\n              throw new Error("Unknown codestream code: " + code.toString(16));\n          }\n\n          position += length;\n        }\n      } catch (e) {\n        if (doNotRecover || this.failOnCorruptedImage) {\n          throw new JpxError(e.message);\n        } else {\n          (0, _util.warn)(`JPX: Trying to recover from: "${e.message}".`);\n        }\n      }\n\n      this.tiles = transformComponents(context);\n      this.width = context.SIZ.Xsiz - context.SIZ.XOsiz;\n      this.height = context.SIZ.Ysiz - context.SIZ.YOsiz;\n      this.componentsCount = context.SIZ.Csiz;\n    }\n  };\n\n  function calculateComponentDimensions(component, siz) {\n    component.x0 = Math.ceil(siz.XOsiz / component.XRsiz);\n    component.x1 = Math.ceil(siz.Xsiz / component.XRsiz);\n    component.y0 = Math.ceil(siz.YOsiz / component.YRsiz);\n    component.y1 = Math.ceil(siz.Ysiz / component.YRsiz);\n    component.width = component.x1 - component.x0;\n    component.height = component.y1 - component.y0;\n  }\n\n  function calculateTileGrids(context, components) {\n    var siz = context.SIZ;\n    var tile,\n        tiles = [];\n    var numXtiles = Math.ceil((siz.Xsiz - siz.XTOsiz) / siz.XTsiz);\n    var numYtiles = Math.ceil((siz.Ysiz - siz.YTOsiz) / siz.YTsiz);\n\n    for (var q = 0; q < numYtiles; q++) {\n      for (var p = 0; p < numXtiles; p++) {\n        tile = {};\n        tile.tx0 = Math.max(siz.XTOsiz + p * siz.XTsiz, siz.XOsiz);\n        tile.ty0 = Math.max(siz.YTOsiz + q * siz.YTsiz, siz.YOsiz);\n        tile.tx1 = Math.min(siz.XTOsiz + (p + 1) * siz.XTsiz, siz.Xsiz);\n        tile.ty1 = Math.min(siz.YTOsiz + (q + 1) * siz.YTsiz, siz.Ysiz);\n        tile.width = tile.tx1 - tile.tx0;\n        tile.height = tile.ty1 - tile.ty0;\n        tile.components = [];\n        tiles.push(tile);\n      }\n    }\n\n    context.tiles = tiles;\n    var componentsCount = siz.Csiz;\n\n    for (var i = 0, ii = componentsCount; i < ii; i++) {\n      var component = components[i];\n\n      for (var j = 0, jj = tiles.length; j < jj; j++) {\n        var tileComponent = {};\n        tile = tiles[j];\n        tileComponent.tcx0 = Math.ceil(tile.tx0 / component.XRsiz);\n        tileComponent.tcy0 = Math.ceil(tile.ty0 / component.YRsiz);\n        tileComponent.tcx1 = Math.ceil(tile.tx1 / component.XRsiz);\n        tileComponent.tcy1 = Math.ceil(tile.ty1 / component.YRsiz);\n        tileComponent.width = tileComponent.tcx1 - tileComponent.tcx0;\n        tileComponent.height = tileComponent.tcy1 - tileComponent.tcy0;\n        tile.components[i] = tileComponent;\n      }\n    }\n  }\n\n  function getBlocksDimensions(context, component, r) {\n    var codOrCoc = component.codingStyleParameters;\n    var result = {};\n\n    if (!codOrCoc.entropyCoderWithCustomPrecincts) {\n      result.PPx = 15;\n      result.PPy = 15;\n    } else {\n      result.PPx = codOrCoc.precinctsSizes[r].PPx;\n      result.PPy = codOrCoc.precinctsSizes[r].PPy;\n    }\n\n    result.xcb_ = r > 0 ? Math.min(codOrCoc.xcb, result.PPx - 1) : Math.min(codOrCoc.xcb, result.PPx);\n    result.ycb_ = r > 0 ? Math.min(codOrCoc.ycb, result.PPy - 1) : Math.min(codOrCoc.ycb, result.PPy);\n    return result;\n  }\n\n  function buildPrecincts(context, resolution, dimensions) {\n    var precinctWidth = 1 << dimensions.PPx;\n    var precinctHeight = 1 << dimensions.PPy;\n    var isZeroRes = resolution.resLevel === 0;\n    var precinctWidthInSubband = 1 << dimensions.PPx + (isZeroRes ? 0 : -1);\n    var precinctHeightInSubband = 1 << dimensions.PPy + (isZeroRes ? 0 : -1);\n    var numprecinctswide = resolution.trx1 > resolution.trx0 ? Math.ceil(resolution.trx1 / precinctWidth) - Math.floor(resolution.trx0 / precinctWidth) : 0;\n    var numprecinctshigh = resolution.try1 > resolution.try0 ? Math.ceil(resolution.try1 / precinctHeight) - Math.floor(resolution.try0 / precinctHeight) : 0;\n    var numprecincts = numprecinctswide * numprecinctshigh;\n    resolution.precinctParameters = {\n      precinctWidth,\n      precinctHeight,\n      numprecinctswide,\n      numprecinctshigh,\n      numprecincts,\n      precinctWidthInSubband,\n      precinctHeightInSubband\n    };\n  }\n\n  function buildCodeblocks(context, subband, dimensions) {\n    var xcb_ = dimensions.xcb_;\n    var ycb_ = dimensions.ycb_;\n    var codeblockWidth = 1 << xcb_;\n    var codeblockHeight = 1 << ycb_;\n    var cbx0 = subband.tbx0 >> xcb_;\n    var cby0 = subband.tby0 >> ycb_;\n    var cbx1 = subband.tbx1 + codeblockWidth - 1 >> xcb_;\n    var cby1 = subband.tby1 + codeblockHeight - 1 >> ycb_;\n    var precinctParameters = subband.resolution.precinctParameters;\n    var codeblocks = [];\n    var precincts = [];\n    var i, j, codeblock, precinctNumber;\n\n    for (j = cby0; j < cby1; j++) {\n      for (i = cbx0; i < cbx1; i++) {\n        codeblock = {\n          cbx: i,\n          cby: j,\n          tbx0: codeblockWidth * i,\n          tby0: codeblockHeight * j,\n          tbx1: codeblockWidth * (i + 1),\n          tby1: codeblockHeight * (j + 1)\n        };\n        codeblock.tbx0_ = Math.max(subband.tbx0, codeblock.tbx0);\n        codeblock.tby0_ = Math.max(subband.tby0, codeblock.tby0);\n        codeblock.tbx1_ = Math.min(subband.tbx1, codeblock.tbx1);\n        codeblock.tby1_ = Math.min(subband.tby1, codeblock.tby1);\n        var pi = Math.floor((codeblock.tbx0_ - subband.tbx0) / precinctParameters.precinctWidthInSubband);\n        var pj = Math.floor((codeblock.tby0_ - subband.tby0) / precinctParameters.precinctHeightInSubband);\n        precinctNumber = pi + pj * precinctParameters.numprecinctswide;\n        codeblock.precinctNumber = precinctNumber;\n        codeblock.subbandType = subband.type;\n        codeblock.Lblock = 3;\n\n        if (codeblock.tbx1_ <= codeblock.tbx0_ || codeblock.tby1_ <= codeblock.tby0_) {\n          continue;\n        }\n\n        codeblocks.push(codeblock);\n        var precinct = precincts[precinctNumber];\n\n        if (precinct !== undefined) {\n          if (i < precinct.cbxMin) {\n            precinct.cbxMin = i;\n          } else if (i > precinct.cbxMax) {\n            precinct.cbxMax = i;\n          }\n\n          if (j < precinct.cbyMin) {\n            precinct.cbxMin = j;\n          } else if (j > precinct.cbyMax) {\n            precinct.cbyMax = j;\n          }\n        } else {\n          precincts[precinctNumber] = precinct = {\n            cbxMin: i,\n            cbyMin: j,\n            cbxMax: i,\n            cbyMax: j\n          };\n        }\n\n        codeblock.precinct = precinct;\n      }\n    }\n\n    subband.codeblockParameters = {\n      codeblockWidth: xcb_,\n      codeblockHeight: ycb_,\n      numcodeblockwide: cbx1 - cbx0 + 1,\n      numcodeblockhigh: cby1 - cby0 + 1\n    };\n    subband.codeblocks = codeblocks;\n    subband.precincts = precincts;\n  }\n\n  function createPacket(resolution, precinctNumber, layerNumber) {\n    var precinctCodeblocks = [];\n    var subbands = resolution.subbands;\n\n    for (var i = 0, ii = subbands.length; i < ii; i++) {\n      var subband = subbands[i];\n      var codeblocks = subband.codeblocks;\n\n      for (var j = 0, jj = codeblocks.length; j < jj; j++) {\n        var codeblock = codeblocks[j];\n\n        if (codeblock.precinctNumber !== precinctNumber) {\n          continue;\n        }\n\n        precinctCodeblocks.push(codeblock);\n      }\n    }\n\n    return {\n      layerNumber,\n      codeblocks: precinctCodeblocks\n    };\n  }\n\n  function LayerResolutionComponentPositionIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var maxDecompositionLevelsCount = 0;\n\n    for (var q = 0; q < componentsCount; q++) {\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);\n    }\n\n    var l = 0,\n        r = 0,\n        i = 0,\n        k = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      for (; l < layersCount; l++) {\n        for (; r <= maxDecompositionLevelsCount; r++) {\n          for (; i < componentsCount; i++) {\n            var component = tile.components[i];\n\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n\n            for (; k < numprecincts;) {\n              var packet = createPacket(resolution, k, l);\n              k++;\n              return packet;\n            }\n\n            k = 0;\n          }\n\n          i = 0;\n        }\n\n        r = 0;\n      }\n\n      throw new JpxError("Out of packets");\n    };\n  }\n\n  function ResolutionLayerComponentPositionIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var maxDecompositionLevelsCount = 0;\n\n    for (var q = 0; q < componentsCount; q++) {\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);\n    }\n\n    var r = 0,\n        l = 0,\n        i = 0,\n        k = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      for (; r <= maxDecompositionLevelsCount; r++) {\n        for (; l < layersCount; l++) {\n          for (; i < componentsCount; i++) {\n            var component = tile.components[i];\n\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n\n            for (; k < numprecincts;) {\n              var packet = createPacket(resolution, k, l);\n              k++;\n              return packet;\n            }\n\n            k = 0;\n          }\n\n          i = 0;\n        }\n\n        l = 0;\n      }\n\n      throw new JpxError("Out of packets");\n    };\n  }\n\n  function ResolutionPositionComponentLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var l, r, c, p;\n    var maxDecompositionLevelsCount = 0;\n\n    for (c = 0; c < componentsCount; c++) {\n      const component = tile.components[c];\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, component.codingStyleParameters.decompositionLevelsCount);\n    }\n\n    var maxNumPrecinctsInLevel = new Int32Array(maxDecompositionLevelsCount + 1);\n\n    for (r = 0; r <= maxDecompositionLevelsCount; ++r) {\n      var maxNumPrecincts = 0;\n\n      for (c = 0; c < componentsCount; ++c) {\n        var resolutions = tile.components[c].resolutions;\n\n        if (r < resolutions.length) {\n          maxNumPrecincts = Math.max(maxNumPrecincts, resolutions[r].precinctParameters.numprecincts);\n        }\n      }\n\n      maxNumPrecinctsInLevel[r] = maxNumPrecincts;\n    }\n\n    l = 0;\n    r = 0;\n    c = 0;\n    p = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      for (; r <= maxDecompositionLevelsCount; r++) {\n        for (; p < maxNumPrecinctsInLevel[r]; p++) {\n          for (; c < componentsCount; c++) {\n            const component = tile.components[c];\n\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n\n            if (p >= numprecincts) {\n              continue;\n            }\n\n            for (; l < layersCount;) {\n              var packet = createPacket(resolution, p, l);\n              l++;\n              return packet;\n            }\n\n            l = 0;\n          }\n\n          c = 0;\n        }\n\n        p = 0;\n      }\n\n      throw new JpxError("Out of packets");\n    };\n  }\n\n  function PositionComponentResolutionLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var precinctsSizes = getPrecinctSizesInImageScale(tile);\n    var precinctsIterationSizes = precinctsSizes;\n    var l = 0,\n        r = 0,\n        c = 0,\n        px = 0,\n        py = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      for (; py < precinctsIterationSizes.maxNumHigh; py++) {\n        for (; px < precinctsIterationSizes.maxNumWide; px++) {\n          for (; c < componentsCount; c++) {\n            var component = tile.components[c];\n            var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n\n            for (; r <= decompositionLevelsCount; r++) {\n              var resolution = component.resolutions[r];\n              var sizeInImageScale = precinctsSizes.components[c].resolutions[r];\n              var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);\n\n              if (k === null) {\n                continue;\n              }\n\n              for (; l < layersCount;) {\n                var packet = createPacket(resolution, k, l);\n                l++;\n                return packet;\n              }\n\n              l = 0;\n            }\n\n            r = 0;\n          }\n\n          c = 0;\n        }\n\n        px = 0;\n      }\n\n      throw new JpxError("Out of packets");\n    };\n  }\n\n  function ComponentPositionResolutionLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var precinctsSizes = getPrecinctSizesInImageScale(tile);\n    var l = 0,\n        r = 0,\n        c = 0,\n        px = 0,\n        py = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      for (; c < componentsCount; ++c) {\n        var component = tile.components[c];\n        var precinctsIterationSizes = precinctsSizes.components[c];\n        var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n\n        for (; py < precinctsIterationSizes.maxNumHigh; py++) {\n          for (; px < precinctsIterationSizes.maxNumWide; px++) {\n            for (; r <= decompositionLevelsCount; r++) {\n              var resolution = component.resolutions[r];\n              var sizeInImageScale = precinctsIterationSizes.resolutions[r];\n              var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);\n\n              if (k === null) {\n                continue;\n              }\n\n              for (; l < layersCount;) {\n                var packet = createPacket(resolution, k, l);\n                l++;\n                return packet;\n              }\n\n              l = 0;\n            }\n\n            r = 0;\n          }\n\n          px = 0;\n        }\n\n        py = 0;\n      }\n\n      throw new JpxError("Out of packets");\n    };\n  }\n\n  function getPrecinctIndexIfExist(pxIndex, pyIndex, sizeInImageScale, precinctIterationSizes, resolution) {\n    var posX = pxIndex * precinctIterationSizes.minWidth;\n    var posY = pyIndex * precinctIterationSizes.minHeight;\n\n    if (posX % sizeInImageScale.width !== 0 || posY % sizeInImageScale.height !== 0) {\n      return null;\n    }\n\n    var startPrecinctRowIndex = posY / sizeInImageScale.width * resolution.precinctParameters.numprecinctswide;\n    return posX / sizeInImageScale.height + startPrecinctRowIndex;\n  }\n\n  function getPrecinctSizesInImageScale(tile) {\n    var componentsCount = tile.components.length;\n    var minWidth = Number.MAX_VALUE;\n    var minHeight = Number.MAX_VALUE;\n    var maxNumWide = 0;\n    var maxNumHigh = 0;\n    var sizePerComponent = new Array(componentsCount);\n\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n      var sizePerResolution = new Array(decompositionLevelsCount + 1);\n      var minWidthCurrentComponent = Number.MAX_VALUE;\n      var minHeightCurrentComponent = Number.MAX_VALUE;\n      var maxNumWideCurrentComponent = 0;\n      var maxNumHighCurrentComponent = 0;\n      var scale = 1;\n\n      for (var r = decompositionLevelsCount; r >= 0; --r) {\n        var resolution = component.resolutions[r];\n        var widthCurrentResolution = scale * resolution.precinctParameters.precinctWidth;\n        var heightCurrentResolution = scale * resolution.precinctParameters.precinctHeight;\n        minWidthCurrentComponent = Math.min(minWidthCurrentComponent, widthCurrentResolution);\n        minHeightCurrentComponent = Math.min(minHeightCurrentComponent, heightCurrentResolution);\n        maxNumWideCurrentComponent = Math.max(maxNumWideCurrentComponent, resolution.precinctParameters.numprecinctswide);\n        maxNumHighCurrentComponent = Math.max(maxNumHighCurrentComponent, resolution.precinctParameters.numprecinctshigh);\n        sizePerResolution[r] = {\n          width: widthCurrentResolution,\n          height: heightCurrentResolution\n        };\n        scale <<= 1;\n      }\n\n      minWidth = Math.min(minWidth, minWidthCurrentComponent);\n      minHeight = Math.min(minHeight, minHeightCurrentComponent);\n      maxNumWide = Math.max(maxNumWide, maxNumWideCurrentComponent);\n      maxNumHigh = Math.max(maxNumHigh, maxNumHighCurrentComponent);\n      sizePerComponent[c] = {\n        resolutions: sizePerResolution,\n        minWidth: minWidthCurrentComponent,\n        minHeight: minHeightCurrentComponent,\n        maxNumWide: maxNumWideCurrentComponent,\n        maxNumHigh: maxNumHighCurrentComponent\n      };\n    }\n\n    return {\n      components: sizePerComponent,\n      minWidth,\n      minHeight,\n      maxNumWide,\n      maxNumHigh\n    };\n  }\n\n  function buildPackets(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var componentsCount = siz.Csiz;\n\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n      var resolutions = [];\n      var subbands = [];\n\n      for (var r = 0; r <= decompositionLevelsCount; r++) {\n        var blocksDimensions = getBlocksDimensions(context, component, r);\n        var resolution = {};\n        var scale = 1 << decompositionLevelsCount - r;\n        resolution.trx0 = Math.ceil(component.tcx0 / scale);\n        resolution.try0 = Math.ceil(component.tcy0 / scale);\n        resolution.trx1 = Math.ceil(component.tcx1 / scale);\n        resolution.try1 = Math.ceil(component.tcy1 / scale);\n        resolution.resLevel = r;\n        buildPrecincts(context, resolution, blocksDimensions);\n        resolutions.push(resolution);\n        var subband;\n\n        if (r === 0) {\n          subband = {};\n          subband.type = "LL";\n          subband.tbx0 = Math.ceil(component.tcx0 / scale);\n          subband.tby0 = Math.ceil(component.tcy0 / scale);\n          subband.tbx1 = Math.ceil(component.tcx1 / scale);\n          subband.tby1 = Math.ceil(component.tcy1 / scale);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolution.subbands = [subband];\n        } else {\n          var bscale = 1 << decompositionLevelsCount - r + 1;\n          var resolutionSubbands = [];\n          subband = {};\n          subband.type = "HL";\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n          subband = {};\n          subband.type = "LH";\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n          subband = {};\n          subband.type = "HH";\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n          resolution.subbands = resolutionSubbands;\n        }\n      }\n\n      component.resolutions = resolutions;\n      component.subbands = subbands;\n    }\n\n    var progressionOrder = tile.codingStyleDefaultParameters.progressionOrder;\n\n    switch (progressionOrder) {\n      case 0:\n        tile.packetsIterator = new LayerResolutionComponentPositionIterator(context);\n        break;\n\n      case 1:\n        tile.packetsIterator = new ResolutionLayerComponentPositionIterator(context);\n        break;\n\n      case 2:\n        tile.packetsIterator = new ResolutionPositionComponentLayerIterator(context);\n        break;\n\n      case 3:\n        tile.packetsIterator = new PositionComponentResolutionLayerIterator(context);\n        break;\n\n      case 4:\n        tile.packetsIterator = new ComponentPositionResolutionLayerIterator(context);\n        break;\n\n      default:\n        throw new JpxError(`Unsupported progression order ${progressionOrder}`);\n    }\n  }\n\n  function parseTilePackets(context, data, offset, dataLength) {\n    var position = 0;\n    var buffer,\n        bufferSize = 0,\n        skipNextBit = false;\n\n    function readBits(count) {\n      while (bufferSize < count) {\n        var b = data[offset + position];\n        position++;\n\n        if (skipNextBit) {\n          buffer = buffer << 7 | b;\n          bufferSize += 7;\n          skipNextBit = false;\n        } else {\n          buffer = buffer << 8 | b;\n          bufferSize += 8;\n        }\n\n        if (b === 0xff) {\n          skipNextBit = true;\n        }\n      }\n\n      bufferSize -= count;\n      return buffer >>> bufferSize & (1 << count) - 1;\n    }\n\n    function skipMarkerIfEqual(value) {\n      if (data[offset + position - 1] === 0xff && data[offset + position] === value) {\n        skipBytes(1);\n        return true;\n      } else if (data[offset + position] === 0xff && data[offset + position + 1] === value) {\n        skipBytes(2);\n        return true;\n      }\n\n      return false;\n    }\n\n    function skipBytes(count) {\n      position += count;\n    }\n\n    function alignToByte() {\n      bufferSize = 0;\n\n      if (skipNextBit) {\n        position++;\n        skipNextBit = false;\n      }\n    }\n\n    function readCodingpasses() {\n      if (readBits(1) === 0) {\n        return 1;\n      }\n\n      if (readBits(1) === 0) {\n        return 2;\n      }\n\n      var value = readBits(2);\n\n      if (value < 3) {\n        return value + 3;\n      }\n\n      value = readBits(5);\n\n      if (value < 31) {\n        return value + 6;\n      }\n\n      value = readBits(7);\n      return value + 37;\n    }\n\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var sopMarkerUsed = context.COD.sopMarkerUsed;\n    var ephMarkerUsed = context.COD.ephMarkerUsed;\n    var packetsIterator = tile.packetsIterator;\n\n    while (position < dataLength) {\n      alignToByte();\n\n      if (sopMarkerUsed && skipMarkerIfEqual(0x91)) {\n        skipBytes(4);\n      }\n\n      var packet = packetsIterator.nextPacket();\n\n      if (!readBits(1)) {\n        continue;\n      }\n\n      var layerNumber = packet.layerNumber;\n      var queue = [],\n          codeblock;\n\n      for (var i = 0, ii = packet.codeblocks.length; i < ii; i++) {\n        codeblock = packet.codeblocks[i];\n        var precinct = codeblock.precinct;\n        var codeblockColumn = codeblock.cbx - precinct.cbxMin;\n        var codeblockRow = codeblock.cby - precinct.cbyMin;\n        var codeblockIncluded = false;\n        var firstTimeInclusion = false;\n        var valueReady;\n\n        if (codeblock.included !== undefined) {\n          codeblockIncluded = !!readBits(1);\n        } else {\n          precinct = codeblock.precinct;\n          var inclusionTree, zeroBitPlanesTree;\n\n          if (precinct.inclusionTree !== undefined) {\n            inclusionTree = precinct.inclusionTree;\n          } else {\n            var width = precinct.cbxMax - precinct.cbxMin + 1;\n            var height = precinct.cbyMax - precinct.cbyMin + 1;\n            inclusionTree = new InclusionTree(width, height, layerNumber);\n            zeroBitPlanesTree = new TagTree(width, height);\n            precinct.inclusionTree = inclusionTree;\n            precinct.zeroBitPlanesTree = zeroBitPlanesTree;\n          }\n\n          if (inclusionTree.reset(codeblockColumn, codeblockRow, layerNumber)) {\n            while (true) {\n              if (readBits(1)) {\n                valueReady = !inclusionTree.nextLevel();\n\n                if (valueReady) {\n                  codeblock.included = true;\n                  codeblockIncluded = firstTimeInclusion = true;\n                  break;\n                }\n              } else {\n                inclusionTree.incrementValue(layerNumber);\n                break;\n              }\n            }\n          }\n        }\n\n        if (!codeblockIncluded) {\n          continue;\n        }\n\n        if (firstTimeInclusion) {\n          zeroBitPlanesTree = precinct.zeroBitPlanesTree;\n          zeroBitPlanesTree.reset(codeblockColumn, codeblockRow);\n\n          while (true) {\n            if (readBits(1)) {\n              valueReady = !zeroBitPlanesTree.nextLevel();\n\n              if (valueReady) {\n                break;\n              }\n            } else {\n              zeroBitPlanesTree.incrementValue();\n            }\n          }\n\n          codeblock.zeroBitPlanes = zeroBitPlanesTree.value;\n        }\n\n        var codingpasses = readCodingpasses();\n\n        while (readBits(1)) {\n          codeblock.Lblock++;\n        }\n\n        var codingpassesLog2 = (0, _core_utils.log2)(codingpasses);\n        var bits = (codingpasses < 1 << codingpassesLog2 ? codingpassesLog2 - 1 : codingpassesLog2) + codeblock.Lblock;\n        var codedDataLength = readBits(bits);\n        queue.push({\n          codeblock,\n          codingpasses,\n          dataLength: codedDataLength\n        });\n      }\n\n      alignToByte();\n\n      if (ephMarkerUsed) {\n        skipMarkerIfEqual(0x92);\n      }\n\n      while (queue.length > 0) {\n        var packetItem = queue.shift();\n        codeblock = packetItem.codeblock;\n\n        if (codeblock.data === undefined) {\n          codeblock.data = [];\n        }\n\n        codeblock.data.push({\n          data,\n          start: offset + position,\n          end: offset + position + packetItem.dataLength,\n          codingpasses: packetItem.codingpasses\n        });\n        position += packetItem.dataLength;\n      }\n    }\n\n    return position;\n  }\n\n  function copyCoefficients(coefficients, levelWidth, levelHeight, subband, delta, mb, reversible, segmentationSymbolUsed) {\n    var x0 = subband.tbx0;\n    var y0 = subband.tby0;\n    var width = subband.tbx1 - subband.tbx0;\n    var codeblocks = subband.codeblocks;\n    var right = subband.type.charAt(0) === "H" ? 1 : 0;\n    var bottom = subband.type.charAt(1) === "H" ? levelWidth : 0;\n\n    for (var i = 0, ii = codeblocks.length; i < ii; ++i) {\n      var codeblock = codeblocks[i];\n      var blockWidth = codeblock.tbx1_ - codeblock.tbx0_;\n      var blockHeight = codeblock.tby1_ - codeblock.tby0_;\n\n      if (blockWidth === 0 || blockHeight === 0) {\n        continue;\n      }\n\n      if (codeblock.data === undefined) {\n        continue;\n      }\n\n      var bitModel, currentCodingpassType;\n      bitModel = new BitModel(blockWidth, blockHeight, codeblock.subbandType, codeblock.zeroBitPlanes, mb);\n      currentCodingpassType = 2;\n      var data = codeblock.data,\n          totalLength = 0,\n          codingpasses = 0;\n      var j, jj, dataItem;\n\n      for (j = 0, jj = data.length; j < jj; j++) {\n        dataItem = data[j];\n        totalLength += dataItem.end - dataItem.start;\n        codingpasses += dataItem.codingpasses;\n      }\n\n      var encodedData = new Uint8Array(totalLength);\n      var position = 0;\n\n      for (j = 0, jj = data.length; j < jj; j++) {\n        dataItem = data[j];\n        var chunk = dataItem.data.subarray(dataItem.start, dataItem.end);\n        encodedData.set(chunk, position);\n        position += chunk.length;\n      }\n\n      var decoder = new _arithmetic_decoder.ArithmeticDecoder(encodedData, 0, totalLength);\n      bitModel.setDecoder(decoder);\n\n      for (j = 0; j < codingpasses; j++) {\n        switch (currentCodingpassType) {\n          case 0:\n            bitModel.runSignificancePropagationPass();\n            break;\n\n          case 1:\n            bitModel.runMagnitudeRefinementPass();\n            break;\n\n          case 2:\n            bitModel.runCleanupPass();\n\n            if (segmentationSymbolUsed) {\n              bitModel.checkSegmentationSymbol();\n            }\n\n            break;\n        }\n\n        currentCodingpassType = (currentCodingpassType + 1) % 3;\n      }\n\n      var offset = codeblock.tbx0_ - x0 + (codeblock.tby0_ - y0) * width;\n      var sign = bitModel.coefficentsSign;\n      var magnitude = bitModel.coefficentsMagnitude;\n      var bitsDecoded = bitModel.bitsDecoded;\n      var magnitudeCorrection = reversible ? 0 : 0.5;\n      var k, n, nb;\n      position = 0;\n      var interleave = subband.type !== "LL";\n\n      for (j = 0; j < blockHeight; j++) {\n        var row = offset / width | 0;\n        var levelOffset = 2 * row * (levelWidth - width) + right + bottom;\n\n        for (k = 0; k < blockWidth; k++) {\n          n = magnitude[position];\n\n          if (n !== 0) {\n            n = (n + magnitudeCorrection) * delta;\n\n            if (sign[position] !== 0) {\n              n = -n;\n            }\n\n            nb = bitsDecoded[position];\n            var pos = interleave ? levelOffset + (offset << 1) : offset;\n\n            if (reversible && nb >= mb) {\n              coefficients[pos] = n;\n            } else {\n              coefficients[pos] = n * (1 << mb - nb);\n            }\n          }\n\n          offset++;\n          position++;\n        }\n\n        offset += width - blockWidth;\n      }\n    }\n  }\n\n  function transformTile(context, tile, c) {\n    var component = tile.components[c];\n    var codingStyleParameters = component.codingStyleParameters;\n    var quantizationParameters = component.quantizationParameters;\n    var decompositionLevelsCount = codingStyleParameters.decompositionLevelsCount;\n    var spqcds = quantizationParameters.SPqcds;\n    var scalarExpounded = quantizationParameters.scalarExpounded;\n    var guardBits = quantizationParameters.guardBits;\n    var segmentationSymbolUsed = codingStyleParameters.segmentationSymbolUsed;\n    var precision = context.components[c].precision;\n    var reversible = codingStyleParameters.reversibleTransformation;\n    var transform = reversible ? new ReversibleTransform() : new IrreversibleTransform();\n    var subbandCoefficients = [];\n    var b = 0;\n\n    for (var i = 0; i <= decompositionLevelsCount; i++) {\n      var resolution = component.resolutions[i];\n      var width = resolution.trx1 - resolution.trx0;\n      var height = resolution.try1 - resolution.try0;\n      var coefficients = new Float32Array(width * height);\n\n      for (var j = 0, jj = resolution.subbands.length; j < jj; j++) {\n        var mu, epsilon;\n\n        if (!scalarExpounded) {\n          mu = spqcds[0].mu;\n          epsilon = spqcds[0].epsilon + (i > 0 ? 1 - i : 0);\n        } else {\n          mu = spqcds[b].mu;\n          epsilon = spqcds[b].epsilon;\n          b++;\n        }\n\n        var subband = resolution.subbands[j];\n        var gainLog2 = SubbandsGainLog2[subband.type];\n        var delta = reversible ? 1 : 2 ** (precision + gainLog2 - epsilon) * (1 + mu / 2048);\n        var mb = guardBits + epsilon - 1;\n        copyCoefficients(coefficients, width, height, subband, delta, mb, reversible, segmentationSymbolUsed);\n      }\n\n      subbandCoefficients.push({\n        width,\n        height,\n        items: coefficients\n      });\n    }\n\n    var result = transform.calculate(subbandCoefficients, component.tcx0, component.tcy0);\n    return {\n      left: component.tcx0,\n      top: component.tcy0,\n      width: result.width,\n      height: result.height,\n      items: result.items\n    };\n  }\n\n  function transformComponents(context) {\n    var siz = context.SIZ;\n    var components = context.components;\n    var componentsCount = siz.Csiz;\n    var resultImages = [];\n\n    for (var i = 0, ii = context.tiles.length; i < ii; i++) {\n      var tile = context.tiles[i];\n      var transformedTiles = [];\n      var c;\n\n      for (c = 0; c < componentsCount; c++) {\n        transformedTiles[c] = transformTile(context, tile, c);\n      }\n\n      var tile0 = transformedTiles[0];\n      var out = new Uint8ClampedArray(tile0.items.length * componentsCount);\n      var result = {\n        left: tile0.left,\n        top: tile0.top,\n        width: tile0.width,\n        height: tile0.height,\n        items: out\n      };\n      var shift, offset;\n      var pos = 0,\n          j,\n          jj,\n          y0,\n          y1,\n          y2;\n\n      if (tile.codingStyleDefaultParameters.multipleComponentTransform) {\n        var fourComponents = componentsCount === 4;\n        var y0items = transformedTiles[0].items;\n        var y1items = transformedTiles[1].items;\n        var y2items = transformedTiles[2].items;\n        var y3items = fourComponents ? transformedTiles[3].items : null;\n        shift = components[0].precision - 8;\n        offset = (128 << shift) + 0.5;\n        var component0 = tile.components[0];\n        var alpha01 = componentsCount - 3;\n        jj = y0items.length;\n\n        if (!component0.codingStyleParameters.reversibleTransformation) {\n          for (j = 0; j < jj; j++, pos += alpha01) {\n            y0 = y0items[j] + offset;\n            y1 = y1items[j];\n            y2 = y2items[j];\n            out[pos++] = y0 + 1.402 * y2 >> shift;\n            out[pos++] = y0 - 0.34413 * y1 - 0.71414 * y2 >> shift;\n            out[pos++] = y0 + 1.772 * y1 >> shift;\n          }\n        } else {\n          for (j = 0; j < jj; j++, pos += alpha01) {\n            y0 = y0items[j] + offset;\n            y1 = y1items[j];\n            y2 = y2items[j];\n            const g = y0 - (y2 + y1 >> 2);\n            out[pos++] = g + y2 >> shift;\n            out[pos++] = g >> shift;\n            out[pos++] = g + y1 >> shift;\n          }\n        }\n\n        if (fourComponents) {\n          for (j = 0, pos = 3; j < jj; j++, pos += 4) {\n            out[pos] = y3items[j] + offset >> shift;\n          }\n        }\n      } else {\n        for (c = 0; c < componentsCount; c++) {\n          var items = transformedTiles[c].items;\n          shift = components[c].precision - 8;\n          offset = (128 << shift) + 0.5;\n\n          for (pos = c, j = 0, jj = items.length; j < jj; j++) {\n            out[pos] = items[j] + offset >> shift;\n            pos += componentsCount;\n          }\n        }\n      }\n\n      resultImages.push(result);\n    }\n\n    return resultImages;\n  }\n\n  function initializeTile(context, tileIndex) {\n    var siz = context.SIZ;\n    var componentsCount = siz.Csiz;\n    var tile = context.tiles[tileIndex];\n\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var qcdOrQcc = context.currentTile.QCC[c] !== undefined ? context.currentTile.QCC[c] : context.currentTile.QCD;\n      component.quantizationParameters = qcdOrQcc;\n      var codOrCoc = context.currentTile.COC[c] !== undefined ? context.currentTile.COC[c] : context.currentTile.COD;\n      component.codingStyleParameters = codOrCoc;\n    }\n\n    tile.codingStyleDefaultParameters = context.currentTile.COD;\n  }\n\n  var TagTree = function TagTreeClosure() {\n    function TagTree(width, height) {\n      var levelsLength = (0, _core_utils.log2)(Math.max(width, height)) + 1;\n      this.levels = [];\n\n      for (var i = 0; i < levelsLength; i++) {\n        var level = {\n          width,\n          height,\n          items: []\n        };\n        this.levels.push(level);\n        width = Math.ceil(width / 2);\n        height = Math.ceil(height / 2);\n      }\n    }\n\n    TagTree.prototype = {\n      reset: function TagTree_reset(i, j) {\n        var currentLevel = 0,\n            value = 0,\n            level;\n\n        while (currentLevel < this.levels.length) {\n          level = this.levels[currentLevel];\n          var index = i + j * level.width;\n\n          if (level.items[index] !== undefined) {\n            value = level.items[index];\n            break;\n          }\n\n          level.index = index;\n          i >>= 1;\n          j >>= 1;\n          currentLevel++;\n        }\n\n        currentLevel--;\n        level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        this.currentLevel = currentLevel;\n        delete this.value;\n      },\n      incrementValue: function TagTree_incrementValue() {\n        var level = this.levels[this.currentLevel];\n        level.items[level.index]++;\n      },\n      nextLevel: function TagTree_nextLevel() {\n        var currentLevel = this.currentLevel;\n        var level = this.levels[currentLevel];\n        var value = level.items[level.index];\n        currentLevel--;\n\n        if (currentLevel < 0) {\n          this.value = value;\n          return false;\n        }\n\n        this.currentLevel = currentLevel;\n        level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        return true;\n      }\n    };\n    return TagTree;\n  }();\n\n  var InclusionTree = function InclusionTreeClosure() {\n    function InclusionTree(width, height, defaultValue) {\n      var levelsLength = (0, _core_utils.log2)(Math.max(width, height)) + 1;\n      this.levels = [];\n\n      for (var i = 0; i < levelsLength; i++) {\n        var items = new Uint8Array(width * height);\n\n        for (var j = 0, jj = items.length; j < jj; j++) {\n          items[j] = defaultValue;\n        }\n\n        var level = {\n          width,\n          height,\n          items\n        };\n        this.levels.push(level);\n        width = Math.ceil(width / 2);\n        height = Math.ceil(height / 2);\n      }\n    }\n\n    InclusionTree.prototype = {\n      reset: function InclusionTree_reset(i, j, stopValue) {\n        var currentLevel = 0;\n\n        while (currentLevel < this.levels.length) {\n          var level = this.levels[currentLevel];\n          var index = i + j * level.width;\n          level.index = index;\n          var value = level.items[index];\n\n          if (value === 0xff) {\n            break;\n          }\n\n          if (value > stopValue) {\n            this.currentLevel = currentLevel;\n            this.propagateValues();\n            return false;\n          }\n\n          i >>= 1;\n          j >>= 1;\n          currentLevel++;\n        }\n\n        this.currentLevel = currentLevel - 1;\n        return true;\n      },\n      incrementValue: function InclusionTree_incrementValue(stopValue) {\n        var level = this.levels[this.currentLevel];\n        level.items[level.index] = stopValue + 1;\n        this.propagateValues();\n      },\n      propagateValues: function InclusionTree_propagateValues() {\n        var levelIndex = this.currentLevel;\n        var level = this.levels[levelIndex];\n        var currentValue = level.items[level.index];\n\n        while (--levelIndex >= 0) {\n          level = this.levels[levelIndex];\n          level.items[level.index] = currentValue;\n        }\n      },\n      nextLevel: function InclusionTree_nextLevel() {\n        var currentLevel = this.currentLevel;\n        var level = this.levels[currentLevel];\n        var value = level.items[level.index];\n        level.items[level.index] = 0xff;\n        currentLevel--;\n\n        if (currentLevel < 0) {\n          return false;\n        }\n\n        this.currentLevel = currentLevel;\n        level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        return true;\n      }\n    };\n    return InclusionTree;\n  }();\n\n  var BitModel = function BitModelClosure() {\n    var UNIFORM_CONTEXT = 17;\n    var RUNLENGTH_CONTEXT = 18;\n    var LLAndLHContextsLabel = new Uint8Array([0, 5, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 1, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8]);\n    var HLContextLabel = new Uint8Array([0, 3, 4, 0, 5, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8]);\n    var HHContextLabel = new Uint8Array([0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 4, 5, 5, 0, 5, 5, 5, 0, 0, 0, 0, 0, 6, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8]);\n\n    function BitModel(width, height, subband, zeroBitPlanes, mb) {\n      this.width = width;\n      this.height = height;\n      let contextLabelTable;\n\n      if (subband === "HH") {\n        contextLabelTable = HHContextLabel;\n      } else if (subband === "HL") {\n        contextLabelTable = HLContextLabel;\n      } else {\n        contextLabelTable = LLAndLHContextsLabel;\n      }\n\n      this.contextLabelTable = contextLabelTable;\n      var coefficientCount = width * height;\n      this.neighborsSignificance = new Uint8Array(coefficientCount);\n      this.coefficentsSign = new Uint8Array(coefficientCount);\n      let coefficentsMagnitude;\n\n      if (mb > 14) {\n        coefficentsMagnitude = new Uint32Array(coefficientCount);\n      } else if (mb > 6) {\n        coefficentsMagnitude = new Uint16Array(coefficientCount);\n      } else {\n        coefficentsMagnitude = new Uint8Array(coefficientCount);\n      }\n\n      this.coefficentsMagnitude = coefficentsMagnitude;\n      this.processingFlags = new Uint8Array(coefficientCount);\n      var bitsDecoded = new Uint8Array(coefficientCount);\n\n      if (zeroBitPlanes !== 0) {\n        for (var i = 0; i < coefficientCount; i++) {\n          bitsDecoded[i] = zeroBitPlanes;\n        }\n      }\n\n      this.bitsDecoded = bitsDecoded;\n      this.reset();\n    }\n\n    BitModel.prototype = {\n      setDecoder: function BitModel_setDecoder(decoder) {\n        this.decoder = decoder;\n      },\n      reset: function BitModel_reset() {\n        this.contexts = new Int8Array(19);\n        this.contexts[0] = 4 << 1 | 0;\n        this.contexts[UNIFORM_CONTEXT] = 46 << 1 | 0;\n        this.contexts[RUNLENGTH_CONTEXT] = 3 << 1 | 0;\n      },\n      setNeighborsSignificance: function BitModel_setNeighborsSignificance(row, column, index) {\n        var neighborsSignificance = this.neighborsSignificance;\n        var width = this.width,\n            height = this.height;\n        var left = column > 0;\n        var right = column + 1 < width;\n        var i;\n\n        if (row > 0) {\n          i = index - width;\n\n          if (left) {\n            neighborsSignificance[i - 1] += 0x10;\n          }\n\n          if (right) {\n            neighborsSignificance[i + 1] += 0x10;\n          }\n\n          neighborsSignificance[i] += 0x04;\n        }\n\n        if (row + 1 < height) {\n          i = index + width;\n\n          if (left) {\n            neighborsSignificance[i - 1] += 0x10;\n          }\n\n          if (right) {\n            neighborsSignificance[i + 1] += 0x10;\n          }\n\n          neighborsSignificance[i] += 0x04;\n        }\n\n        if (left) {\n          neighborsSignificance[index - 1] += 0x01;\n        }\n\n        if (right) {\n          neighborsSignificance[index + 1] += 0x01;\n        }\n\n        neighborsSignificance[index] |= 0x80;\n      },\n      runSignificancePropagationPass: function BitModel_runSignificancePropagationPass() {\n        var decoder = this.decoder;\n        var width = this.width,\n            height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var neighborsSignificance = this.neighborsSignificance;\n        var processingFlags = this.processingFlags;\n        var contexts = this.contexts;\n        var labels = this.contextLabelTable;\n        var bitsDecoded = this.bitsDecoded;\n        var processedInverseMask = ~1;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n\n        for (var i0 = 0; i0 < height; i0 += 4) {\n          for (var j = 0; j < width; j++) {\n            var index = i0 * width + j;\n\n            for (var i1 = 0; i1 < 4; i1++, index += width) {\n              var i = i0 + i1;\n\n              if (i >= height) {\n                break;\n              }\n\n              processingFlags[index] &= processedInverseMask;\n\n              if (coefficentsMagnitude[index] || !neighborsSignificance[index]) {\n                continue;\n              }\n\n              var contextLabel = labels[neighborsSignificance[index]];\n              var decision = decoder.readBit(contexts, contextLabel);\n\n              if (decision) {\n                var sign = this.decodeSignBit(i, j, index);\n                coefficentsSign[index] = sign;\n                coefficentsMagnitude[index] = 1;\n                this.setNeighborsSignificance(i, j, index);\n                processingFlags[index] |= firstMagnitudeBitMask;\n              }\n\n              bitsDecoded[index]++;\n              processingFlags[index] |= processedMask;\n            }\n          }\n        }\n      },\n      decodeSignBit: function BitModel_decodeSignBit(row, column, index) {\n        var width = this.width,\n            height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var contribution, sign0, sign1, significance1;\n        var contextLabel, decoded;\n        significance1 = column > 0 && coefficentsMagnitude[index - 1] !== 0;\n\n        if (column + 1 < width && coefficentsMagnitude[index + 1] !== 0) {\n          sign1 = coefficentsSign[index + 1];\n\n          if (significance1) {\n            sign0 = coefficentsSign[index - 1];\n            contribution = 1 - sign1 - sign0;\n          } else {\n            contribution = 1 - sign1 - sign1;\n          }\n        } else if (significance1) {\n          sign0 = coefficentsSign[index - 1];\n          contribution = 1 - sign0 - sign0;\n        } else {\n          contribution = 0;\n        }\n\n        var horizontalContribution = 3 * contribution;\n        significance1 = row > 0 && coefficentsMagnitude[index - width] !== 0;\n\n        if (row + 1 < height && coefficentsMagnitude[index + width] !== 0) {\n          sign1 = coefficentsSign[index + width];\n\n          if (significance1) {\n            sign0 = coefficentsSign[index - width];\n            contribution = 1 - sign1 - sign0 + horizontalContribution;\n          } else {\n            contribution = 1 - sign1 - sign1 + horizontalContribution;\n          }\n        } else if (significance1) {\n          sign0 = coefficentsSign[index - width];\n          contribution = 1 - sign0 - sign0 + horizontalContribution;\n        } else {\n          contribution = horizontalContribution;\n        }\n\n        if (contribution >= 0) {\n          contextLabel = 9 + contribution;\n          decoded = this.decoder.readBit(this.contexts, contextLabel);\n        } else {\n          contextLabel = 9 - contribution;\n          decoded = this.decoder.readBit(this.contexts, contextLabel) ^ 1;\n        }\n\n        return decoded;\n      },\n      runMagnitudeRefinementPass: function BitModel_runMagnitudeRefinementPass() {\n        var decoder = this.decoder;\n        var width = this.width,\n            height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var neighborsSignificance = this.neighborsSignificance;\n        var contexts = this.contexts;\n        var bitsDecoded = this.bitsDecoded;\n        var processingFlags = this.processingFlags;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n        var length = width * height;\n        var width4 = width * 4;\n\n        for (var index0 = 0, indexNext; index0 < length; index0 = indexNext) {\n          indexNext = Math.min(length, index0 + width4);\n\n          for (var j = 0; j < width; j++) {\n            for (var index = index0 + j; index < indexNext; index += width) {\n              if (!coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {\n                continue;\n              }\n\n              var contextLabel = 16;\n\n              if ((processingFlags[index] & firstMagnitudeBitMask) !== 0) {\n                processingFlags[index] ^= firstMagnitudeBitMask;\n                var significance = neighborsSignificance[index] & 127;\n                contextLabel = significance === 0 ? 15 : 14;\n              }\n\n              var bit = decoder.readBit(contexts, contextLabel);\n              coefficentsMagnitude[index] = coefficentsMagnitude[index] << 1 | bit;\n              bitsDecoded[index]++;\n              processingFlags[index] |= processedMask;\n            }\n          }\n        }\n      },\n      runCleanupPass: function BitModel_runCleanupPass() {\n        var decoder = this.decoder;\n        var width = this.width,\n            height = this.height;\n        var neighborsSignificance = this.neighborsSignificance;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var contexts = this.contexts;\n        var labels = this.contextLabelTable;\n        var bitsDecoded = this.bitsDecoded;\n        var processingFlags = this.processingFlags;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n        var oneRowDown = width;\n        var twoRowsDown = width * 2;\n        var threeRowsDown = width * 3;\n        var iNext;\n\n        for (var i0 = 0; i0 < height; i0 = iNext) {\n          iNext = Math.min(i0 + 4, height);\n          var indexBase = i0 * width;\n          var checkAllEmpty = i0 + 3 < height;\n\n          for (var j = 0; j < width; j++) {\n            var index0 = indexBase + j;\n            var allEmpty = checkAllEmpty && processingFlags[index0] === 0 && processingFlags[index0 + oneRowDown] === 0 && processingFlags[index0 + twoRowsDown] === 0 && processingFlags[index0 + threeRowsDown] === 0 && neighborsSignificance[index0] === 0 && neighborsSignificance[index0 + oneRowDown] === 0 && neighborsSignificance[index0 + twoRowsDown] === 0 && neighborsSignificance[index0 + threeRowsDown] === 0;\n            var i1 = 0,\n                index = index0;\n            var i = i0,\n                sign;\n\n            if (allEmpty) {\n              var hasSignificantCoefficent = decoder.readBit(contexts, RUNLENGTH_CONTEXT);\n\n              if (!hasSignificantCoefficent) {\n                bitsDecoded[index0]++;\n                bitsDecoded[index0 + oneRowDown]++;\n                bitsDecoded[index0 + twoRowsDown]++;\n                bitsDecoded[index0 + threeRowsDown]++;\n                continue;\n              }\n\n              i1 = decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);\n\n              if (i1 !== 0) {\n                i = i0 + i1;\n                index += i1 * width;\n              }\n\n              sign = this.decodeSignBit(i, j, index);\n              coefficentsSign[index] = sign;\n              coefficentsMagnitude[index] = 1;\n              this.setNeighborsSignificance(i, j, index);\n              processingFlags[index] |= firstMagnitudeBitMask;\n              index = index0;\n\n              for (var i2 = i0; i2 <= i; i2++, index += width) {\n                bitsDecoded[index]++;\n              }\n\n              i1++;\n            }\n\n            for (i = i0 + i1; i < iNext; i++, index += width) {\n              if (coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {\n                continue;\n              }\n\n              var contextLabel = labels[neighborsSignificance[index]];\n              var decision = decoder.readBit(contexts, contextLabel);\n\n              if (decision === 1) {\n                sign = this.decodeSignBit(i, j, index);\n                coefficentsSign[index] = sign;\n                coefficentsMagnitude[index] = 1;\n                this.setNeighborsSignificance(i, j, index);\n                processingFlags[index] |= firstMagnitudeBitMask;\n              }\n\n              bitsDecoded[index]++;\n            }\n          }\n        }\n      },\n      checkSegmentationSymbol: function BitModel_checkSegmentationSymbol() {\n        var decoder = this.decoder;\n        var contexts = this.contexts;\n        var symbol = decoder.readBit(contexts, UNIFORM_CONTEXT) << 3 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 2 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);\n\n        if (symbol !== 0xa) {\n          throw new JpxError("Invalid segmentation symbol");\n        }\n      }\n    };\n    return BitModel;\n  }();\n\n  var Transform = function TransformClosure() {\n    function Transform() {}\n\n    Transform.prototype.calculate = function transformCalculate(subbands, u0, v0) {\n      var ll = subbands[0];\n\n      for (var i = 1, ii = subbands.length; i < ii; i++) {\n        ll = this.iterate(ll, subbands[i], u0, v0);\n      }\n\n      return ll;\n    };\n\n    Transform.prototype.extend = function extend(buffer, offset, size) {\n      var i1 = offset - 1,\n          j1 = offset + 1;\n      var i2 = offset + size - 2,\n          j2 = offset + size;\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1] = buffer[j1];\n      buffer[j2] = buffer[i2];\n    };\n\n    Transform.prototype.iterate = function Transform_iterate(ll, hl_lh_hh, u0, v0) {\n      var llWidth = ll.width,\n          llHeight = ll.height,\n          llItems = ll.items;\n      var width = hl_lh_hh.width;\n      var height = hl_lh_hh.height;\n      var items = hl_lh_hh.items;\n      var i, j, k, l, u, v;\n\n      for (k = 0, i = 0; i < llHeight; i++) {\n        l = i * 2 * width;\n\n        for (j = 0; j < llWidth; j++, k++, l += 2) {\n          items[l] = llItems[k];\n        }\n      }\n\n      llItems = ll.items = null;\n      var bufferPadding = 4;\n      var rowBuffer = new Float32Array(width + 2 * bufferPadding);\n\n      if (width === 1) {\n        if ((u0 & 1) !== 0) {\n          for (v = 0, k = 0; v < height; v++, k += width) {\n            items[k] *= 0.5;\n          }\n        }\n      } else {\n        for (v = 0, k = 0; v < height; v++, k += width) {\n          rowBuffer.set(items.subarray(k, k + width), bufferPadding);\n          this.extend(rowBuffer, bufferPadding, width);\n          this.filter(rowBuffer, bufferPadding, width);\n          items.set(rowBuffer.subarray(bufferPadding, bufferPadding + width), k);\n        }\n      }\n\n      var numBuffers = 16;\n      var colBuffers = [];\n\n      for (i = 0; i < numBuffers; i++) {\n        colBuffers.push(new Float32Array(height + 2 * bufferPadding));\n      }\n\n      var b,\n          currentBuffer = 0;\n      ll = bufferPadding + height;\n\n      if (height === 1) {\n        if ((v0 & 1) !== 0) {\n          for (u = 0; u < width; u++) {\n            items[u] *= 0.5;\n          }\n        }\n      } else {\n        for (u = 0; u < width; u++) {\n          if (currentBuffer === 0) {\n            numBuffers = Math.min(width - u, numBuffers);\n\n            for (k = u, l = bufferPadding; l < ll; k += width, l++) {\n              for (b = 0; b < numBuffers; b++) {\n                colBuffers[b][l] = items[k + b];\n              }\n            }\n\n            currentBuffer = numBuffers;\n          }\n\n          currentBuffer--;\n          var buffer = colBuffers[currentBuffer];\n          this.extend(buffer, bufferPadding, height);\n          this.filter(buffer, bufferPadding, height);\n\n          if (currentBuffer === 0) {\n            k = u - numBuffers + 1;\n\n            for (l = bufferPadding; l < ll; k += width, l++) {\n              for (b = 0; b < numBuffers; b++) {\n                items[k + b] = colBuffers[b][l];\n              }\n            }\n          }\n        }\n      }\n\n      return {\n        width,\n        height,\n        items\n      };\n    };\n\n    return Transform;\n  }();\n\n  var IrreversibleTransform = function IrreversibleTransformClosure() {\n    function IrreversibleTransform() {\n      Transform.call(this);\n    }\n\n    IrreversibleTransform.prototype = Object.create(Transform.prototype);\n\n    IrreversibleTransform.prototype.filter = function irreversibleTransformFilter(x, offset, length) {\n      var len = length >> 1;\n      offset = offset | 0;\n      var j, n, current, next;\n      var alpha = -1.586134342059924;\n      var beta = -0.052980118572961;\n      var gamma = 0.882911075530934;\n      var delta = 0.443506852043971;\n      var K = 1.230174104914001;\n      var K_ = 1 / K;\n      j = offset - 3;\n\n      for (n = len + 4; n--; j += 2) {\n        x[j] *= K_;\n      }\n\n      j = offset - 2;\n      current = delta * x[j - 1];\n\n      for (n = len + 3; n--; j += 2) {\n        next = delta * x[j + 1];\n        x[j] = K * x[j] - current - next;\n\n        if (n--) {\n          j += 2;\n          current = delta * x[j + 1];\n          x[j] = K * x[j] - current - next;\n        } else {\n          break;\n        }\n      }\n\n      j = offset - 1;\n      current = gamma * x[j - 1];\n\n      for (n = len + 2; n--; j += 2) {\n        next = gamma * x[j + 1];\n        x[j] -= current + next;\n\n        if (n--) {\n          j += 2;\n          current = gamma * x[j + 1];\n          x[j] -= current + next;\n        } else {\n          break;\n        }\n      }\n\n      j = offset;\n      current = beta * x[j - 1];\n\n      for (n = len + 1; n--; j += 2) {\n        next = beta * x[j + 1];\n        x[j] -= current + next;\n\n        if (n--) {\n          j += 2;\n          current = beta * x[j + 1];\n          x[j] -= current + next;\n        } else {\n          break;\n        }\n      }\n\n      if (len !== 0) {\n        j = offset + 1;\n        current = alpha * x[j - 1];\n\n        for (n = len; n--; j += 2) {\n          next = alpha * x[j + 1];\n          x[j] -= current + next;\n\n          if (n--) {\n            j += 2;\n            current = alpha * x[j + 1];\n            x[j] -= current + next;\n          } else {\n            break;\n          }\n        }\n      }\n    };\n\n    return IrreversibleTransform;\n  }();\n\n  var ReversibleTransform = function ReversibleTransformClosure() {\n    function ReversibleTransform() {\n      Transform.call(this);\n    }\n\n    ReversibleTransform.prototype = Object.create(Transform.prototype);\n\n    ReversibleTransform.prototype.filter = function reversibleTransformFilter(x, offset, length) {\n      var len = length >> 1;\n      offset = offset | 0;\n      var j, n;\n\n      for (j = offset, n = len + 1; n--; j += 2) {\n        x[j] -= x[j - 1] + x[j + 1] + 2 >> 2;\n      }\n\n      for (j = offset + 1, n = len; n--; j += 2) {\n        x[j] += x[j - 1] + x[j + 1] >> 1;\n      }\n    };\n\n    return ReversibleTransform;\n  }();\n\n  return JpxImage;\n}();\n\nexports.JpxImage = JpxImage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/jpx.js\n')},"./node_modules/pdfjs-dist/lib/core/jpx_stream.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.JpxStream = void 0;\n\nvar _stream = __webpack_require__(/*! ./stream.js */ "./node_modules/pdfjs-dist/lib/core/stream.js");\n\nvar _jpx = __webpack_require__(/*! ./jpx.js */ "./node_modules/pdfjs-dist/lib/core/jpx.js");\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nconst JpxStream = function JpxStreamClosure() {\n  function JpxStream(stream, maybeLength, dict, params) {\n    this.stream = stream;\n    this.maybeLength = maybeLength;\n    this.dict = dict;\n    this.params = params;\n\n    _stream.DecodeStream.call(this, maybeLength);\n  }\n\n  JpxStream.prototype = Object.create(_stream.DecodeStream.prototype);\n  Object.defineProperty(JpxStream.prototype, "bytes", {\n    get: function JpxStream_bytes() {\n      return (0, _util.shadow)(this, "bytes", this.stream.getBytes(this.maybeLength));\n    },\n    configurable: true\n  });\n\n  JpxStream.prototype.ensureBuffer = function (requested) {};\n\n  JpxStream.prototype.readBlock = function () {\n    if (this.eof) {\n      return;\n    }\n\n    const jpxImage = new _jpx.JpxImage();\n    jpxImage.parse(this.bytes);\n    const width = jpxImage.width;\n    const height = jpxImage.height;\n    const componentsCount = jpxImage.componentsCount;\n    const tileCount = jpxImage.tiles.length;\n\n    if (tileCount === 1) {\n      this.buffer = jpxImage.tiles[0].items;\n    } else {\n      const data = new Uint8ClampedArray(width * height * componentsCount);\n\n      for (let k = 0; k < tileCount; k++) {\n        const tileComponents = jpxImage.tiles[k];\n        const tileWidth = tileComponents.width;\n        const tileHeight = tileComponents.height;\n        const tileLeft = tileComponents.left;\n        const tileTop = tileComponents.top;\n        const src = tileComponents.items;\n        let srcPosition = 0;\n        let dataPosition = (width * tileTop + tileLeft) * componentsCount;\n        const imgRowSize = width * componentsCount;\n        const tileRowSize = tileWidth * componentsCount;\n\n        for (let j = 0; j < tileHeight; j++) {\n          const rowBytes = src.subarray(srcPosition, srcPosition + tileRowSize);\n          data.set(rowBytes, dataPosition);\n          srcPosition += tileRowSize;\n          dataPosition += imgRowSize;\n        }\n      }\n\n      this.buffer = data;\n    }\n\n    this.bufferLength = this.buffer.length;\n    this.eof = true;\n  };\n\n  return JpxStream;\n}();\n\nexports.JpxStream = JpxStream;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGRmanMtZGlzdC9saWIvY29yZS9qcHhfc3RyZWFtLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vU2ltcGxlUGRmQW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvcGRmanMtZGlzdC9saWIvY29yZS9qcHhfc3RyZWFtLmpzP2ZmY2UiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljc3RhcnQgVGhlIGZvbGxvd2luZyBpcyB0aGUgZW50aXJlIGxpY2Vuc2Ugbm90aWNlIGZvciB0aGVcbiAqIEphdmFzY3JpcHQgY29kZSBpbiB0aGlzIHBhZ2VcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMCBNb3ppbGxhIEZvdW5kYXRpb25cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQGxpY2VuZCBUaGUgYWJvdmUgaXMgdGhlIGVudGlyZSBsaWNlbnNlIG5vdGljZSBmb3IgdGhlXG4gKiBKYXZhc2NyaXB0IGNvZGUgaW4gdGhpcyBwYWdlXG4gKi9cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5KcHhTdHJlYW0gPSB2b2lkIDA7XG5cbnZhciBfc3RyZWFtID0gcmVxdWlyZShcIi4vc3RyZWFtLmpzXCIpO1xuXG52YXIgX2pweCA9IHJlcXVpcmUoXCIuL2pweC5qc1wiKTtcblxudmFyIF91dGlsID0gcmVxdWlyZShcIi4uL3NoYXJlZC91dGlsLmpzXCIpO1xuXG5jb25zdCBKcHhTdHJlYW0gPSBmdW5jdGlvbiBKcHhTdHJlYW1DbG9zdXJlKCkge1xuICBmdW5jdGlvbiBKcHhTdHJlYW0oc3RyZWFtLCBtYXliZUxlbmd0aCwgZGljdCwgcGFyYW1zKSB7XG4gICAgdGhpcy5zdHJlYW0gPSBzdHJlYW07XG4gICAgdGhpcy5tYXliZUxlbmd0aCA9IG1heWJlTGVuZ3RoO1xuICAgIHRoaXMuZGljdCA9IGRpY3Q7XG4gICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XG5cbiAgICBfc3RyZWFtLkRlY29kZVN0cmVhbS5jYWxsKHRoaXMsIG1heWJlTGVuZ3RoKTtcbiAgfVxuXG4gIEpweFN0cmVhbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKF9zdHJlYW0uRGVjb2RlU3RyZWFtLnByb3RvdHlwZSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShKcHhTdHJlYW0ucHJvdG90eXBlLCBcImJ5dGVzXCIsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIEpweFN0cmVhbV9ieXRlcygpIHtcbiAgICAgIHJldHVybiAoMCwgX3V0aWwuc2hhZG93KSh0aGlzLCBcImJ5dGVzXCIsIHRoaXMuc3RyZWFtLmdldEJ5dGVzKHRoaXMubWF5YmVMZW5ndGgpKTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcblxuICBKcHhTdHJlYW0ucHJvdG90eXBlLmVuc3VyZUJ1ZmZlciA9IGZ1bmN0aW9uIChyZXF1ZXN0ZWQpIHt9O1xuXG4gIEpweFN0cmVhbS5wcm90b3R5cGUucmVhZEJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmVvZikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGpweEltYWdlID0gbmV3IF9qcHguSnB4SW1hZ2UoKTtcbiAgICBqcHhJbWFnZS5wYXJzZSh0aGlzLmJ5dGVzKTtcbiAgICBjb25zdCB3aWR0aCA9IGpweEltYWdlLndpZHRoO1xuICAgIGNvbnN0IGhlaWdodCA9IGpweEltYWdlLmhlaWdodDtcbiAgICBjb25zdCBjb21wb25lbnRzQ291bnQgPSBqcHhJbWFnZS5jb21wb25lbnRzQ291bnQ7XG4gICAgY29uc3QgdGlsZUNvdW50ID0ganB4SW1hZ2UudGlsZXMubGVuZ3RoO1xuXG4gICAgaWYgKHRpbGVDb3VudCA9PT0gMSkge1xuICAgICAgdGhpcy5idWZmZXIgPSBqcHhJbWFnZS50aWxlc1swXS5pdGVtcztcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGF0YSA9IG5ldyBVaW50OENsYW1wZWRBcnJheSh3aWR0aCAqIGhlaWdodCAqIGNvbXBvbmVudHNDb3VudCk7XG5cbiAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgdGlsZUNvdW50OyBrKyspIHtcbiAgICAgICAgY29uc3QgdGlsZUNvbXBvbmVudHMgPSBqcHhJbWFnZS50aWxlc1trXTtcbiAgICAgICAgY29uc3QgdGlsZVdpZHRoID0gdGlsZUNvbXBvbmVudHMud2lkdGg7XG4gICAgICAgIGNvbnN0IHRpbGVIZWlnaHQgPSB0aWxlQ29tcG9uZW50cy5oZWlnaHQ7XG4gICAgICAgIGNvbnN0IHRpbGVMZWZ0ID0gdGlsZUNvbXBvbmVudHMubGVmdDtcbiAgICAgICAgY29uc3QgdGlsZVRvcCA9IHRpbGVDb21wb25lbnRzLnRvcDtcbiAgICAgICAgY29uc3Qgc3JjID0gdGlsZUNvbXBvbmVudHMuaXRlbXM7XG4gICAgICAgIGxldCBzcmNQb3NpdGlvbiA9IDA7XG4gICAgICAgIGxldCBkYXRhUG9zaXRpb24gPSAod2lkdGggKiB0aWxlVG9wICsgdGlsZUxlZnQpICogY29tcG9uZW50c0NvdW50O1xuICAgICAgICBjb25zdCBpbWdSb3dTaXplID0gd2lkdGggKiBjb21wb25lbnRzQ291bnQ7XG4gICAgICAgIGNvbnN0IHRpbGVSb3dTaXplID0gdGlsZVdpZHRoICogY29tcG9uZW50c0NvdW50O1xuXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGlsZUhlaWdodDsgaisrKSB7XG4gICAgICAgICAgY29uc3Qgcm93Qnl0ZXMgPSBzcmMuc3ViYXJyYXkoc3JjUG9zaXRpb24sIHNyY1Bvc2l0aW9uICsgdGlsZVJvd1NpemUpO1xuICAgICAgICAgIGRhdGEuc2V0KHJvd0J5dGVzLCBkYXRhUG9zaXRpb24pO1xuICAgICAgICAgIHNyY1Bvc2l0aW9uICs9IHRpbGVSb3dTaXplO1xuICAgICAgICAgIGRhdGFQb3NpdGlvbiArPSBpbWdSb3dTaXplO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYnVmZmVyID0gZGF0YTtcbiAgICB9XG5cbiAgICB0aGlzLmJ1ZmZlckxlbmd0aCA9IHRoaXMuYnVmZmVyLmxlbmd0aDtcbiAgICB0aGlzLmVvZiA9IHRydWU7XG4gIH07XG5cbiAgcmV0dXJuIEpweFN0cmVhbTtcbn0oKTtcblxuZXhwb3J0cy5KcHhTdHJlYW0gPSBKcHhTdHJlYW07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/jpx_stream.js\n')},"./node_modules/pdfjs-dist/lib/core/metrics.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.getMetrics = void 0;\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nvar getMetrics = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t.Courier = 600;\n  t["Courier-Bold"] = 600;\n  t["Courier-BoldOblique"] = 600;\n  t["Courier-Oblique"] = 600;\n  t.Helvetica = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 278;\n    t.exclam = 278;\n    t.quotedbl = 355;\n    t.numbersign = 556;\n    t.dollar = 556;\n    t.percent = 889;\n    t.ampersand = 667;\n    t.quoteright = 222;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 389;\n    t.plus = 584;\n    t.comma = 278;\n    t.hyphen = 333;\n    t.period = 278;\n    t.slash = 278;\n    t.zero = 556;\n    t.one = 556;\n    t.two = 556;\n    t.three = 556;\n    t.four = 556;\n    t.five = 556;\n    t.six = 556;\n    t.seven = 556;\n    t.eight = 556;\n    t.nine = 556;\n    t.colon = 278;\n    t.semicolon = 278;\n    t.less = 584;\n    t.equal = 584;\n    t.greater = 584;\n    t.question = 556;\n    t.at = 1015;\n    t.A = 667;\n    t.B = 667;\n    t.C = 722;\n    t.D = 722;\n    t.E = 667;\n    t.F = 611;\n    t.G = 778;\n    t.H = 722;\n    t.I = 278;\n    t.J = 500;\n    t.K = 667;\n    t.L = 556;\n    t.M = 833;\n    t.N = 722;\n    t.O = 778;\n    t.P = 667;\n    t.Q = 778;\n    t.R = 722;\n    t.S = 667;\n    t.T = 611;\n    t.U = 722;\n    t.V = 667;\n    t.W = 944;\n    t.X = 667;\n    t.Y = 667;\n    t.Z = 611;\n    t.bracketleft = 278;\n    t.backslash = 278;\n    t.bracketright = 278;\n    t.asciicircum = 469;\n    t.underscore = 556;\n    t.quoteleft = 222;\n    t.a = 556;\n    t.b = 556;\n    t.c = 500;\n    t.d = 556;\n    t.e = 556;\n    t.f = 278;\n    t.g = 556;\n    t.h = 556;\n    t.i = 222;\n    t.j = 222;\n    t.k = 500;\n    t.l = 222;\n    t.m = 833;\n    t.n = 556;\n    t.o = 556;\n    t.p = 556;\n    t.q = 556;\n    t.r = 333;\n    t.s = 500;\n    t.t = 278;\n    t.u = 556;\n    t.v = 500;\n    t.w = 722;\n    t.x = 500;\n    t.y = 500;\n    t.z = 500;\n    t.braceleft = 334;\n    t.bar = 260;\n    t.braceright = 334;\n    t.asciitilde = 584;\n    t.exclamdown = 333;\n    t.cent = 556;\n    t.sterling = 556;\n    t.fraction = 167;\n    t.yen = 556;\n    t.florin = 556;\n    t.section = 556;\n    t.currency = 556;\n    t.quotesingle = 191;\n    t.quotedblleft = 333;\n    t.guillemotleft = 556;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 500;\n    t.fl = 500;\n    t.endash = 556;\n    t.dagger = 556;\n    t.daggerdbl = 556;\n    t.periodcentered = 278;\n    t.paragraph = 537;\n    t.bullet = 350;\n    t.quotesinglbase = 222;\n    t.quotedblbase = 333;\n    t.quotedblright = 333;\n    t.guillemotright = 556;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 611;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 1000;\n    t.ordfeminine = 370;\n    t.Lslash = 556;\n    t.Oslash = 778;\n    t.OE = 1000;\n    t.ordmasculine = 365;\n    t.ae = 889;\n    t.dotlessi = 278;\n    t.lslash = 222;\n    t.oslash = 611;\n    t.oe = 944;\n    t.germandbls = 611;\n    t.Idieresis = 278;\n    t.eacute = 556;\n    t.abreve = 556;\n    t.uhungarumlaut = 556;\n    t.ecaron = 556;\n    t.Ydieresis = 667;\n    t.divide = 584;\n    t.Yacute = 667;\n    t.Acircumflex = 667;\n    t.aacute = 556;\n    t.Ucircumflex = 722;\n    t.yacute = 500;\n    t.scommaaccent = 500;\n    t.ecircumflex = 556;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 556;\n    t.Uacute = 722;\n    t.uogonek = 556;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 737;\n    t.Emacron = 667;\n    t.ccaron = 500;\n    t.aring = 556;\n    t.Ncommaaccent = 722;\n    t.lacute = 222;\n    t.agrave = 556;\n    t.Tcommaaccent = 611;\n    t.Cacute = 722;\n    t.atilde = 556;\n    t.Edotaccent = 667;\n    t.scaron = 500;\n    t.scedilla = 500;\n    t.iacute = 278;\n    t.lozenge = 471;\n    t.Rcaron = 722;\n    t.Gcommaaccent = 778;\n    t.ucircumflex = 556;\n    t.acircumflex = 556;\n    t.Amacron = 667;\n    t.rcaron = 333;\n    t.ccedilla = 500;\n    t.Zdotaccent = 611;\n    t.Thorn = 667;\n    t.Omacron = 778;\n    t.Racute = 722;\n    t.Sacute = 667;\n    t.dcaron = 643;\n    t.Umacron = 722;\n    t.uring = 556;\n    t.threesuperior = 333;\n    t.Ograve = 778;\n    t.Agrave = 667;\n    t.Abreve = 667;\n    t.multiply = 584;\n    t.uacute = 556;\n    t.Tcaron = 611;\n    t.partialdiff = 476;\n    t.ydieresis = 500;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 556;\n    t.edieresis = 556;\n    t.cacute = 500;\n    t.nacute = 556;\n    t.umacron = 556;\n    t.Ncaron = 722;\n    t.Iacute = 278;\n    t.plusminus = 584;\n    t.brokenbar = 260;\n    t.registered = 737;\n    t.Gbreve = 778;\n    t.Idotaccent = 278;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 333;\n    t.omacron = 556;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 722;\n    t.lcommaaccent = 222;\n    t.tcaron = 317;\n    t.eogonek = 556;\n    t.Uogonek = 722;\n    t.Aacute = 667;\n    t.Adieresis = 667;\n    t.egrave = 556;\n    t.zacute = 500;\n    t.iogonek = 222;\n    t.Oacute = 778;\n    t.oacute = 556;\n    t.amacron = 556;\n    t.sacute = 500;\n    t.idieresis = 278;\n    t.Ocircumflex = 778;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 556;\n    t.twosuperior = 333;\n    t.Odieresis = 778;\n    t.mu = 556;\n    t.igrave = 278;\n    t.ohungarumlaut = 556;\n    t.Eogonek = 667;\n    t.dcroat = 556;\n    t.threequarters = 834;\n    t.Scedilla = 667;\n    t.lcaron = 299;\n    t.Kcommaaccent = 667;\n    t.Lacute = 556;\n    t.trademark = 1000;\n    t.edotaccent = 556;\n    t.Igrave = 278;\n    t.Imacron = 278;\n    t.Lcaron = 556;\n    t.onehalf = 834;\n    t.lessequal = 549;\n    t.ocircumflex = 556;\n    t.ntilde = 556;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 556;\n    t.gbreve = 556;\n    t.onequarter = 834;\n    t.Scaron = 667;\n    t.Scommaaccent = 667;\n    t.Ohungarumlaut = 778;\n    t.degree = 400;\n    t.ograve = 556;\n    t.Ccaron = 722;\n    t.ugrave = 556;\n    t.radical = 453;\n    t.Dcaron = 722;\n    t.rcommaaccent = 333;\n    t.Ntilde = 722;\n    t.otilde = 556;\n    t.Rcommaaccent = 722;\n    t.Lcommaaccent = 556;\n    t.Atilde = 667;\n    t.Aogonek = 667;\n    t.Aring = 667;\n    t.Otilde = 778;\n    t.zdotaccent = 500;\n    t.Ecaron = 667;\n    t.Iogonek = 278;\n    t.kcommaaccent = 500;\n    t.minus = 584;\n    t.Icircumflex = 278;\n    t.ncaron = 556;\n    t.tcommaaccent = 278;\n    t.logicalnot = 584;\n    t.odieresis = 556;\n    t.udieresis = 556;\n    t.notequal = 549;\n    t.gcommaaccent = 556;\n    t.eth = 556;\n    t.zcaron = 500;\n    t.ncommaaccent = 556;\n    t.onesuperior = 333;\n    t.imacron = 278;\n    t.Euro = 556;\n  });\n  t["Helvetica-Bold"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 278;\n    t.exclam = 333;\n    t.quotedbl = 474;\n    t.numbersign = 556;\n    t.dollar = 556;\n    t.percent = 889;\n    t.ampersand = 722;\n    t.quoteright = 278;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 389;\n    t.plus = 584;\n    t.comma = 278;\n    t.hyphen = 333;\n    t.period = 278;\n    t.slash = 278;\n    t.zero = 556;\n    t.one = 556;\n    t.two = 556;\n    t.three = 556;\n    t.four = 556;\n    t.five = 556;\n    t.six = 556;\n    t.seven = 556;\n    t.eight = 556;\n    t.nine = 556;\n    t.colon = 333;\n    t.semicolon = 333;\n    t.less = 584;\n    t.equal = 584;\n    t.greater = 584;\n    t.question = 611;\n    t.at = 975;\n    t.A = 722;\n    t.B = 722;\n    t.C = 722;\n    t.D = 722;\n    t.E = 667;\n    t.F = 611;\n    t.G = 778;\n    t.H = 722;\n    t.I = 278;\n    t.J = 556;\n    t.K = 722;\n    t.L = 611;\n    t.M = 833;\n    t.N = 722;\n    t.O = 778;\n    t.P = 667;\n    t.Q = 778;\n    t.R = 722;\n    t.S = 667;\n    t.T = 611;\n    t.U = 722;\n    t.V = 667;\n    t.W = 944;\n    t.X = 667;\n    t.Y = 667;\n    t.Z = 611;\n    t.bracketleft = 333;\n    t.backslash = 278;\n    t.bracketright = 333;\n    t.asciicircum = 584;\n    t.underscore = 556;\n    t.quoteleft = 278;\n    t.a = 556;\n    t.b = 611;\n    t.c = 556;\n    t.d = 611;\n    t.e = 556;\n    t.f = 333;\n    t.g = 611;\n    t.h = 611;\n    t.i = 278;\n    t.j = 278;\n    t.k = 556;\n    t.l = 278;\n    t.m = 889;\n    t.n = 611;\n    t.o = 611;\n    t.p = 611;\n    t.q = 611;\n    t.r = 389;\n    t.s = 556;\n    t.t = 333;\n    t.u = 611;\n    t.v = 556;\n    t.w = 778;\n    t.x = 556;\n    t.y = 556;\n    t.z = 500;\n    t.braceleft = 389;\n    t.bar = 280;\n    t.braceright = 389;\n    t.asciitilde = 584;\n    t.exclamdown = 333;\n    t.cent = 556;\n    t.sterling = 556;\n    t.fraction = 167;\n    t.yen = 556;\n    t.florin = 556;\n    t.section = 556;\n    t.currency = 556;\n    t.quotesingle = 238;\n    t.quotedblleft = 500;\n    t.guillemotleft = 556;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 611;\n    t.fl = 611;\n    t.endash = 556;\n    t.dagger = 556;\n    t.daggerdbl = 556;\n    t.periodcentered = 278;\n    t.paragraph = 556;\n    t.bullet = 350;\n    t.quotesinglbase = 278;\n    t.quotedblbase = 500;\n    t.quotedblright = 500;\n    t.guillemotright = 556;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 611;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 1000;\n    t.ordfeminine = 370;\n    t.Lslash = 611;\n    t.Oslash = 778;\n    t.OE = 1000;\n    t.ordmasculine = 365;\n    t.ae = 889;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 611;\n    t.oe = 944;\n    t.germandbls = 611;\n    t.Idieresis = 278;\n    t.eacute = 556;\n    t.abreve = 556;\n    t.uhungarumlaut = 611;\n    t.ecaron = 556;\n    t.Ydieresis = 667;\n    t.divide = 584;\n    t.Yacute = 667;\n    t.Acircumflex = 722;\n    t.aacute = 556;\n    t.Ucircumflex = 722;\n    t.yacute = 556;\n    t.scommaaccent = 556;\n    t.ecircumflex = 556;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 556;\n    t.Uacute = 722;\n    t.uogonek = 611;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 737;\n    t.Emacron = 667;\n    t.ccaron = 556;\n    t.aring = 556;\n    t.Ncommaaccent = 722;\n    t.lacute = 278;\n    t.agrave = 556;\n    t.Tcommaaccent = 611;\n    t.Cacute = 722;\n    t.atilde = 556;\n    t.Edotaccent = 667;\n    t.scaron = 556;\n    t.scedilla = 556;\n    t.iacute = 278;\n    t.lozenge = 494;\n    t.Rcaron = 722;\n    t.Gcommaaccent = 778;\n    t.ucircumflex = 611;\n    t.acircumflex = 556;\n    t.Amacron = 722;\n    t.rcaron = 389;\n    t.ccedilla = 556;\n    t.Zdotaccent = 611;\n    t.Thorn = 667;\n    t.Omacron = 778;\n    t.Racute = 722;\n    t.Sacute = 667;\n    t.dcaron = 743;\n    t.Umacron = 722;\n    t.uring = 611;\n    t.threesuperior = 333;\n    t.Ograve = 778;\n    t.Agrave = 722;\n    t.Abreve = 722;\n    t.multiply = 584;\n    t.uacute = 611;\n    t.Tcaron = 611;\n    t.partialdiff = 494;\n    t.ydieresis = 556;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 556;\n    t.edieresis = 556;\n    t.cacute = 556;\n    t.nacute = 611;\n    t.umacron = 611;\n    t.Ncaron = 722;\n    t.Iacute = 278;\n    t.plusminus = 584;\n    t.brokenbar = 280;\n    t.registered = 737;\n    t.Gbreve = 778;\n    t.Idotaccent = 278;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 389;\n    t.omacron = 611;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 722;\n    t.lcommaaccent = 278;\n    t.tcaron = 389;\n    t.eogonek = 556;\n    t.Uogonek = 722;\n    t.Aacute = 722;\n    t.Adieresis = 722;\n    t.egrave = 556;\n    t.zacute = 500;\n    t.iogonek = 278;\n    t.Oacute = 778;\n    t.oacute = 611;\n    t.amacron = 556;\n    t.sacute = 556;\n    t.idieresis = 278;\n    t.Ocircumflex = 778;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 611;\n    t.twosuperior = 333;\n    t.Odieresis = 778;\n    t.mu = 611;\n    t.igrave = 278;\n    t.ohungarumlaut = 611;\n    t.Eogonek = 667;\n    t.dcroat = 611;\n    t.threequarters = 834;\n    t.Scedilla = 667;\n    t.lcaron = 400;\n    t.Kcommaaccent = 722;\n    t.Lacute = 611;\n    t.trademark = 1000;\n    t.edotaccent = 556;\n    t.Igrave = 278;\n    t.Imacron = 278;\n    t.Lcaron = 611;\n    t.onehalf = 834;\n    t.lessequal = 549;\n    t.ocircumflex = 611;\n    t.ntilde = 611;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 556;\n    t.gbreve = 611;\n    t.onequarter = 834;\n    t.Scaron = 667;\n    t.Scommaaccent = 667;\n    t.Ohungarumlaut = 778;\n    t.degree = 400;\n    t.ograve = 611;\n    t.Ccaron = 722;\n    t.ugrave = 611;\n    t.radical = 549;\n    t.Dcaron = 722;\n    t.rcommaaccent = 389;\n    t.Ntilde = 722;\n    t.otilde = 611;\n    t.Rcommaaccent = 722;\n    t.Lcommaaccent = 611;\n    t.Atilde = 722;\n    t.Aogonek = 722;\n    t.Aring = 722;\n    t.Otilde = 778;\n    t.zdotaccent = 500;\n    t.Ecaron = 667;\n    t.Iogonek = 278;\n    t.kcommaaccent = 556;\n    t.minus = 584;\n    t.Icircumflex = 278;\n    t.ncaron = 611;\n    t.tcommaaccent = 333;\n    t.logicalnot = 584;\n    t.odieresis = 611;\n    t.udieresis = 611;\n    t.notequal = 549;\n    t.gcommaaccent = 611;\n    t.eth = 611;\n    t.zcaron = 500;\n    t.ncommaaccent = 611;\n    t.onesuperior = 333;\n    t.imacron = 278;\n    t.Euro = 556;\n  });\n  t["Helvetica-BoldOblique"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 278;\n    t.exclam = 333;\n    t.quotedbl = 474;\n    t.numbersign = 556;\n    t.dollar = 556;\n    t.percent = 889;\n    t.ampersand = 722;\n    t.quoteright = 278;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 389;\n    t.plus = 584;\n    t.comma = 278;\n    t.hyphen = 333;\n    t.period = 278;\n    t.slash = 278;\n    t.zero = 556;\n    t.one = 556;\n    t.two = 556;\n    t.three = 556;\n    t.four = 556;\n    t.five = 556;\n    t.six = 556;\n    t.seven = 556;\n    t.eight = 556;\n    t.nine = 556;\n    t.colon = 333;\n    t.semicolon = 333;\n    t.less = 584;\n    t.equal = 584;\n    t.greater = 584;\n    t.question = 611;\n    t.at = 975;\n    t.A = 722;\n    t.B = 722;\n    t.C = 722;\n    t.D = 722;\n    t.E = 667;\n    t.F = 611;\n    t.G = 778;\n    t.H = 722;\n    t.I = 278;\n    t.J = 556;\n    t.K = 722;\n    t.L = 611;\n    t.M = 833;\n    t.N = 722;\n    t.O = 778;\n    t.P = 667;\n    t.Q = 778;\n    t.R = 722;\n    t.S = 667;\n    t.T = 611;\n    t.U = 722;\n    t.V = 667;\n    t.W = 944;\n    t.X = 667;\n    t.Y = 667;\n    t.Z = 611;\n    t.bracketleft = 333;\n    t.backslash = 278;\n    t.bracketright = 333;\n    t.asciicircum = 584;\n    t.underscore = 556;\n    t.quoteleft = 278;\n    t.a = 556;\n    t.b = 611;\n    t.c = 556;\n    t.d = 611;\n    t.e = 556;\n    t.f = 333;\n    t.g = 611;\n    t.h = 611;\n    t.i = 278;\n    t.j = 278;\n    t.k = 556;\n    t.l = 278;\n    t.m = 889;\n    t.n = 611;\n    t.o = 611;\n    t.p = 611;\n    t.q = 611;\n    t.r = 389;\n    t.s = 556;\n    t.t = 333;\n    t.u = 611;\n    t.v = 556;\n    t.w = 778;\n    t.x = 556;\n    t.y = 556;\n    t.z = 500;\n    t.braceleft = 389;\n    t.bar = 280;\n    t.braceright = 389;\n    t.asciitilde = 584;\n    t.exclamdown = 333;\n    t.cent = 556;\n    t.sterling = 556;\n    t.fraction = 167;\n    t.yen = 556;\n    t.florin = 556;\n    t.section = 556;\n    t.currency = 556;\n    t.quotesingle = 238;\n    t.quotedblleft = 500;\n    t.guillemotleft = 556;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 611;\n    t.fl = 611;\n    t.endash = 556;\n    t.dagger = 556;\n    t.daggerdbl = 556;\n    t.periodcentered = 278;\n    t.paragraph = 556;\n    t.bullet = 350;\n    t.quotesinglbase = 278;\n    t.quotedblbase = 500;\n    t.quotedblright = 500;\n    t.guillemotright = 556;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 611;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 1000;\n    t.ordfeminine = 370;\n    t.Lslash = 611;\n    t.Oslash = 778;\n    t.OE = 1000;\n    t.ordmasculine = 365;\n    t.ae = 889;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 611;\n    t.oe = 944;\n    t.germandbls = 611;\n    t.Idieresis = 278;\n    t.eacute = 556;\n    t.abreve = 556;\n    t.uhungarumlaut = 611;\n    t.ecaron = 556;\n    t.Ydieresis = 667;\n    t.divide = 584;\n    t.Yacute = 667;\n    t.Acircumflex = 722;\n    t.aacute = 556;\n    t.Ucircumflex = 722;\n    t.yacute = 556;\n    t.scommaaccent = 556;\n    t.ecircumflex = 556;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 556;\n    t.Uacute = 722;\n    t.uogonek = 611;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 737;\n    t.Emacron = 667;\n    t.ccaron = 556;\n    t.aring = 556;\n    t.Ncommaaccent = 722;\n    t.lacute = 278;\n    t.agrave = 556;\n    t.Tcommaaccent = 611;\n    t.Cacute = 722;\n    t.atilde = 556;\n    t.Edotaccent = 667;\n    t.scaron = 556;\n    t.scedilla = 556;\n    t.iacute = 278;\n    t.lozenge = 494;\n    t.Rcaron = 722;\n    t.Gcommaaccent = 778;\n    t.ucircumflex = 611;\n    t.acircumflex = 556;\n    t.Amacron = 722;\n    t.rcaron = 389;\n    t.ccedilla = 556;\n    t.Zdotaccent = 611;\n    t.Thorn = 667;\n    t.Omacron = 778;\n    t.Racute = 722;\n    t.Sacute = 667;\n    t.dcaron = 743;\n    t.Umacron = 722;\n    t.uring = 611;\n    t.threesuperior = 333;\n    t.Ograve = 778;\n    t.Agrave = 722;\n    t.Abreve = 722;\n    t.multiply = 584;\n    t.uacute = 611;\n    t.Tcaron = 611;\n    t.partialdiff = 494;\n    t.ydieresis = 556;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 556;\n    t.edieresis = 556;\n    t.cacute = 556;\n    t.nacute = 611;\n    t.umacron = 611;\n    t.Ncaron = 722;\n    t.Iacute = 278;\n    t.plusminus = 584;\n    t.brokenbar = 280;\n    t.registered = 737;\n    t.Gbreve = 778;\n    t.Idotaccent = 278;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 389;\n    t.omacron = 611;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 722;\n    t.lcommaaccent = 278;\n    t.tcaron = 389;\n    t.eogonek = 556;\n    t.Uogonek = 722;\n    t.Aacute = 722;\n    t.Adieresis = 722;\n    t.egrave = 556;\n    t.zacute = 500;\n    t.iogonek = 278;\n    t.Oacute = 778;\n    t.oacute = 611;\n    t.amacron = 556;\n    t.sacute = 556;\n    t.idieresis = 278;\n    t.Ocircumflex = 778;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 611;\n    t.twosuperior = 333;\n    t.Odieresis = 778;\n    t.mu = 611;\n    t.igrave = 278;\n    t.ohungarumlaut = 611;\n    t.Eogonek = 667;\n    t.dcroat = 611;\n    t.threequarters = 834;\n    t.Scedilla = 667;\n    t.lcaron = 400;\n    t.Kcommaaccent = 722;\n    t.Lacute = 611;\n    t.trademark = 1000;\n    t.edotaccent = 556;\n    t.Igrave = 278;\n    t.Imacron = 278;\n    t.Lcaron = 611;\n    t.onehalf = 834;\n    t.lessequal = 549;\n    t.ocircumflex = 611;\n    t.ntilde = 611;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 556;\n    t.gbreve = 611;\n    t.onequarter = 834;\n    t.Scaron = 667;\n    t.Scommaaccent = 667;\n    t.Ohungarumlaut = 778;\n    t.degree = 400;\n    t.ograve = 611;\n    t.Ccaron = 722;\n    t.ugrave = 611;\n    t.radical = 549;\n    t.Dcaron = 722;\n    t.rcommaaccent = 389;\n    t.Ntilde = 722;\n    t.otilde = 611;\n    t.Rcommaaccent = 722;\n    t.Lcommaaccent = 611;\n    t.Atilde = 722;\n    t.Aogonek = 722;\n    t.Aring = 722;\n    t.Otilde = 778;\n    t.zdotaccent = 500;\n    t.Ecaron = 667;\n    t.Iogonek = 278;\n    t.kcommaaccent = 556;\n    t.minus = 584;\n    t.Icircumflex = 278;\n    t.ncaron = 611;\n    t.tcommaaccent = 333;\n    t.logicalnot = 584;\n    t.odieresis = 611;\n    t.udieresis = 611;\n    t.notequal = 549;\n    t.gcommaaccent = 611;\n    t.eth = 611;\n    t.zcaron = 500;\n    t.ncommaaccent = 611;\n    t.onesuperior = 333;\n    t.imacron = 278;\n    t.Euro = 556;\n  });\n  t["Helvetica-Oblique"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 278;\n    t.exclam = 278;\n    t.quotedbl = 355;\n    t.numbersign = 556;\n    t.dollar = 556;\n    t.percent = 889;\n    t.ampersand = 667;\n    t.quoteright = 222;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 389;\n    t.plus = 584;\n    t.comma = 278;\n    t.hyphen = 333;\n    t.period = 278;\n    t.slash = 278;\n    t.zero = 556;\n    t.one = 556;\n    t.two = 556;\n    t.three = 556;\n    t.four = 556;\n    t.five = 556;\n    t.six = 556;\n    t.seven = 556;\n    t.eight = 556;\n    t.nine = 556;\n    t.colon = 278;\n    t.semicolon = 278;\n    t.less = 584;\n    t.equal = 584;\n    t.greater = 584;\n    t.question = 556;\n    t.at = 1015;\n    t.A = 667;\n    t.B = 667;\n    t.C = 722;\n    t.D = 722;\n    t.E = 667;\n    t.F = 611;\n    t.G = 778;\n    t.H = 722;\n    t.I = 278;\n    t.J = 500;\n    t.K = 667;\n    t.L = 556;\n    t.M = 833;\n    t.N = 722;\n    t.O = 778;\n    t.P = 667;\n    t.Q = 778;\n    t.R = 722;\n    t.S = 667;\n    t.T = 611;\n    t.U = 722;\n    t.V = 667;\n    t.W = 944;\n    t.X = 667;\n    t.Y = 667;\n    t.Z = 611;\n    t.bracketleft = 278;\n    t.backslash = 278;\n    t.bracketright = 278;\n    t.asciicircum = 469;\n    t.underscore = 556;\n    t.quoteleft = 222;\n    t.a = 556;\n    t.b = 556;\n    t.c = 500;\n    t.d = 556;\n    t.e = 556;\n    t.f = 278;\n    t.g = 556;\n    t.h = 556;\n    t.i = 222;\n    t.j = 222;\n    t.k = 500;\n    t.l = 222;\n    t.m = 833;\n    t.n = 556;\n    t.o = 556;\n    t.p = 556;\n    t.q = 556;\n    t.r = 333;\n    t.s = 500;\n    t.t = 278;\n    t.u = 556;\n    t.v = 500;\n    t.w = 722;\n    t.x = 500;\n    t.y = 500;\n    t.z = 500;\n    t.braceleft = 334;\n    t.bar = 260;\n    t.braceright = 334;\n    t.asciitilde = 584;\n    t.exclamdown = 333;\n    t.cent = 556;\n    t.sterling = 556;\n    t.fraction = 167;\n    t.yen = 556;\n    t.florin = 556;\n    t.section = 556;\n    t.currency = 556;\n    t.quotesingle = 191;\n    t.quotedblleft = 333;\n    t.guillemotleft = 556;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 500;\n    t.fl = 500;\n    t.endash = 556;\n    t.dagger = 556;\n    t.daggerdbl = 556;\n    t.periodcentered = 278;\n    t.paragraph = 537;\n    t.bullet = 350;\n    t.quotesinglbase = 222;\n    t.quotedblbase = 333;\n    t.quotedblright = 333;\n    t.guillemotright = 556;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 611;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 1000;\n    t.ordfeminine = 370;\n    t.Lslash = 556;\n    t.Oslash = 778;\n    t.OE = 1000;\n    t.ordmasculine = 365;\n    t.ae = 889;\n    t.dotlessi = 278;\n    t.lslash = 222;\n    t.oslash = 611;\n    t.oe = 944;\n    t.germandbls = 611;\n    t.Idieresis = 278;\n    t.eacute = 556;\n    t.abreve = 556;\n    t.uhungarumlaut = 556;\n    t.ecaron = 556;\n    t.Ydieresis = 667;\n    t.divide = 584;\n    t.Yacute = 667;\n    t.Acircumflex = 667;\n    t.aacute = 556;\n    t.Ucircumflex = 722;\n    t.yacute = 500;\n    t.scommaaccent = 500;\n    t.ecircumflex = 556;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 556;\n    t.Uacute = 722;\n    t.uogonek = 556;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 737;\n    t.Emacron = 667;\n    t.ccaron = 500;\n    t.aring = 556;\n    t.Ncommaaccent = 722;\n    t.lacute = 222;\n    t.agrave = 556;\n    t.Tcommaaccent = 611;\n    t.Cacute = 722;\n    t.atilde = 556;\n    t.Edotaccent = 667;\n    t.scaron = 500;\n    t.scedilla = 500;\n    t.iacute = 278;\n    t.lozenge = 471;\n    t.Rcaron = 722;\n    t.Gcommaaccent = 778;\n    t.ucircumflex = 556;\n    t.acircumflex = 556;\n    t.Amacron = 667;\n    t.rcaron = 333;\n    t.ccedilla = 500;\n    t.Zdotaccent = 611;\n    t.Thorn = 667;\n    t.Omacron = 778;\n    t.Racute = 722;\n    t.Sacute = 667;\n    t.dcaron = 643;\n    t.Umacron = 722;\n    t.uring = 556;\n    t.threesuperior = 333;\n    t.Ograve = 778;\n    t.Agrave = 667;\n    t.Abreve = 667;\n    t.multiply = 584;\n    t.uacute = 556;\n    t.Tcaron = 611;\n    t.partialdiff = 476;\n    t.ydieresis = 500;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 556;\n    t.edieresis = 556;\n    t.cacute = 500;\n    t.nacute = 556;\n    t.umacron = 556;\n    t.Ncaron = 722;\n    t.Iacute = 278;\n    t.plusminus = 584;\n    t.brokenbar = 260;\n    t.registered = 737;\n    t.Gbreve = 778;\n    t.Idotaccent = 278;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 333;\n    t.omacron = 556;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 722;\n    t.lcommaaccent = 222;\n    t.tcaron = 317;\n    t.eogonek = 556;\n    t.Uogonek = 722;\n    t.Aacute = 667;\n    t.Adieresis = 667;\n    t.egrave = 556;\n    t.zacute = 500;\n    t.iogonek = 222;\n    t.Oacute = 778;\n    t.oacute = 556;\n    t.amacron = 556;\n    t.sacute = 500;\n    t.idieresis = 278;\n    t.Ocircumflex = 778;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 556;\n    t.twosuperior = 333;\n    t.Odieresis = 778;\n    t.mu = 556;\n    t.igrave = 278;\n    t.ohungarumlaut = 556;\n    t.Eogonek = 667;\n    t.dcroat = 556;\n    t.threequarters = 834;\n    t.Scedilla = 667;\n    t.lcaron = 299;\n    t.Kcommaaccent = 667;\n    t.Lacute = 556;\n    t.trademark = 1000;\n    t.edotaccent = 556;\n    t.Igrave = 278;\n    t.Imacron = 278;\n    t.Lcaron = 556;\n    t.onehalf = 834;\n    t.lessequal = 549;\n    t.ocircumflex = 556;\n    t.ntilde = 556;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 556;\n    t.gbreve = 556;\n    t.onequarter = 834;\n    t.Scaron = 667;\n    t.Scommaaccent = 667;\n    t.Ohungarumlaut = 778;\n    t.degree = 400;\n    t.ograve = 556;\n    t.Ccaron = 722;\n    t.ugrave = 556;\n    t.radical = 453;\n    t.Dcaron = 722;\n    t.rcommaaccent = 333;\n    t.Ntilde = 722;\n    t.otilde = 556;\n    t.Rcommaaccent = 722;\n    t.Lcommaaccent = 556;\n    t.Atilde = 667;\n    t.Aogonek = 667;\n    t.Aring = 667;\n    t.Otilde = 778;\n    t.zdotaccent = 500;\n    t.Ecaron = 667;\n    t.Iogonek = 278;\n    t.kcommaaccent = 500;\n    t.minus = 584;\n    t.Icircumflex = 278;\n    t.ncaron = 556;\n    t.tcommaaccent = 278;\n    t.logicalnot = 584;\n    t.odieresis = 556;\n    t.udieresis = 556;\n    t.notequal = 549;\n    t.gcommaaccent = 556;\n    t.eth = 556;\n    t.zcaron = 500;\n    t.ncommaaccent = 556;\n    t.onesuperior = 333;\n    t.imacron = 278;\n    t.Euro = 556;\n  });\n  t.Symbol = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 250;\n    t.exclam = 333;\n    t.universal = 713;\n    t.numbersign = 500;\n    t.existential = 549;\n    t.percent = 833;\n    t.ampersand = 778;\n    t.suchthat = 439;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asteriskmath = 500;\n    t.plus = 549;\n    t.comma = 250;\n    t.minus = 549;\n    t.period = 250;\n    t.slash = 278;\n    t.zero = 500;\n    t.one = 500;\n    t.two = 500;\n    t.three = 500;\n    t.four = 500;\n    t.five = 500;\n    t.six = 500;\n    t.seven = 500;\n    t.eight = 500;\n    t.nine = 500;\n    t.colon = 278;\n    t.semicolon = 278;\n    t.less = 549;\n    t.equal = 549;\n    t.greater = 549;\n    t.question = 444;\n    t.congruent = 549;\n    t.Alpha = 722;\n    t.Beta = 667;\n    t.Chi = 722;\n    t.Delta = 612;\n    t.Epsilon = 611;\n    t.Phi = 763;\n    t.Gamma = 603;\n    t.Eta = 722;\n    t.Iota = 333;\n    t.theta1 = 631;\n    t.Kappa = 722;\n    t.Lambda = 686;\n    t.Mu = 889;\n    t.Nu = 722;\n    t.Omicron = 722;\n    t.Pi = 768;\n    t.Theta = 741;\n    t.Rho = 556;\n    t.Sigma = 592;\n    t.Tau = 611;\n    t.Upsilon = 690;\n    t.sigma1 = 439;\n    t.Omega = 768;\n    t.Xi = 645;\n    t.Psi = 795;\n    t.Zeta = 611;\n    t.bracketleft = 333;\n    t.therefore = 863;\n    t.bracketright = 333;\n    t.perpendicular = 658;\n    t.underscore = 500;\n    t.radicalex = 500;\n    t.alpha = 631;\n    t.beta = 549;\n    t.chi = 549;\n    t.delta = 494;\n    t.epsilon = 439;\n    t.phi = 521;\n    t.gamma = 411;\n    t.eta = 603;\n    t.iota = 329;\n    t.phi1 = 603;\n    t.kappa = 549;\n    t.lambda = 549;\n    t.mu = 576;\n    t.nu = 521;\n    t.omicron = 549;\n    t.pi = 549;\n    t.theta = 521;\n    t.rho = 549;\n    t.sigma = 603;\n    t.tau = 439;\n    t.upsilon = 576;\n    t.omega1 = 713;\n    t.omega = 686;\n    t.xi = 493;\n    t.psi = 686;\n    t.zeta = 494;\n    t.braceleft = 480;\n    t.bar = 200;\n    t.braceright = 480;\n    t.similar = 549;\n    t.Euro = 750;\n    t.Upsilon1 = 620;\n    t.minute = 247;\n    t.lessequal = 549;\n    t.fraction = 167;\n    t.infinity = 713;\n    t.florin = 500;\n    t.club = 753;\n    t.diamond = 753;\n    t.heart = 753;\n    t.spade = 753;\n    t.arrowboth = 1042;\n    t.arrowleft = 987;\n    t.arrowup = 603;\n    t.arrowright = 987;\n    t.arrowdown = 603;\n    t.degree = 400;\n    t.plusminus = 549;\n    t.second = 411;\n    t.greaterequal = 549;\n    t.multiply = 549;\n    t.proportional = 713;\n    t.partialdiff = 494;\n    t.bullet = 460;\n    t.divide = 549;\n    t.notequal = 549;\n    t.equivalence = 549;\n    t.approxequal = 549;\n    t.ellipsis = 1000;\n    t.arrowvertex = 603;\n    t.arrowhorizex = 1000;\n    t.carriagereturn = 658;\n    t.aleph = 823;\n    t.Ifraktur = 686;\n    t.Rfraktur = 795;\n    t.weierstrass = 987;\n    t.circlemultiply = 768;\n    t.circleplus = 768;\n    t.emptyset = 823;\n    t.intersection = 768;\n    t.union = 768;\n    t.propersuperset = 713;\n    t.reflexsuperset = 713;\n    t.notsubset = 713;\n    t.propersubset = 713;\n    t.reflexsubset = 713;\n    t.element = 713;\n    t.notelement = 713;\n    t.angle = 768;\n    t.gradient = 713;\n    t.registerserif = 790;\n    t.copyrightserif = 790;\n    t.trademarkserif = 890;\n    t.product = 823;\n    t.radical = 549;\n    t.dotmath = 250;\n    t.logicalnot = 713;\n    t.logicaland = 603;\n    t.logicalor = 603;\n    t.arrowdblboth = 1042;\n    t.arrowdblleft = 987;\n    t.arrowdblup = 603;\n    t.arrowdblright = 987;\n    t.arrowdbldown = 603;\n    t.lozenge = 494;\n    t.angleleft = 329;\n    t.registersans = 790;\n    t.copyrightsans = 790;\n    t.trademarksans = 786;\n    t.summation = 713;\n    t.parenlefttp = 384;\n    t.parenleftex = 384;\n    t.parenleftbt = 384;\n    t.bracketlefttp = 384;\n    t.bracketleftex = 384;\n    t.bracketleftbt = 384;\n    t.bracelefttp = 494;\n    t.braceleftmid = 494;\n    t.braceleftbt = 494;\n    t.braceex = 494;\n    t.angleright = 329;\n    t.integral = 274;\n    t.integraltp = 686;\n    t.integralex = 686;\n    t.integralbt = 686;\n    t.parenrighttp = 384;\n    t.parenrightex = 384;\n    t.parenrightbt = 384;\n    t.bracketrighttp = 384;\n    t.bracketrightex = 384;\n    t.bracketrightbt = 384;\n    t.bracerighttp = 494;\n    t.bracerightmid = 494;\n    t.bracerightbt = 494;\n    t.apple = 790;\n  });\n  t["Times-Roman"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 250;\n    t.exclam = 333;\n    t.quotedbl = 408;\n    t.numbersign = 500;\n    t.dollar = 500;\n    t.percent = 833;\n    t.ampersand = 778;\n    t.quoteright = 333;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 500;\n    t.plus = 564;\n    t.comma = 250;\n    t.hyphen = 333;\n    t.period = 250;\n    t.slash = 278;\n    t.zero = 500;\n    t.one = 500;\n    t.two = 500;\n    t.three = 500;\n    t.four = 500;\n    t.five = 500;\n    t.six = 500;\n    t.seven = 500;\n    t.eight = 500;\n    t.nine = 500;\n    t.colon = 278;\n    t.semicolon = 278;\n    t.less = 564;\n    t.equal = 564;\n    t.greater = 564;\n    t.question = 444;\n    t.at = 921;\n    t.A = 722;\n    t.B = 667;\n    t.C = 667;\n    t.D = 722;\n    t.E = 611;\n    t.F = 556;\n    t.G = 722;\n    t.H = 722;\n    t.I = 333;\n    t.J = 389;\n    t.K = 722;\n    t.L = 611;\n    t.M = 889;\n    t.N = 722;\n    t.O = 722;\n    t.P = 556;\n    t.Q = 722;\n    t.R = 667;\n    t.S = 556;\n    t.T = 611;\n    t.U = 722;\n    t.V = 722;\n    t.W = 944;\n    t.X = 722;\n    t.Y = 722;\n    t.Z = 611;\n    t.bracketleft = 333;\n    t.backslash = 278;\n    t.bracketright = 333;\n    t.asciicircum = 469;\n    t.underscore = 500;\n    t.quoteleft = 333;\n    t.a = 444;\n    t.b = 500;\n    t.c = 444;\n    t.d = 500;\n    t.e = 444;\n    t.f = 333;\n    t.g = 500;\n    t.h = 500;\n    t.i = 278;\n    t.j = 278;\n    t.k = 500;\n    t.l = 278;\n    t.m = 778;\n    t.n = 500;\n    t.o = 500;\n    t.p = 500;\n    t.q = 500;\n    t.r = 333;\n    t.s = 389;\n    t.t = 278;\n    t.u = 500;\n    t.v = 500;\n    t.w = 722;\n    t.x = 500;\n    t.y = 500;\n    t.z = 444;\n    t.braceleft = 480;\n    t.bar = 200;\n    t.braceright = 480;\n    t.asciitilde = 541;\n    t.exclamdown = 333;\n    t.cent = 500;\n    t.sterling = 500;\n    t.fraction = 167;\n    t.yen = 500;\n    t.florin = 500;\n    t.section = 500;\n    t.currency = 500;\n    t.quotesingle = 180;\n    t.quotedblleft = 444;\n    t.guillemotleft = 500;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 556;\n    t.fl = 556;\n    t.endash = 500;\n    t.dagger = 500;\n    t.daggerdbl = 500;\n    t.periodcentered = 250;\n    t.paragraph = 453;\n    t.bullet = 350;\n    t.quotesinglbase = 333;\n    t.quotedblbase = 444;\n    t.quotedblright = 444;\n    t.guillemotright = 500;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 444;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 889;\n    t.ordfeminine = 276;\n    t.Lslash = 611;\n    t.Oslash = 722;\n    t.OE = 889;\n    t.ordmasculine = 310;\n    t.ae = 667;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 500;\n    t.oe = 722;\n    t.germandbls = 500;\n    t.Idieresis = 333;\n    t.eacute = 444;\n    t.abreve = 444;\n    t.uhungarumlaut = 500;\n    t.ecaron = 444;\n    t.Ydieresis = 722;\n    t.divide = 564;\n    t.Yacute = 722;\n    t.Acircumflex = 722;\n    t.aacute = 444;\n    t.Ucircumflex = 722;\n    t.yacute = 500;\n    t.scommaaccent = 389;\n    t.ecircumflex = 444;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 444;\n    t.Uacute = 722;\n    t.uogonek = 500;\n    t.Edieresis = 611;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 760;\n    t.Emacron = 611;\n    t.ccaron = 444;\n    t.aring = 444;\n    t.Ncommaaccent = 722;\n    t.lacute = 278;\n    t.agrave = 444;\n    t.Tcommaaccent = 611;\n    t.Cacute = 667;\n    t.atilde = 444;\n    t.Edotaccent = 611;\n    t.scaron = 389;\n    t.scedilla = 389;\n    t.iacute = 278;\n    t.lozenge = 471;\n    t.Rcaron = 667;\n    t.Gcommaaccent = 722;\n    t.ucircumflex = 500;\n    t.acircumflex = 444;\n    t.Amacron = 722;\n    t.rcaron = 333;\n    t.ccedilla = 444;\n    t.Zdotaccent = 611;\n    t.Thorn = 556;\n    t.Omacron = 722;\n    t.Racute = 667;\n    t.Sacute = 556;\n    t.dcaron = 588;\n    t.Umacron = 722;\n    t.uring = 500;\n    t.threesuperior = 300;\n    t.Ograve = 722;\n    t.Agrave = 722;\n    t.Abreve = 722;\n    t.multiply = 564;\n    t.uacute = 500;\n    t.Tcaron = 611;\n    t.partialdiff = 476;\n    t.ydieresis = 500;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 611;\n    t.adieresis = 444;\n    t.edieresis = 444;\n    t.cacute = 444;\n    t.nacute = 500;\n    t.umacron = 500;\n    t.Ncaron = 722;\n    t.Iacute = 333;\n    t.plusminus = 564;\n    t.brokenbar = 200;\n    t.registered = 760;\n    t.Gbreve = 722;\n    t.Idotaccent = 333;\n    t.summation = 600;\n    t.Egrave = 611;\n    t.racute = 333;\n    t.omacron = 500;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 667;\n    t.lcommaaccent = 278;\n    t.tcaron = 326;\n    t.eogonek = 444;\n    t.Uogonek = 722;\n    t.Aacute = 722;\n    t.Adieresis = 722;\n    t.egrave = 444;\n    t.zacute = 444;\n    t.iogonek = 278;\n    t.Oacute = 722;\n    t.oacute = 500;\n    t.amacron = 444;\n    t.sacute = 389;\n    t.idieresis = 278;\n    t.Ocircumflex = 722;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 500;\n    t.twosuperior = 300;\n    t.Odieresis = 722;\n    t.mu = 500;\n    t.igrave = 278;\n    t.ohungarumlaut = 500;\n    t.Eogonek = 611;\n    t.dcroat = 500;\n    t.threequarters = 750;\n    t.Scedilla = 556;\n    t.lcaron = 344;\n    t.Kcommaaccent = 722;\n    t.Lacute = 611;\n    t.trademark = 980;\n    t.edotaccent = 444;\n    t.Igrave = 333;\n    t.Imacron = 333;\n    t.Lcaron = 611;\n    t.onehalf = 750;\n    t.lessequal = 549;\n    t.ocircumflex = 500;\n    t.ntilde = 500;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 611;\n    t.emacron = 444;\n    t.gbreve = 500;\n    t.onequarter = 750;\n    t.Scaron = 556;\n    t.Scommaaccent = 556;\n    t.Ohungarumlaut = 722;\n    t.degree = 400;\n    t.ograve = 500;\n    t.Ccaron = 667;\n    t.ugrave = 500;\n    t.radical = 453;\n    t.Dcaron = 722;\n    t.rcommaaccent = 333;\n    t.Ntilde = 722;\n    t.otilde = 500;\n    t.Rcommaaccent = 667;\n    t.Lcommaaccent = 611;\n    t.Atilde = 722;\n    t.Aogonek = 722;\n    t.Aring = 722;\n    t.Otilde = 722;\n    t.zdotaccent = 444;\n    t.Ecaron = 611;\n    t.Iogonek = 333;\n    t.kcommaaccent = 500;\n    t.minus = 564;\n    t.Icircumflex = 333;\n    t.ncaron = 500;\n    t.tcommaaccent = 278;\n    t.logicalnot = 564;\n    t.odieresis = 500;\n    t.udieresis = 500;\n    t.notequal = 549;\n    t.gcommaaccent = 500;\n    t.eth = 500;\n    t.zcaron = 444;\n    t.ncommaaccent = 500;\n    t.onesuperior = 300;\n    t.imacron = 278;\n    t.Euro = 500;\n  });\n  t["Times-Bold"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 250;\n    t.exclam = 333;\n    t.quotedbl = 555;\n    t.numbersign = 500;\n    t.dollar = 500;\n    t.percent = 1000;\n    t.ampersand = 833;\n    t.quoteright = 333;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 500;\n    t.plus = 570;\n    t.comma = 250;\n    t.hyphen = 333;\n    t.period = 250;\n    t.slash = 278;\n    t.zero = 500;\n    t.one = 500;\n    t.two = 500;\n    t.three = 500;\n    t.four = 500;\n    t.five = 500;\n    t.six = 500;\n    t.seven = 500;\n    t.eight = 500;\n    t.nine = 500;\n    t.colon = 333;\n    t.semicolon = 333;\n    t.less = 570;\n    t.equal = 570;\n    t.greater = 570;\n    t.question = 500;\n    t.at = 930;\n    t.A = 722;\n    t.B = 667;\n    t.C = 722;\n    t.D = 722;\n    t.E = 667;\n    t.F = 611;\n    t.G = 778;\n    t.H = 778;\n    t.I = 389;\n    t.J = 500;\n    t.K = 778;\n    t.L = 667;\n    t.M = 944;\n    t.N = 722;\n    t.O = 778;\n    t.P = 611;\n    t.Q = 778;\n    t.R = 722;\n    t.S = 556;\n    t.T = 667;\n    t.U = 722;\n    t.V = 722;\n    t.W = 1000;\n    t.X = 722;\n    t.Y = 722;\n    t.Z = 667;\n    t.bracketleft = 333;\n    t.backslash = 278;\n    t.bracketright = 333;\n    t.asciicircum = 581;\n    t.underscore = 500;\n    t.quoteleft = 333;\n    t.a = 500;\n    t.b = 556;\n    t.c = 444;\n    t.d = 556;\n    t.e = 444;\n    t.f = 333;\n    t.g = 500;\n    t.h = 556;\n    t.i = 278;\n    t.j = 333;\n    t.k = 556;\n    t.l = 278;\n    t.m = 833;\n    t.n = 556;\n    t.o = 500;\n    t.p = 556;\n    t.q = 556;\n    t.r = 444;\n    t.s = 389;\n    t.t = 333;\n    t.u = 556;\n    t.v = 500;\n    t.w = 722;\n    t.x = 500;\n    t.y = 500;\n    t.z = 444;\n    t.braceleft = 394;\n    t.bar = 220;\n    t.braceright = 394;\n    t.asciitilde = 520;\n    t.exclamdown = 333;\n    t.cent = 500;\n    t.sterling = 500;\n    t.fraction = 167;\n    t.yen = 500;\n    t.florin = 500;\n    t.section = 500;\n    t.currency = 500;\n    t.quotesingle = 278;\n    t.quotedblleft = 500;\n    t.guillemotleft = 500;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 556;\n    t.fl = 556;\n    t.endash = 500;\n    t.dagger = 500;\n    t.daggerdbl = 500;\n    t.periodcentered = 250;\n    t.paragraph = 540;\n    t.bullet = 350;\n    t.quotesinglbase = 333;\n    t.quotedblbase = 500;\n    t.quotedblright = 500;\n    t.guillemotright = 500;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 500;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 1000;\n    t.ordfeminine = 300;\n    t.Lslash = 667;\n    t.Oslash = 778;\n    t.OE = 1000;\n    t.ordmasculine = 330;\n    t.ae = 722;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 500;\n    t.oe = 722;\n    t.germandbls = 556;\n    t.Idieresis = 389;\n    t.eacute = 444;\n    t.abreve = 500;\n    t.uhungarumlaut = 556;\n    t.ecaron = 444;\n    t.Ydieresis = 722;\n    t.divide = 570;\n    t.Yacute = 722;\n    t.Acircumflex = 722;\n    t.aacute = 500;\n    t.Ucircumflex = 722;\n    t.yacute = 500;\n    t.scommaaccent = 389;\n    t.ecircumflex = 444;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 500;\n    t.Uacute = 722;\n    t.uogonek = 556;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 747;\n    t.Emacron = 667;\n    t.ccaron = 444;\n    t.aring = 500;\n    t.Ncommaaccent = 722;\n    t.lacute = 278;\n    t.agrave = 500;\n    t.Tcommaaccent = 667;\n    t.Cacute = 722;\n    t.atilde = 500;\n    t.Edotaccent = 667;\n    t.scaron = 389;\n    t.scedilla = 389;\n    t.iacute = 278;\n    t.lozenge = 494;\n    t.Rcaron = 722;\n    t.Gcommaaccent = 778;\n    t.ucircumflex = 556;\n    t.acircumflex = 500;\n    t.Amacron = 722;\n    t.rcaron = 444;\n    t.ccedilla = 444;\n    t.Zdotaccent = 667;\n    t.Thorn = 611;\n    t.Omacron = 778;\n    t.Racute = 722;\n    t.Sacute = 556;\n    t.dcaron = 672;\n    t.Umacron = 722;\n    t.uring = 556;\n    t.threesuperior = 300;\n    t.Ograve = 778;\n    t.Agrave = 722;\n    t.Abreve = 722;\n    t.multiply = 570;\n    t.uacute = 556;\n    t.Tcaron = 667;\n    t.partialdiff = 494;\n    t.ydieresis = 500;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 500;\n    t.edieresis = 444;\n    t.cacute = 444;\n    t.nacute = 556;\n    t.umacron = 556;\n    t.Ncaron = 722;\n    t.Iacute = 389;\n    t.plusminus = 570;\n    t.brokenbar = 220;\n    t.registered = 747;\n    t.Gbreve = 778;\n    t.Idotaccent = 389;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 444;\n    t.omacron = 500;\n    t.Zacute = 667;\n    t.Zcaron = 667;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 722;\n    t.lcommaaccent = 278;\n    t.tcaron = 416;\n    t.eogonek = 444;\n    t.Uogonek = 722;\n    t.Aacute = 722;\n    t.Adieresis = 722;\n    t.egrave = 444;\n    t.zacute = 444;\n    t.iogonek = 278;\n    t.Oacute = 778;\n    t.oacute = 500;\n    t.amacron = 500;\n    t.sacute = 389;\n    t.idieresis = 278;\n    t.Ocircumflex = 778;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 556;\n    t.twosuperior = 300;\n    t.Odieresis = 778;\n    t.mu = 556;\n    t.igrave = 278;\n    t.ohungarumlaut = 500;\n    t.Eogonek = 667;\n    t.dcroat = 556;\n    t.threequarters = 750;\n    t.Scedilla = 556;\n    t.lcaron = 394;\n    t.Kcommaaccent = 778;\n    t.Lacute = 667;\n    t.trademark = 1000;\n    t.edotaccent = 444;\n    t.Igrave = 389;\n    t.Imacron = 389;\n    t.Lcaron = 667;\n    t.onehalf = 750;\n    t.lessequal = 549;\n    t.ocircumflex = 500;\n    t.ntilde = 556;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 444;\n    t.gbreve = 500;\n    t.onequarter = 750;\n    t.Scaron = 556;\n    t.Scommaaccent = 556;\n    t.Ohungarumlaut = 778;\n    t.degree = 400;\n    t.ograve = 500;\n    t.Ccaron = 722;\n    t.ugrave = 556;\n    t.radical = 549;\n    t.Dcaron = 722;\n    t.rcommaaccent = 444;\n    t.Ntilde = 722;\n    t.otilde = 500;\n    t.Rcommaaccent = 722;\n    t.Lcommaaccent = 667;\n    t.Atilde = 722;\n    t.Aogonek = 722;\n    t.Aring = 722;\n    t.Otilde = 778;\n    t.zdotaccent = 444;\n    t.Ecaron = 667;\n    t.Iogonek = 389;\n    t.kcommaaccent = 556;\n    t.minus = 570;\n    t.Icircumflex = 389;\n    t.ncaron = 556;\n    t.tcommaaccent = 333;\n    t.logicalnot = 570;\n    t.odieresis = 500;\n    t.udieresis = 556;\n    t.notequal = 549;\n    t.gcommaaccent = 500;\n    t.eth = 500;\n    t.zcaron = 444;\n    t.ncommaaccent = 556;\n    t.onesuperior = 300;\n    t.imacron = 278;\n    t.Euro = 500;\n  });\n  t["Times-BoldItalic"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 250;\n    t.exclam = 389;\n    t.quotedbl = 555;\n    t.numbersign = 500;\n    t.dollar = 500;\n    t.percent = 833;\n    t.ampersand = 778;\n    t.quoteright = 333;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 500;\n    t.plus = 570;\n    t.comma = 250;\n    t.hyphen = 333;\n    t.period = 250;\n    t.slash = 278;\n    t.zero = 500;\n    t.one = 500;\n    t.two = 500;\n    t.three = 500;\n    t.four = 500;\n    t.five = 500;\n    t.six = 500;\n    t.seven = 500;\n    t.eight = 500;\n    t.nine = 500;\n    t.colon = 333;\n    t.semicolon = 333;\n    t.less = 570;\n    t.equal = 570;\n    t.greater = 570;\n    t.question = 500;\n    t.at = 832;\n    t.A = 667;\n    t.B = 667;\n    t.C = 667;\n    t.D = 722;\n    t.E = 667;\n    t.F = 667;\n    t.G = 722;\n    t.H = 778;\n    t.I = 389;\n    t.J = 500;\n    t.K = 667;\n    t.L = 611;\n    t.M = 889;\n    t.N = 722;\n    t.O = 722;\n    t.P = 611;\n    t.Q = 722;\n    t.R = 667;\n    t.S = 556;\n    t.T = 611;\n    t.U = 722;\n    t.V = 667;\n    t.W = 889;\n    t.X = 667;\n    t.Y = 611;\n    t.Z = 611;\n    t.bracketleft = 333;\n    t.backslash = 278;\n    t.bracketright = 333;\n    t.asciicircum = 570;\n    t.underscore = 500;\n    t.quoteleft = 333;\n    t.a = 500;\n    t.b = 500;\n    t.c = 444;\n    t.d = 500;\n    t.e = 444;\n    t.f = 333;\n    t.g = 500;\n    t.h = 556;\n    t.i = 278;\n    t.j = 278;\n    t.k = 500;\n    t.l = 278;\n    t.m = 778;\n    t.n = 556;\n    t.o = 500;\n    t.p = 500;\n    t.q = 500;\n    t.r = 389;\n    t.s = 389;\n    t.t = 278;\n    t.u = 556;\n    t.v = 444;\n    t.w = 667;\n    t.x = 500;\n    t.y = 444;\n    t.z = 389;\n    t.braceleft = 348;\n    t.bar = 220;\n    t.braceright = 348;\n    t.asciitilde = 570;\n    t.exclamdown = 389;\n    t.cent = 500;\n    t.sterling = 500;\n    t.fraction = 167;\n    t.yen = 500;\n    t.florin = 500;\n    t.section = 500;\n    t.currency = 500;\n    t.quotesingle = 278;\n    t.quotedblleft = 500;\n    t.guillemotleft = 500;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 556;\n    t.fl = 556;\n    t.endash = 500;\n    t.dagger = 500;\n    t.daggerdbl = 500;\n    t.periodcentered = 250;\n    t.paragraph = 500;\n    t.bullet = 350;\n    t.quotesinglbase = 333;\n    t.quotedblbase = 500;\n    t.quotedblright = 500;\n    t.guillemotright = 500;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 500;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 944;\n    t.ordfeminine = 266;\n    t.Lslash = 611;\n    t.Oslash = 722;\n    t.OE = 944;\n    t.ordmasculine = 300;\n    t.ae = 722;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 500;\n    t.oe = 722;\n    t.germandbls = 500;\n    t.Idieresis = 389;\n    t.eacute = 444;\n    t.abreve = 500;\n    t.uhungarumlaut = 556;\n    t.ecaron = 444;\n    t.Ydieresis = 611;\n    t.divide = 570;\n    t.Yacute = 611;\n    t.Acircumflex = 667;\n    t.aacute = 500;\n    t.Ucircumflex = 722;\n    t.yacute = 444;\n    t.scommaaccent = 389;\n    t.ecircumflex = 444;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 500;\n    t.Uacute = 722;\n    t.uogonek = 556;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 747;\n    t.Emacron = 667;\n    t.ccaron = 444;\n    t.aring = 500;\n    t.Ncommaaccent = 722;\n    t.lacute = 278;\n    t.agrave = 500;\n    t.Tcommaaccent = 611;\n    t.Cacute = 667;\n    t.atilde = 500;\n    t.Edotaccent = 667;\n    t.scaron = 389;\n    t.scedilla = 389;\n    t.iacute = 278;\n    t.lozenge = 494;\n    t.Rcaron = 667;\n    t.Gcommaaccent = 722;\n    t.ucircumflex = 556;\n    t.acircumflex = 500;\n    t.Amacron = 667;\n    t.rcaron = 389;\n    t.ccedilla = 444;\n    t.Zdotaccent = 611;\n    t.Thorn = 611;\n    t.Omacron = 722;\n    t.Racute = 667;\n    t.Sacute = 556;\n    t.dcaron = 608;\n    t.Umacron = 722;\n    t.uring = 556;\n    t.threesuperior = 300;\n    t.Ograve = 722;\n    t.Agrave = 667;\n    t.Abreve = 667;\n    t.multiply = 570;\n    t.uacute = 556;\n    t.Tcaron = 611;\n    t.partialdiff = 494;\n    t.ydieresis = 444;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 500;\n    t.edieresis = 444;\n    t.cacute = 444;\n    t.nacute = 556;\n    t.umacron = 556;\n    t.Ncaron = 722;\n    t.Iacute = 389;\n    t.plusminus = 570;\n    t.brokenbar = 220;\n    t.registered = 747;\n    t.Gbreve = 722;\n    t.Idotaccent = 389;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 389;\n    t.omacron = 500;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 667;\n    t.lcommaaccent = 278;\n    t.tcaron = 366;\n    t.eogonek = 444;\n    t.Uogonek = 722;\n    t.Aacute = 667;\n    t.Adieresis = 667;\n    t.egrave = 444;\n    t.zacute = 389;\n    t.iogonek = 278;\n    t.Oacute = 722;\n    t.oacute = 500;\n    t.amacron = 500;\n    t.sacute = 389;\n    t.idieresis = 278;\n    t.Ocircumflex = 722;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 500;\n    t.twosuperior = 300;\n    t.Odieresis = 722;\n    t.mu = 576;\n    t.igrave = 278;\n    t.ohungarumlaut = 500;\n    t.Eogonek = 667;\n    t.dcroat = 500;\n    t.threequarters = 750;\n    t.Scedilla = 556;\n    t.lcaron = 382;\n    t.Kcommaaccent = 667;\n    t.Lacute = 611;\n    t.trademark = 1000;\n    t.edotaccent = 444;\n    t.Igrave = 389;\n    t.Imacron = 389;\n    t.Lcaron = 611;\n    t.onehalf = 750;\n    t.lessequal = 549;\n    t.ocircumflex = 500;\n    t.ntilde = 556;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 444;\n    t.gbreve = 500;\n    t.onequarter = 750;\n    t.Scaron = 556;\n    t.Scommaaccent = 556;\n    t.Ohungarumlaut = 722;\n    t.degree = 400;\n    t.ograve = 500;\n    t.Ccaron = 667;\n    t.ugrave = 556;\n    t.radical = 549;\n    t.Dcaron = 722;\n    t.rcommaaccent = 389;\n    t.Ntilde = 722;\n    t.otilde = 500;\n    t.Rcommaaccent = 667;\n    t.Lcommaaccent = 611;\n    t.Atilde = 667;\n    t.Aogonek = 667;\n    t.Aring = 667;\n    t.Otilde = 722;\n    t.zdotaccent = 389;\n    t.Ecaron = 667;\n    t.Iogonek = 389;\n    t.kcommaaccent = 500;\n    t.minus = 606;\n    t.Icircumflex = 389;\n    t.ncaron = 556;\n    t.tcommaaccent = 278;\n    t.logicalnot = 606;\n    t.odieresis = 500;\n    t.udieresis = 556;\n    t.notequal = 549;\n    t.gcommaaccent = 500;\n    t.eth = 500;\n    t.zcaron = 389;\n    t.ncommaaccent = 556;\n    t.onesuperior = 300;\n    t.imacron = 278;\n    t.Euro = 500;\n  });\n  t["Times-Italic"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 250;\n    t.exclam = 333;\n    t.quotedbl = 420;\n    t.numbersign = 500;\n    t.dollar = 500;\n    t.percent = 833;\n    t.ampersand = 778;\n    t.quoteright = 333;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 500;\n    t.plus = 675;\n    t.comma = 250;\n    t.hyphen = 333;\n    t.period = 250;\n    t.slash = 278;\n    t.zero = 500;\n    t.one = 500;\n    t.two = 500;\n    t.three = 500;\n    t.four = 500;\n    t.five = 500;\n    t.six = 500;\n    t.seven = 500;\n    t.eight = 500;\n    t.nine = 500;\n    t.colon = 333;\n    t.semicolon = 333;\n    t.less = 675;\n    t.equal = 675;\n    t.greater = 675;\n    t.question = 500;\n    t.at = 920;\n    t.A = 611;\n    t.B = 611;\n    t.C = 667;\n    t.D = 722;\n    t.E = 611;\n    t.F = 611;\n    t.G = 722;\n    t.H = 722;\n    t.I = 333;\n    t.J = 444;\n    t.K = 667;\n    t.L = 556;\n    t.M = 833;\n    t.N = 667;\n    t.O = 722;\n    t.P = 611;\n    t.Q = 722;\n    t.R = 611;\n    t.S = 500;\n    t.T = 556;\n    t.U = 722;\n    t.V = 611;\n    t.W = 833;\n    t.X = 611;\n    t.Y = 556;\n    t.Z = 556;\n    t.bracketleft = 389;\n    t.backslash = 278;\n    t.bracketright = 389;\n    t.asciicircum = 422;\n    t.underscore = 500;\n    t.quoteleft = 333;\n    t.a = 500;\n    t.b = 500;\n    t.c = 444;\n    t.d = 500;\n    t.e = 444;\n    t.f = 278;\n    t.g = 500;\n    t.h = 500;\n    t.i = 278;\n    t.j = 278;\n    t.k = 444;\n    t.l = 278;\n    t.m = 722;\n    t.n = 500;\n    t.o = 500;\n    t.p = 500;\n    t.q = 500;\n    t.r = 389;\n    t.s = 389;\n    t.t = 278;\n    t.u = 500;\n    t.v = 444;\n    t.w = 667;\n    t.x = 444;\n    t.y = 444;\n    t.z = 389;\n    t.braceleft = 400;\n    t.bar = 275;\n    t.braceright = 400;\n    t.asciitilde = 541;\n    t.exclamdown = 389;\n    t.cent = 500;\n    t.sterling = 500;\n    t.fraction = 167;\n    t.yen = 500;\n    t.florin = 500;\n    t.section = 500;\n    t.currency = 500;\n    t.quotesingle = 214;\n    t.quotedblleft = 556;\n    t.guillemotleft = 500;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 500;\n    t.fl = 500;\n    t.endash = 500;\n    t.dagger = 500;\n    t.daggerdbl = 500;\n    t.periodcentered = 250;\n    t.paragraph = 523;\n    t.bullet = 350;\n    t.quotesinglbase = 333;\n    t.quotedblbase = 556;\n    t.quotedblright = 556;\n    t.guillemotright = 500;\n    t.ellipsis = 889;\n    t.perthousand = 1000;\n    t.questiondown = 500;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 889;\n    t.AE = 889;\n    t.ordfeminine = 276;\n    t.Lslash = 556;\n    t.Oslash = 722;\n    t.OE = 944;\n    t.ordmasculine = 310;\n    t.ae = 667;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 500;\n    t.oe = 667;\n    t.germandbls = 500;\n    t.Idieresis = 333;\n    t.eacute = 444;\n    t.abreve = 500;\n    t.uhungarumlaut = 500;\n    t.ecaron = 444;\n    t.Ydieresis = 556;\n    t.divide = 675;\n    t.Yacute = 556;\n    t.Acircumflex = 611;\n    t.aacute = 500;\n    t.Ucircumflex = 722;\n    t.yacute = 444;\n    t.scommaaccent = 389;\n    t.ecircumflex = 444;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 500;\n    t.Uacute = 722;\n    t.uogonek = 500;\n    t.Edieresis = 611;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 760;\n    t.Emacron = 611;\n    t.ccaron = 444;\n    t.aring = 500;\n    t.Ncommaaccent = 667;\n    t.lacute = 278;\n    t.agrave = 500;\n    t.Tcommaaccent = 556;\n    t.Cacute = 667;\n    t.atilde = 500;\n    t.Edotaccent = 611;\n    t.scaron = 389;\n    t.scedilla = 389;\n    t.iacute = 278;\n    t.lozenge = 471;\n    t.Rcaron = 611;\n    t.Gcommaaccent = 722;\n    t.ucircumflex = 500;\n    t.acircumflex = 500;\n    t.Amacron = 611;\n    t.rcaron = 389;\n    t.ccedilla = 444;\n    t.Zdotaccent = 556;\n    t.Thorn = 611;\n    t.Omacron = 722;\n    t.Racute = 611;\n    t.Sacute = 500;\n    t.dcaron = 544;\n    t.Umacron = 722;\n    t.uring = 500;\n    t.threesuperior = 300;\n    t.Ograve = 722;\n    t.Agrave = 611;\n    t.Abreve = 611;\n    t.multiply = 675;\n    t.uacute = 500;\n    t.Tcaron = 556;\n    t.partialdiff = 476;\n    t.ydieresis = 444;\n    t.Nacute = 667;\n    t.icircumflex = 278;\n    t.Ecircumflex = 611;\n    t.adieresis = 500;\n    t.edieresis = 444;\n    t.cacute = 444;\n    t.nacute = 500;\n    t.umacron = 500;\n    t.Ncaron = 667;\n    t.Iacute = 333;\n    t.plusminus = 675;\n    t.brokenbar = 275;\n    t.registered = 760;\n    t.Gbreve = 722;\n    t.Idotaccent = 333;\n    t.summation = 600;\n    t.Egrave = 611;\n    t.racute = 389;\n    t.omacron = 500;\n    t.Zacute = 556;\n    t.Zcaron = 556;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 667;\n    t.lcommaaccent = 278;\n    t.tcaron = 300;\n    t.eogonek = 444;\n    t.Uogonek = 722;\n    t.Aacute = 611;\n    t.Adieresis = 611;\n    t.egrave = 444;\n    t.zacute = 389;\n    t.iogonek = 278;\n    t.Oacute = 722;\n    t.oacute = 500;\n    t.amacron = 500;\n    t.sacute = 389;\n    t.idieresis = 278;\n    t.Ocircumflex = 722;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 500;\n    t.twosuperior = 300;\n    t.Odieresis = 722;\n    t.mu = 500;\n    t.igrave = 278;\n    t.ohungarumlaut = 500;\n    t.Eogonek = 611;\n    t.dcroat = 500;\n    t.threequarters = 750;\n    t.Scedilla = 500;\n    t.lcaron = 300;\n    t.Kcommaaccent = 667;\n    t.Lacute = 556;\n    t.trademark = 980;\n    t.edotaccent = 444;\n    t.Igrave = 333;\n    t.Imacron = 333;\n    t.Lcaron = 611;\n    t.onehalf = 750;\n    t.lessequal = 549;\n    t.ocircumflex = 500;\n    t.ntilde = 500;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 611;\n    t.emacron = 444;\n    t.gbreve = 500;\n    t.onequarter = 750;\n    t.Scaron = 500;\n    t.Scommaaccent = 500;\n    t.Ohungarumlaut = 722;\n    t.degree = 400;\n    t.ograve = 500;\n    t.Ccaron = 667;\n    t.ugrave = 500;\n    t.radical = 453;\n    t.Dcaron = 722;\n    t.rcommaaccent = 389;\n    t.Ntilde = 667;\n    t.otilde = 500;\n    t.Rcommaaccent = 611;\n    t.Lcommaaccent = 556;\n    t.Atilde = 611;\n    t.Aogonek = 611;\n    t.Aring = 611;\n    t.Otilde = 722;\n    t.zdotaccent = 389;\n    t.Ecaron = 611;\n    t.Iogonek = 333;\n    t.kcommaaccent = 444;\n    t.minus = 675;\n    t.Icircumflex = 333;\n    t.ncaron = 500;\n    t.tcommaaccent = 278;\n    t.logicalnot = 675;\n    t.odieresis = 500;\n    t.udieresis = 500;\n    t.notequal = 549;\n    t.gcommaaccent = 500;\n    t.eth = 500;\n    t.zcaron = 389;\n    t.ncommaaccent = 500;\n    t.onesuperior = 300;\n    t.imacron = 278;\n    t.Euro = 500;\n  });\n  t.ZapfDingbats = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 278;\n    t.a1 = 974;\n    t.a2 = 961;\n    t.a202 = 974;\n    t.a3 = 980;\n    t.a4 = 719;\n    t.a5 = 789;\n    t.a119 = 790;\n    t.a118 = 791;\n    t.a117 = 690;\n    t.a11 = 960;\n    t.a12 = 939;\n    t.a13 = 549;\n    t.a14 = 855;\n    t.a15 = 911;\n    t.a16 = 933;\n    t.a105 = 911;\n    t.a17 = 945;\n    t.a18 = 974;\n    t.a19 = 755;\n    t.a20 = 846;\n    t.a21 = 762;\n    t.a22 = 761;\n    t.a23 = 571;\n    t.a24 = 677;\n    t.a25 = 763;\n    t.a26 = 760;\n    t.a27 = 759;\n    t.a28 = 754;\n    t.a6 = 494;\n    t.a7 = 552;\n    t.a8 = 537;\n    t.a9 = 577;\n    t.a10 = 692;\n    t.a29 = 786;\n    t.a30 = 788;\n    t.a31 = 788;\n    t.a32 = 790;\n    t.a33 = 793;\n    t.a34 = 794;\n    t.a35 = 816;\n    t.a36 = 823;\n    t.a37 = 789;\n    t.a38 = 841;\n    t.a39 = 823;\n    t.a40 = 833;\n    t.a41 = 816;\n    t.a42 = 831;\n    t.a43 = 923;\n    t.a44 = 744;\n    t.a45 = 723;\n    t.a46 = 749;\n    t.a47 = 790;\n    t.a48 = 792;\n    t.a49 = 695;\n    t.a50 = 776;\n    t.a51 = 768;\n    t.a52 = 792;\n    t.a53 = 759;\n    t.a54 = 707;\n    t.a55 = 708;\n    t.a56 = 682;\n    t.a57 = 701;\n    t.a58 = 826;\n    t.a59 = 815;\n    t.a60 = 789;\n    t.a61 = 789;\n    t.a62 = 707;\n    t.a63 = 687;\n    t.a64 = 696;\n    t.a65 = 689;\n    t.a66 = 786;\n    t.a67 = 787;\n    t.a68 = 713;\n    t.a69 = 791;\n    t.a70 = 785;\n    t.a71 = 791;\n    t.a72 = 873;\n    t.a73 = 761;\n    t.a74 = 762;\n    t.a203 = 762;\n    t.a75 = 759;\n    t.a204 = 759;\n    t.a76 = 892;\n    t.a77 = 892;\n    t.a78 = 788;\n    t.a79 = 784;\n    t.a81 = 438;\n    t.a82 = 138;\n    t.a83 = 277;\n    t.a84 = 415;\n    t.a97 = 392;\n    t.a98 = 392;\n    t.a99 = 668;\n    t.a100 = 668;\n    t.a89 = 390;\n    t.a90 = 390;\n    t.a93 = 317;\n    t.a94 = 317;\n    t.a91 = 276;\n    t.a92 = 276;\n    t.a205 = 509;\n    t.a85 = 509;\n    t.a206 = 410;\n    t.a86 = 410;\n    t.a87 = 234;\n    t.a88 = 234;\n    t.a95 = 334;\n    t.a96 = 334;\n    t.a101 = 732;\n    t.a102 = 544;\n    t.a103 = 544;\n    t.a104 = 910;\n    t.a106 = 667;\n    t.a107 = 760;\n    t.a108 = 760;\n    t.a112 = 776;\n    t.a111 = 595;\n    t.a110 = 694;\n    t.a109 = 626;\n    t.a120 = 788;\n    t.a121 = 788;\n    t.a122 = 788;\n    t.a123 = 788;\n    t.a124 = 788;\n    t.a125 = 788;\n    t.a126 = 788;\n    t.a127 = 788;\n    t.a128 = 788;\n    t.a129 = 788;\n    t.a130 = 788;\n    t.a131 = 788;\n    t.a132 = 788;\n    t.a133 = 788;\n    t.a134 = 788;\n    t.a135 = 788;\n    t.a136 = 788;\n    t.a137 = 788;\n    t.a138 = 788;\n    t.a139 = 788;\n    t.a140 = 788;\n    t.a141 = 788;\n    t.a142 = 788;\n    t.a143 = 788;\n    t.a144 = 788;\n    t.a145 = 788;\n    t.a146 = 788;\n    t.a147 = 788;\n    t.a148 = 788;\n    t.a149 = 788;\n    t.a150 = 788;\n    t.a151 = 788;\n    t.a152 = 788;\n    t.a153 = 788;\n    t.a154 = 788;\n    t.a155 = 788;\n    t.a156 = 788;\n    t.a157 = 788;\n    t.a158 = 788;\n    t.a159 = 788;\n    t.a160 = 894;\n    t.a161 = 838;\n    t.a163 = 1016;\n    t.a164 = 458;\n    t.a196 = 748;\n    t.a165 = 924;\n    t.a192 = 748;\n    t.a166 = 918;\n    t.a167 = 927;\n    t.a168 = 928;\n    t.a169 = 928;\n    t.a170 = 834;\n    t.a171 = 873;\n    t.a172 = 828;\n    t.a173 = 924;\n    t.a162 = 924;\n    t.a174 = 917;\n    t.a175 = 930;\n    t.a176 = 931;\n    t.a177 = 463;\n    t.a178 = 883;\n    t.a179 = 836;\n    t.a193 = 836;\n    t.a180 = 867;\n    t.a199 = 867;\n    t.a181 = 696;\n    t.a200 = 696;\n    t.a182 = 874;\n    t.a201 = 874;\n    t.a183 = 760;\n    t.a184 = 946;\n    t.a197 = 771;\n    t.a185 = 865;\n    t.a194 = 771;\n    t.a198 = 888;\n    t.a186 = 967;\n    t.a195 = 888;\n    t.a187 = 831;\n    t.a188 = 873;\n    t.a189 = 927;\n    t.a190 = 970;\n    t.a191 = 918;\n  });\n});\nexports.getMetrics = getMetrics;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/metrics.js\n')},"./node_modules/pdfjs-dist/lib/core/murmurhash3.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.MurmurHash3_64 = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nconst SEED = 0xc3d2e1f0;\nconst MASK_HIGH = 0xffff0000;\nconst MASK_LOW = 0xffff;\n\nclass MurmurHash3_64 {\n  constructor(seed) {\n    this.h1 = seed ? seed & 0xffffffff : SEED;\n    this.h2 = seed ? seed & 0xffffffff : SEED;\n  }\n\n  update(input) {\n    let data, length;\n\n    if ((0, _util.isString)(input)) {\n      data = new Uint8Array(input.length * 2);\n      length = 0;\n\n      for (let i = 0, ii = input.length; i < ii; i++) {\n        const code = input.charCodeAt(i);\n\n        if (code <= 0xff) {\n          data[length++] = code;\n        } else {\n          data[length++] = code >>> 8;\n          data[length++] = code & 0xff;\n        }\n      }\n    } else if ((0, _util.isArrayBuffer)(input)) {\n      data = input.slice();\n      length = data.byteLength;\n    } else {\n      throw new Error("Wrong data format in MurmurHash3_64_update. " + "Input must be a string or array.");\n    }\n\n    const blockCounts = length >> 2;\n    const tailLength = length - blockCounts * 4;\n    const dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);\n    let k1 = 0,\n        k2 = 0;\n    let h1 = this.h1,\n        h2 = this.h2;\n    const C1 = 0xcc9e2d51,\n          C2 = 0x1b873593;\n    const C1_LOW = C1 & MASK_LOW,\n          C2_LOW = C2 & MASK_LOW;\n\n    for (let i = 0; i < blockCounts; i++) {\n      if (i & 1) {\n        k1 = dataUint32[i];\n        k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;\n        k1 = k1 << 15 | k1 >>> 17;\n        k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;\n        h1 ^= k1;\n        h1 = h1 << 13 | h1 >>> 19;\n        h1 = h1 * 5 + 0xe6546b64;\n      } else {\n        k2 = dataUint32[i];\n        k2 = k2 * C1 & MASK_HIGH | k2 * C1_LOW & MASK_LOW;\n        k2 = k2 << 15 | k2 >>> 17;\n        k2 = k2 * C2 & MASK_HIGH | k2 * C2_LOW & MASK_LOW;\n        h2 ^= k2;\n        h2 = h2 << 13 | h2 >>> 19;\n        h2 = h2 * 5 + 0xe6546b64;\n      }\n    }\n\n    k1 = 0;\n\n    switch (tailLength) {\n      case 3:\n        k1 ^= data[blockCounts * 4 + 2] << 16;\n\n      case 2:\n        k1 ^= data[blockCounts * 4 + 1] << 8;\n\n      case 1:\n        k1 ^= data[blockCounts * 4];\n        k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;\n        k1 = k1 << 15 | k1 >>> 17;\n        k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;\n\n        if (blockCounts & 1) {\n          h1 ^= k1;\n        } else {\n          h2 ^= k1;\n        }\n\n    }\n\n    this.h1 = h1;\n    this.h2 = h2;\n  }\n\n  hexdigest() {\n    let h1 = this.h1,\n        h2 = this.h2;\n    h1 ^= h2 >>> 1;\n    h1 = h1 * 0xed558ccd & MASK_HIGH | h1 * 0x8ccd & MASK_LOW;\n    h2 = h2 * 0xff51afd7 & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xafd7ed55 & MASK_HIGH) >>> 16;\n    h1 ^= h2 >>> 1;\n    h1 = h1 * 0x1a85ec53 & MASK_HIGH | h1 * 0xec53 & MASK_LOW;\n    h2 = h2 * 0xc4ceb9fe & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xb9fe1a85 & MASK_HIGH) >>> 16;\n    h1 ^= h2 >>> 1;\n    const hex1 = (h1 >>> 0).toString(16),\n          hex2 = (h2 >>> 0).toString(16);\n    return hex1.padStart(8, "0") + hex2.padStart(8, "0");\n  }\n\n}\n\nexports.MurmurHash3_64 = MurmurHash3_64;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGRmanMtZGlzdC9saWIvY29yZS9tdXJtdXJoYXNoMy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1NpbXBsZVBkZkFuYWx5emVyLy4vbm9kZV9tb2R1bGVzL3BkZmpzLWRpc3QvbGliL2NvcmUvbXVybXVyaGFzaDMuanM/N2IyNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNzdGFydCBUaGUgZm9sbG93aW5nIGlzIHRoZSBlbnRpcmUgbGljZW5zZSBub3RpY2UgZm9yIHRoZVxuICogSmF2YXNjcmlwdCBjb2RlIGluIHRoaXMgcGFnZVxuICpcbiAqIENvcHlyaWdodCAyMDIwIE1vemlsbGEgRm91bmRhdGlvblxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBAbGljZW5kIFRoZSBhYm92ZSBpcyB0aGUgZW50aXJlIGxpY2Vuc2Ugbm90aWNlIGZvciB0aGVcbiAqIEphdmFzY3JpcHQgY29kZSBpbiB0aGlzIHBhZ2VcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLk11cm11ckhhc2gzXzY0ID0gdm9pZCAwO1xuXG52YXIgX3V0aWwgPSByZXF1aXJlKFwiLi4vc2hhcmVkL3V0aWwuanNcIik7XG5cbmNvbnN0IFNFRUQgPSAweGMzZDJlMWYwO1xuY29uc3QgTUFTS19ISUdIID0gMHhmZmZmMDAwMDtcbmNvbnN0IE1BU0tfTE9XID0gMHhmZmZmO1xuXG5jbGFzcyBNdXJtdXJIYXNoM182NCB7XG4gIGNvbnN0cnVjdG9yKHNlZWQpIHtcbiAgICB0aGlzLmgxID0gc2VlZCA/IHNlZWQgJiAweGZmZmZmZmZmIDogU0VFRDtcbiAgICB0aGlzLmgyID0gc2VlZCA/IHNlZWQgJiAweGZmZmZmZmZmIDogU0VFRDtcbiAgfVxuXG4gIHVwZGF0ZShpbnB1dCkge1xuICAgIGxldCBkYXRhLCBsZW5ndGg7XG5cbiAgICBpZiAoKDAsIF91dGlsLmlzU3RyaW5nKShpbnB1dCkpIHtcbiAgICAgIGRhdGEgPSBuZXcgVWludDhBcnJheShpbnB1dC5sZW5ndGggKiAyKTtcbiAgICAgIGxlbmd0aCA9IDA7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGlucHV0Lmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgY29uc3QgY29kZSA9IGlucHV0LmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgICAgaWYgKGNvZGUgPD0gMHhmZikge1xuICAgICAgICAgIGRhdGFbbGVuZ3RoKytdID0gY29kZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRhW2xlbmd0aCsrXSA9IGNvZGUgPj4+IDg7XG4gICAgICAgICAgZGF0YVtsZW5ndGgrK10gPSBjb2RlICYgMHhmZjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoKDAsIF91dGlsLmlzQXJyYXlCdWZmZXIpKGlucHV0KSkge1xuICAgICAgZGF0YSA9IGlucHV0LnNsaWNlKCk7XG4gICAgICBsZW5ndGggPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIldyb25nIGRhdGEgZm9ybWF0IGluIE11cm11ckhhc2gzXzY0X3VwZGF0ZS4gXCIgKyBcIklucHV0IG11c3QgYmUgYSBzdHJpbmcgb3IgYXJyYXkuXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGJsb2NrQ291bnRzID0gbGVuZ3RoID4+IDI7XG4gICAgY29uc3QgdGFpbExlbmd0aCA9IGxlbmd0aCAtIGJsb2NrQ291bnRzICogNDtcbiAgICBjb25zdCBkYXRhVWludDMyID0gbmV3IFVpbnQzMkFycmF5KGRhdGEuYnVmZmVyLCAwLCBibG9ja0NvdW50cyk7XG4gICAgbGV0IGsxID0gMCxcbiAgICAgICAgazIgPSAwO1xuICAgIGxldCBoMSA9IHRoaXMuaDEsXG4gICAgICAgIGgyID0gdGhpcy5oMjtcbiAgICBjb25zdCBDMSA9IDB4Y2M5ZTJkNTEsXG4gICAgICAgICAgQzIgPSAweDFiODczNTkzO1xuICAgIGNvbnN0IEMxX0xPVyA9IEMxICYgTUFTS19MT1csXG4gICAgICAgICAgQzJfTE9XID0gQzIgJiBNQVNLX0xPVztcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmxvY2tDb3VudHM7IGkrKykge1xuICAgICAgaWYgKGkgJiAxKSB7XG4gICAgICAgIGsxID0gZGF0YVVpbnQzMltpXTtcbiAgICAgICAgazEgPSBrMSAqIEMxICYgTUFTS19ISUdIIHwgazEgKiBDMV9MT1cgJiBNQVNLX0xPVztcbiAgICAgICAgazEgPSBrMSA8PCAxNSB8IGsxID4+PiAxNztcbiAgICAgICAgazEgPSBrMSAqIEMyICYgTUFTS19ISUdIIHwgazEgKiBDMl9MT1cgJiBNQVNLX0xPVztcbiAgICAgICAgaDEgXj0gazE7XG4gICAgICAgIGgxID0gaDEgPDwgMTMgfCBoMSA+Pj4gMTk7XG4gICAgICAgIGgxID0gaDEgKiA1ICsgMHhlNjU0NmI2NDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGsyID0gZGF0YVVpbnQzMltpXTtcbiAgICAgICAgazIgPSBrMiAqIEMxICYgTUFTS19ISUdIIHwgazIgKiBDMV9MT1cgJiBNQVNLX0xPVztcbiAgICAgICAgazIgPSBrMiA8PCAxNSB8IGsyID4+PiAxNztcbiAgICAgICAgazIgPSBrMiAqIEMyICYgTUFTS19ISUdIIHwgazIgKiBDMl9MT1cgJiBNQVNLX0xPVztcbiAgICAgICAgaDIgXj0gazI7XG4gICAgICAgIGgyID0gaDIgPDwgMTMgfCBoMiA+Pj4gMTk7XG4gICAgICAgIGgyID0gaDIgKiA1ICsgMHhlNjU0NmI2NDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBrMSA9IDA7XG5cbiAgICBzd2l0Y2ggKHRhaWxMZW5ndGgpIHtcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgazEgXj0gZGF0YVtibG9ja0NvdW50cyAqIDQgKyAyXSA8PCAxNjtcblxuICAgICAgY2FzZSAyOlxuICAgICAgICBrMSBePSBkYXRhW2Jsb2NrQ291bnRzICogNCArIDFdIDw8IDg7XG5cbiAgICAgIGNhc2UgMTpcbiAgICAgICAgazEgXj0gZGF0YVtibG9ja0NvdW50cyAqIDRdO1xuICAgICAgICBrMSA9IGsxICogQzEgJiBNQVNLX0hJR0ggfCBrMSAqIEMxX0xPVyAmIE1BU0tfTE9XO1xuICAgICAgICBrMSA9IGsxIDw8IDE1IHwgazEgPj4+IDE3O1xuICAgICAgICBrMSA9IGsxICogQzIgJiBNQVNLX0hJR0ggfCBrMSAqIEMyX0xPVyAmIE1BU0tfTE9XO1xuXG4gICAgICAgIGlmIChibG9ja0NvdW50cyAmIDEpIHtcbiAgICAgICAgICBoMSBePSBrMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoMiBePSBrMTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgdGhpcy5oMSA9IGgxO1xuICAgIHRoaXMuaDIgPSBoMjtcbiAgfVxuXG4gIGhleGRpZ2VzdCgpIHtcbiAgICBsZXQgaDEgPSB0aGlzLmgxLFxuICAgICAgICBoMiA9IHRoaXMuaDI7XG4gICAgaDEgXj0gaDIgPj4+IDE7XG4gICAgaDEgPSBoMSAqIDB4ZWQ1NThjY2QgJiBNQVNLX0hJR0ggfCBoMSAqIDB4OGNjZCAmIE1BU0tfTE9XO1xuICAgIGgyID0gaDIgKiAweGZmNTFhZmQ3ICYgTUFTS19ISUdIIHwgKChoMiA8PCAxNiB8IGgxID4+PiAxNikgKiAweGFmZDdlZDU1ICYgTUFTS19ISUdIKSA+Pj4gMTY7XG4gICAgaDEgXj0gaDIgPj4+IDE7XG4gICAgaDEgPSBoMSAqIDB4MWE4NWVjNTMgJiBNQVNLX0hJR0ggfCBoMSAqIDB4ZWM1MyAmIE1BU0tfTE9XO1xuICAgIGgyID0gaDIgKiAweGM0Y2ViOWZlICYgTUFTS19ISUdIIHwgKChoMiA8PCAxNiB8IGgxID4+PiAxNikgKiAweGI5ZmUxYTg1ICYgTUFTS19ISUdIKSA+Pj4gMTY7XG4gICAgaDEgXj0gaDIgPj4+IDE7XG4gICAgY29uc3QgaGV4MSA9IChoMSA+Pj4gMCkudG9TdHJpbmcoMTYpLFxuICAgICAgICAgIGhleDIgPSAoaDIgPj4+IDApLnRvU3RyaW5nKDE2KTtcbiAgICByZXR1cm4gaGV4MS5wYWRTdGFydCg4LCBcIjBcIikgKyBoZXgyLnBhZFN0YXJ0KDgsIFwiMFwiKTtcbiAgfVxuXG59XG5cbmV4cG9ydHMuTXVybXVySGFzaDNfNjQgPSBNdXJtdXJIYXNoM182NDsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/murmurhash3.js\n')},"./node_modules/pdfjs-dist/lib/core/obj.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.XRef = exports.ObjectLoader = exports.FileSpec = exports.Catalog = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _primitives = __webpack_require__(/*! ./primitives.js */ "./node_modules/pdfjs-dist/lib/core/primitives.js");\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nvar _parser = __webpack_require__(/*! ./parser.js */ "./node_modules/pdfjs-dist/lib/core/parser.js");\n\nvar _crypto = __webpack_require__(/*! ./crypto.js */ "./node_modules/pdfjs-dist/lib/core/crypto.js");\n\nvar _colorspace = __webpack_require__(/*! ./colorspace.js */ "./node_modules/pdfjs-dist/lib/core/colorspace.js");\n\nvar _image_utils = __webpack_require__(/*! ./image_utils.js */ "./node_modules/pdfjs-dist/lib/core/image_utils.js");\n\nfunction fetchDestination(dest) {\n  return (0, _primitives.isDict)(dest) ? dest.get("D") : dest;\n}\n\nclass Catalog {\n  constructor(pdfManager, xref) {\n    this.pdfManager = pdfManager;\n    this.xref = xref;\n    this._catDict = xref.getCatalogObj();\n\n    if (!(0, _primitives.isDict)(this._catDict)) {\n      throw new _util.FormatError("Catalog object is not a dictionary.");\n    }\n\n    this.fontCache = new _primitives.RefSetCache();\n    this.builtInCMapCache = new Map();\n    this.globalImageCache = new _image_utils.GlobalImageCache();\n    this.pageKidsCountCache = new _primitives.RefSetCache();\n    this.nonBlendModesSet = new _primitives.RefSet();\n  }\n\n  get version() {\n    const version = this._catDict.get("Version");\n\n    if (!(0, _primitives.isName)(version)) {\n      return (0, _util.shadow)(this, "version", null);\n    }\n\n    return (0, _util.shadow)(this, "version", version.name);\n  }\n\n  get collection() {\n    let collection = null;\n\n    try {\n      const obj = this._catDict.get("Collection");\n\n      if ((0, _primitives.isDict)(obj) && obj.size > 0) {\n        collection = obj;\n      }\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.info)("Cannot fetch Collection entry; assuming no collection is present.");\n    }\n\n    return (0, _util.shadow)(this, "collection", collection);\n  }\n\n  get acroForm() {\n    let acroForm = null;\n\n    try {\n      const obj = this._catDict.get("AcroForm");\n\n      if ((0, _primitives.isDict)(obj) && obj.size > 0) {\n        acroForm = obj;\n      }\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.info)("Cannot fetch AcroForm entry; assuming no forms are present.");\n    }\n\n    return (0, _util.shadow)(this, "acroForm", acroForm);\n  }\n\n  get metadata() {\n    const streamRef = this._catDict.getRaw("Metadata");\n\n    if (!(0, _primitives.isRef)(streamRef)) {\n      return (0, _util.shadow)(this, "metadata", null);\n    }\n\n    const suppressEncryption = !(this.xref.encrypt && this.xref.encrypt.encryptMetadata);\n    const stream = this.xref.fetch(streamRef, suppressEncryption);\n    let metadata;\n\n    if (stream && (0, _primitives.isDict)(stream.dict)) {\n      const type = stream.dict.get("Type");\n      const subtype = stream.dict.get("Subtype");\n\n      if ((0, _primitives.isName)(type, "Metadata") && (0, _primitives.isName)(subtype, "XML")) {\n        try {\n          metadata = (0, _util.stringToUTF8String)((0, _util.bytesToString)(stream.getBytes()));\n        } catch (e) {\n          if (e instanceof _core_utils.MissingDataException) {\n            throw e;\n          }\n\n          (0, _util.info)("Skipping invalid metadata.");\n        }\n      }\n    }\n\n    return (0, _util.shadow)(this, "metadata", metadata);\n  }\n\n  get markInfo() {\n    let markInfo = null;\n\n    try {\n      markInfo = this._readMarkInfo();\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)("Unable to read mark info.");\n    }\n\n    return (0, _util.shadow)(this, "markInfo", markInfo);\n  }\n\n  _readMarkInfo() {\n    const obj = this._catDict.get("MarkInfo");\n\n    if (!(0, _primitives.isDict)(obj)) {\n      return null;\n    }\n\n    const markInfo = Object.assign(Object.create(null), {\n      Marked: false,\n      UserProperties: false,\n      Suspects: false\n    });\n\n    for (const key in markInfo) {\n      if (!obj.has(key)) {\n        continue;\n      }\n\n      const value = obj.get(key);\n\n      if (!(0, _util.isBool)(value)) {\n        continue;\n      }\n\n      markInfo[key] = value;\n    }\n\n    return markInfo;\n  }\n\n  get toplevelPagesDict() {\n    const pagesObj = this._catDict.get("Pages");\n\n    if (!(0, _primitives.isDict)(pagesObj)) {\n      throw new _util.FormatError("Invalid top-level pages dictionary.");\n    }\n\n    return (0, _util.shadow)(this, "toplevelPagesDict", pagesObj);\n  }\n\n  get documentOutline() {\n    let obj = null;\n\n    try {\n      obj = this._readDocumentOutline();\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)("Unable to read document outline.");\n    }\n\n    return (0, _util.shadow)(this, "documentOutline", obj);\n  }\n\n  _readDocumentOutline() {\n    let obj = this._catDict.get("Outlines");\n\n    if (!(0, _primitives.isDict)(obj)) {\n      return null;\n    }\n\n    obj = obj.getRaw("First");\n\n    if (!(0, _primitives.isRef)(obj)) {\n      return null;\n    }\n\n    const root = {\n      items: []\n    };\n    const queue = [{\n      obj,\n      parent: root\n    }];\n    const processed = new _primitives.RefSet();\n    processed.put(obj);\n    const xref = this.xref,\n          blackColor = new Uint8ClampedArray(3);\n\n    while (queue.length > 0) {\n      const i = queue.shift();\n      const outlineDict = xref.fetchIfRef(i.obj);\n\n      if (outlineDict === null) {\n        continue;\n      }\n\n      if (!outlineDict.has("Title")) {\n        throw new _util.FormatError("Invalid outline item encountered.");\n      }\n\n      const data = {\n        url: null,\n        dest: null\n      };\n      Catalog.parseDestDictionary({\n        destDict: outlineDict,\n        resultObj: data,\n        docBaseUrl: this.pdfManager.docBaseUrl\n      });\n      const title = outlineDict.get("Title");\n      const flags = outlineDict.get("F") || 0;\n      const color = outlineDict.getArray("C");\n      const count = outlineDict.get("Count");\n      let rgbColor = blackColor;\n\n      if (Array.isArray(color) && color.length === 3 && (color[0] !== 0 || color[1] !== 0 || color[2] !== 0)) {\n        rgbColor = _colorspace.ColorSpace.singletons.rgb.getRgb(color, 0);\n      }\n\n      const outlineItem = {\n        dest: data.dest,\n        url: data.url,\n        unsafeUrl: data.unsafeUrl,\n        newWindow: data.newWindow,\n        title: (0, _util.stringToPDFString)(title),\n        color: rgbColor,\n        count: Number.isInteger(count) ? count : undefined,\n        bold: !!(flags & 2),\n        italic: !!(flags & 1),\n        items: []\n      };\n      i.parent.items.push(outlineItem);\n      obj = outlineDict.getRaw("First");\n\n      if ((0, _primitives.isRef)(obj) && !processed.has(obj)) {\n        queue.push({\n          obj,\n          parent: outlineItem\n        });\n        processed.put(obj);\n      }\n\n      obj = outlineDict.getRaw("Next");\n\n      if ((0, _primitives.isRef)(obj) && !processed.has(obj)) {\n        queue.push({\n          obj,\n          parent: i.parent\n        });\n        processed.put(obj);\n      }\n    }\n\n    return root.items.length > 0 ? root.items : null;\n  }\n\n  get permissions() {\n    let permissions = null;\n\n    try {\n      permissions = this._readPermissions();\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)("Unable to read permissions.");\n    }\n\n    return (0, _util.shadow)(this, "permissions", permissions);\n  }\n\n  _readPermissions() {\n    const encrypt = this.xref.trailer.get("Encrypt");\n\n    if (!(0, _primitives.isDict)(encrypt)) {\n      return null;\n    }\n\n    let flags = encrypt.get("P");\n\n    if (!(0, _util.isNum)(flags)) {\n      return null;\n    }\n\n    flags += 2 ** 32;\n    const permissions = [];\n\n    for (const key in _util.PermissionFlag) {\n      const value = _util.PermissionFlag[key];\n\n      if (flags & value) {\n        permissions.push(value);\n      }\n    }\n\n    return permissions;\n  }\n\n  get optionalContentConfig() {\n    let config = null;\n\n    try {\n      const properties = this._catDict.get("OCProperties");\n\n      if (!properties) {\n        return (0, _util.shadow)(this, "optionalContentConfig", null);\n      }\n\n      const defaultConfig = properties.get("D");\n\n      if (!defaultConfig) {\n        return (0, _util.shadow)(this, "optionalContentConfig", null);\n      }\n\n      const groupsData = properties.get("OCGs");\n\n      if (!Array.isArray(groupsData)) {\n        return (0, _util.shadow)(this, "optionalContentConfig", null);\n      }\n\n      const groups = [];\n      const groupRefs = [];\n\n      for (const groupRef of groupsData) {\n        if (!(0, _primitives.isRef)(groupRef)) {\n          continue;\n        }\n\n        groupRefs.push(groupRef);\n        const group = this.xref.fetchIfRef(groupRef);\n        groups.push({\n          id: groupRef.toString(),\n          name: (0, _util.isString)(group.get("Name")) ? (0, _util.stringToPDFString)(group.get("Name")) : null,\n          intent: (0, _util.isString)(group.get("Intent")) ? (0, _util.stringToPDFString)(group.get("Intent")) : null\n        });\n      }\n\n      config = this._readOptionalContentConfig(defaultConfig, groupRefs);\n      config.groups = groups;\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)(`Unable to read optional content config: ${ex}`);\n    }\n\n    return (0, _util.shadow)(this, "optionalContentConfig", config);\n  }\n\n  _readOptionalContentConfig(config, contentGroupRefs) {\n    function parseOnOff(refs) {\n      const onParsed = [];\n\n      if (Array.isArray(refs)) {\n        for (const value of refs) {\n          if (!(0, _primitives.isRef)(value)) {\n            continue;\n          }\n\n          if (contentGroupRefs.includes(value)) {\n            onParsed.push(value.toString());\n          }\n        }\n      }\n\n      return onParsed;\n    }\n\n    function parseOrder(refs, nestedLevels = 0) {\n      if (!Array.isArray(refs)) {\n        return null;\n      }\n\n      const order = [];\n\n      for (const value of refs) {\n        if ((0, _primitives.isRef)(value) && contentGroupRefs.includes(value)) {\n          parsedOrderRefs.put(value);\n          order.push(value.toString());\n          continue;\n        }\n\n        const nestedOrder = parseNestedOrder(value, nestedLevels);\n\n        if (nestedOrder) {\n          order.push(nestedOrder);\n        }\n      }\n\n      if (nestedLevels > 0) {\n        return order;\n      }\n\n      const hiddenGroups = [];\n\n      for (const groupRef of contentGroupRefs) {\n        if (parsedOrderRefs.has(groupRef)) {\n          continue;\n        }\n\n        hiddenGroups.push(groupRef.toString());\n      }\n\n      if (hiddenGroups.length) {\n        order.push({\n          name: null,\n          order: hiddenGroups\n        });\n      }\n\n      return order;\n    }\n\n    function parseNestedOrder(ref, nestedLevels) {\n      if (++nestedLevels > MAX_NESTED_LEVELS) {\n        (0, _util.warn)("parseNestedOrder - reached MAX_NESTED_LEVELS.");\n        return null;\n      }\n\n      const value = xref.fetchIfRef(ref);\n\n      if (!Array.isArray(value)) {\n        return null;\n      }\n\n      const nestedName = xref.fetchIfRef(value[0]);\n\n      if (typeof nestedName !== "string") {\n        return null;\n      }\n\n      const nestedOrder = parseOrder(value.slice(1), nestedLevels);\n\n      if (!nestedOrder || !nestedOrder.length) {\n        return null;\n      }\n\n      return {\n        name: (0, _util.stringToPDFString)(nestedName),\n        order: nestedOrder\n      };\n    }\n\n    const xref = this.xref,\n          parsedOrderRefs = new _primitives.RefSet(),\n          MAX_NESTED_LEVELS = 10;\n    return {\n      name: (0, _util.isString)(config.get("Name")) ? (0, _util.stringToPDFString)(config.get("Name")) : null,\n      creator: (0, _util.isString)(config.get("Creator")) ? (0, _util.stringToPDFString)(config.get("Creator")) : null,\n      baseState: (0, _primitives.isName)(config.get("BaseState")) ? config.get("BaseState").name : null,\n      on: parseOnOff(config.get("ON")),\n      off: parseOnOff(config.get("OFF")),\n      order: parseOrder(config.get("Order")),\n      groups: null\n    };\n  }\n\n  get numPages() {\n    const obj = this.toplevelPagesDict.get("Count");\n\n    if (!Number.isInteger(obj)) {\n      throw new _util.FormatError("Page count in top-level pages dictionary is not an integer.");\n    }\n\n    return (0, _util.shadow)(this, "numPages", obj);\n  }\n\n  get destinations() {\n    const obj = this._readDests(),\n          dests = Object.create(null);\n\n    if (obj instanceof NameTree) {\n      const names = obj.getAll();\n\n      for (const name in names) {\n        dests[name] = fetchDestination(names[name]);\n      }\n    } else if (obj instanceof _primitives.Dict) {\n      obj.forEach(function (key, value) {\n        if (value) {\n          dests[key] = fetchDestination(value);\n        }\n      });\n    }\n\n    return (0, _util.shadow)(this, "destinations", dests);\n  }\n\n  getDestination(destinationId) {\n    const obj = this._readDests();\n\n    if (obj instanceof NameTree || obj instanceof _primitives.Dict) {\n      return fetchDestination(obj.get(destinationId) || null);\n    }\n\n    return null;\n  }\n\n  _readDests() {\n    const obj = this._catDict.get("Names");\n\n    if (obj && obj.has("Dests")) {\n      return new NameTree(obj.getRaw("Dests"), this.xref);\n    } else if (this._catDict.has("Dests")) {\n      return this._catDict.get("Dests");\n    }\n\n    return undefined;\n  }\n\n  get pageLabels() {\n    let obj = null;\n\n    try {\n      obj = this._readPageLabels();\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)("Unable to read page labels.");\n    }\n\n    return (0, _util.shadow)(this, "pageLabels", obj);\n  }\n\n  _readPageLabels() {\n    const obj = this._catDict.getRaw("PageLabels");\n\n    if (!obj) {\n      return null;\n    }\n\n    const pageLabels = new Array(this.numPages);\n    let style = null,\n        prefix = "";\n    const numberTree = new NumberTree(obj, this.xref);\n    const nums = numberTree.getAll();\n    let currentLabel = "",\n        currentIndex = 1;\n\n    for (let i = 0, ii = this.numPages; i < ii; i++) {\n      if (i in nums) {\n        const labelDict = nums[i];\n\n        if (!(0, _primitives.isDict)(labelDict)) {\n          throw new _util.FormatError("PageLabel is not a dictionary.");\n        }\n\n        if (labelDict.has("Type") && !(0, _primitives.isName)(labelDict.get("Type"), "PageLabel")) {\n          throw new _util.FormatError("Invalid type in PageLabel dictionary.");\n        }\n\n        if (labelDict.has("S")) {\n          const s = labelDict.get("S");\n\n          if (!(0, _primitives.isName)(s)) {\n            throw new _util.FormatError("Invalid style in PageLabel dictionary.");\n          }\n\n          style = s.name;\n        } else {\n          style = null;\n        }\n\n        if (labelDict.has("P")) {\n          const p = labelDict.get("P");\n\n          if (!(0, _util.isString)(p)) {\n            throw new _util.FormatError("Invalid prefix in PageLabel dictionary.");\n          }\n\n          prefix = (0, _util.stringToPDFString)(p);\n        } else {\n          prefix = "";\n        }\n\n        if (labelDict.has("St")) {\n          const st = labelDict.get("St");\n\n          if (!(Number.isInteger(st) && st >= 1)) {\n            throw new _util.FormatError("Invalid start in PageLabel dictionary.");\n          }\n\n          currentIndex = st;\n        } else {\n          currentIndex = 1;\n        }\n      }\n\n      switch (style) {\n        case "D":\n          currentLabel = currentIndex;\n          break;\n\n        case "R":\n        case "r":\n          currentLabel = (0, _core_utils.toRomanNumerals)(currentIndex, style === "r");\n          break;\n\n        case "A":\n        case "a":\n          const LIMIT = 26;\n          const A_UPPER_CASE = 0x41,\n                A_LOWER_CASE = 0x61;\n          const baseCharCode = style === "a" ? A_LOWER_CASE : A_UPPER_CASE;\n          const letterIndex = currentIndex - 1;\n          const character = String.fromCharCode(baseCharCode + letterIndex % LIMIT);\n          const charBuf = [];\n\n          for (let j = 0, jj = letterIndex / LIMIT | 0; j <= jj; j++) {\n            charBuf.push(character);\n          }\n\n          currentLabel = charBuf.join("");\n          break;\n\n        default:\n          if (style) {\n            throw new _util.FormatError(`Invalid style "${style}" in PageLabel dictionary.`);\n          }\n\n          currentLabel = "";\n      }\n\n      pageLabels[i] = prefix + currentLabel;\n      currentIndex++;\n    }\n\n    return pageLabels;\n  }\n\n  get pageLayout() {\n    const obj = this._catDict.get("PageLayout");\n\n    let pageLayout = "";\n\n    if ((0, _primitives.isName)(obj)) {\n      switch (obj.name) {\n        case "SinglePage":\n        case "OneColumn":\n        case "TwoColumnLeft":\n        case "TwoColumnRight":\n        case "TwoPageLeft":\n        case "TwoPageRight":\n          pageLayout = obj.name;\n      }\n    }\n\n    return (0, _util.shadow)(this, "pageLayout", pageLayout);\n  }\n\n  get pageMode() {\n    const obj = this._catDict.get("PageMode");\n\n    let pageMode = "UseNone";\n\n    if ((0, _primitives.isName)(obj)) {\n      switch (obj.name) {\n        case "UseNone":\n        case "UseOutlines":\n        case "UseThumbs":\n        case "FullScreen":\n        case "UseOC":\n        case "UseAttachments":\n          pageMode = obj.name;\n      }\n    }\n\n    return (0, _util.shadow)(this, "pageMode", pageMode);\n  }\n\n  get viewerPreferences() {\n    const ViewerPreferencesValidators = {\n      HideToolbar: _util.isBool,\n      HideMenubar: _util.isBool,\n      HideWindowUI: _util.isBool,\n      FitWindow: _util.isBool,\n      CenterWindow: _util.isBool,\n      DisplayDocTitle: _util.isBool,\n      NonFullScreenPageMode: _primitives.isName,\n      Direction: _primitives.isName,\n      ViewArea: _primitives.isName,\n      ViewClip: _primitives.isName,\n      PrintArea: _primitives.isName,\n      PrintClip: _primitives.isName,\n      PrintScaling: _primitives.isName,\n      Duplex: _primitives.isName,\n      PickTrayByPDFSize: _util.isBool,\n      PrintPageRange: Array.isArray,\n      NumCopies: Number.isInteger\n    };\n\n    const obj = this._catDict.get("ViewerPreferences");\n\n    let prefs = null;\n\n    if ((0, _primitives.isDict)(obj)) {\n      for (const key in ViewerPreferencesValidators) {\n        if (!obj.has(key)) {\n          continue;\n        }\n\n        const value = obj.get(key);\n\n        if (!ViewerPreferencesValidators[key](value)) {\n          (0, _util.info)(`Bad value in ViewerPreferences for "${key}".`);\n          continue;\n        }\n\n        let prefValue;\n\n        switch (key) {\n          case "NonFullScreenPageMode":\n            switch (value.name) {\n              case "UseNone":\n              case "UseOutlines":\n              case "UseThumbs":\n              case "UseOC":\n                prefValue = value.name;\n                break;\n\n              default:\n                prefValue = "UseNone";\n            }\n\n            break;\n\n          case "Direction":\n            switch (value.name) {\n              case "L2R":\n              case "R2L":\n                prefValue = value.name;\n                break;\n\n              default:\n                prefValue = "L2R";\n            }\n\n            break;\n\n          case "ViewArea":\n          case "ViewClip":\n          case "PrintArea":\n          case "PrintClip":\n            switch (value.name) {\n              case "MediaBox":\n              case "CropBox":\n              case "BleedBox":\n              case "TrimBox":\n              case "ArtBox":\n                prefValue = value.name;\n                break;\n\n              default:\n                prefValue = "CropBox";\n            }\n\n            break;\n\n          case "PrintScaling":\n            switch (value.name) {\n              case "None":\n              case "AppDefault":\n                prefValue = value.name;\n                break;\n\n              default:\n                prefValue = "AppDefault";\n            }\n\n            break;\n\n          case "Duplex":\n            switch (value.name) {\n              case "Simplex":\n              case "DuplexFlipShortEdge":\n              case "DuplexFlipLongEdge":\n                prefValue = value.name;\n                break;\n\n              default:\n                prefValue = "None";\n            }\n\n            break;\n\n          case "PrintPageRange":\n            const length = value.length;\n\n            if (length % 2 !== 0) {\n              break;\n            }\n\n            const isValid = value.every((page, i, arr) => {\n              return Number.isInteger(page) && page > 0 && (i === 0 || page >= arr[i - 1]) && page <= this.numPages;\n            });\n\n            if (isValid) {\n              prefValue = value;\n            }\n\n            break;\n\n          case "NumCopies":\n            if (value > 0) {\n              prefValue = value;\n            }\n\n            break;\n\n          default:\n            if (typeof value !== "boolean") {\n              throw new _util.FormatError(`viewerPreferences - expected a boolean value for: ${key}`);\n            }\n\n            prefValue = value;\n        }\n\n        if (prefValue !== undefined) {\n          if (!prefs) {\n            prefs = Object.create(null);\n          }\n\n          prefs[key] = prefValue;\n        } else {\n          (0, _util.info)(`Bad value in ViewerPreferences for "${key}".`);\n        }\n      }\n    }\n\n    return (0, _util.shadow)(this, "viewerPreferences", prefs);\n  }\n\n  get openAction() {\n    const obj = this._catDict.get("OpenAction");\n\n    const openAction = Object.create(null);\n\n    if ((0, _primitives.isDict)(obj)) {\n      const destDict = new _primitives.Dict(this.xref);\n      destDict.set("A", obj);\n      const resultObj = {\n        url: null,\n        dest: null,\n        action: null\n      };\n      Catalog.parseDestDictionary({\n        destDict,\n        resultObj\n      });\n\n      if (Array.isArray(resultObj.dest)) {\n        openAction.dest = resultObj.dest;\n      } else if (resultObj.action) {\n        openAction.action = resultObj.action;\n      }\n    } else if (Array.isArray(obj)) {\n      openAction.dest = obj;\n    }\n\n    return (0, _util.shadow)(this, "openAction", (0, _util.objectSize)(openAction) > 0 ? openAction : null);\n  }\n\n  get attachments() {\n    const obj = this._catDict.get("Names");\n\n    let attachments = null;\n\n    if (obj && obj.has("EmbeddedFiles")) {\n      const nameTree = new NameTree(obj.getRaw("EmbeddedFiles"), this.xref);\n      const names = nameTree.getAll();\n\n      for (const name in names) {\n        const fs = new FileSpec(names[name], this.xref);\n\n        if (!attachments) {\n          attachments = Object.create(null);\n        }\n\n        attachments[(0, _util.stringToPDFString)(name)] = fs.serializable;\n      }\n    }\n\n    return (0, _util.shadow)(this, "attachments", attachments);\n  }\n\n  _collectJavaScript() {\n    const obj = this._catDict.get("Names");\n\n    let javaScript = null;\n\n    function appendIfJavaScriptDict(name, jsDict) {\n      const type = jsDict.get("S");\n\n      if (!(0, _primitives.isName)(type, "JavaScript")) {\n        return;\n      }\n\n      let js = jsDict.get("JS");\n\n      if ((0, _primitives.isStream)(js)) {\n        js = (0, _util.bytesToString)(js.getBytes());\n      } else if (!(0, _util.isString)(js)) {\n        return;\n      }\n\n      if (javaScript === null) {\n        javaScript = Object.create(null);\n      }\n\n      javaScript[name] = (0, _util.stringToPDFString)(js);\n    }\n\n    if (obj && obj.has("JavaScript")) {\n      const nameTree = new NameTree(obj.getRaw("JavaScript"), this.xref);\n      const names = nameTree.getAll();\n\n      for (const name in names) {\n        const jsDict = names[name];\n\n        if ((0, _primitives.isDict)(jsDict)) {\n          appendIfJavaScriptDict(name, jsDict);\n        }\n      }\n    }\n\n    const openAction = this._catDict.get("OpenAction");\n\n    if ((0, _primitives.isDict)(openAction) && (0, _primitives.isName)(openAction.get("S"), "JavaScript")) {\n      appendIfJavaScriptDict("OpenAction", openAction);\n    }\n\n    return javaScript;\n  }\n\n  get javaScript() {\n    const javaScript = this._collectJavaScript();\n\n    return (0, _util.shadow)(this, "javaScript", javaScript ? Object.values(javaScript) : null);\n  }\n\n  get jsActions() {\n    const js = this._collectJavaScript();\n\n    let actions = (0, _core_utils.collectActions)(this.xref, this._catDict, _util.DocumentActionEventType);\n\n    if (!actions && js) {\n      actions = Object.create(null);\n    }\n\n    if (actions && js) {\n      for (const [key, val] of Object.entries(js)) {\n        if (key in actions) {\n          actions[key].push(val);\n        } else {\n          actions[key] = [val];\n        }\n      }\n    }\n\n    return (0, _util.shadow)(this, "jsActions", actions);\n  }\n\n  fontFallback(id, handler) {\n    const promises = [];\n    this.fontCache.forEach(function (promise) {\n      promises.push(promise);\n    });\n    return Promise.all(promises).then(translatedFonts => {\n      for (const translatedFont of translatedFonts) {\n        if (translatedFont.loadedName === id) {\n          translatedFont.fallback(handler);\n          return;\n        }\n      }\n    });\n  }\n\n  cleanup(manuallyTriggered = false) {\n    (0, _primitives.clearPrimitiveCaches)();\n    this.globalImageCache.clear(manuallyTriggered);\n    this.pageKidsCountCache.clear();\n    this.nonBlendModesSet.clear();\n    const promises = [];\n    this.fontCache.forEach(function (promise) {\n      promises.push(promise);\n    });\n    return Promise.all(promises).then(translatedFonts => {\n      for (const {\n        dict\n      } of translatedFonts) {\n        delete dict.cacheKey;\n      }\n\n      this.fontCache.clear();\n      this.builtInCMapCache.clear();\n    });\n  }\n\n  getPageDict(pageIndex) {\n    const capability = (0, _util.createPromiseCapability)();\n    const nodesToVisit = [this._catDict.getRaw("Pages")];\n    const visitedNodes = new _primitives.RefSet();\n    const xref = this.xref,\n          pageKidsCountCache = this.pageKidsCountCache;\n    let count,\n        currentPageIndex = 0;\n\n    function next() {\n      while (nodesToVisit.length) {\n        const currentNode = nodesToVisit.pop();\n\n        if ((0, _primitives.isRef)(currentNode)) {\n          count = pageKidsCountCache.get(currentNode);\n\n          if (count > 0 && currentPageIndex + count < pageIndex) {\n            currentPageIndex += count;\n            continue;\n          }\n\n          if (visitedNodes.has(currentNode)) {\n            capability.reject(new _util.FormatError("Pages tree contains circular reference."));\n            return;\n          }\n\n          visitedNodes.put(currentNode);\n          xref.fetchAsync(currentNode).then(function (obj) {\n            if ((0, _primitives.isDict)(obj, "Page") || (0, _primitives.isDict)(obj) && !obj.has("Kids")) {\n              if (pageIndex === currentPageIndex) {\n                if (currentNode && !pageKidsCountCache.has(currentNode)) {\n                  pageKidsCountCache.put(currentNode, 1);\n                }\n\n                capability.resolve([obj, currentNode]);\n              } else {\n                currentPageIndex++;\n                next();\n              }\n\n              return;\n            }\n\n            nodesToVisit.push(obj);\n            next();\n          }, capability.reject);\n          return;\n        }\n\n        if (!(0, _primitives.isDict)(currentNode)) {\n          capability.reject(new _util.FormatError("Page dictionary kid reference points to wrong type of object."));\n          return;\n        }\n\n        count = currentNode.get("Count");\n\n        if (Number.isInteger(count) && count >= 0) {\n          const objId = currentNode.objId;\n\n          if (objId && !pageKidsCountCache.has(objId)) {\n            pageKidsCountCache.put(objId, count);\n          }\n\n          if (currentPageIndex + count <= pageIndex) {\n            currentPageIndex += count;\n            continue;\n          }\n        }\n\n        const kids = currentNode.get("Kids");\n\n        if (!Array.isArray(kids)) {\n          if ((0, _primitives.isName)(currentNode.get("Type"), "Page") || !currentNode.has("Type") && currentNode.has("Contents")) {\n            if (currentPageIndex === pageIndex) {\n              capability.resolve([currentNode, null]);\n              return;\n            }\n\n            currentPageIndex++;\n            continue;\n          }\n\n          capability.reject(new _util.FormatError("Page dictionary kids object is not an array."));\n          return;\n        }\n\n        for (let last = kids.length - 1; last >= 0; last--) {\n          nodesToVisit.push(kids[last]);\n        }\n      }\n\n      capability.reject(new Error(`Page index ${pageIndex} not found.`));\n    }\n\n    next();\n    return capability.promise;\n  }\n\n  getPageIndex(pageRef) {\n    const xref = this.xref;\n\n    function pagesBeforeRef(kidRef) {\n      let total = 0,\n          parentRef;\n      return xref.fetchAsync(kidRef).then(function (node) {\n        if ((0, _primitives.isRefsEqual)(kidRef, pageRef) && !(0, _primitives.isDict)(node, "Page") && !((0, _primitives.isDict)(node) && !node.has("Type") && node.has("Contents"))) {\n          throw new _util.FormatError("The reference does not point to a /Page dictionary.");\n        }\n\n        if (!node) {\n          return null;\n        }\n\n        if (!(0, _primitives.isDict)(node)) {\n          throw new _util.FormatError("Node must be a dictionary.");\n        }\n\n        parentRef = node.getRaw("Parent");\n        return node.getAsync("Parent");\n      }).then(function (parent) {\n        if (!parent) {\n          return null;\n        }\n\n        if (!(0, _primitives.isDict)(parent)) {\n          throw new _util.FormatError("Parent must be a dictionary.");\n        }\n\n        return parent.getAsync("Kids");\n      }).then(function (kids) {\n        if (!kids) {\n          return null;\n        }\n\n        const kidPromises = [];\n        let found = false;\n\n        for (let i = 0, ii = kids.length; i < ii; i++) {\n          const kid = kids[i];\n\n          if (!(0, _primitives.isRef)(kid)) {\n            throw new _util.FormatError("Kid must be a reference.");\n          }\n\n          if ((0, _primitives.isRefsEqual)(kid, kidRef)) {\n            found = true;\n            break;\n          }\n\n          kidPromises.push(xref.fetchAsync(kid).then(function (obj) {\n            if (!(0, _primitives.isDict)(obj)) {\n              throw new _util.FormatError("Kid node must be a dictionary.");\n            }\n\n            if (obj.has("Count")) {\n              total += obj.get("Count");\n            } else {\n              total++;\n            }\n          }));\n        }\n\n        if (!found) {\n          throw new _util.FormatError("Kid reference not found in parent\'s kids.");\n        }\n\n        return Promise.all(kidPromises).then(function () {\n          return [total, parentRef];\n        });\n      });\n    }\n\n    let total = 0;\n\n    function next(ref) {\n      return pagesBeforeRef(ref).then(function (args) {\n        if (!args) {\n          return total;\n        }\n\n        const [count, parentRef] = args;\n        total += count;\n        return next(parentRef);\n      });\n    }\n\n    return next(pageRef);\n  }\n\n  static parseDestDictionary(params) {\n    function addDefaultProtocolToUrl(url) {\n      return url.startsWith("www.") ? `http://${url}` : url;\n    }\n\n    function tryConvertUrlEncoding(url) {\n      try {\n        return (0, _util.stringToUTF8String)(url);\n      } catch (e) {\n        return url;\n      }\n    }\n\n    const destDict = params.destDict;\n\n    if (!(0, _primitives.isDict)(destDict)) {\n      (0, _util.warn)("parseDestDictionary: `destDict` must be a dictionary.");\n      return;\n    }\n\n    const resultObj = params.resultObj;\n\n    if (typeof resultObj !== "object") {\n      (0, _util.warn)("parseDestDictionary: `resultObj` must be an object.");\n      return;\n    }\n\n    const docBaseUrl = params.docBaseUrl || null;\n    let action = destDict.get("A"),\n        url,\n        dest;\n\n    if (!(0, _primitives.isDict)(action)) {\n      if (destDict.has("Dest")) {\n        action = destDict.get("Dest");\n      } else {\n        action = destDict.get("AA");\n\n        if ((0, _primitives.isDict)(action)) {\n          if (action.has("D")) {\n            action = action.get("D");\n          } else if (action.has("U")) {\n            action = action.get("U");\n          }\n        }\n      }\n    }\n\n    if ((0, _primitives.isDict)(action)) {\n      const actionType = action.get("S");\n\n      if (!(0, _primitives.isName)(actionType)) {\n        (0, _util.warn)("parseDestDictionary: Invalid type in Action dictionary.");\n        return;\n      }\n\n      const actionName = actionType.name;\n\n      switch (actionName) {\n        case "URI":\n          url = action.get("URI");\n\n          if ((0, _primitives.isName)(url)) {\n            url = "/" + url.name;\n          } else if ((0, _util.isString)(url)) {\n            url = addDefaultProtocolToUrl(url);\n          }\n\n          break;\n\n        case "GoTo":\n          dest = action.get("D");\n          break;\n\n        case "Launch":\n        case "GoToR":\n          const urlDict = action.get("F");\n\n          if ((0, _primitives.isDict)(urlDict)) {\n            url = urlDict.get("F") || null;\n          } else if ((0, _util.isString)(urlDict)) {\n            url = urlDict;\n          }\n\n          let remoteDest = action.get("D");\n\n          if (remoteDest) {\n            if ((0, _primitives.isName)(remoteDest)) {\n              remoteDest = remoteDest.name;\n            }\n\n            if ((0, _util.isString)(url)) {\n              const baseUrl = url.split("#")[0];\n\n              if ((0, _util.isString)(remoteDest)) {\n                url = baseUrl + "#" + remoteDest;\n              } else if (Array.isArray(remoteDest)) {\n                url = baseUrl + "#" + JSON.stringify(remoteDest);\n              }\n            }\n          }\n\n          const newWindow = action.get("NewWindow");\n\n          if ((0, _util.isBool)(newWindow)) {\n            resultObj.newWindow = newWindow;\n          }\n\n          break;\n\n        case "Named":\n          const namedAction = action.get("N");\n\n          if ((0, _primitives.isName)(namedAction)) {\n            resultObj.action = namedAction.name;\n          }\n\n          break;\n\n        case "JavaScript":\n          const jsAction = action.get("JS");\n          let js;\n\n          if ((0, _primitives.isStream)(jsAction)) {\n            js = (0, _util.bytesToString)(jsAction.getBytes());\n          } else if ((0, _util.isString)(jsAction)) {\n            js = jsAction;\n          }\n\n          if (js) {\n            const URL_OPEN_METHODS = ["app.launchURL", "window.open"];\n            const regex = new RegExp("^\\\\s*(" + URL_OPEN_METHODS.join("|").split(".").join("\\\\.") + ")\\\\((?:\'|\\")([^\'\\"]*)(?:\'|\\")(?:,\\\\s*(\\\\w+)\\\\)|\\\\))", "i");\n            const jsUrl = regex.exec((0, _util.stringToPDFString)(js));\n\n            if (jsUrl && jsUrl[2]) {\n              url = jsUrl[2];\n\n              if (jsUrl[3] === "true" && jsUrl[1] === "app.launchURL") {\n                resultObj.newWindow = true;\n              }\n\n              break;\n            }\n          }\n\n        default:\n          (0, _util.warn)(`parseDestDictionary: unsupported action type "${actionName}".`);\n          break;\n      }\n    } else if (destDict.has("Dest")) {\n      dest = destDict.get("Dest");\n    }\n\n    if ((0, _util.isString)(url)) {\n      url = tryConvertUrlEncoding(url);\n      const absoluteUrl = (0, _util.createValidAbsoluteUrl)(url, docBaseUrl);\n\n      if (absoluteUrl) {\n        resultObj.url = absoluteUrl.href;\n      }\n\n      resultObj.unsafeUrl = url;\n    }\n\n    if (dest) {\n      if ((0, _primitives.isName)(dest)) {\n        dest = dest.name;\n      }\n\n      if ((0, _util.isString)(dest) || Array.isArray(dest)) {\n        resultObj.dest = dest;\n      }\n    }\n  }\n\n}\n\nexports.Catalog = Catalog;\n\nvar XRef = function XRefClosure() {\n  function XRef(stream, pdfManager) {\n    this.stream = stream;\n    this.pdfManager = pdfManager;\n    this.entries = [];\n    this.xrefstms = Object.create(null);\n    this._cacheMap = new Map();\n    this.stats = {\n      streamTypes: Object.create(null),\n      fontTypes: Object.create(null)\n    };\n    this._newRefNum = null;\n  }\n\n  XRef.prototype = {\n    getNewRef: function XRef_getNewRef() {\n      if (this._newRefNum === null) {\n        this._newRefNum = this.entries.length;\n      }\n\n      return _primitives.Ref.get(this._newRefNum++, 0);\n    },\n    resetNewRef: function XRef_resetNewRef() {\n      this._newRefNum = null;\n    },\n    setStartXRef: function XRef_setStartXRef(startXRef) {\n      this.startXRefQueue = [startXRef];\n    },\n    parse: function XRef_parse(recoveryMode) {\n      var trailerDict;\n\n      if (!recoveryMode) {\n        trailerDict = this.readXRef();\n      } else {\n        (0, _util.warn)("Indexing all PDF objects");\n        trailerDict = this.indexObjects();\n      }\n\n      trailerDict.assignXref(this);\n      this.trailer = trailerDict;\n      let encrypt;\n\n      try {\n        encrypt = trailerDict.get("Encrypt");\n      } catch (ex) {\n        if (ex instanceof _core_utils.MissingDataException) {\n          throw ex;\n        }\n\n        (0, _util.warn)(`XRef.parse - Invalid "Encrypt" reference: "${ex}".`);\n      }\n\n      if ((0, _primitives.isDict)(encrypt)) {\n        var ids = trailerDict.get("ID");\n        var fileId = ids && ids.length ? ids[0] : "";\n        encrypt.suppressEncryption = true;\n        this.encrypt = new _crypto.CipherTransformFactory(encrypt, fileId, this.pdfManager.password);\n      }\n\n      let root;\n\n      try {\n        root = trailerDict.get("Root");\n      } catch (ex) {\n        if (ex instanceof _core_utils.MissingDataException) {\n          throw ex;\n        }\n\n        (0, _util.warn)(`XRef.parse - Invalid "Root" reference: "${ex}".`);\n      }\n\n      if ((0, _primitives.isDict)(root) && root.has("Pages")) {\n        this.root = root;\n      } else {\n        if (!recoveryMode) {\n          throw new _core_utils.XRefParseException();\n        }\n\n        throw new _util.FormatError("Invalid root reference");\n      }\n    },\n    processXRefTable: function XRef_processXRefTable(parser) {\n      if (!("tableState" in this)) {\n        this.tableState = {\n          entryNum: 0,\n          streamPos: parser.lexer.stream.pos,\n          parserBuf1: parser.buf1,\n          parserBuf2: parser.buf2\n        };\n      }\n\n      var obj = this.readXRefTable(parser);\n\n      if (!(0, _primitives.isCmd)(obj, "trailer")) {\n        throw new _util.FormatError("Invalid XRef table: could not find trailer dictionary");\n      }\n\n      var dict = parser.getObj();\n\n      if (!(0, _primitives.isDict)(dict) && dict.dict) {\n        dict = dict.dict;\n      }\n\n      if (!(0, _primitives.isDict)(dict)) {\n        throw new _util.FormatError("Invalid XRef table: could not parse trailer dictionary");\n      }\n\n      delete this.tableState;\n      return dict;\n    },\n    readXRefTable: function XRef_readXRefTable(parser) {\n      var stream = parser.lexer.stream;\n      var tableState = this.tableState;\n      stream.pos = tableState.streamPos;\n      parser.buf1 = tableState.parserBuf1;\n      parser.buf2 = tableState.parserBuf2;\n      var obj;\n\n      while (true) {\n        if (!("firstEntryNum" in tableState) || !("entryCount" in tableState)) {\n          if ((0, _primitives.isCmd)(obj = parser.getObj(), "trailer")) {\n            break;\n          }\n\n          tableState.firstEntryNum = obj;\n          tableState.entryCount = parser.getObj();\n        }\n\n        var first = tableState.firstEntryNum;\n        var count = tableState.entryCount;\n\n        if (!Number.isInteger(first) || !Number.isInteger(count)) {\n          throw new _util.FormatError("Invalid XRef table: wrong types in subsection header");\n        }\n\n        for (var i = tableState.entryNum; i < count; i++) {\n          tableState.streamPos = stream.pos;\n          tableState.entryNum = i;\n          tableState.parserBuf1 = parser.buf1;\n          tableState.parserBuf2 = parser.buf2;\n          var entry = {};\n          entry.offset = parser.getObj();\n          entry.gen = parser.getObj();\n          var type = parser.getObj();\n\n          if (type instanceof _primitives.Cmd) {\n            switch (type.cmd) {\n              case "f":\n                entry.free = true;\n                break;\n\n              case "n":\n                entry.uncompressed = true;\n                break;\n            }\n          }\n\n          if (!Number.isInteger(entry.offset) || !Number.isInteger(entry.gen) || !(entry.free || entry.uncompressed)) {\n            throw new _util.FormatError(`Invalid entry in XRef subsection: ${first}, ${count}`);\n          }\n\n          if (i === 0 && entry.free && first === 1) {\n            first = 0;\n          }\n\n          if (!this.entries[i + first]) {\n            this.entries[i + first] = entry;\n          }\n        }\n\n        tableState.entryNum = 0;\n        tableState.streamPos = stream.pos;\n        tableState.parserBuf1 = parser.buf1;\n        tableState.parserBuf2 = parser.buf2;\n        delete tableState.firstEntryNum;\n        delete tableState.entryCount;\n      }\n\n      if (this.entries[0] && !this.entries[0].free) {\n        throw new _util.FormatError("Invalid XRef table: unexpected first object");\n      }\n\n      return obj;\n    },\n    processXRefStream: function XRef_processXRefStream(stream) {\n      if (!("streamState" in this)) {\n        var streamParameters = stream.dict;\n        var byteWidths = streamParameters.get("W");\n        var range = streamParameters.get("Index");\n\n        if (!range) {\n          range = [0, streamParameters.get("Size")];\n        }\n\n        this.streamState = {\n          entryRanges: range,\n          byteWidths,\n          entryNum: 0,\n          streamPos: stream.pos\n        };\n      }\n\n      this.readXRefStream(stream);\n      delete this.streamState;\n      return stream.dict;\n    },\n    readXRefStream: function XRef_readXRefStream(stream) {\n      var i, j;\n      var streamState = this.streamState;\n      stream.pos = streamState.streamPos;\n      var byteWidths = streamState.byteWidths;\n      var typeFieldWidth = byteWidths[0];\n      var offsetFieldWidth = byteWidths[1];\n      var generationFieldWidth = byteWidths[2];\n      var entryRanges = streamState.entryRanges;\n\n      while (entryRanges.length > 0) {\n        var first = entryRanges[0];\n        var n = entryRanges[1];\n\n        if (!Number.isInteger(first) || !Number.isInteger(n)) {\n          throw new _util.FormatError(`Invalid XRef range fields: ${first}, ${n}`);\n        }\n\n        if (!Number.isInteger(typeFieldWidth) || !Number.isInteger(offsetFieldWidth) || !Number.isInteger(generationFieldWidth)) {\n          throw new _util.FormatError(`Invalid XRef entry fields length: ${first}, ${n}`);\n        }\n\n        for (i = streamState.entryNum; i < n; ++i) {\n          streamState.entryNum = i;\n          streamState.streamPos = stream.pos;\n          var type = 0,\n              offset = 0,\n              generation = 0;\n\n          for (j = 0; j < typeFieldWidth; ++j) {\n            type = type << 8 | stream.getByte();\n          }\n\n          if (typeFieldWidth === 0) {\n            type = 1;\n          }\n\n          for (j = 0; j < offsetFieldWidth; ++j) {\n            offset = offset << 8 | stream.getByte();\n          }\n\n          for (j = 0; j < generationFieldWidth; ++j) {\n            generation = generation << 8 | stream.getByte();\n          }\n\n          var entry = {};\n          entry.offset = offset;\n          entry.gen = generation;\n\n          switch (type) {\n            case 0:\n              entry.free = true;\n              break;\n\n            case 1:\n              entry.uncompressed = true;\n              break;\n\n            case 2:\n              break;\n\n            default:\n              throw new _util.FormatError(`Invalid XRef entry type: ${type}`);\n          }\n\n          if (!this.entries[first + i]) {\n            this.entries[first + i] = entry;\n          }\n        }\n\n        streamState.entryNum = 0;\n        streamState.streamPos = stream.pos;\n        entryRanges.splice(0, 2);\n      }\n    },\n    indexObjects: function XRef_indexObjects() {\n      var TAB = 0x9,\n          LF = 0xa,\n          CR = 0xd,\n          SPACE = 0x20;\n      var PERCENT = 0x25,\n          LT = 0x3c;\n\n      function readToken(data, offset) {\n        var token = "",\n            ch = data[offset];\n\n        while (ch !== LF && ch !== CR && ch !== LT) {\n          if (++offset >= data.length) {\n            break;\n          }\n\n          token += String.fromCharCode(ch);\n          ch = data[offset];\n        }\n\n        return token;\n      }\n\n      function skipUntil(data, offset, what) {\n        var length = what.length,\n            dataLength = data.length;\n        var skipped = 0;\n\n        while (offset < dataLength) {\n          var i = 0;\n\n          while (i < length && data[offset + i] === what[i]) {\n            ++i;\n          }\n\n          if (i >= length) {\n            break;\n          }\n\n          offset++;\n          skipped++;\n        }\n\n        return skipped;\n      }\n\n      var objRegExp = /^(\\d+)\\s+(\\d+)\\s+obj\\b/;\n      const endobjRegExp = /\\bendobj[\\b\\s]$/;\n      const nestedObjRegExp = /\\s+(\\d+\\s+\\d+\\s+obj[\\b\\s<])$/;\n      const CHECK_CONTENT_LENGTH = 25;\n      var trailerBytes = new Uint8Array([116, 114, 97, 105, 108, 101, 114]);\n      var startxrefBytes = new Uint8Array([115, 116, 97, 114, 116, 120, 114, 101, 102]);\n      const objBytes = new Uint8Array([111, 98, 106]);\n      var xrefBytes = new Uint8Array([47, 88, 82, 101, 102]);\n      this.entries.length = 0;\n      var stream = this.stream;\n      stream.pos = 0;\n      var buffer = stream.getBytes();\n      var position = stream.start,\n          length = buffer.length;\n      var trailers = [],\n          xrefStms = [];\n\n      while (position < length) {\n        var ch = buffer[position];\n\n        if (ch === TAB || ch === LF || ch === CR || ch === SPACE) {\n          ++position;\n          continue;\n        }\n\n        if (ch === PERCENT) {\n          do {\n            ++position;\n\n            if (position >= length) {\n              break;\n            }\n\n            ch = buffer[position];\n          } while (ch !== LF && ch !== CR);\n\n          continue;\n        }\n\n        var token = readToken(buffer, position);\n        var m;\n\n        if (token.startsWith("xref") && (token.length === 4 || /\\s/.test(token[4]))) {\n          position += skipUntil(buffer, position, trailerBytes);\n          trailers.push(position);\n          position += skipUntil(buffer, position, startxrefBytes);\n        } else if (m = objRegExp.exec(token)) {\n          const num = m[1] | 0,\n                gen = m[2] | 0;\n\n          if (!this.entries[num] || this.entries[num].gen === gen) {\n            this.entries[num] = {\n              offset: position - stream.start,\n              gen,\n              uncompressed: true\n            };\n          }\n\n          let contentLength,\n              startPos = position + token.length;\n\n          while (startPos < buffer.length) {\n            const endPos = startPos + skipUntil(buffer, startPos, objBytes) + 4;\n            contentLength = endPos - position;\n            const checkPos = Math.max(endPos - CHECK_CONTENT_LENGTH, startPos);\n            const tokenStr = (0, _util.bytesToString)(buffer.subarray(checkPos, endPos));\n\n            if (endobjRegExp.test(tokenStr)) {\n              break;\n            } else {\n              const objToken = nestedObjRegExp.exec(tokenStr);\n\n              if (objToken && objToken[1]) {\n                (0, _util.warn)(\'indexObjects: Found new "obj" inside of another "obj", \' + \'caused by missing "endobj" -- trying to recover.\');\n                contentLength -= objToken[1].length;\n                break;\n              }\n            }\n\n            startPos = endPos;\n          }\n\n          const content = buffer.subarray(position, position + contentLength);\n          var xrefTagOffset = skipUntil(content, 0, xrefBytes);\n\n          if (xrefTagOffset < contentLength && content[xrefTagOffset + 5] < 64) {\n            xrefStms.push(position - stream.start);\n            this.xrefstms[position - stream.start] = 1;\n          }\n\n          position += contentLength;\n        } else if (token.startsWith("trailer") && (token.length === 7 || /\\s/.test(token[7]))) {\n          trailers.push(position);\n          position += skipUntil(buffer, position, startxrefBytes);\n        } else {\n          position += token.length + 1;\n        }\n      }\n\n      for (let i = 0, ii = xrefStms.length; i < ii; ++i) {\n        this.startXRefQueue.push(xrefStms[i]);\n        this.readXRef(true);\n      }\n\n      let trailerDict;\n\n      for (let i = 0, ii = trailers.length; i < ii; ++i) {\n        stream.pos = trailers[i];\n        const parser = new _parser.Parser({\n          lexer: new _parser.Lexer(stream),\n          xref: this,\n          allowStreams: true,\n          recoveryMode: true\n        });\n        var obj = parser.getObj();\n\n        if (!(0, _primitives.isCmd)(obj, "trailer")) {\n          continue;\n        }\n\n        const dict = parser.getObj();\n\n        if (!(0, _primitives.isDict)(dict)) {\n          continue;\n        }\n\n        try {\n          const rootDict = dict.get("Root");\n\n          if (!(rootDict instanceof _primitives.Dict)) {\n            continue;\n          }\n\n          const pagesDict = rootDict.get("Pages");\n\n          if (!(pagesDict instanceof _primitives.Dict)) {\n            continue;\n          }\n\n          const pagesCount = pagesDict.get("Count");\n\n          if (!Number.isInteger(pagesCount)) {\n            continue;\n          }\n        } catch (ex) {\n          if (ex instanceof _core_utils.MissingDataException) {\n            throw ex;\n          }\n\n          continue;\n        }\n\n        if (dict.has("ID")) {\n          return dict;\n        }\n\n        trailerDict = dict;\n      }\n\n      if (trailerDict) {\n        return trailerDict;\n      }\n\n      throw new _util.InvalidPDFException("Invalid PDF structure.");\n    },\n    readXRef: function XRef_readXRef(recoveryMode) {\n      var stream = this.stream;\n      const startXRefParsedCache = Object.create(null);\n\n      try {\n        while (this.startXRefQueue.length) {\n          var startXRef = this.startXRefQueue[0];\n\n          if (startXRefParsedCache[startXRef]) {\n            (0, _util.warn)("readXRef - skipping XRef table since it was already parsed.");\n            this.startXRefQueue.shift();\n            continue;\n          }\n\n          startXRefParsedCache[startXRef] = true;\n          stream.pos = startXRef + stream.start;\n          const parser = new _parser.Parser({\n            lexer: new _parser.Lexer(stream),\n            xref: this,\n            allowStreams: true\n          });\n          var obj = parser.getObj();\n          var dict;\n\n          if ((0, _primitives.isCmd)(obj, "xref")) {\n            dict = this.processXRefTable(parser);\n\n            if (!this.topDict) {\n              this.topDict = dict;\n            }\n\n            obj = dict.get("XRefStm");\n\n            if (Number.isInteger(obj)) {\n              var pos = obj;\n\n              if (!(pos in this.xrefstms)) {\n                this.xrefstms[pos] = 1;\n                this.startXRefQueue.push(pos);\n              }\n            }\n          } else if (Number.isInteger(obj)) {\n            if (!Number.isInteger(parser.getObj()) || !(0, _primitives.isCmd)(parser.getObj(), "obj") || !(0, _primitives.isStream)(obj = parser.getObj())) {\n              throw new _util.FormatError("Invalid XRef stream");\n            }\n\n            dict = this.processXRefStream(obj);\n\n            if (!this.topDict) {\n              this.topDict = dict;\n            }\n\n            if (!dict) {\n              throw new _util.FormatError("Failed to read XRef stream");\n            }\n          } else {\n            throw new _util.FormatError("Invalid XRef stream header");\n          }\n\n          obj = dict.get("Prev");\n\n          if (Number.isInteger(obj)) {\n            this.startXRefQueue.push(obj);\n          } else if ((0, _primitives.isRef)(obj)) {\n            this.startXRefQueue.push(obj.num);\n          }\n\n          this.startXRefQueue.shift();\n        }\n\n        return this.topDict;\n      } catch (e) {\n        if (e instanceof _core_utils.MissingDataException) {\n          throw e;\n        }\n\n        (0, _util.info)("(while reading XRef): " + e);\n      }\n\n      if (recoveryMode) {\n        return undefined;\n      }\n\n      throw new _core_utils.XRefParseException();\n    },\n    getEntry: function XRef_getEntry(i) {\n      var xrefEntry = this.entries[i];\n\n      if (xrefEntry && !xrefEntry.free && xrefEntry.offset) {\n        return xrefEntry;\n      }\n\n      return null;\n    },\n    fetchIfRef: function XRef_fetchIfRef(obj, suppressEncryption) {\n      if (obj instanceof _primitives.Ref) {\n        return this.fetch(obj, suppressEncryption);\n      }\n\n      return obj;\n    },\n    fetch: function XRef_fetch(ref, suppressEncryption) {\n      if (!(ref instanceof _primitives.Ref)) {\n        throw new Error("ref object is not a reference");\n      }\n\n      const num = ref.num;\n\n      const cacheEntry = this._cacheMap.get(num);\n\n      if (cacheEntry !== undefined) {\n        if (cacheEntry instanceof _primitives.Dict && !cacheEntry.objId) {\n          cacheEntry.objId = ref.toString();\n        }\n\n        return cacheEntry;\n      }\n\n      let xrefEntry = this.getEntry(num);\n\n      if (xrefEntry === null) {\n        this._cacheMap.set(num, xrefEntry);\n\n        return xrefEntry;\n      }\n\n      if (xrefEntry.uncompressed) {\n        xrefEntry = this.fetchUncompressed(ref, xrefEntry, suppressEncryption);\n      } else {\n        xrefEntry = this.fetchCompressed(ref, xrefEntry, suppressEncryption);\n      }\n\n      if ((0, _primitives.isDict)(xrefEntry)) {\n        xrefEntry.objId = ref.toString();\n      } else if ((0, _primitives.isStream)(xrefEntry)) {\n        xrefEntry.dict.objId = ref.toString();\n      }\n\n      return xrefEntry;\n    },\n\n    fetchUncompressed(ref, xrefEntry, suppressEncryption = false) {\n      var gen = ref.gen;\n      var num = ref.num;\n\n      if (xrefEntry.gen !== gen) {\n        throw new _core_utils.XRefEntryException(`Inconsistent generation in XRef: ${ref}`);\n      }\n\n      var stream = this.stream.makeSubStream(xrefEntry.offset + this.stream.start);\n      const parser = new _parser.Parser({\n        lexer: new _parser.Lexer(stream),\n        xref: this,\n        allowStreams: true\n      });\n      var obj1 = parser.getObj();\n      var obj2 = parser.getObj();\n      var obj3 = parser.getObj();\n\n      if (obj1 !== num || obj2 !== gen || !(obj3 instanceof _primitives.Cmd)) {\n        throw new _core_utils.XRefEntryException(`Bad (uncompressed) XRef entry: ${ref}`);\n      }\n\n      if (obj3.cmd !== "obj") {\n        if (obj3.cmd.startsWith("obj")) {\n          num = parseInt(obj3.cmd.substring(3), 10);\n\n          if (!Number.isNaN(num)) {\n            return num;\n          }\n        }\n\n        throw new _core_utils.XRefEntryException(`Bad (uncompressed) XRef entry: ${ref}`);\n      }\n\n      if (this.encrypt && !suppressEncryption) {\n        xrefEntry = parser.getObj(this.encrypt.createCipherTransform(num, gen));\n      } else {\n        xrefEntry = parser.getObj();\n      }\n\n      if (!(0, _primitives.isStream)(xrefEntry)) {\n        this._cacheMap.set(num, xrefEntry);\n      }\n\n      return xrefEntry;\n    },\n\n    fetchCompressed(ref, xrefEntry, suppressEncryption = false) {\n      const tableOffset = xrefEntry.offset;\n      const stream = this.fetch(_primitives.Ref.get(tableOffset, 0));\n\n      if (!(0, _primitives.isStream)(stream)) {\n        throw new _util.FormatError("bad ObjStm stream");\n      }\n\n      const first = stream.dict.get("First");\n      const n = stream.dict.get("N");\n\n      if (!Number.isInteger(first) || !Number.isInteger(n)) {\n        throw new _util.FormatError("invalid first and n parameters for ObjStm stream");\n      }\n\n      const parser = new _parser.Parser({\n        lexer: new _parser.Lexer(stream),\n        xref: this,\n        allowStreams: true\n      });\n      const nums = new Array(n);\n\n      for (let i = 0; i < n; ++i) {\n        const num = parser.getObj();\n\n        if (!Number.isInteger(num)) {\n          throw new _util.FormatError(`invalid object number in the ObjStm stream: ${num}`);\n        }\n\n        const offset = parser.getObj();\n\n        if (!Number.isInteger(offset)) {\n          throw new _util.FormatError(`invalid object offset in the ObjStm stream: ${offset}`);\n        }\n\n        nums[i] = num;\n      }\n\n      const entries = new Array(n);\n\n      for (let i = 0; i < n; ++i) {\n        const obj = parser.getObj();\n        entries[i] = obj;\n\n        if (parser.buf1 instanceof _primitives.Cmd && parser.buf1.cmd === "endobj") {\n          parser.shift();\n        }\n\n        if ((0, _primitives.isStream)(obj)) {\n          continue;\n        }\n\n        const num = nums[i],\n              entry = this.entries[num];\n\n        if (entry && entry.offset === tableOffset && entry.gen === i) {\n          this._cacheMap.set(num, obj);\n        }\n      }\n\n      xrefEntry = entries[xrefEntry.gen];\n\n      if (xrefEntry === undefined) {\n        throw new _core_utils.XRefEntryException(`Bad (compressed) XRef entry: ${ref}`);\n      }\n\n      return xrefEntry;\n    },\n\n    async fetchIfRefAsync(obj, suppressEncryption) {\n      if (obj instanceof _primitives.Ref) {\n        return this.fetchAsync(obj, suppressEncryption);\n      }\n\n      return obj;\n    },\n\n    async fetchAsync(ref, suppressEncryption) {\n      try {\n        return this.fetch(ref, suppressEncryption);\n      } catch (ex) {\n        if (!(ex instanceof _core_utils.MissingDataException)) {\n          throw ex;\n        }\n\n        await this.pdfManager.requestRange(ex.begin, ex.end);\n        return this.fetchAsync(ref, suppressEncryption);\n      }\n    },\n\n    getCatalogObj: function XRef_getCatalogObj() {\n      return this.root;\n    }\n  };\n  return XRef;\n}();\n\nexports.XRef = XRef;\n\nclass NameOrNumberTree {\n  constructor(root, xref, type) {\n    if (this.constructor === NameOrNumberTree) {\n      (0, _util.unreachable)("Cannot initialize NameOrNumberTree.");\n    }\n\n    this.root = root;\n    this.xref = xref;\n    this._type = type;\n  }\n\n  getAll() {\n    const dict = Object.create(null);\n\n    if (!this.root) {\n      return dict;\n    }\n\n    const xref = this.xref;\n    const processed = new _primitives.RefSet();\n    processed.put(this.root);\n    const queue = [this.root];\n\n    while (queue.length > 0) {\n      const obj = xref.fetchIfRef(queue.shift());\n\n      if (!(0, _primitives.isDict)(obj)) {\n        continue;\n      }\n\n      if (obj.has("Kids")) {\n        const kids = obj.get("Kids");\n\n        for (let i = 0, ii = kids.length; i < ii; i++) {\n          const kid = kids[i];\n\n          if (processed.has(kid)) {\n            throw new _util.FormatError(`Duplicate entry in "${this._type}" tree.`);\n          }\n\n          queue.push(kid);\n          processed.put(kid);\n        }\n\n        continue;\n      }\n\n      const entries = obj.get(this._type);\n\n      if (Array.isArray(entries)) {\n        for (let i = 0, ii = entries.length; i < ii; i += 2) {\n          dict[xref.fetchIfRef(entries[i])] = xref.fetchIfRef(entries[i + 1]);\n        }\n      }\n    }\n\n    return dict;\n  }\n\n  get(key) {\n    if (!this.root) {\n      return null;\n    }\n\n    const xref = this.xref;\n    let kidsOrEntries = xref.fetchIfRef(this.root);\n    let loopCount = 0;\n    const MAX_LEVELS = 10;\n\n    while (kidsOrEntries.has("Kids")) {\n      if (++loopCount > MAX_LEVELS) {\n        (0, _util.warn)(`Search depth limit reached for "${this._type}" tree.`);\n        return null;\n      }\n\n      const kids = kidsOrEntries.get("Kids");\n\n      if (!Array.isArray(kids)) {\n        return null;\n      }\n\n      let l = 0,\n          r = kids.length - 1;\n\n      while (l <= r) {\n        const m = l + r >> 1;\n        const kid = xref.fetchIfRef(kids[m]);\n        const limits = kid.get("Limits");\n\n        if (key < xref.fetchIfRef(limits[0])) {\n          r = m - 1;\n        } else if (key > xref.fetchIfRef(limits[1])) {\n          l = m + 1;\n        } else {\n          kidsOrEntries = xref.fetchIfRef(kids[m]);\n          break;\n        }\n      }\n\n      if (l > r) {\n        return null;\n      }\n    }\n\n    const entries = kidsOrEntries.get(this._type);\n\n    if (Array.isArray(entries)) {\n      let l = 0,\n          r = entries.length - 2;\n\n      while (l <= r) {\n        const tmp = l + r >> 1,\n              m = tmp + (tmp & 1);\n        const currentKey = xref.fetchIfRef(entries[m]);\n\n        if (key < currentKey) {\n          r = m - 2;\n        } else if (key > currentKey) {\n          l = m + 2;\n        } else {\n          return xref.fetchIfRef(entries[m + 1]);\n        }\n      }\n\n      (0, _util.info)(`Falling back to an exhaustive search, for key "${key}", ` + `in "${this._type}" tree.`);\n\n      for (let m = 0, mm = entries.length; m < mm; m += 2) {\n        const currentKey = xref.fetchIfRef(entries[m]);\n\n        if (currentKey === key) {\n          (0, _util.warn)(`The "${key}" key was found at an incorrect, ` + `i.e. out-of-order, position in "${this._type}" tree.`);\n          return xref.fetchIfRef(entries[m + 1]);\n        }\n      }\n    }\n\n    return null;\n  }\n\n}\n\nclass NameTree extends NameOrNumberTree {\n  constructor(root, xref) {\n    super(root, xref, "Names");\n  }\n\n}\n\nclass NumberTree extends NameOrNumberTree {\n  constructor(root, xref) {\n    super(root, xref, "Nums");\n  }\n\n}\n\nvar FileSpec = function FileSpecClosure() {\n  function FileSpec(root, xref) {\n    if (!root || !(0, _primitives.isDict)(root)) {\n      return;\n    }\n\n    this.xref = xref;\n    this.root = root;\n\n    if (root.has("FS")) {\n      this.fs = root.get("FS");\n    }\n\n    this.description = root.has("Desc") ? (0, _util.stringToPDFString)(root.get("Desc")) : "";\n\n    if (root.has("RF")) {\n      (0, _util.warn)("Related file specifications are not supported");\n    }\n\n    this.contentAvailable = true;\n\n    if (!root.has("EF")) {\n      this.contentAvailable = false;\n      (0, _util.warn)("Non-embedded file specifications are not supported");\n    }\n  }\n\n  function pickPlatformItem(dict) {\n    if (dict.has("UF")) {\n      return dict.get("UF");\n    } else if (dict.has("F")) {\n      return dict.get("F");\n    } else if (dict.has("Unix")) {\n      return dict.get("Unix");\n    } else if (dict.has("Mac")) {\n      return dict.get("Mac");\n    } else if (dict.has("DOS")) {\n      return dict.get("DOS");\n    }\n\n    return null;\n  }\n\n  FileSpec.prototype = {\n    get filename() {\n      if (!this._filename && this.root) {\n        var filename = pickPlatformItem(this.root) || "unnamed";\n        this._filename = (0, _util.stringToPDFString)(filename).replace(/\\\\\\\\/g, "\\\\").replace(/\\\\\\//g, "/").replace(/\\\\/g, "/");\n      }\n\n      return this._filename;\n    },\n\n    get content() {\n      if (!this.contentAvailable) {\n        return null;\n      }\n\n      if (!this.contentRef && this.root) {\n        this.contentRef = pickPlatformItem(this.root.get("EF"));\n      }\n\n      var content = null;\n\n      if (this.contentRef) {\n        var xref = this.xref;\n        var fileObj = xref.fetchIfRef(this.contentRef);\n\n        if (fileObj && (0, _primitives.isStream)(fileObj)) {\n          content = fileObj.getBytes();\n        } else {\n          (0, _util.warn)("Embedded file specification points to non-existing/invalid " + "content");\n        }\n      } else {\n        (0, _util.warn)("Embedded file specification does not have a content");\n      }\n\n      return content;\n    },\n\n    get serializable() {\n      return {\n        filename: this.filename,\n        content: this.content\n      };\n    }\n\n  };\n  return FileSpec;\n}();\n\nexports.FileSpec = FileSpec;\n\nconst ObjectLoader = function () {\n  function mayHaveChildren(value) {\n    return value instanceof _primitives.Ref || value instanceof _primitives.Dict || Array.isArray(value) || (0, _primitives.isStream)(value);\n  }\n\n  function addChildren(node, nodesToVisit) {\n    if (node instanceof _primitives.Dict) {\n      node = node.getRawValues();\n    } else if ((0, _primitives.isStream)(node)) {\n      node = node.dict.getRawValues();\n    } else if (!Array.isArray(node)) {\n      return;\n    }\n\n    for (const rawValue of node) {\n      if (mayHaveChildren(rawValue)) {\n        nodesToVisit.push(rawValue);\n      }\n    }\n  }\n\n  function ObjectLoader(dict, keys, xref) {\n    this.dict = dict;\n    this.keys = keys;\n    this.xref = xref;\n    this.refSet = null;\n  }\n\n  ObjectLoader.prototype = {\n    async load() {\n      if (!this.xref.stream.allChunksLoaded || this.xref.stream.allChunksLoaded()) {\n        return undefined;\n      }\n\n      const {\n        keys,\n        dict\n      } = this;\n      this.refSet = new _primitives.RefSet();\n      const nodesToVisit = [];\n\n      for (let i = 0, ii = keys.length; i < ii; i++) {\n        const rawValue = dict.getRaw(keys[i]);\n\n        if (rawValue !== undefined) {\n          nodesToVisit.push(rawValue);\n        }\n      }\n\n      return this._walk(nodesToVisit);\n    },\n\n    async _walk(nodesToVisit) {\n      const nodesToRevisit = [];\n      const pendingRequests = [];\n\n      while (nodesToVisit.length) {\n        let currentNode = nodesToVisit.pop();\n\n        if (currentNode instanceof _primitives.Ref) {\n          if (this.refSet.has(currentNode)) {\n            continue;\n          }\n\n          try {\n            this.refSet.put(currentNode);\n            currentNode = this.xref.fetch(currentNode);\n          } catch (ex) {\n            if (!(ex instanceof _core_utils.MissingDataException)) {\n              throw ex;\n            }\n\n            nodesToRevisit.push(currentNode);\n            pendingRequests.push({\n              begin: ex.begin,\n              end: ex.end\n            });\n          }\n        }\n\n        if (currentNode && currentNode.getBaseStreams) {\n          const baseStreams = currentNode.getBaseStreams();\n          let foundMissingData = false;\n\n          for (let i = 0, ii = baseStreams.length; i < ii; i++) {\n            const stream = baseStreams[i];\n\n            if (stream.allChunksLoaded && !stream.allChunksLoaded()) {\n              foundMissingData = true;\n              pendingRequests.push({\n                begin: stream.start,\n                end: stream.end\n              });\n            }\n          }\n\n          if (foundMissingData) {\n            nodesToRevisit.push(currentNode);\n          }\n        }\n\n        addChildren(currentNode, nodesToVisit);\n      }\n\n      if (pendingRequests.length) {\n        await this.xref.stream.manager.requestRanges(pendingRequests);\n\n        for (let i = 0, ii = nodesToRevisit.length; i < ii; i++) {\n          const node = nodesToRevisit[i];\n\n          if (node instanceof _primitives.Ref) {\n            this.refSet.remove(node);\n          }\n        }\n\n        return this._walk(nodesToRevisit);\n      }\n\n      this.refSet = null;\n      return undefined;\n    }\n\n  };\n  return ObjectLoader;\n}();\n\nexports.ObjectLoader = ObjectLoader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/obj.js\n')},"./node_modules/pdfjs-dist/lib/core/operator_list.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.OperatorList = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar QueueOptimizer = function QueueOptimizerClosure() {\n  function addState(parentState, pattern, checkFn, iterateFn, processFn) {\n    var state = parentState;\n\n    for (var i = 0, ii = pattern.length - 1; i < ii; i++) {\n      var item = pattern[i];\n      state = state[item] || (state[item] = []);\n    }\n\n    state[pattern[pattern.length - 1]] = {\n      checkFn,\n      iterateFn,\n      processFn\n    };\n  }\n\n  function handlePaintSolidColorImageMask(iFirstSave, count, fnArray, argsArray) {\n    var iFirstPIMXO = iFirstSave + 2;\n\n    for (var i = 0; i < count; i++) {\n      var arg = argsArray[iFirstPIMXO + 4 * i];\n      var imageMask = arg.length === 1 && arg[0];\n\n      if (imageMask && imageMask.width === 1 && imageMask.height === 1 && (!imageMask.data.length || imageMask.data.length === 1 && imageMask.data[0] === 0)) {\n        fnArray[iFirstPIMXO + 4 * i] = _util.OPS.paintSolidColorImageMask;\n        continue;\n      }\n\n      break;\n    }\n\n    return count - i;\n  }\n\n  var InitialState = [];\n  addState(InitialState, [_util.OPS.save, _util.OPS.transform, _util.OPS.paintInlineImageXObject, _util.OPS.restore], null, function iterateInlineImageGroup(context, i) {\n    var fnArray = context.fnArray;\n    var iFirstSave = context.iCurr - 3;\n    var pos = (i - iFirstSave) % 4;\n\n    switch (pos) {\n      case 0:\n        return fnArray[i] === _util.OPS.save;\n\n      case 1:\n        return fnArray[i] === _util.OPS.transform;\n\n      case 2:\n        return fnArray[i] === _util.OPS.paintInlineImageXObject;\n\n      case 3:\n        return fnArray[i] === _util.OPS.restore;\n    }\n\n    throw new Error(`iterateInlineImageGroup - invalid pos: ${pos}`);\n  }, function foundInlineImageGroup(context, i) {\n    var MIN_IMAGES_IN_INLINE_IMAGES_BLOCK = 10;\n    var MAX_IMAGES_IN_INLINE_IMAGES_BLOCK = 200;\n    var MAX_WIDTH = 1000;\n    var IMAGE_PADDING = 1;\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var curr = context.iCurr;\n    var iFirstSave = curr - 3;\n    var iFirstTransform = curr - 2;\n    var iFirstPIIXO = curr - 1;\n    var count = Math.min(Math.floor((i - iFirstSave) / 4), MAX_IMAGES_IN_INLINE_IMAGES_BLOCK);\n\n    if (count < MIN_IMAGES_IN_INLINE_IMAGES_BLOCK) {\n      return i - (i - iFirstSave) % 4;\n    }\n\n    var maxX = 0;\n    var map = [],\n        maxLineHeight = 0;\n    var currentX = IMAGE_PADDING,\n        currentY = IMAGE_PADDING;\n    var q;\n\n    for (q = 0; q < count; q++) {\n      var transform = argsArray[iFirstTransform + (q << 2)];\n      var img = argsArray[iFirstPIIXO + (q << 2)][0];\n\n      if (currentX + img.width > MAX_WIDTH) {\n        maxX = Math.max(maxX, currentX);\n        currentY += maxLineHeight + 2 * IMAGE_PADDING;\n        currentX = 0;\n        maxLineHeight = 0;\n      }\n\n      map.push({\n        transform,\n        x: currentX,\n        y: currentY,\n        w: img.width,\n        h: img.height\n      });\n      currentX += img.width + 2 * IMAGE_PADDING;\n      maxLineHeight = Math.max(maxLineHeight, img.height);\n    }\n\n    var imgWidth = Math.max(maxX, currentX) + IMAGE_PADDING;\n    var imgHeight = currentY + maxLineHeight + IMAGE_PADDING;\n    var imgData = new Uint8ClampedArray(imgWidth * imgHeight * 4);\n    var imgRowSize = imgWidth << 2;\n\n    for (q = 0; q < count; q++) {\n      var data = argsArray[iFirstPIIXO + (q << 2)][0].data;\n      var rowSize = map[q].w << 2;\n      var dataOffset = 0;\n      var offset = map[q].x + map[q].y * imgWidth << 2;\n      imgData.set(data.subarray(0, rowSize), offset - imgRowSize);\n\n      for (var k = 0, kk = map[q].h; k < kk; k++) {\n        imgData.set(data.subarray(dataOffset, dataOffset + rowSize), offset);\n        dataOffset += rowSize;\n        offset += imgRowSize;\n      }\n\n      imgData.set(data.subarray(dataOffset - rowSize, dataOffset), offset);\n\n      while (offset >= 0) {\n        data[offset - 4] = data[offset];\n        data[offset - 3] = data[offset + 1];\n        data[offset - 2] = data[offset + 2];\n        data[offset - 1] = data[offset + 3];\n        data[offset + rowSize] = data[offset + rowSize - 4];\n        data[offset + rowSize + 1] = data[offset + rowSize - 3];\n        data[offset + rowSize + 2] = data[offset + rowSize - 2];\n        data[offset + rowSize + 3] = data[offset + rowSize - 1];\n        offset -= imgRowSize;\n      }\n    }\n\n    fnArray.splice(iFirstSave, count * 4, _util.OPS.paintInlineImageXObjectGroup);\n    argsArray.splice(iFirstSave, count * 4, [{\n      width: imgWidth,\n      height: imgHeight,\n      kind: _util.ImageKind.RGBA_32BPP,\n      data: imgData\n    }, map]);\n    return iFirstSave + 1;\n  });\n  addState(InitialState, [_util.OPS.save, _util.OPS.transform, _util.OPS.paintImageMaskXObject, _util.OPS.restore], null, function iterateImageMaskGroup(context, i) {\n    var fnArray = context.fnArray;\n    var iFirstSave = context.iCurr - 3;\n    var pos = (i - iFirstSave) % 4;\n\n    switch (pos) {\n      case 0:\n        return fnArray[i] === _util.OPS.save;\n\n      case 1:\n        return fnArray[i] === _util.OPS.transform;\n\n      case 2:\n        return fnArray[i] === _util.OPS.paintImageMaskXObject;\n\n      case 3:\n        return fnArray[i] === _util.OPS.restore;\n    }\n\n    throw new Error(`iterateImageMaskGroup - invalid pos: ${pos}`);\n  }, function foundImageMaskGroup(context, i) {\n    var MIN_IMAGES_IN_MASKS_BLOCK = 10;\n    var MAX_IMAGES_IN_MASKS_BLOCK = 100;\n    var MAX_SAME_IMAGES_IN_MASKS_BLOCK = 1000;\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var curr = context.iCurr;\n    var iFirstSave = curr - 3;\n    var iFirstTransform = curr - 2;\n    var iFirstPIMXO = curr - 1;\n    var count = Math.floor((i - iFirstSave) / 4);\n    count = handlePaintSolidColorImageMask(iFirstSave, count, fnArray, argsArray);\n\n    if (count < MIN_IMAGES_IN_MASKS_BLOCK) {\n      return i - (i - iFirstSave) % 4;\n    }\n\n    var q;\n    var isSameImage = false;\n    var iTransform, transformArgs;\n    var firstPIMXOArg0 = argsArray[iFirstPIMXO][0];\n    const firstTransformArg0 = argsArray[iFirstTransform][0],\n          firstTransformArg1 = argsArray[iFirstTransform][1],\n          firstTransformArg2 = argsArray[iFirstTransform][2],\n          firstTransformArg3 = argsArray[iFirstTransform][3];\n\n    if (firstTransformArg1 === firstTransformArg2) {\n      isSameImage = true;\n      iTransform = iFirstTransform + 4;\n      var iPIMXO = iFirstPIMXO + 4;\n\n      for (q = 1; q < count; q++, iTransform += 4, iPIMXO += 4) {\n        transformArgs = argsArray[iTransform];\n\n        if (argsArray[iPIMXO][0] !== firstPIMXOArg0 || transformArgs[0] !== firstTransformArg0 || transformArgs[1] !== firstTransformArg1 || transformArgs[2] !== firstTransformArg2 || transformArgs[3] !== firstTransformArg3) {\n          if (q < MIN_IMAGES_IN_MASKS_BLOCK) {\n            isSameImage = false;\n          } else {\n            count = q;\n          }\n\n          break;\n        }\n      }\n    }\n\n    if (isSameImage) {\n      count = Math.min(count, MAX_SAME_IMAGES_IN_MASKS_BLOCK);\n      var positions = new Float32Array(count * 2);\n      iTransform = iFirstTransform;\n\n      for (q = 0; q < count; q++, iTransform += 4) {\n        transformArgs = argsArray[iTransform];\n        positions[q << 1] = transformArgs[4];\n        positions[(q << 1) + 1] = transformArgs[5];\n      }\n\n      fnArray.splice(iFirstSave, count * 4, _util.OPS.paintImageMaskXObjectRepeat);\n      argsArray.splice(iFirstSave, count * 4, [firstPIMXOArg0, firstTransformArg0, firstTransformArg1, firstTransformArg2, firstTransformArg3, positions]);\n    } else {\n      count = Math.min(count, MAX_IMAGES_IN_MASKS_BLOCK);\n      var images = [];\n\n      for (q = 0; q < count; q++) {\n        transformArgs = argsArray[iFirstTransform + (q << 2)];\n        var maskParams = argsArray[iFirstPIMXO + (q << 2)][0];\n        images.push({\n          data: maskParams.data,\n          width: maskParams.width,\n          height: maskParams.height,\n          transform: transformArgs\n        });\n      }\n\n      fnArray.splice(iFirstSave, count * 4, _util.OPS.paintImageMaskXObjectGroup);\n      argsArray.splice(iFirstSave, count * 4, [images]);\n    }\n\n    return iFirstSave + 1;\n  });\n  addState(InitialState, [_util.OPS.save, _util.OPS.transform, _util.OPS.paintImageXObject, _util.OPS.restore], function (context) {\n    var argsArray = context.argsArray;\n    var iFirstTransform = context.iCurr - 2;\n    return argsArray[iFirstTransform][1] === 0 && argsArray[iFirstTransform][2] === 0;\n  }, function iterateImageGroup(context, i) {\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var iFirstSave = context.iCurr - 3;\n    var pos = (i - iFirstSave) % 4;\n\n    switch (pos) {\n      case 0:\n        return fnArray[i] === _util.OPS.save;\n\n      case 1:\n        if (fnArray[i] !== _util.OPS.transform) {\n          return false;\n        }\n\n        var iFirstTransform = context.iCurr - 2;\n        var firstTransformArg0 = argsArray[iFirstTransform][0];\n        var firstTransformArg3 = argsArray[iFirstTransform][3];\n\n        if (argsArray[i][0] !== firstTransformArg0 || argsArray[i][1] !== 0 || argsArray[i][2] !== 0 || argsArray[i][3] !== firstTransformArg3) {\n          return false;\n        }\n\n        return true;\n\n      case 2:\n        if (fnArray[i] !== _util.OPS.paintImageXObject) {\n          return false;\n        }\n\n        var iFirstPIXO = context.iCurr - 1;\n        var firstPIXOArg0 = argsArray[iFirstPIXO][0];\n\n        if (argsArray[i][0] !== firstPIXOArg0) {\n          return false;\n        }\n\n        return true;\n\n      case 3:\n        return fnArray[i] === _util.OPS.restore;\n    }\n\n    throw new Error(`iterateImageGroup - invalid pos: ${pos}`);\n  }, function (context, i) {\n    var MIN_IMAGES_IN_BLOCK = 3;\n    var MAX_IMAGES_IN_BLOCK = 1000;\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var curr = context.iCurr;\n    var iFirstSave = curr - 3;\n    var iFirstTransform = curr - 2;\n    var iFirstPIXO = curr - 1;\n    var firstPIXOArg0 = argsArray[iFirstPIXO][0];\n    var firstTransformArg0 = argsArray[iFirstTransform][0];\n    var firstTransformArg3 = argsArray[iFirstTransform][3];\n    var count = Math.min(Math.floor((i - iFirstSave) / 4), MAX_IMAGES_IN_BLOCK);\n\n    if (count < MIN_IMAGES_IN_BLOCK) {\n      return i - (i - iFirstSave) % 4;\n    }\n\n    var positions = new Float32Array(count * 2);\n    var iTransform = iFirstTransform;\n\n    for (var q = 0; q < count; q++, iTransform += 4) {\n      var transformArgs = argsArray[iTransform];\n      positions[q << 1] = transformArgs[4];\n      positions[(q << 1) + 1] = transformArgs[5];\n    }\n\n    var args = [firstPIXOArg0, firstTransformArg0, firstTransformArg3, positions];\n    fnArray.splice(iFirstSave, count * 4, _util.OPS.paintImageXObjectRepeat);\n    argsArray.splice(iFirstSave, count * 4, args);\n    return iFirstSave + 1;\n  });\n  addState(InitialState, [_util.OPS.beginText, _util.OPS.setFont, _util.OPS.setTextMatrix, _util.OPS.showText, _util.OPS.endText], null, function iterateShowTextGroup(context, i) {\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var iFirstSave = context.iCurr - 4;\n    var pos = (i - iFirstSave) % 5;\n\n    switch (pos) {\n      case 0:\n        return fnArray[i] === _util.OPS.beginText;\n\n      case 1:\n        return fnArray[i] === _util.OPS.setFont;\n\n      case 2:\n        return fnArray[i] === _util.OPS.setTextMatrix;\n\n      case 3:\n        if (fnArray[i] !== _util.OPS.showText) {\n          return false;\n        }\n\n        var iFirstSetFont = context.iCurr - 3;\n        var firstSetFontArg0 = argsArray[iFirstSetFont][0];\n        var firstSetFontArg1 = argsArray[iFirstSetFont][1];\n\n        if (argsArray[i][0] !== firstSetFontArg0 || argsArray[i][1] !== firstSetFontArg1) {\n          return false;\n        }\n\n        return true;\n\n      case 4:\n        return fnArray[i] === _util.OPS.endText;\n    }\n\n    throw new Error(`iterateShowTextGroup - invalid pos: ${pos}`);\n  }, function (context, i) {\n    var MIN_CHARS_IN_BLOCK = 3;\n    var MAX_CHARS_IN_BLOCK = 1000;\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var curr = context.iCurr;\n    var iFirstBeginText = curr - 4;\n    var iFirstSetFont = curr - 3;\n    var iFirstSetTextMatrix = curr - 2;\n    var iFirstShowText = curr - 1;\n    var iFirstEndText = curr;\n    var firstSetFontArg0 = argsArray[iFirstSetFont][0];\n    var firstSetFontArg1 = argsArray[iFirstSetFont][1];\n    var count = Math.min(Math.floor((i - iFirstBeginText) / 5), MAX_CHARS_IN_BLOCK);\n\n    if (count < MIN_CHARS_IN_BLOCK) {\n      return i - (i - iFirstBeginText) % 5;\n    }\n\n    var iFirst = iFirstBeginText;\n\n    if (iFirstBeginText >= 4 && fnArray[iFirstBeginText - 4] === fnArray[iFirstSetFont] && fnArray[iFirstBeginText - 3] === fnArray[iFirstSetTextMatrix] && fnArray[iFirstBeginText - 2] === fnArray[iFirstShowText] && fnArray[iFirstBeginText - 1] === fnArray[iFirstEndText] && argsArray[iFirstBeginText - 4][0] === firstSetFontArg0 && argsArray[iFirstBeginText - 4][1] === firstSetFontArg1) {\n      count++;\n      iFirst -= 5;\n    }\n\n    var iEndText = iFirst + 4;\n\n    for (var q = 1; q < count; q++) {\n      fnArray.splice(iEndText, 3);\n      argsArray.splice(iEndText, 3);\n      iEndText += 2;\n    }\n\n    return iEndText + 1;\n  });\n\n  function QueueOptimizer(queue) {\n    this.queue = queue;\n    this.state = null;\n    this.context = {\n      iCurr: 0,\n      fnArray: queue.fnArray,\n      argsArray: queue.argsArray\n    };\n    this.match = null;\n    this.lastProcessed = 0;\n  }\n\n  QueueOptimizer.prototype = {\n    _optimize() {\n      const fnArray = this.queue.fnArray;\n      let i = this.lastProcessed,\n          ii = fnArray.length;\n      let state = this.state;\n      let match = this.match;\n\n      if (!state && !match && i + 1 === ii && !InitialState[fnArray[i]]) {\n        this.lastProcessed = ii;\n        return;\n      }\n\n      const context = this.context;\n\n      while (i < ii) {\n        if (match) {\n          const iterate = (0, match.iterateFn)(context, i);\n\n          if (iterate) {\n            i++;\n            continue;\n          }\n\n          i = (0, match.processFn)(context, i + 1);\n          ii = fnArray.length;\n          match = null;\n          state = null;\n\n          if (i >= ii) {\n            break;\n          }\n        }\n\n        state = (state || InitialState)[fnArray[i]];\n\n        if (!state || Array.isArray(state)) {\n          i++;\n          continue;\n        }\n\n        context.iCurr = i;\n        i++;\n\n        if (state.checkFn && !(0, state.checkFn)(context)) {\n          state = null;\n          continue;\n        }\n\n        match = state;\n        state = null;\n      }\n\n      this.state = state;\n      this.match = match;\n      this.lastProcessed = i;\n    },\n\n    push(fn, args) {\n      this.queue.fnArray.push(fn);\n      this.queue.argsArray.push(args);\n\n      this._optimize();\n    },\n\n    flush() {\n      while (this.match) {\n        const length = this.queue.fnArray.length;\n        this.lastProcessed = (0, this.match.processFn)(this.context, length);\n        this.match = null;\n        this.state = null;\n\n        this._optimize();\n      }\n    },\n\n    reset() {\n      this.state = null;\n      this.match = null;\n      this.lastProcessed = 0;\n    }\n\n  };\n  return QueueOptimizer;\n}();\n\nvar NullOptimizer = function NullOptimizerClosure() {\n  function NullOptimizer(queue) {\n    this.queue = queue;\n  }\n\n  NullOptimizer.prototype = {\n    push(fn, args) {\n      this.queue.fnArray.push(fn);\n      this.queue.argsArray.push(args);\n    },\n\n    flush() {},\n\n    reset() {}\n\n  };\n  return NullOptimizer;\n}();\n\nvar OperatorList = function OperatorListClosure() {\n  var CHUNK_SIZE = 1000;\n  var CHUNK_SIZE_ABOUT = CHUNK_SIZE - 5;\n\n  function OperatorList(intent, streamSink) {\n    this._streamSink = streamSink;\n    this.fnArray = [];\n    this.argsArray = [];\n\n    if (streamSink && intent !== "oplist") {\n      this.optimizer = new QueueOptimizer(this);\n    } else {\n      this.optimizer = new NullOptimizer(this);\n    }\n\n    this.dependencies = new Set();\n    this._totalLength = 0;\n    this.weight = 0;\n    this._resolved = streamSink ? null : Promise.resolve();\n  }\n\n  OperatorList.prototype = {\n    get length() {\n      return this.argsArray.length;\n    },\n\n    get ready() {\n      return this._resolved || this._streamSink.ready;\n    },\n\n    get totalLength() {\n      return this._totalLength + this.length;\n    },\n\n    addOp(fn, args) {\n      this.optimizer.push(fn, args);\n      this.weight++;\n\n      if (this._streamSink) {\n        if (this.weight >= CHUNK_SIZE) {\n          this.flush();\n        } else if (this.weight >= CHUNK_SIZE_ABOUT && (fn === _util.OPS.restore || fn === _util.OPS.endText)) {\n          this.flush();\n        }\n      }\n    },\n\n    addDependency(dependency) {\n      if (this.dependencies.has(dependency)) {\n        return;\n      }\n\n      this.dependencies.add(dependency);\n      this.addOp(_util.OPS.dependency, [dependency]);\n    },\n\n    addDependencies(dependencies) {\n      for (const dependency of dependencies) {\n        this.addDependency(dependency);\n      }\n    },\n\n    addOpList(opList) {\n      if (!(opList instanceof OperatorList)) {\n        (0, _util.warn)(\'addOpList - ignoring invalid "opList" parameter.\');\n        return;\n      }\n\n      for (const dependency of opList.dependencies) {\n        this.dependencies.add(dependency);\n      }\n\n      for (var i = 0, ii = opList.length; i < ii; i++) {\n        this.addOp(opList.fnArray[i], opList.argsArray[i]);\n      }\n    },\n\n    getIR() {\n      return {\n        fnArray: this.fnArray,\n        argsArray: this.argsArray,\n        length: this.length\n      };\n    },\n\n    get _transfers() {\n      const transfers = [];\n      const {\n        fnArray,\n        argsArray,\n        length\n      } = this;\n\n      for (let i = 0; i < length; i++) {\n        switch (fnArray[i]) {\n          case _util.OPS.paintInlineImageXObject:\n          case _util.OPS.paintInlineImageXObjectGroup:\n          case _util.OPS.paintImageMaskXObject:\n            const arg = argsArray[i][0];\n            ;\n\n            if (!arg.cached) {\n              transfers.push(arg.data.buffer);\n            }\n\n            break;\n        }\n      }\n\n      return transfers;\n    },\n\n    flush(lastChunk = false) {\n      this.optimizer.flush();\n      const length = this.length;\n      this._totalLength += length;\n\n      this._streamSink.enqueue({\n        fnArray: this.fnArray,\n        argsArray: this.argsArray,\n        lastChunk,\n        length\n      }, 1, this._transfers);\n\n      this.dependencies.clear();\n      this.fnArray.length = 0;\n      this.argsArray.length = 0;\n      this.weight = 0;\n      this.optimizer.reset();\n    }\n\n  };\n  return OperatorList;\n}();\n\nexports.OperatorList = OperatorList;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGRmanMtZGlzdC9saWIvY29yZS9vcGVyYXRvcl9saXN0LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vU2ltcGxlUGRmQW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvcGRmanMtZGlzdC9saWIvY29yZS9vcGVyYXRvcl9saXN0LmpzPzBjZDgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljc3RhcnQgVGhlIGZvbGxvd2luZyBpcyB0aGUgZW50aXJlIGxpY2Vuc2Ugbm90aWNlIGZvciB0aGVcbiAqIEphdmFzY3JpcHQgY29kZSBpbiB0aGlzIHBhZ2VcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMCBNb3ppbGxhIEZvdW5kYXRpb25cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQGxpY2VuZCBUaGUgYWJvdmUgaXMgdGhlIGVudGlyZSBsaWNlbnNlIG5vdGljZSBmb3IgdGhlXG4gKiBKYXZhc2NyaXB0IGNvZGUgaW4gdGhpcyBwYWdlXG4gKi9cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5PcGVyYXRvckxpc3QgPSB2b2lkIDA7XG5cbnZhciBfdXRpbCA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvdXRpbC5qc1wiKTtcblxudmFyIFF1ZXVlT3B0aW1pemVyID0gZnVuY3Rpb24gUXVldWVPcHRpbWl6ZXJDbG9zdXJlKCkge1xuICBmdW5jdGlvbiBhZGRTdGF0ZShwYXJlbnRTdGF0ZSwgcGF0dGVybiwgY2hlY2tGbiwgaXRlcmF0ZUZuLCBwcm9jZXNzRm4pIHtcbiAgICB2YXIgc3RhdGUgPSBwYXJlbnRTdGF0ZTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHBhdHRlcm4ubGVuZ3RoIC0gMTsgaSA8IGlpOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gcGF0dGVybltpXTtcbiAgICAgIHN0YXRlID0gc3RhdGVbaXRlbV0gfHwgKHN0YXRlW2l0ZW1dID0gW10pO1xuICAgIH1cblxuICAgIHN0YXRlW3BhdHRlcm5bcGF0dGVybi5sZW5ndGggLSAxXV0gPSB7XG4gICAgICBjaGVja0ZuLFxuICAgICAgaXRlcmF0ZUZuLFxuICAgICAgcHJvY2Vzc0ZuXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBhaW50U29saWRDb2xvckltYWdlTWFzayhpRmlyc3RTYXZlLCBjb3VudCwgZm5BcnJheSwgYXJnc0FycmF5KSB7XG4gICAgdmFyIGlGaXJzdFBJTVhPID0gaUZpcnN0U2F2ZSArIDI7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgIHZhciBhcmcgPSBhcmdzQXJyYXlbaUZpcnN0UElNWE8gKyA0ICogaV07XG4gICAgICB2YXIgaW1hZ2VNYXNrID0gYXJnLmxlbmd0aCA9PT0gMSAmJiBhcmdbMF07XG5cbiAgICAgIGlmIChpbWFnZU1hc2sgJiYgaW1hZ2VNYXNrLndpZHRoID09PSAxICYmIGltYWdlTWFzay5oZWlnaHQgPT09IDEgJiYgKCFpbWFnZU1hc2suZGF0YS5sZW5ndGggfHwgaW1hZ2VNYXNrLmRhdGEubGVuZ3RoID09PSAxICYmIGltYWdlTWFzay5kYXRhWzBdID09PSAwKSkge1xuICAgICAgICBmbkFycmF5W2lGaXJzdFBJTVhPICsgNCAqIGldID0gX3V0aWwuT1BTLnBhaW50U29saWRDb2xvckltYWdlTWFzaztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBjb3VudCAtIGk7XG4gIH1cblxuICB2YXIgSW5pdGlhbFN0YXRlID0gW107XG4gIGFkZFN0YXRlKEluaXRpYWxTdGF0ZSwgW191dGlsLk9QUy5zYXZlLCBfdXRpbC5PUFMudHJhbnNmb3JtLCBfdXRpbC5PUFMucGFpbnRJbmxpbmVJbWFnZVhPYmplY3QsIF91dGlsLk9QUy5yZXN0b3JlXSwgbnVsbCwgZnVuY3Rpb24gaXRlcmF0ZUlubGluZUltYWdlR3JvdXAoY29udGV4dCwgaSkge1xuICAgIHZhciBmbkFycmF5ID0gY29udGV4dC5mbkFycmF5O1xuICAgIHZhciBpRmlyc3RTYXZlID0gY29udGV4dC5pQ3VyciAtIDM7XG4gICAgdmFyIHBvcyA9IChpIC0gaUZpcnN0U2F2ZSkgJSA0O1xuXG4gICAgc3dpdGNoIChwb3MpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIGZuQXJyYXlbaV0gPT09IF91dGlsLk9QUy5zYXZlO1xuXG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBmbkFycmF5W2ldID09PSBfdXRpbC5PUFMudHJhbnNmb3JtO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBmbkFycmF5W2ldID09PSBfdXRpbC5PUFMucGFpbnRJbmxpbmVJbWFnZVhPYmplY3Q7XG5cbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIGZuQXJyYXlbaV0gPT09IF91dGlsLk9QUy5yZXN0b3JlO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihgaXRlcmF0ZUlubGluZUltYWdlR3JvdXAgLSBpbnZhbGlkIHBvczogJHtwb3N9YCk7XG4gIH0sIGZ1bmN0aW9uIGZvdW5kSW5saW5lSW1hZ2VHcm91cChjb250ZXh0LCBpKSB7XG4gICAgdmFyIE1JTl9JTUFHRVNfSU5fSU5MSU5FX0lNQUdFU19CTE9DSyA9IDEwO1xuICAgIHZhciBNQVhfSU1BR0VTX0lOX0lOTElORV9JTUFHRVNfQkxPQ0sgPSAyMDA7XG4gICAgdmFyIE1BWF9XSURUSCA9IDEwMDA7XG4gICAgdmFyIElNQUdFX1BBRERJTkcgPSAxO1xuICAgIHZhciBmbkFycmF5ID0gY29udGV4dC5mbkFycmF5LFxuICAgICAgICBhcmdzQXJyYXkgPSBjb250ZXh0LmFyZ3NBcnJheTtcbiAgICB2YXIgY3VyciA9IGNvbnRleHQuaUN1cnI7XG4gICAgdmFyIGlGaXJzdFNhdmUgPSBjdXJyIC0gMztcbiAgICB2YXIgaUZpcnN0VHJhbnNmb3JtID0gY3VyciAtIDI7XG4gICAgdmFyIGlGaXJzdFBJSVhPID0gY3VyciAtIDE7XG4gICAgdmFyIGNvdW50ID0gTWF0aC5taW4oTWF0aC5mbG9vcigoaSAtIGlGaXJzdFNhdmUpIC8gNCksIE1BWF9JTUFHRVNfSU5fSU5MSU5FX0lNQUdFU19CTE9DSyk7XG5cbiAgICBpZiAoY291bnQgPCBNSU5fSU1BR0VTX0lOX0lOTElORV9JTUFHRVNfQkxPQ0spIHtcbiAgICAgIHJldHVybiBpIC0gKGkgLSBpRmlyc3RTYXZlKSAlIDQ7XG4gICAgfVxuXG4gICAgdmFyIG1heFggPSAwO1xuICAgIHZhciBtYXAgPSBbXSxcbiAgICAgICAgbWF4TGluZUhlaWdodCA9IDA7XG4gICAgdmFyIGN1cnJlbnRYID0gSU1BR0VfUEFERElORyxcbiAgICAgICAgY3VycmVudFkgPSBJTUFHRV9QQURESU5HO1xuICAgIHZhciBxO1xuXG4gICAgZm9yIChxID0gMDsgcSA8IGNvdW50OyBxKyspIHtcbiAgICAgIHZhciB0cmFuc2Zvcm0gPSBhcmdzQXJyYXlbaUZpcnN0VHJhbnNmb3JtICsgKHEgPDwgMildO1xuICAgICAgdmFyIGltZyA9IGFyZ3NBcnJheVtpRmlyc3RQSUlYTyArIChxIDw8IDIpXVswXTtcblxuICAgICAgaWYgKGN1cnJlbnRYICsgaW1nLndpZHRoID4gTUFYX1dJRFRIKSB7XG4gICAgICAgIG1heFggPSBNYXRoLm1heChtYXhYLCBjdXJyZW50WCk7XG4gICAgICAgIGN1cnJlbnRZICs9IG1heExpbmVIZWlnaHQgKyAyICogSU1BR0VfUEFERElORztcbiAgICAgICAgY3VycmVudFggPSAwO1xuICAgICAgICBtYXhMaW5lSGVpZ2h0ID0gMDtcbiAgICAgIH1cblxuICAgICAgbWFwLnB1c2goe1xuICAgICAgICB0cmFuc2Zvcm0sXG4gICAgICAgIHg6IGN1cnJlbnRYLFxuICAgICAgICB5OiBjdXJyZW50WSxcbiAgICAgICAgdzogaW1nLndpZHRoLFxuICAgICAgICBoOiBpbWcuaGVpZ2h0XG4gICAgICB9KTtcbiAgICAgIGN1cnJlbnRYICs9IGltZy53aWR0aCArIDIgKiBJTUFHRV9QQURESU5HO1xuICAgICAgbWF4TGluZUhlaWdodCA9IE1hdGgubWF4KG1heExpbmVIZWlnaHQsIGltZy5oZWlnaHQpO1xuICAgIH1cblxuICAgIHZhciBpbWdXaWR0aCA9IE1hdGgubWF4KG1heFgsIGN1cnJlbnRYKSArIElNQUdFX1BBRERJTkc7XG4gICAgdmFyIGltZ0hlaWdodCA9IGN1cnJlbnRZICsgbWF4TGluZUhlaWdodCArIElNQUdFX1BBRERJTkc7XG4gICAgdmFyIGltZ0RhdGEgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkoaW1nV2lkdGggKiBpbWdIZWlnaHQgKiA0KTtcbiAgICB2YXIgaW1nUm93U2l6ZSA9IGltZ1dpZHRoIDw8IDI7XG5cbiAgICBmb3IgKHEgPSAwOyBxIDwgY291bnQ7IHErKykge1xuICAgICAgdmFyIGRhdGEgPSBhcmdzQXJyYXlbaUZpcnN0UElJWE8gKyAocSA8PCAyKV1bMF0uZGF0YTtcbiAgICAgIHZhciByb3dTaXplID0gbWFwW3FdLncgPDwgMjtcbiAgICAgIHZhciBkYXRhT2Zmc2V0ID0gMDtcbiAgICAgIHZhciBvZmZzZXQgPSBtYXBbcV0ueCArIG1hcFtxXS55ICogaW1nV2lkdGggPDwgMjtcbiAgICAgIGltZ0RhdGEuc2V0KGRhdGEuc3ViYXJyYXkoMCwgcm93U2l6ZSksIG9mZnNldCAtIGltZ1Jvd1NpemUpO1xuXG4gICAgICBmb3IgKHZhciBrID0gMCwga2sgPSBtYXBbcV0uaDsgayA8IGtrOyBrKyspIHtcbiAgICAgICAgaW1nRGF0YS5zZXQoZGF0YS5zdWJhcnJheShkYXRhT2Zmc2V0LCBkYXRhT2Zmc2V0ICsgcm93U2l6ZSksIG9mZnNldCk7XG4gICAgICAgIGRhdGFPZmZzZXQgKz0gcm93U2l6ZTtcbiAgICAgICAgb2Zmc2V0ICs9IGltZ1Jvd1NpemU7XG4gICAgICB9XG5cbiAgICAgIGltZ0RhdGEuc2V0KGRhdGEuc3ViYXJyYXkoZGF0YU9mZnNldCAtIHJvd1NpemUsIGRhdGFPZmZzZXQpLCBvZmZzZXQpO1xuXG4gICAgICB3aGlsZSAob2Zmc2V0ID49IDApIHtcbiAgICAgICAgZGF0YVtvZmZzZXQgLSA0XSA9IGRhdGFbb2Zmc2V0XTtcbiAgICAgICAgZGF0YVtvZmZzZXQgLSAzXSA9IGRhdGFbb2Zmc2V0ICsgMV07XG4gICAgICAgIGRhdGFbb2Zmc2V0IC0gMl0gPSBkYXRhW29mZnNldCArIDJdO1xuICAgICAgICBkYXRhW29mZnNldCAtIDFdID0gZGF0YVtvZmZzZXQgKyAzXTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyByb3dTaXplXSA9IGRhdGFbb2Zmc2V0ICsgcm93U2l6ZSAtIDRdO1xuICAgICAgICBkYXRhW29mZnNldCArIHJvd1NpemUgKyAxXSA9IGRhdGFbb2Zmc2V0ICsgcm93U2l6ZSAtIDNdO1xuICAgICAgICBkYXRhW29mZnNldCArIHJvd1NpemUgKyAyXSA9IGRhdGFbb2Zmc2V0ICsgcm93U2l6ZSAtIDJdO1xuICAgICAgICBkYXRhW29mZnNldCArIHJvd1NpemUgKyAzXSA9IGRhdGFbb2Zmc2V0ICsgcm93U2l6ZSAtIDFdO1xuICAgICAgICBvZmZzZXQgLT0gaW1nUm93U2l6ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmbkFycmF5LnNwbGljZShpRmlyc3RTYXZlLCBjb3VudCAqIDQsIF91dGlsLk9QUy5wYWludElubGluZUltYWdlWE9iamVjdEdyb3VwKTtcbiAgICBhcmdzQXJyYXkuc3BsaWNlKGlGaXJzdFNhdmUsIGNvdW50ICogNCwgW3tcbiAgICAgIHdpZHRoOiBpbWdXaWR0aCxcbiAgICAgIGhlaWdodDogaW1nSGVpZ2h0LFxuICAgICAga2luZDogX3V0aWwuSW1hZ2VLaW5kLlJHQkFfMzJCUFAsXG4gICAgICBkYXRhOiBpbWdEYXRhXG4gICAgfSwgbWFwXSk7XG4gICAgcmV0dXJuIGlGaXJzdFNhdmUgKyAxO1xuICB9KTtcbiAgYWRkU3RhdGUoSW5pdGlhbFN0YXRlLCBbX3V0aWwuT1BTLnNhdmUsIF91dGlsLk9QUy50cmFuc2Zvcm0sIF91dGlsLk9QUy5wYWludEltYWdlTWFza1hPYmplY3QsIF91dGlsLk9QUy5yZXN0b3JlXSwgbnVsbCwgZnVuY3Rpb24gaXRlcmF0ZUltYWdlTWFza0dyb3VwKGNvbnRleHQsIGkpIHtcbiAgICB2YXIgZm5BcnJheSA9IGNvbnRleHQuZm5BcnJheTtcbiAgICB2YXIgaUZpcnN0U2F2ZSA9IGNvbnRleHQuaUN1cnIgLSAzO1xuICAgIHZhciBwb3MgPSAoaSAtIGlGaXJzdFNhdmUpICUgNDtcblxuICAgIHN3aXRjaCAocG9zKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiBmbkFycmF5W2ldID09PSBfdXRpbC5PUFMuc2F2ZTtcblxuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gZm5BcnJheVtpXSA9PT0gX3V0aWwuT1BTLnRyYW5zZm9ybTtcblxuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gZm5BcnJheVtpXSA9PT0gX3V0aWwuT1BTLnBhaW50SW1hZ2VNYXNrWE9iamVjdDtcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gZm5BcnJheVtpXSA9PT0gX3V0aWwuT1BTLnJlc3RvcmU7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKGBpdGVyYXRlSW1hZ2VNYXNrR3JvdXAgLSBpbnZhbGlkIHBvczogJHtwb3N9YCk7XG4gIH0sIGZ1bmN0aW9uIGZvdW5kSW1hZ2VNYXNrR3JvdXAoY29udGV4dCwgaSkge1xuICAgIHZhciBNSU5fSU1BR0VTX0lOX01BU0tTX0JMT0NLID0gMTA7XG4gICAgdmFyIE1BWF9JTUFHRVNfSU5fTUFTS1NfQkxPQ0sgPSAxMDA7XG4gICAgdmFyIE1BWF9TQU1FX0lNQUdFU19JTl9NQVNLU19CTE9DSyA9IDEwMDA7XG4gICAgdmFyIGZuQXJyYXkgPSBjb250ZXh0LmZuQXJyYXksXG4gICAgICAgIGFyZ3NBcnJheSA9IGNvbnRleHQuYXJnc0FycmF5O1xuICAgIHZhciBjdXJyID0gY29udGV4dC5pQ3VycjtcbiAgICB2YXIgaUZpcnN0U2F2ZSA9IGN1cnIgLSAzO1xuICAgIHZhciBpRmlyc3RUcmFuc2Zvcm0gPSBjdXJyIC0gMjtcbiAgICB2YXIgaUZpcnN0UElNWE8gPSBjdXJyIC0gMTtcbiAgICB2YXIgY291bnQgPSBNYXRoLmZsb29yKChpIC0gaUZpcnN0U2F2ZSkgLyA0KTtcbiAgICBjb3VudCA9IGhhbmRsZVBhaW50U29saWRDb2xvckltYWdlTWFzayhpRmlyc3RTYXZlLCBjb3VudCwgZm5BcnJheSwgYXJnc0FycmF5KTtcblxuICAgIGlmIChjb3VudCA8IE1JTl9JTUFHRVNfSU5fTUFTS1NfQkxPQ0spIHtcbiAgICAgIHJldHVybiBpIC0gKGkgLSBpRmlyc3RTYXZlKSAlIDQ7XG4gICAgfVxuXG4gICAgdmFyIHE7XG4gICAgdmFyIGlzU2FtZUltYWdlID0gZmFsc2U7XG4gICAgdmFyIGlUcmFuc2Zvcm0sIHRyYW5zZm9ybUFyZ3M7XG4gICAgdmFyIGZpcnN0UElNWE9BcmcwID0gYXJnc0FycmF5W2lGaXJzdFBJTVhPXVswXTtcbiAgICBjb25zdCBmaXJzdFRyYW5zZm9ybUFyZzAgPSBhcmdzQXJyYXlbaUZpcnN0VHJhbnNmb3JtXVswXSxcbiAgICAgICAgICBmaXJzdFRyYW5zZm9ybUFyZzEgPSBhcmdzQXJyYXlbaUZpcnN0VHJhbnNmb3JtXVsxXSxcbiAgICAgICAgICBmaXJzdFRyYW5zZm9ybUFyZzIgPSBhcmdzQXJyYXlbaUZpcnN0VHJhbnNmb3JtXVsyXSxcbiAgICAgICAgICBmaXJzdFRyYW5zZm9ybUFyZzMgPSBhcmdzQXJyYXlbaUZpcnN0VHJhbnNmb3JtXVszXTtcblxuICAgIGlmIChmaXJzdFRyYW5zZm9ybUFyZzEgPT09IGZpcnN0VHJhbnNmb3JtQXJnMikge1xuICAgICAgaXNTYW1lSW1hZ2UgPSB0cnVlO1xuICAgICAgaVRyYW5zZm9ybSA9IGlGaXJzdFRyYW5zZm9ybSArIDQ7XG4gICAgICB2YXIgaVBJTVhPID0gaUZpcnN0UElNWE8gKyA0O1xuXG4gICAgICBmb3IgKHEgPSAxOyBxIDwgY291bnQ7IHErKywgaVRyYW5zZm9ybSArPSA0LCBpUElNWE8gKz0gNCkge1xuICAgICAgICB0cmFuc2Zvcm1BcmdzID0gYXJnc0FycmF5W2lUcmFuc2Zvcm1dO1xuXG4gICAgICAgIGlmIChhcmdzQXJyYXlbaVBJTVhPXVswXSAhPT0gZmlyc3RQSU1YT0FyZzAgfHwgdHJhbnNmb3JtQXJnc1swXSAhPT0gZmlyc3RUcmFuc2Zvcm1BcmcwIHx8IHRyYW5zZm9ybUFyZ3NbMV0gIT09IGZpcnN0VHJhbnNmb3JtQXJnMSB8fCB0cmFuc2Zvcm1BcmdzWzJdICE9PSBmaXJzdFRyYW5zZm9ybUFyZzIgfHwgdHJhbnNmb3JtQXJnc1szXSAhPT0gZmlyc3RUcmFuc2Zvcm1BcmczKSB7XG4gICAgICAgICAgaWYgKHEgPCBNSU5fSU1BR0VTX0lOX01BU0tTX0JMT0NLKSB7XG4gICAgICAgICAgICBpc1NhbWVJbWFnZSA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb3VudCA9IHE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNTYW1lSW1hZ2UpIHtcbiAgICAgIGNvdW50ID0gTWF0aC5taW4oY291bnQsIE1BWF9TQU1FX0lNQUdFU19JTl9NQVNLU19CTE9DSyk7XG4gICAgICB2YXIgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheShjb3VudCAqIDIpO1xuICAgICAgaVRyYW5zZm9ybSA9IGlGaXJzdFRyYW5zZm9ybTtcblxuICAgICAgZm9yIChxID0gMDsgcSA8IGNvdW50OyBxKyssIGlUcmFuc2Zvcm0gKz0gNCkge1xuICAgICAgICB0cmFuc2Zvcm1BcmdzID0gYXJnc0FycmF5W2lUcmFuc2Zvcm1dO1xuICAgICAgICBwb3NpdGlvbnNbcSA8PCAxXSA9IHRyYW5zZm9ybUFyZ3NbNF07XG4gICAgICAgIHBvc2l0aW9uc1socSA8PCAxKSArIDFdID0gdHJhbnNmb3JtQXJnc1s1XTtcbiAgICAgIH1cblxuICAgICAgZm5BcnJheS5zcGxpY2UoaUZpcnN0U2F2ZSwgY291bnQgKiA0LCBfdXRpbC5PUFMucGFpbnRJbWFnZU1hc2tYT2JqZWN0UmVwZWF0KTtcbiAgICAgIGFyZ3NBcnJheS5zcGxpY2UoaUZpcnN0U2F2ZSwgY291bnQgKiA0LCBbZmlyc3RQSU1YT0FyZzAsIGZpcnN0VHJhbnNmb3JtQXJnMCwgZmlyc3RUcmFuc2Zvcm1BcmcxLCBmaXJzdFRyYW5zZm9ybUFyZzIsIGZpcnN0VHJhbnNmb3JtQXJnMywgcG9zaXRpb25zXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ID0gTWF0aC5taW4oY291bnQsIE1BWF9JTUFHRVNfSU5fTUFTS1NfQkxPQ0spO1xuICAgICAgdmFyIGltYWdlcyA9IFtdO1xuXG4gICAgICBmb3IgKHEgPSAwOyBxIDwgY291bnQ7IHErKykge1xuICAgICAgICB0cmFuc2Zvcm1BcmdzID0gYXJnc0FycmF5W2lGaXJzdFRyYW5zZm9ybSArIChxIDw8IDIpXTtcbiAgICAgICAgdmFyIG1hc2tQYXJhbXMgPSBhcmdzQXJyYXlbaUZpcnN0UElNWE8gKyAocSA8PCAyKV1bMF07XG4gICAgICAgIGltYWdlcy5wdXNoKHtcbiAgICAgICAgICBkYXRhOiBtYXNrUGFyYW1zLmRhdGEsXG4gICAgICAgICAgd2lkdGg6IG1hc2tQYXJhbXMud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBtYXNrUGFyYW1zLmhlaWdodCxcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybUFyZ3NcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZuQXJyYXkuc3BsaWNlKGlGaXJzdFNhdmUsIGNvdW50ICogNCwgX3V0aWwuT1BTLnBhaW50SW1hZ2VNYXNrWE9iamVjdEdyb3VwKTtcbiAgICAgIGFyZ3NBcnJheS5zcGxpY2UoaUZpcnN0U2F2ZSwgY291bnQgKiA0LCBbaW1hZ2VzXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlGaXJzdFNhdmUgKyAxO1xuICB9KTtcbiAgYWRkU3RhdGUoSW5pdGlhbFN0YXRlLCBbX3V0aWwuT1BTLnNhdmUsIF91dGlsLk9QUy50cmFuc2Zvcm0sIF91dGlsLk9QUy5wYWludEltYWdlWE9iamVjdCwgX3V0aWwuT1BTLnJlc3RvcmVdLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHZhciBhcmdzQXJyYXkgPSBjb250ZXh0LmFyZ3NBcnJheTtcbiAgICB2YXIgaUZpcnN0VHJhbnNmb3JtID0gY29udGV4dC5pQ3VyciAtIDI7XG4gICAgcmV0dXJuIGFyZ3NBcnJheVtpRmlyc3RUcmFuc2Zvcm1dWzFdID09PSAwICYmIGFyZ3NBcnJheVtpRmlyc3RUcmFuc2Zvcm1dWzJdID09PSAwO1xuICB9LCBmdW5jdGlvbiBpdGVyYXRlSW1hZ2VHcm91cChjb250ZXh0LCBpKSB7XG4gICAgdmFyIGZuQXJyYXkgPSBjb250ZXh0LmZuQXJyYXksXG4gICAgICAgIGFyZ3NBcnJheSA9IGNvbnRleHQuYXJnc0FycmF5O1xuICAgIHZhciBpRmlyc3RTYXZlID0gY29udGV4dC5pQ3VyciAtIDM7XG4gICAgdmFyIHBvcyA9IChpIC0gaUZpcnN0U2F2ZSkgJSA0O1xuXG4gICAgc3dpdGNoIChwb3MpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIGZuQXJyYXlbaV0gPT09IF91dGlsLk9QUy5zYXZlO1xuXG4gICAgICBjYXNlIDE6XG4gICAgICAgIGlmIChmbkFycmF5W2ldICE9PSBfdXRpbC5PUFMudHJhbnNmb3JtKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlGaXJzdFRyYW5zZm9ybSA9IGNvbnRleHQuaUN1cnIgLSAyO1xuICAgICAgICB2YXIgZmlyc3RUcmFuc2Zvcm1BcmcwID0gYXJnc0FycmF5W2lGaXJzdFRyYW5zZm9ybV1bMF07XG4gICAgICAgIHZhciBmaXJzdFRyYW5zZm9ybUFyZzMgPSBhcmdzQXJyYXlbaUZpcnN0VHJhbnNmb3JtXVszXTtcblxuICAgICAgICBpZiAoYXJnc0FycmF5W2ldWzBdICE9PSBmaXJzdFRyYW5zZm9ybUFyZzAgfHwgYXJnc0FycmF5W2ldWzFdICE9PSAwIHx8IGFyZ3NBcnJheVtpXVsyXSAhPT0gMCB8fCBhcmdzQXJyYXlbaV1bM10gIT09IGZpcnN0VHJhbnNmb3JtQXJnMykge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIGlmIChmbkFycmF5W2ldICE9PSBfdXRpbC5PUFMucGFpbnRJbWFnZVhPYmplY3QpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaUZpcnN0UElYTyA9IGNvbnRleHQuaUN1cnIgLSAxO1xuICAgICAgICB2YXIgZmlyc3RQSVhPQXJnMCA9IGFyZ3NBcnJheVtpRmlyc3RQSVhPXVswXTtcblxuICAgICAgICBpZiAoYXJnc0FycmF5W2ldWzBdICE9PSBmaXJzdFBJWE9BcmcwKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIGZuQXJyYXlbaV0gPT09IF91dGlsLk9QUy5yZXN0b3JlO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihgaXRlcmF0ZUltYWdlR3JvdXAgLSBpbnZhbGlkIHBvczogJHtwb3N9YCk7XG4gIH0sIGZ1bmN0aW9uIChjb250ZXh0LCBpKSB7XG4gICAgdmFyIE1JTl9JTUFHRVNfSU5fQkxPQ0sgPSAzO1xuICAgIHZhciBNQVhfSU1BR0VTX0lOX0JMT0NLID0gMTAwMDtcbiAgICB2YXIgZm5BcnJheSA9IGNvbnRleHQuZm5BcnJheSxcbiAgICAgICAgYXJnc0FycmF5ID0gY29udGV4dC5hcmdzQXJyYXk7XG4gICAgdmFyIGN1cnIgPSBjb250ZXh0LmlDdXJyO1xuICAgIHZhciBpRmlyc3RTYXZlID0gY3VyciAtIDM7XG4gICAgdmFyIGlGaXJzdFRyYW5zZm9ybSA9IGN1cnIgLSAyO1xuICAgIHZhciBpRmlyc3RQSVhPID0gY3VyciAtIDE7XG4gICAgdmFyIGZpcnN0UElYT0FyZzAgPSBhcmdzQXJyYXlbaUZpcnN0UElYT11bMF07XG4gICAgdmFyIGZpcnN0VHJhbnNmb3JtQXJnMCA9IGFyZ3NBcnJheVtpRmlyc3RUcmFuc2Zvcm1dWzBdO1xuICAgIHZhciBmaXJzdFRyYW5zZm9ybUFyZzMgPSBhcmdzQXJyYXlbaUZpcnN0VHJhbnNmb3JtXVszXTtcbiAgICB2YXIgY291bnQgPSBNYXRoLm1pbihNYXRoLmZsb29yKChpIC0gaUZpcnN0U2F2ZSkgLyA0KSwgTUFYX0lNQUdFU19JTl9CTE9DSyk7XG5cbiAgICBpZiAoY291bnQgPCBNSU5fSU1BR0VTX0lOX0JMT0NLKSB7XG4gICAgICByZXR1cm4gaSAtIChpIC0gaUZpcnN0U2F2ZSkgJSA0O1xuICAgIH1cblxuICAgIHZhciBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KGNvdW50ICogMik7XG4gICAgdmFyIGlUcmFuc2Zvcm0gPSBpRmlyc3RUcmFuc2Zvcm07XG5cbiAgICBmb3IgKHZhciBxID0gMDsgcSA8IGNvdW50OyBxKyssIGlUcmFuc2Zvcm0gKz0gNCkge1xuICAgICAgdmFyIHRyYW5zZm9ybUFyZ3MgPSBhcmdzQXJyYXlbaVRyYW5zZm9ybV07XG4gICAgICBwb3NpdGlvbnNbcSA8PCAxXSA9IHRyYW5zZm9ybUFyZ3NbNF07XG4gICAgICBwb3NpdGlvbnNbKHEgPDwgMSkgKyAxXSA9IHRyYW5zZm9ybUFyZ3NbNV07XG4gICAgfVxuXG4gICAgdmFyIGFyZ3MgPSBbZmlyc3RQSVhPQXJnMCwgZmlyc3RUcmFuc2Zvcm1BcmcwLCBmaXJzdFRyYW5zZm9ybUFyZzMsIHBvc2l0aW9uc107XG4gICAgZm5BcnJheS5zcGxpY2UoaUZpcnN0U2F2ZSwgY291bnQgKiA0LCBfdXRpbC5PUFMucGFpbnRJbWFnZVhPYmplY3RSZXBlYXQpO1xuICAgIGFyZ3NBcnJheS5zcGxpY2UoaUZpcnN0U2F2ZSwgY291bnQgKiA0LCBhcmdzKTtcbiAgICByZXR1cm4gaUZpcnN0U2F2ZSArIDE7XG4gIH0pO1xuICBhZGRTdGF0ZShJbml0aWFsU3RhdGUsIFtfdXRpbC5PUFMuYmVnaW5UZXh0LCBfdXRpbC5PUFMuc2V0Rm9udCwgX3V0aWwuT1BTLnNldFRleHRNYXRyaXgsIF91dGlsLk9QUy5zaG93VGV4dCwgX3V0aWwuT1BTLmVuZFRleHRdLCBudWxsLCBmdW5jdGlvbiBpdGVyYXRlU2hvd1RleHRHcm91cChjb250ZXh0LCBpKSB7XG4gICAgdmFyIGZuQXJyYXkgPSBjb250ZXh0LmZuQXJyYXksXG4gICAgICAgIGFyZ3NBcnJheSA9IGNvbnRleHQuYXJnc0FycmF5O1xuICAgIHZhciBpRmlyc3RTYXZlID0gY29udGV4dC5pQ3VyciAtIDQ7XG4gICAgdmFyIHBvcyA9IChpIC0gaUZpcnN0U2F2ZSkgJSA1O1xuXG4gICAgc3dpdGNoIChwb3MpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIGZuQXJyYXlbaV0gPT09IF91dGlsLk9QUy5iZWdpblRleHQ7XG5cbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIGZuQXJyYXlbaV0gPT09IF91dGlsLk9QUy5zZXRGb250O1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBmbkFycmF5W2ldID09PSBfdXRpbC5PUFMuc2V0VGV4dE1hdHJpeDtcblxuICAgICAgY2FzZSAzOlxuICAgICAgICBpZiAoZm5BcnJheVtpXSAhPT0gX3V0aWwuT1BTLnNob3dUZXh0KSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlGaXJzdFNldEZvbnQgPSBjb250ZXh0LmlDdXJyIC0gMztcbiAgICAgICAgdmFyIGZpcnN0U2V0Rm9udEFyZzAgPSBhcmdzQXJyYXlbaUZpcnN0U2V0Rm9udF1bMF07XG4gICAgICAgIHZhciBmaXJzdFNldEZvbnRBcmcxID0gYXJnc0FycmF5W2lGaXJzdFNldEZvbnRdWzFdO1xuXG4gICAgICAgIGlmIChhcmdzQXJyYXlbaV1bMF0gIT09IGZpcnN0U2V0Rm9udEFyZzAgfHwgYXJnc0FycmF5W2ldWzFdICE9PSBmaXJzdFNldEZvbnRBcmcxKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgIGNhc2UgNDpcbiAgICAgICAgcmV0dXJuIGZuQXJyYXlbaV0gPT09IF91dGlsLk9QUy5lbmRUZXh0O1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihgaXRlcmF0ZVNob3dUZXh0R3JvdXAgLSBpbnZhbGlkIHBvczogJHtwb3N9YCk7XG4gIH0sIGZ1bmN0aW9uIChjb250ZXh0LCBpKSB7XG4gICAgdmFyIE1JTl9DSEFSU19JTl9CTE9DSyA9IDM7XG4gICAgdmFyIE1BWF9DSEFSU19JTl9CTE9DSyA9IDEwMDA7XG4gICAgdmFyIGZuQXJyYXkgPSBjb250ZXh0LmZuQXJyYXksXG4gICAgICAgIGFyZ3NBcnJheSA9IGNvbnRleHQuYXJnc0FycmF5O1xuICAgIHZhciBjdXJyID0gY29udGV4dC5pQ3VycjtcbiAgICB2YXIgaUZpcnN0QmVnaW5UZXh0ID0gY3VyciAtIDQ7XG4gICAgdmFyIGlGaXJzdFNldEZvbnQgPSBjdXJyIC0gMztcbiAgICB2YXIgaUZpcnN0U2V0VGV4dE1hdHJpeCA9IGN1cnIgLSAyO1xuICAgIHZhciBpRmlyc3RTaG93VGV4dCA9IGN1cnIgLSAxO1xuICAgIHZhciBpRmlyc3RFbmRUZXh0ID0gY3VycjtcbiAgICB2YXIgZmlyc3RTZXRGb250QXJnMCA9IGFyZ3NBcnJheVtpRmlyc3RTZXRGb250XVswXTtcbiAgICB2YXIgZmlyc3RTZXRGb250QXJnMSA9IGFyZ3NBcnJheVtpRmlyc3RTZXRGb250XVsxXTtcbiAgICB2YXIgY291bnQgPSBNYXRoLm1pbihNYXRoLmZsb29yKChpIC0gaUZpcnN0QmVnaW5UZXh0KSAvIDUpLCBNQVhfQ0hBUlNfSU5fQkxPQ0spO1xuXG4gICAgaWYgKGNvdW50IDwgTUlOX0NIQVJTX0lOX0JMT0NLKSB7XG4gICAgICByZXR1cm4gaSAtIChpIC0gaUZpcnN0QmVnaW5UZXh0KSAlIDU7XG4gICAgfVxuXG4gICAgdmFyIGlGaXJzdCA9IGlGaXJzdEJlZ2luVGV4dDtcblxuICAgIGlmIChpRmlyc3RCZWdpblRleHQgPj0gNCAmJiBmbkFycmF5W2lGaXJzdEJlZ2luVGV4dCAtIDRdID09PSBmbkFycmF5W2lGaXJzdFNldEZvbnRdICYmIGZuQXJyYXlbaUZpcnN0QmVnaW5UZXh0IC0gM10gPT09IGZuQXJyYXlbaUZpcnN0U2V0VGV4dE1hdHJpeF0gJiYgZm5BcnJheVtpRmlyc3RCZWdpblRleHQgLSAyXSA9PT0gZm5BcnJheVtpRmlyc3RTaG93VGV4dF0gJiYgZm5BcnJheVtpRmlyc3RCZWdpblRleHQgLSAxXSA9PT0gZm5BcnJheVtpRmlyc3RFbmRUZXh0XSAmJiBhcmdzQXJyYXlbaUZpcnN0QmVnaW5UZXh0IC0gNF1bMF0gPT09IGZpcnN0U2V0Rm9udEFyZzAgJiYgYXJnc0FycmF5W2lGaXJzdEJlZ2luVGV4dCAtIDRdWzFdID09PSBmaXJzdFNldEZvbnRBcmcxKSB7XG4gICAgICBjb3VudCsrO1xuICAgICAgaUZpcnN0IC09IDU7XG4gICAgfVxuXG4gICAgdmFyIGlFbmRUZXh0ID0gaUZpcnN0ICsgNDtcblxuICAgIGZvciAodmFyIHEgPSAxOyBxIDwgY291bnQ7IHErKykge1xuICAgICAgZm5BcnJheS5zcGxpY2UoaUVuZFRleHQsIDMpO1xuICAgICAgYXJnc0FycmF5LnNwbGljZShpRW5kVGV4dCwgMyk7XG4gICAgICBpRW5kVGV4dCArPSAyO1xuICAgIH1cblxuICAgIHJldHVybiBpRW5kVGV4dCArIDE7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIFF1ZXVlT3B0aW1pemVyKHF1ZXVlKSB7XG4gICAgdGhpcy5xdWV1ZSA9IHF1ZXVlO1xuICAgIHRoaXMuc3RhdGUgPSBudWxsO1xuICAgIHRoaXMuY29udGV4dCA9IHtcbiAgICAgIGlDdXJyOiAwLFxuICAgICAgZm5BcnJheTogcXVldWUuZm5BcnJheSxcbiAgICAgIGFyZ3NBcnJheTogcXVldWUuYXJnc0FycmF5XG4gICAgfTtcbiAgICB0aGlzLm1hdGNoID0gbnVsbDtcbiAgICB0aGlzLmxhc3RQcm9jZXNzZWQgPSAwO1xuICB9XG5cbiAgUXVldWVPcHRpbWl6ZXIucHJvdG90eXBlID0ge1xuICAgIF9vcHRpbWl6ZSgpIHtcbiAgICAgIGNvbnN0IGZuQXJyYXkgPSB0aGlzLnF1ZXVlLmZuQXJyYXk7XG4gICAgICBsZXQgaSA9IHRoaXMubGFzdFByb2Nlc3NlZCxcbiAgICAgICAgICBpaSA9IGZuQXJyYXkubGVuZ3RoO1xuICAgICAgbGV0IHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgIGxldCBtYXRjaCA9IHRoaXMubWF0Y2g7XG5cbiAgICAgIGlmICghc3RhdGUgJiYgIW1hdGNoICYmIGkgKyAxID09PSBpaSAmJiAhSW5pdGlhbFN0YXRlW2ZuQXJyYXlbaV1dKSB7XG4gICAgICAgIHRoaXMubGFzdFByb2Nlc3NlZCA9IGlpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG5cbiAgICAgIHdoaWxlIChpIDwgaWkpIHtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgY29uc3QgaXRlcmF0ZSA9ICgwLCBtYXRjaC5pdGVyYXRlRm4pKGNvbnRleHQsIGkpO1xuXG4gICAgICAgICAgaWYgKGl0ZXJhdGUpIHtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgPSAoMCwgbWF0Y2gucHJvY2Vzc0ZuKShjb250ZXh0LCBpICsgMSk7XG4gICAgICAgICAgaWkgPSBmbkFycmF5Lmxlbmd0aDtcbiAgICAgICAgICBtYXRjaCA9IG51bGw7XG4gICAgICAgICAgc3RhdGUgPSBudWxsO1xuXG4gICAgICAgICAgaWYgKGkgPj0gaWkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gKHN0YXRlIHx8IEluaXRpYWxTdGF0ZSlbZm5BcnJheVtpXV07XG5cbiAgICAgICAgaWYgKCFzdGF0ZSB8fCBBcnJheS5pc0FycmF5KHN0YXRlKSkge1xuICAgICAgICAgIGkrKztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQuaUN1cnIgPSBpO1xuICAgICAgICBpKys7XG5cbiAgICAgICAgaWYgKHN0YXRlLmNoZWNrRm4gJiYgISgwLCBzdGF0ZS5jaGVja0ZuKShjb250ZXh0KSkge1xuICAgICAgICAgIHN0YXRlID0gbnVsbDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hdGNoID0gc3RhdGU7XG4gICAgICAgIHN0YXRlID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgdGhpcy5tYXRjaCA9IG1hdGNoO1xuICAgICAgdGhpcy5sYXN0UHJvY2Vzc2VkID0gaTtcbiAgICB9LFxuXG4gICAgcHVzaChmbiwgYXJncykge1xuICAgICAgdGhpcy5xdWV1ZS5mbkFycmF5LnB1c2goZm4pO1xuICAgICAgdGhpcy5xdWV1ZS5hcmdzQXJyYXkucHVzaChhcmdzKTtcblxuICAgICAgdGhpcy5fb3B0aW1pemUoKTtcbiAgICB9LFxuXG4gICAgZmx1c2goKSB7XG4gICAgICB3aGlsZSAodGhpcy5tYXRjaCkge1xuICAgICAgICBjb25zdCBsZW5ndGggPSB0aGlzLnF1ZXVlLmZuQXJyYXkubGVuZ3RoO1xuICAgICAgICB0aGlzLmxhc3RQcm9jZXNzZWQgPSAoMCwgdGhpcy5tYXRjaC5wcm9jZXNzRm4pKHRoaXMuY29udGV4dCwgbGVuZ3RoKTtcbiAgICAgICAgdGhpcy5tYXRjaCA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuX29wdGltaXplKCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHJlc2V0KCkge1xuICAgICAgdGhpcy5zdGF0ZSA9IG51bGw7XG4gICAgICB0aGlzLm1hdGNoID0gbnVsbDtcbiAgICAgIHRoaXMubGFzdFByb2Nlc3NlZCA9IDA7XG4gICAgfVxuXG4gIH07XG4gIHJldHVybiBRdWV1ZU9wdGltaXplcjtcbn0oKTtcblxudmFyIE51bGxPcHRpbWl6ZXIgPSBmdW5jdGlvbiBOdWxsT3B0aW1pemVyQ2xvc3VyZSgpIHtcbiAgZnVuY3Rpb24gTnVsbE9wdGltaXplcihxdWV1ZSkge1xuICAgIHRoaXMucXVldWUgPSBxdWV1ZTtcbiAgfVxuXG4gIE51bGxPcHRpbWl6ZXIucHJvdG90eXBlID0ge1xuICAgIHB1c2goZm4sIGFyZ3MpIHtcbiAgICAgIHRoaXMucXVldWUuZm5BcnJheS5wdXNoKGZuKTtcbiAgICAgIHRoaXMucXVldWUuYXJnc0FycmF5LnB1c2goYXJncyk7XG4gICAgfSxcblxuICAgIGZsdXNoKCkge30sXG5cbiAgICByZXNldCgpIHt9XG5cbiAgfTtcbiAgcmV0dXJuIE51bGxPcHRpbWl6ZXI7XG59KCk7XG5cbnZhciBPcGVyYXRvckxpc3QgPSBmdW5jdGlvbiBPcGVyYXRvckxpc3RDbG9zdXJlKCkge1xuICB2YXIgQ0hVTktfU0laRSA9IDEwMDA7XG4gIHZhciBDSFVOS19TSVpFX0FCT1VUID0gQ0hVTktfU0laRSAtIDU7XG5cbiAgZnVuY3Rpb24gT3BlcmF0b3JMaXN0KGludGVudCwgc3RyZWFtU2luaykge1xuICAgIHRoaXMuX3N0cmVhbVNpbmsgPSBzdHJlYW1TaW5rO1xuICAgIHRoaXMuZm5BcnJheSA9IFtdO1xuICAgIHRoaXMuYXJnc0FycmF5ID0gW107XG5cbiAgICBpZiAoc3RyZWFtU2luayAmJiBpbnRlbnQgIT09IFwib3BsaXN0XCIpIHtcbiAgICAgIHRoaXMub3B0aW1pemVyID0gbmV3IFF1ZXVlT3B0aW1pemVyKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wdGltaXplciA9IG5ldyBOdWxsT3B0aW1pemVyKHRoaXMpO1xuICAgIH1cblxuICAgIHRoaXMuZGVwZW5kZW5jaWVzID0gbmV3IFNldCgpO1xuICAgIHRoaXMuX3RvdGFsTGVuZ3RoID0gMDtcbiAgICB0aGlzLndlaWdodCA9IDA7XG4gICAgdGhpcy5fcmVzb2x2ZWQgPSBzdHJlYW1TaW5rID8gbnVsbCA6IFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgT3BlcmF0b3JMaXN0LnByb3RvdHlwZSA9IHtcbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXJnc0FycmF5Lmxlbmd0aDtcbiAgICB9LFxuXG4gICAgZ2V0IHJlYWR5KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Jlc29sdmVkIHx8IHRoaXMuX3N0cmVhbVNpbmsucmVhZHk7XG4gICAgfSxcblxuICAgIGdldCB0b3RhbExlbmd0aCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90b3RhbExlbmd0aCArIHRoaXMubGVuZ3RoO1xuICAgIH0sXG5cbiAgICBhZGRPcChmbiwgYXJncykge1xuICAgICAgdGhpcy5vcHRpbWl6ZXIucHVzaChmbiwgYXJncyk7XG4gICAgICB0aGlzLndlaWdodCsrO1xuXG4gICAgICBpZiAodGhpcy5fc3RyZWFtU2luaykge1xuICAgICAgICBpZiAodGhpcy53ZWlnaHQgPj0gQ0hVTktfU0laRSkge1xuICAgICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLndlaWdodCA+PSBDSFVOS19TSVpFX0FCT1VUICYmIChmbiA9PT0gX3V0aWwuT1BTLnJlc3RvcmUgfHwgZm4gPT09IF91dGlsLk9QUy5lbmRUZXh0KSkge1xuICAgICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhZGREZXBlbmRlbmN5KGRlcGVuZGVuY3kpIHtcbiAgICAgIGlmICh0aGlzLmRlcGVuZGVuY2llcy5oYXMoZGVwZW5kZW5jeSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmRlcGVuZGVuY2llcy5hZGQoZGVwZW5kZW5jeSk7XG4gICAgICB0aGlzLmFkZE9wKF91dGlsLk9QUy5kZXBlbmRlbmN5LCBbZGVwZW5kZW5jeV0pO1xuICAgIH0sXG5cbiAgICBhZGREZXBlbmRlbmNpZXMoZGVwZW5kZW5jaWVzKSB7XG4gICAgICBmb3IgKGNvbnN0IGRlcGVuZGVuY3kgb2YgZGVwZW5kZW5jaWVzKSB7XG4gICAgICAgIHRoaXMuYWRkRGVwZW5kZW5jeShkZXBlbmRlbmN5KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWRkT3BMaXN0KG9wTGlzdCkge1xuICAgICAgaWYgKCEob3BMaXN0IGluc3RhbmNlb2YgT3BlcmF0b3JMaXN0KSkge1xuICAgICAgICAoMCwgX3V0aWwud2FybikoJ2FkZE9wTGlzdCAtIGlnbm9yaW5nIGludmFsaWQgXCJvcExpc3RcIiBwYXJhbWV0ZXIuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBkZXBlbmRlbmN5IG9mIG9wTGlzdC5kZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgdGhpcy5kZXBlbmRlbmNpZXMuYWRkKGRlcGVuZGVuY3kpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBvcExpc3QubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICB0aGlzLmFkZE9wKG9wTGlzdC5mbkFycmF5W2ldLCBvcExpc3QuYXJnc0FycmF5W2ldKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0SVIoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmbkFycmF5OiB0aGlzLmZuQXJyYXksXG4gICAgICAgIGFyZ3NBcnJheTogdGhpcy5hcmdzQXJyYXksXG4gICAgICAgIGxlbmd0aDogdGhpcy5sZW5ndGhcbiAgICAgIH07XG4gICAgfSxcblxuICAgIGdldCBfdHJhbnNmZXJzKCkge1xuICAgICAgY29uc3QgdHJhbnNmZXJzID0gW107XG4gICAgICBjb25zdCB7XG4gICAgICAgIGZuQXJyYXksXG4gICAgICAgIGFyZ3NBcnJheSxcbiAgICAgICAgbGVuZ3RoXG4gICAgICB9ID0gdGhpcztcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBzd2l0Y2ggKGZuQXJyYXlbaV0pIHtcbiAgICAgICAgICBjYXNlIF91dGlsLk9QUy5wYWludElubGluZUltYWdlWE9iamVjdDpcbiAgICAgICAgICBjYXNlIF91dGlsLk9QUy5wYWludElubGluZUltYWdlWE9iamVjdEdyb3VwOlxuICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnBhaW50SW1hZ2VNYXNrWE9iamVjdDpcbiAgICAgICAgICAgIGNvbnN0IGFyZyA9IGFyZ3NBcnJheVtpXVswXTtcbiAgICAgICAgICAgIDtcblxuICAgICAgICAgICAgaWYgKCFhcmcuY2FjaGVkKSB7XG4gICAgICAgICAgICAgIHRyYW5zZmVycy5wdXNoKGFyZy5kYXRhLmJ1ZmZlcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cmFuc2ZlcnM7XG4gICAgfSxcblxuICAgIGZsdXNoKGxhc3RDaHVuayA9IGZhbHNlKSB7XG4gICAgICB0aGlzLm9wdGltaXplci5mbHVzaCgpO1xuICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgICB0aGlzLl90b3RhbExlbmd0aCArPSBsZW5ndGg7XG5cbiAgICAgIHRoaXMuX3N0cmVhbVNpbmsuZW5xdWV1ZSh7XG4gICAgICAgIGZuQXJyYXk6IHRoaXMuZm5BcnJheSxcbiAgICAgICAgYXJnc0FycmF5OiB0aGlzLmFyZ3NBcnJheSxcbiAgICAgICAgbGFzdENodW5rLFxuICAgICAgICBsZW5ndGhcbiAgICAgIH0sIDEsIHRoaXMuX3RyYW5zZmVycyk7XG5cbiAgICAgIHRoaXMuZGVwZW5kZW5jaWVzLmNsZWFyKCk7XG4gICAgICB0aGlzLmZuQXJyYXkubGVuZ3RoID0gMDtcbiAgICAgIHRoaXMuYXJnc0FycmF5Lmxlbmd0aCA9IDA7XG4gICAgICB0aGlzLndlaWdodCA9IDA7XG4gICAgICB0aGlzLm9wdGltaXplci5yZXNldCgpO1xuICAgIH1cblxuICB9O1xuICByZXR1cm4gT3BlcmF0b3JMaXN0O1xufSgpO1xuXG5leHBvcnRzLk9wZXJhdG9yTGlzdCA9IE9wZXJhdG9yTGlzdDsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/operator_list.js\n')},"./node_modules/pdfjs-dist/lib/core/parser.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.Parser = exports.Linearization = exports.Lexer = void 0;\n\nvar _stream = __webpack_require__(/*! ./stream.js */ "./node_modules/pdfjs-dist/lib/core/stream.js");\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _primitives = __webpack_require__(/*! ./primitives.js */ "./node_modules/pdfjs-dist/lib/core/primitives.js");\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nvar _ccitt_stream = __webpack_require__(/*! ./ccitt_stream.js */ "./node_modules/pdfjs-dist/lib/core/ccitt_stream.js");\n\nvar _jbig2_stream = __webpack_require__(/*! ./jbig2_stream.js */ "./node_modules/pdfjs-dist/lib/core/jbig2_stream.js");\n\nvar _jpeg_stream = __webpack_require__(/*! ./jpeg_stream.js */ "./node_modules/pdfjs-dist/lib/core/jpeg_stream.js");\n\nvar _jpx_stream = __webpack_require__(/*! ./jpx_stream.js */ "./node_modules/pdfjs-dist/lib/core/jpx_stream.js");\n\nconst MAX_LENGTH_TO_CACHE = 1000;\nconst MAX_ADLER32_LENGTH = 5552;\n\nfunction computeAdler32(bytes) {\n  const bytesLength = bytes.length;\n  let a = 1,\n      b = 0;\n\n  for (let i = 0; i < bytesLength; ++i) {\n    a += bytes[i] & 0xff;\n    b += a;\n  }\n\n  return b % 65521 << 16 | a % 65521;\n}\n\nclass Parser {\n  constructor({\n    lexer,\n    xref,\n    allowStreams = false,\n    recoveryMode = false\n  }) {\n    this.lexer = lexer;\n    this.xref = xref;\n    this.allowStreams = allowStreams;\n    this.recoveryMode = recoveryMode;\n    this.imageCache = Object.create(null);\n    this.refill();\n  }\n\n  refill() {\n    this.buf1 = this.lexer.getObj();\n    this.buf2 = this.lexer.getObj();\n  }\n\n  shift() {\n    if (this.buf2 instanceof _primitives.Cmd && this.buf2.cmd === "ID") {\n      this.buf1 = this.buf2;\n      this.buf2 = null;\n    } else {\n      this.buf1 = this.buf2;\n      this.buf2 = this.lexer.getObj();\n    }\n  }\n\n  tryShift() {\n    try {\n      this.shift();\n      return true;\n    } catch (e) {\n      if (e instanceof _core_utils.MissingDataException) {\n        throw e;\n      }\n\n      return false;\n    }\n  }\n\n  getObj(cipherTransform = null) {\n    const buf1 = this.buf1;\n    this.shift();\n\n    if (buf1 instanceof _primitives.Cmd) {\n      switch (buf1.cmd) {\n        case "BI":\n          return this.makeInlineImage(cipherTransform);\n\n        case "[":\n          const array = [];\n\n          while (!(0, _primitives.isCmd)(this.buf1, "]") && !(0, _primitives.isEOF)(this.buf1)) {\n            array.push(this.getObj(cipherTransform));\n          }\n\n          if ((0, _primitives.isEOF)(this.buf1)) {\n            if (!this.recoveryMode) {\n              throw new _util.FormatError("End of file inside array");\n            }\n\n            return array;\n          }\n\n          this.shift();\n          return array;\n\n        case "<<":\n          const dict = new _primitives.Dict(this.xref);\n\n          while (!(0, _primitives.isCmd)(this.buf1, ">>") && !(0, _primitives.isEOF)(this.buf1)) {\n            if (!(0, _primitives.isName)(this.buf1)) {\n              (0, _util.info)("Malformed dictionary: key must be a name object");\n              this.shift();\n              continue;\n            }\n\n            const key = this.buf1.name;\n            this.shift();\n\n            if ((0, _primitives.isEOF)(this.buf1)) {\n              break;\n            }\n\n            dict.set(key, this.getObj(cipherTransform));\n          }\n\n          if ((0, _primitives.isEOF)(this.buf1)) {\n            if (!this.recoveryMode) {\n              throw new _util.FormatError("End of file inside dictionary");\n            }\n\n            return dict;\n          }\n\n          if ((0, _primitives.isCmd)(this.buf2, "stream")) {\n            return this.allowStreams ? this.makeStream(dict, cipherTransform) : dict;\n          }\n\n          this.shift();\n          return dict;\n\n        default:\n          return buf1;\n      }\n    }\n\n    if (Number.isInteger(buf1)) {\n      if (Number.isInteger(this.buf1) && (0, _primitives.isCmd)(this.buf2, "R")) {\n        const ref = _primitives.Ref.get(buf1, this.buf1);\n\n        this.shift();\n        this.shift();\n        return ref;\n      }\n\n      return buf1;\n    }\n\n    if (typeof buf1 === "string") {\n      if (cipherTransform) {\n        return cipherTransform.decryptString(buf1);\n      }\n\n      return buf1;\n    }\n\n    return buf1;\n  }\n\n  findDefaultInlineStreamEnd(stream) {\n    const E = 0x45,\n          I = 0x49,\n          SPACE = 0x20,\n          LF = 0xa,\n          CR = 0xd,\n          NUL = 0x0;\n    const lexer = this.lexer,\n          startPos = stream.pos,\n          n = 10;\n    let state = 0,\n        ch,\n        maybeEIPos;\n\n    while ((ch = stream.getByte()) !== -1) {\n      if (state === 0) {\n        state = ch === E ? 1 : 0;\n      } else if (state === 1) {\n        state = ch === I ? 2 : 0;\n      } else {\n        (0, _util.assert)(state === 2, "findDefaultInlineStreamEnd - invalid state.");\n\n        if (ch === SPACE || ch === LF || ch === CR) {\n          maybeEIPos = stream.pos;\n          const followingBytes = stream.peekBytes(n);\n\n          for (let i = 0, ii = followingBytes.length; i < ii; i++) {\n            ch = followingBytes[i];\n\n            if (ch === NUL && followingBytes[i + 1] !== NUL) {\n              continue;\n            }\n\n            if (ch !== LF && ch !== CR && (ch < SPACE || ch > 0x7f)) {\n              state = 0;\n              break;\n            }\n          }\n\n          if (state !== 2) {\n            continue;\n          }\n\n          if (lexer.knownCommands) {\n            const nextObj = lexer.peekObj();\n\n            if (nextObj instanceof _primitives.Cmd && !lexer.knownCommands[nextObj.cmd]) {\n              state = 0;\n            }\n          } else {\n            (0, _util.warn)("findDefaultInlineStreamEnd - `lexer.knownCommands` is undefined.");\n          }\n\n          if (state === 2) {\n            break;\n          }\n        } else {\n          state = 0;\n        }\n      }\n    }\n\n    if (ch === -1) {\n      (0, _util.warn)("findDefaultInlineStreamEnd: " + "Reached the end of the stream without finding a valid EI marker");\n\n      if (maybeEIPos) {\n        (0, _util.warn)(\'... trying to recover by using the last "EI" occurrence.\');\n        stream.skip(-(stream.pos - maybeEIPos));\n      }\n    }\n\n    let endOffset = 4;\n    stream.skip(-endOffset);\n    ch = stream.peekByte();\n    stream.skip(endOffset);\n\n    if (!(0, _core_utils.isWhiteSpace)(ch)) {\n      endOffset--;\n    }\n\n    return stream.pos - endOffset - startPos;\n  }\n\n  findDCTDecodeInlineStreamEnd(stream) {\n    const startPos = stream.pos;\n    let foundEOI = false,\n        b,\n        markerLength;\n\n    while ((b = stream.getByte()) !== -1) {\n      if (b !== 0xff) {\n        continue;\n      }\n\n      switch (stream.getByte()) {\n        case 0x00:\n          break;\n\n        case 0xff:\n          stream.skip(-1);\n          break;\n\n        case 0xd9:\n          foundEOI = true;\n          break;\n\n        case 0xc0:\n        case 0xc1:\n        case 0xc2:\n        case 0xc3:\n        case 0xc5:\n        case 0xc6:\n        case 0xc7:\n        case 0xc9:\n        case 0xca:\n        case 0xcb:\n        case 0xcd:\n        case 0xce:\n        case 0xcf:\n        case 0xc4:\n        case 0xcc:\n        case 0xda:\n        case 0xdb:\n        case 0xdc:\n        case 0xdd:\n        case 0xde:\n        case 0xdf:\n        case 0xe0:\n        case 0xe1:\n        case 0xe2:\n        case 0xe3:\n        case 0xe4:\n        case 0xe5:\n        case 0xe6:\n        case 0xe7:\n        case 0xe8:\n        case 0xe9:\n        case 0xea:\n        case 0xeb:\n        case 0xec:\n        case 0xed:\n        case 0xee:\n        case 0xef:\n        case 0xfe:\n          markerLength = stream.getUint16();\n\n          if (markerLength > 2) {\n            stream.skip(markerLength - 2);\n          } else {\n            stream.skip(-2);\n          }\n\n          break;\n      }\n\n      if (foundEOI) {\n        break;\n      }\n    }\n\n    const length = stream.pos - startPos;\n\n    if (b === -1) {\n      (0, _util.warn)("Inline DCTDecode image stream: " + "EOI marker not found, searching for /EI/ instead.");\n      stream.skip(-length);\n      return this.findDefaultInlineStreamEnd(stream);\n    }\n\n    this.inlineStreamSkipEI(stream);\n    return length;\n  }\n\n  findASCII85DecodeInlineStreamEnd(stream) {\n    const TILDE = 0x7e,\n          GT = 0x3e;\n    const startPos = stream.pos;\n    let ch;\n\n    while ((ch = stream.getByte()) !== -1) {\n      if (ch === TILDE) {\n        const tildePos = stream.pos;\n        ch = stream.peekByte();\n\n        while ((0, _core_utils.isWhiteSpace)(ch)) {\n          stream.skip();\n          ch = stream.peekByte();\n        }\n\n        if (ch === GT) {\n          stream.skip();\n          break;\n        }\n\n        if (stream.pos > tildePos) {\n          const maybeEI = stream.peekBytes(2);\n\n          if (maybeEI[0] === 0x45 && maybeEI[1] === 0x49) {\n            break;\n          }\n        }\n      }\n    }\n\n    const length = stream.pos - startPos;\n\n    if (ch === -1) {\n      (0, _util.warn)("Inline ASCII85Decode image stream: " + "EOD marker not found, searching for /EI/ instead.");\n      stream.skip(-length);\n      return this.findDefaultInlineStreamEnd(stream);\n    }\n\n    this.inlineStreamSkipEI(stream);\n    return length;\n  }\n\n  findASCIIHexDecodeInlineStreamEnd(stream) {\n    const GT = 0x3e;\n    const startPos = stream.pos;\n    let ch;\n\n    while ((ch = stream.getByte()) !== -1) {\n      if (ch === GT) {\n        break;\n      }\n    }\n\n    const length = stream.pos - startPos;\n\n    if (ch === -1) {\n      (0, _util.warn)("Inline ASCIIHexDecode image stream: " + "EOD marker not found, searching for /EI/ instead.");\n      stream.skip(-length);\n      return this.findDefaultInlineStreamEnd(stream);\n    }\n\n    this.inlineStreamSkipEI(stream);\n    return length;\n  }\n\n  inlineStreamSkipEI(stream) {\n    const E = 0x45,\n          I = 0x49;\n    let state = 0,\n        ch;\n\n    while ((ch = stream.getByte()) !== -1) {\n      if (state === 0) {\n        state = ch === E ? 1 : 0;\n      } else if (state === 1) {\n        state = ch === I ? 2 : 0;\n      } else if (state === 2) {\n        break;\n      }\n    }\n  }\n\n  makeInlineImage(cipherTransform) {\n    const lexer = this.lexer;\n    const stream = lexer.stream;\n    const dict = new _primitives.Dict(this.xref);\n    let dictLength;\n\n    while (!(0, _primitives.isCmd)(this.buf1, "ID") && !(0, _primitives.isEOF)(this.buf1)) {\n      if (!(0, _primitives.isName)(this.buf1)) {\n        throw new _util.FormatError("Dictionary key must be a name object");\n      }\n\n      const key = this.buf1.name;\n      this.shift();\n\n      if ((0, _primitives.isEOF)(this.buf1)) {\n        break;\n      }\n\n      dict.set(key, this.getObj(cipherTransform));\n    }\n\n    if (lexer.beginInlineImagePos !== -1) {\n      dictLength = stream.pos - lexer.beginInlineImagePos;\n    }\n\n    const filter = dict.get("Filter", "F");\n    let filterName;\n\n    if ((0, _primitives.isName)(filter)) {\n      filterName = filter.name;\n    } else if (Array.isArray(filter)) {\n      const filterZero = this.xref.fetchIfRef(filter[0]);\n\n      if ((0, _primitives.isName)(filterZero)) {\n        filterName = filterZero.name;\n      }\n    }\n\n    const startPos = stream.pos;\n    let length;\n\n    if (filterName === "DCTDecode" || filterName === "DCT") {\n      length = this.findDCTDecodeInlineStreamEnd(stream);\n    } else if (filterName === "ASCII85Decode" || filterName === "A85") {\n      length = this.findASCII85DecodeInlineStreamEnd(stream);\n    } else if (filterName === "ASCIIHexDecode" || filterName === "AHx") {\n      length = this.findASCIIHexDecodeInlineStreamEnd(stream);\n    } else {\n      length = this.findDefaultInlineStreamEnd(stream);\n    }\n\n    let imageStream = stream.makeSubStream(startPos, length, dict);\n    let cacheKey;\n\n    if (length < MAX_LENGTH_TO_CACHE && dictLength < MAX_ADLER32_LENGTH) {\n      const imageBytes = imageStream.getBytes();\n      imageStream.reset();\n      const initialStreamPos = stream.pos;\n      stream.pos = lexer.beginInlineImagePos;\n      const dictBytes = stream.getBytes(dictLength);\n      stream.pos = initialStreamPos;\n      cacheKey = computeAdler32(imageBytes) + "_" + computeAdler32(dictBytes);\n      const cacheEntry = this.imageCache[cacheKey];\n\n      if (cacheEntry !== undefined) {\n        this.buf2 = _primitives.Cmd.get("EI");\n        this.shift();\n        cacheEntry.reset();\n        return cacheEntry;\n      }\n    }\n\n    if (cipherTransform) {\n      imageStream = cipherTransform.createStream(imageStream, length);\n    }\n\n    imageStream = this.filter(imageStream, dict, length);\n    imageStream.dict = dict;\n\n    if (cacheKey !== undefined) {\n      imageStream.cacheKey = `inline_${length}_${cacheKey}`;\n      this.imageCache[cacheKey] = imageStream;\n    }\n\n    this.buf2 = _primitives.Cmd.get("EI");\n    this.shift();\n    return imageStream;\n  }\n\n  _findStreamLength(startPos, signature) {\n    const {\n      stream\n    } = this.lexer;\n    stream.pos = startPos;\n    const SCAN_BLOCK_LENGTH = 2048;\n    const signatureLength = signature.length;\n\n    while (stream.pos < stream.end) {\n      const scanBytes = stream.peekBytes(SCAN_BLOCK_LENGTH);\n      const scanLength = scanBytes.length - signatureLength;\n\n      if (scanLength <= 0) {\n        break;\n      }\n\n      let pos = 0;\n\n      while (pos < scanLength) {\n        let j = 0;\n\n        while (j < signatureLength && scanBytes[pos + j] === signature[j]) {\n          j++;\n        }\n\n        if (j >= signatureLength) {\n          stream.pos += pos;\n          return stream.pos - startPos;\n        }\n\n        pos++;\n      }\n\n      stream.pos += scanLength;\n    }\n\n    return -1;\n  }\n\n  makeStream(dict, cipherTransform) {\n    const lexer = this.lexer;\n    let stream = lexer.stream;\n    lexer.skipToNextLine();\n    const startPos = stream.pos - 1;\n    let length = dict.get("Length");\n\n    if (!Number.isInteger(length)) {\n      (0, _util.info)(`Bad length "${length}" in stream`);\n      length = 0;\n    }\n\n    stream.pos = startPos + length;\n    lexer.nextChar();\n\n    if (this.tryShift() && (0, _primitives.isCmd)(this.buf2, "endstream")) {\n      this.shift();\n    } else {\n      const ENDSTREAM_SIGNATURE = new Uint8Array([0x65, 0x6E, 0x64, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D]);\n\n      let actualLength = this._findStreamLength(startPos, ENDSTREAM_SIGNATURE);\n\n      if (actualLength < 0) {\n        const MAX_TRUNCATION = 1;\n\n        for (let i = 1; i <= MAX_TRUNCATION; i++) {\n          const end = ENDSTREAM_SIGNATURE.length - i;\n          const TRUNCATED_SIGNATURE = ENDSTREAM_SIGNATURE.slice(0, end);\n\n          const maybeLength = this._findStreamLength(startPos, TRUNCATED_SIGNATURE);\n\n          if (maybeLength >= 0) {\n            const lastByte = stream.peekBytes(end + 1)[end];\n\n            if (!(0, _core_utils.isWhiteSpace)(lastByte)) {\n              break;\n            }\n\n            (0, _util.info)(`Found "${(0, _util.bytesToString)(TRUNCATED_SIGNATURE)}" when ` + "searching for endstream command.");\n            actualLength = maybeLength;\n            break;\n          }\n        }\n\n        if (actualLength < 0) {\n          throw new _util.FormatError("Missing endstream command.");\n        }\n      }\n\n      length = actualLength;\n      lexer.nextChar();\n      this.shift();\n      this.shift();\n    }\n\n    this.shift();\n    stream = stream.makeSubStream(startPos, length, dict);\n\n    if (cipherTransform) {\n      stream = cipherTransform.createStream(stream, length);\n    }\n\n    stream = this.filter(stream, dict, length);\n    stream.dict = dict;\n    return stream;\n  }\n\n  filter(stream, dict, length) {\n    let filter = dict.get("Filter", "F");\n    let params = dict.get("DecodeParms", "DP");\n\n    if ((0, _primitives.isName)(filter)) {\n      if (Array.isArray(params)) {\n        (0, _util.warn)("/DecodeParms should not contain an Array, " + "when /Filter contains a Name.");\n      }\n\n      return this.makeFilter(stream, filter.name, length, params);\n    }\n\n    let maybeLength = length;\n\n    if (Array.isArray(filter)) {\n      const filterArray = filter;\n      const paramsArray = params;\n\n      for (let i = 0, ii = filterArray.length; i < ii; ++i) {\n        filter = this.xref.fetchIfRef(filterArray[i]);\n\n        if (!(0, _primitives.isName)(filter)) {\n          throw new _util.FormatError(`Bad filter name "${filter}"`);\n        }\n\n        params = null;\n\n        if (Array.isArray(paramsArray) && i in paramsArray) {\n          params = this.xref.fetchIfRef(paramsArray[i]);\n        }\n\n        stream = this.makeFilter(stream, filter.name, maybeLength, params);\n        maybeLength = null;\n      }\n    }\n\n    return stream;\n  }\n\n  makeFilter(stream, name, maybeLength, params) {\n    if (maybeLength === 0) {\n      (0, _util.warn)(`Empty "${name}" stream.`);\n      return new _stream.NullStream();\n    }\n\n    try {\n      const xrefStreamStats = this.xref.stats.streamTypes;\n\n      if (name === "FlateDecode" || name === "Fl") {\n        xrefStreamStats[_util.StreamType.FLATE] = true;\n\n        if (params) {\n          return new _stream.PredictorStream(new _stream.FlateStream(stream, maybeLength), maybeLength, params);\n        }\n\n        return new _stream.FlateStream(stream, maybeLength);\n      }\n\n      if (name === "LZWDecode" || name === "LZW") {\n        xrefStreamStats[_util.StreamType.LZW] = true;\n        let earlyChange = 1;\n\n        if (params) {\n          if (params.has("EarlyChange")) {\n            earlyChange = params.get("EarlyChange");\n          }\n\n          return new _stream.PredictorStream(new _stream.LZWStream(stream, maybeLength, earlyChange), maybeLength, params);\n        }\n\n        return new _stream.LZWStream(stream, maybeLength, earlyChange);\n      }\n\n      if (name === "DCTDecode" || name === "DCT") {\n        xrefStreamStats[_util.StreamType.DCT] = true;\n        return new _jpeg_stream.JpegStream(stream, maybeLength, stream.dict, params);\n      }\n\n      if (name === "JPXDecode" || name === "JPX") {\n        xrefStreamStats[_util.StreamType.JPX] = true;\n        return new _jpx_stream.JpxStream(stream, maybeLength, stream.dict, params);\n      }\n\n      if (name === "ASCII85Decode" || name === "A85") {\n        xrefStreamStats[_util.StreamType.A85] = true;\n        return new _stream.Ascii85Stream(stream, maybeLength);\n      }\n\n      if (name === "ASCIIHexDecode" || name === "AHx") {\n        xrefStreamStats[_util.StreamType.AHX] = true;\n        return new _stream.AsciiHexStream(stream, maybeLength);\n      }\n\n      if (name === "CCITTFaxDecode" || name === "CCF") {\n        xrefStreamStats[_util.StreamType.CCF] = true;\n        return new _ccitt_stream.CCITTFaxStream(stream, maybeLength, params);\n      }\n\n      if (name === "RunLengthDecode" || name === "RL") {\n        xrefStreamStats[_util.StreamType.RLX] = true;\n        return new _stream.RunLengthStream(stream, maybeLength);\n      }\n\n      if (name === "JBIG2Decode") {\n        xrefStreamStats[_util.StreamType.JBIG] = true;\n        return new _jbig2_stream.Jbig2Stream(stream, maybeLength, stream.dict, params);\n      }\n\n      (0, _util.warn)(`Filter "${name}" is not supported.`);\n      return stream;\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)(`Invalid stream: "${ex}"`);\n      return new _stream.NullStream();\n    }\n  }\n\n}\n\nexports.Parser = Parser;\nconst specialChars = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\nfunction toHexDigit(ch) {\n  if (ch >= 0x30 && ch <= 0x39) {\n    return ch & 0x0f;\n  }\n\n  if (ch >= 0x41 && ch <= 0x46 || ch >= 0x61 && ch <= 0x66) {\n    return (ch & 0x0f) + 9;\n  }\n\n  return -1;\n}\n\nclass Lexer {\n  constructor(stream, knownCommands = null) {\n    this.stream = stream;\n    this.nextChar();\n    this.strBuf = [];\n    this.knownCommands = knownCommands;\n    this._hexStringNumWarn = 0;\n    this.beginInlineImagePos = -1;\n  }\n\n  nextChar() {\n    return this.currentChar = this.stream.getByte();\n  }\n\n  peekChar() {\n    return this.stream.peekByte();\n  }\n\n  getNumber() {\n    let ch = this.currentChar;\n    let eNotation = false;\n    let divideBy = 0;\n    let sign = 0;\n\n    if (ch === 0x2d) {\n      sign = -1;\n      ch = this.nextChar();\n\n      if (ch === 0x2d) {\n        ch = this.nextChar();\n      }\n    } else if (ch === 0x2b) {\n      sign = 1;\n      ch = this.nextChar();\n    }\n\n    if (ch === 0x0a || ch === 0x0d) {\n      do {\n        ch = this.nextChar();\n      } while (ch === 0x0a || ch === 0x0d);\n    }\n\n    if (ch === 0x2e) {\n      divideBy = 10;\n      ch = this.nextChar();\n    }\n\n    if (ch < 0x30 || ch > 0x39) {\n      if (divideBy === 10 && sign === 0 && ((0, _core_utils.isWhiteSpace)(ch) || ch === -1)) {\n        (0, _util.warn)("Lexer.getNumber - treating a single decimal point as zero.");\n        return 0;\n      }\n\n      throw new _util.FormatError(`Invalid number: ${String.fromCharCode(ch)} (charCode ${ch})`);\n    }\n\n    sign = sign || 1;\n    let baseValue = ch - 0x30;\n    let powerValue = 0;\n    let powerValueSign = 1;\n\n    while ((ch = this.nextChar()) >= 0) {\n      if (ch >= 0x30 && ch <= 0x39) {\n        const currentDigit = ch - 0x30;\n\n        if (eNotation) {\n          powerValue = powerValue * 10 + currentDigit;\n        } else {\n          if (divideBy !== 0) {\n            divideBy *= 10;\n          }\n\n          baseValue = baseValue * 10 + currentDigit;\n        }\n      } else if (ch === 0x2e) {\n        if (divideBy === 0) {\n          divideBy = 1;\n        } else {\n          break;\n        }\n      } else if (ch === 0x2d) {\n        (0, _util.warn)("Badly formatted number: minus sign in the middle");\n      } else if (ch === 0x45 || ch === 0x65) {\n        ch = this.peekChar();\n\n        if (ch === 0x2b || ch === 0x2d) {\n          powerValueSign = ch === 0x2d ? -1 : 1;\n          this.nextChar();\n        } else if (ch < 0x30 || ch > 0x39) {\n          break;\n        }\n\n        eNotation = true;\n      } else {\n        break;\n      }\n    }\n\n    if (divideBy !== 0) {\n      baseValue /= divideBy;\n    }\n\n    if (eNotation) {\n      baseValue *= 10 ** (powerValueSign * powerValue);\n    }\n\n    return sign * baseValue;\n  }\n\n  getString() {\n    let numParen = 1;\n    let done = false;\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n    let ch = this.nextChar();\n\n    while (true) {\n      let charBuffered = false;\n\n      switch (ch | 0) {\n        case -1:\n          (0, _util.warn)("Unterminated string");\n          done = true;\n          break;\n\n        case 0x28:\n          ++numParen;\n          strBuf.push("(");\n          break;\n\n        case 0x29:\n          if (--numParen === 0) {\n            this.nextChar();\n            done = true;\n          } else {\n            strBuf.push(")");\n          }\n\n          break;\n\n        case 0x5c:\n          ch = this.nextChar();\n\n          switch (ch) {\n            case -1:\n              (0, _util.warn)("Unterminated string");\n              done = true;\n              break;\n\n            case 0x6e:\n              strBuf.push("\\n");\n              break;\n\n            case 0x72:\n              strBuf.push("\\r");\n              break;\n\n            case 0x74:\n              strBuf.push("\\t");\n              break;\n\n            case 0x62:\n              strBuf.push("\\b");\n              break;\n\n            case 0x66:\n              strBuf.push("\\f");\n              break;\n\n            case 0x5c:\n            case 0x28:\n            case 0x29:\n              strBuf.push(String.fromCharCode(ch));\n              break;\n\n            case 0x30:\n            case 0x31:\n            case 0x32:\n            case 0x33:\n            case 0x34:\n            case 0x35:\n            case 0x36:\n            case 0x37:\n              let x = ch & 0x0f;\n              ch = this.nextChar();\n              charBuffered = true;\n\n              if (ch >= 0x30 && ch <= 0x37) {\n                x = (x << 3) + (ch & 0x0f);\n                ch = this.nextChar();\n\n                if (ch >= 0x30 && ch <= 0x37) {\n                  charBuffered = false;\n                  x = (x << 3) + (ch & 0x0f);\n                }\n              }\n\n              strBuf.push(String.fromCharCode(x));\n              break;\n\n            case 0x0d:\n              if (this.peekChar() === 0x0a) {\n                this.nextChar();\n              }\n\n              break;\n\n            case 0x0a:\n              break;\n\n            default:\n              strBuf.push(String.fromCharCode(ch));\n              break;\n          }\n\n          break;\n\n        default:\n          strBuf.push(String.fromCharCode(ch));\n          break;\n      }\n\n      if (done) {\n        break;\n      }\n\n      if (!charBuffered) {\n        ch = this.nextChar();\n      }\n    }\n\n    return strBuf.join("");\n  }\n\n  getName() {\n    let ch, previousCh;\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n\n    while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {\n      if (ch === 0x23) {\n        ch = this.nextChar();\n\n        if (specialChars[ch]) {\n          (0, _util.warn)("Lexer_getName: " + "NUMBER SIGN (#) should be followed by a hexadecimal number.");\n          strBuf.push("#");\n          break;\n        }\n\n        const x = toHexDigit(ch);\n\n        if (x !== -1) {\n          previousCh = ch;\n          ch = this.nextChar();\n          const x2 = toHexDigit(ch);\n\n          if (x2 === -1) {\n            (0, _util.warn)(`Lexer_getName: Illegal digit (${String.fromCharCode(ch)}) ` + "in hexadecimal number.");\n            strBuf.push("#", String.fromCharCode(previousCh));\n\n            if (specialChars[ch]) {\n              break;\n            }\n\n            strBuf.push(String.fromCharCode(ch));\n            continue;\n          }\n\n          strBuf.push(String.fromCharCode(x << 4 | x2));\n        } else {\n          strBuf.push("#", String.fromCharCode(ch));\n        }\n      } else {\n        strBuf.push(String.fromCharCode(ch));\n      }\n    }\n\n    if (strBuf.length > 127) {\n      (0, _util.warn)(`Name token is longer than allowed by the spec: ${strBuf.length}`);\n    }\n\n    return _primitives.Name.get(strBuf.join(""));\n  }\n\n  _hexStringWarn(ch) {\n    const MAX_HEX_STRING_NUM_WARN = 5;\n\n    if (this._hexStringNumWarn++ === MAX_HEX_STRING_NUM_WARN) {\n      (0, _util.warn)("getHexString - ignoring additional invalid characters.");\n      return;\n    }\n\n    if (this._hexStringNumWarn > MAX_HEX_STRING_NUM_WARN) {\n      return;\n    }\n\n    (0, _util.warn)(`getHexString - ignoring invalid character: ${ch}`);\n  }\n\n  getHexString() {\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n    let ch = this.currentChar;\n    let isFirstHex = true;\n    let firstDigit, secondDigit;\n    this._hexStringNumWarn = 0;\n\n    while (true) {\n      if (ch < 0) {\n        (0, _util.warn)("Unterminated hex string");\n        break;\n      } else if (ch === 0x3e) {\n        this.nextChar();\n        break;\n      } else if (specialChars[ch] === 1) {\n        ch = this.nextChar();\n        continue;\n      } else {\n        if (isFirstHex) {\n          firstDigit = toHexDigit(ch);\n\n          if (firstDigit === -1) {\n            this._hexStringWarn(ch);\n\n            ch = this.nextChar();\n            continue;\n          }\n        } else {\n          secondDigit = toHexDigit(ch);\n\n          if (secondDigit === -1) {\n            this._hexStringWarn(ch);\n\n            ch = this.nextChar();\n            continue;\n          }\n\n          strBuf.push(String.fromCharCode(firstDigit << 4 | secondDigit));\n        }\n\n        isFirstHex = !isFirstHex;\n        ch = this.nextChar();\n      }\n    }\n\n    return strBuf.join("");\n  }\n\n  getObj() {\n    let comment = false;\n    let ch = this.currentChar;\n\n    while (true) {\n      if (ch < 0) {\n        return _primitives.EOF;\n      }\n\n      if (comment) {\n        if (ch === 0x0a || ch === 0x0d) {\n          comment = false;\n        }\n      } else if (ch === 0x25) {\n        comment = true;\n      } else if (specialChars[ch] !== 1) {\n        break;\n      }\n\n      ch = this.nextChar();\n    }\n\n    switch (ch | 0) {\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x2b:\n      case 0x2d:\n      case 0x2e:\n        return this.getNumber();\n\n      case 0x28:\n        return this.getString();\n\n      case 0x2f:\n        return this.getName();\n\n      case 0x5b:\n        this.nextChar();\n        return _primitives.Cmd.get("[");\n\n      case 0x5d:\n        this.nextChar();\n        return _primitives.Cmd.get("]");\n\n      case 0x3c:\n        ch = this.nextChar();\n\n        if (ch === 0x3c) {\n          this.nextChar();\n          return _primitives.Cmd.get("<<");\n        }\n\n        return this.getHexString();\n\n      case 0x3e:\n        ch = this.nextChar();\n\n        if (ch === 0x3e) {\n          this.nextChar();\n          return _primitives.Cmd.get(">>");\n        }\n\n        return _primitives.Cmd.get(">");\n\n      case 0x7b:\n        this.nextChar();\n        return _primitives.Cmd.get("{");\n\n      case 0x7d:\n        this.nextChar();\n        return _primitives.Cmd.get("}");\n\n      case 0x29:\n        this.nextChar();\n        throw new _util.FormatError(`Illegal character: ${ch}`);\n    }\n\n    let str = String.fromCharCode(ch);\n    const knownCommands = this.knownCommands;\n    let knownCommandFound = knownCommands && knownCommands[str] !== undefined;\n\n    while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {\n      const possibleCommand = str + String.fromCharCode(ch);\n\n      if (knownCommandFound && knownCommands[possibleCommand] === undefined) {\n        break;\n      }\n\n      if (str.length === 128) {\n        throw new _util.FormatError(`Command token too long: ${str.length}`);\n      }\n\n      str = possibleCommand;\n      knownCommandFound = knownCommands && knownCommands[str] !== undefined;\n    }\n\n    if (str === "true") {\n      return true;\n    }\n\n    if (str === "false") {\n      return false;\n    }\n\n    if (str === "null") {\n      return null;\n    }\n\n    if (str === "BI") {\n      this.beginInlineImagePos = this.stream.pos;\n    }\n\n    return _primitives.Cmd.get(str);\n  }\n\n  peekObj() {\n    const streamPos = this.stream.pos,\n          currentChar = this.currentChar,\n          beginInlineImagePos = this.beginInlineImagePos;\n    let nextObj;\n\n    try {\n      nextObj = this.getObj();\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)(`peekObj: ${ex}`);\n    }\n\n    this.stream.pos = streamPos;\n    this.currentChar = currentChar;\n    this.beginInlineImagePos = beginInlineImagePos;\n    return nextObj;\n  }\n\n  skipToNextLine() {\n    let ch = this.currentChar;\n\n    while (ch >= 0) {\n      if (ch === 0x0d) {\n        ch = this.nextChar();\n\n        if (ch === 0x0a) {\n          this.nextChar();\n        }\n\n        break;\n      } else if (ch === 0x0a) {\n        this.nextChar();\n        break;\n      }\n\n      ch = this.nextChar();\n    }\n  }\n\n}\n\nexports.Lexer = Lexer;\n\nclass Linearization {\n  static create(stream) {\n    function getInt(linDict, name, allowZeroValue = false) {\n      const obj = linDict.get(name);\n\n      if (Number.isInteger(obj) && (allowZeroValue ? obj >= 0 : obj > 0)) {\n        return obj;\n      }\n\n      throw new Error(`The "${name}" parameter in the linearization ` + "dictionary is invalid.");\n    }\n\n    function getHints(linDict) {\n      const hints = linDict.get("H");\n      let hintsLength;\n\n      if (Array.isArray(hints) && ((hintsLength = hints.length) === 2 || hintsLength === 4)) {\n        for (let index = 0; index < hintsLength; index++) {\n          const hint = hints[index];\n\n          if (!(Number.isInteger(hint) && hint > 0)) {\n            throw new Error(`Hint (${index}) in the linearization dictionary is invalid.`);\n          }\n        }\n\n        return hints;\n      }\n\n      throw new Error("Hint array in the linearization dictionary is invalid.");\n    }\n\n    const parser = new Parser({\n      lexer: new Lexer(stream),\n      xref: null\n    });\n    const obj1 = parser.getObj();\n    const obj2 = parser.getObj();\n    const obj3 = parser.getObj();\n    const linDict = parser.getObj();\n    let obj, length;\n\n    if (!(Number.isInteger(obj1) && Number.isInteger(obj2) && (0, _primitives.isCmd)(obj3, "obj") && (0, _primitives.isDict)(linDict) && (0, _util.isNum)(obj = linDict.get("Linearized")) && obj > 0)) {\n      return null;\n    } else if ((length = getInt(linDict, "L")) !== stream.length) {\n      throw new Error(\'The "L" parameter in the linearization dictionary \' + "does not equal the stream length.");\n    }\n\n    return {\n      length,\n      hints: getHints(linDict),\n      objectNumberFirst: getInt(linDict, "O"),\n      endFirst: getInt(linDict, "E"),\n      numPages: getInt(linDict, "N"),\n      mainXRefEntriesOffset: getInt(linDict, "T"),\n      pageFirst: linDict.has("P") ? getInt(linDict, "P", true) : 0\n    };\n  }\n\n}\n\nexports.Linearization = Linearization;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/parser.js\n')},"./node_modules/pdfjs-dist/lib/core/pattern.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.getTilingPatternIR = getTilingPatternIR;\nexports.Pattern = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _colorspace = __webpack_require__(/*! ./colorspace.js */ "./node_modules/pdfjs-dist/lib/core/colorspace.js");\n\nvar _primitives = __webpack_require__(/*! ./primitives.js */ "./node_modules/pdfjs-dist/lib/core/primitives.js");\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nvar ShadingType = {\n  FUNCTION_BASED: 1,\n  AXIAL: 2,\n  RADIAL: 3,\n  FREE_FORM_MESH: 4,\n  LATTICE_FORM_MESH: 5,\n  COONS_PATCH_MESH: 6,\n  TENSOR_PATCH_MESH: 7\n};\n\nvar Pattern = function PatternClosure() {\n  function Pattern() {\n    (0, _util.unreachable)("should not call Pattern constructor");\n  }\n\n  Pattern.prototype = {\n    getPattern: function Pattern_getPattern(ctx) {\n      (0, _util.unreachable)(`Should not call Pattern.getStyle: ${ctx}`);\n    }\n  };\n\n  Pattern.parseShading = function (shading, matrix, xref, res, handler, pdfFunctionFactory, localColorSpaceCache) {\n    var dict = (0, _primitives.isStream)(shading) ? shading.dict : shading;\n    var type = dict.get("ShadingType");\n\n    try {\n      switch (type) {\n        case ShadingType.AXIAL:\n        case ShadingType.RADIAL:\n          return new Shadings.RadialAxial(dict, matrix, xref, res, pdfFunctionFactory, localColorSpaceCache);\n\n        case ShadingType.FREE_FORM_MESH:\n        case ShadingType.LATTICE_FORM_MESH:\n        case ShadingType.COONS_PATCH_MESH:\n        case ShadingType.TENSOR_PATCH_MESH:\n          return new Shadings.Mesh(shading, matrix, xref, res, pdfFunctionFactory, localColorSpaceCache);\n\n        default:\n          throw new _util.FormatError("Unsupported ShadingType: " + type);\n      }\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      handler.send("UnsupportedFeature", {\n        featureId: _util.UNSUPPORTED_FEATURES.shadingPattern\n      });\n      (0, _util.warn)(ex);\n      return new Shadings.Dummy();\n    }\n  };\n\n  return Pattern;\n}();\n\nexports.Pattern = Pattern;\nvar Shadings = {};\nShadings.SMALL_NUMBER = 1e-6;\n\nShadings.RadialAxial = function RadialAxialClosure() {\n  function RadialAxial(dict, matrix, xref, resources, pdfFunctionFactory, localColorSpaceCache) {\n    this.matrix = matrix;\n    this.coordsArr = dict.getArray("Coords");\n    this.shadingType = dict.get("ShadingType");\n    this.type = "Pattern";\n\n    const cs = _colorspace.ColorSpace.parse({\n      cs: dict.getRaw("ColorSpace") || dict.getRaw("CS"),\n      xref,\n      resources,\n      pdfFunctionFactory,\n      localColorSpaceCache\n    });\n\n    this.cs = cs;\n    const bbox = dict.getArray("BBox");\n\n    if (Array.isArray(bbox) && bbox.length === 4) {\n      this.bbox = _util.Util.normalizeRect(bbox);\n    } else {\n      this.bbox = null;\n    }\n\n    var t0 = 0.0,\n        t1 = 1.0;\n\n    if (dict.has("Domain")) {\n      var domainArr = dict.getArray("Domain");\n      t0 = domainArr[0];\n      t1 = domainArr[1];\n    }\n\n    var extendStart = false,\n        extendEnd = false;\n\n    if (dict.has("Extend")) {\n      var extendArr = dict.getArray("Extend");\n      extendStart = extendArr[0];\n      extendEnd = extendArr[1];\n    }\n\n    if (this.shadingType === ShadingType.RADIAL && (!extendStart || !extendEnd)) {\n      var x1 = this.coordsArr[0];\n      var y1 = this.coordsArr[1];\n      var r1 = this.coordsArr[2];\n      var x2 = this.coordsArr[3];\n      var y2 = this.coordsArr[4];\n      var r2 = this.coordsArr[5];\n      var distance = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n\n      if (r1 <= r2 + distance && r2 <= r1 + distance) {\n        (0, _util.warn)("Unsupported radial gradient.");\n      }\n    }\n\n    this.extendStart = extendStart;\n    this.extendEnd = extendEnd;\n    var fnObj = dict.getRaw("Function");\n    var fn = pdfFunctionFactory.createFromArray(fnObj);\n    const NUMBER_OF_SAMPLES = 10;\n    const step = (t1 - t0) / NUMBER_OF_SAMPLES;\n    var colorStops = this.colorStops = [];\n\n    if (t0 >= t1 || step <= 0) {\n      (0, _util.info)("Bad shading domain.");\n      return;\n    }\n\n    var color = new Float32Array(cs.numComps),\n        ratio = new Float32Array(1);\n    var rgbColor;\n\n    for (let i = 0; i <= NUMBER_OF_SAMPLES; i++) {\n      ratio[0] = t0 + i * step;\n      fn(ratio, 0, color, 0);\n      rgbColor = cs.getRgb(color, 0);\n\n      var cssColor = _util.Util.makeHexColor(rgbColor[0], rgbColor[1], rgbColor[2]);\n\n      colorStops.push([i / NUMBER_OF_SAMPLES, cssColor]);\n    }\n\n    var background = "transparent";\n\n    if (dict.has("Background")) {\n      rgbColor = cs.getRgb(dict.get("Background"), 0);\n      background = _util.Util.makeHexColor(rgbColor[0], rgbColor[1], rgbColor[2]);\n    }\n\n    if (!extendStart) {\n      colorStops.unshift([0, background]);\n      colorStops[1][0] += Shadings.SMALL_NUMBER;\n    }\n\n    if (!extendEnd) {\n      colorStops[colorStops.length - 1][0] -= Shadings.SMALL_NUMBER;\n      colorStops.push([1, background]);\n    }\n\n    this.colorStops = colorStops;\n  }\n\n  RadialAxial.prototype = {\n    getIR: function RadialAxial_getIR() {\n      var coordsArr = this.coordsArr;\n      var shadingType = this.shadingType;\n      var type, p0, p1, r0, r1;\n\n      if (shadingType === ShadingType.AXIAL) {\n        p0 = [coordsArr[0], coordsArr[1]];\n        p1 = [coordsArr[2], coordsArr[3]];\n        r0 = null;\n        r1 = null;\n        type = "axial";\n      } else if (shadingType === ShadingType.RADIAL) {\n        p0 = [coordsArr[0], coordsArr[1]];\n        p1 = [coordsArr[3], coordsArr[4]];\n        r0 = coordsArr[2];\n        r1 = coordsArr[5];\n        type = "radial";\n      } else {\n        (0, _util.unreachable)(`getPattern type unknown: ${shadingType}`);\n      }\n\n      var matrix = this.matrix;\n\n      if (matrix) {\n        p0 = _util.Util.applyTransform(p0, matrix);\n        p1 = _util.Util.applyTransform(p1, matrix);\n\n        if (shadingType === ShadingType.RADIAL) {\n          var scale = _util.Util.singularValueDecompose2dScale(matrix);\n\n          r0 *= scale[0];\n          r1 *= scale[1];\n        }\n      }\n\n      return ["RadialAxial", type, this.bbox, this.colorStops, p0, p1, r0, r1];\n    }\n  };\n  return RadialAxial;\n}();\n\nShadings.Mesh = function MeshClosure() {\n  function MeshStreamReader(stream, context) {\n    this.stream = stream;\n    this.context = context;\n    this.buffer = 0;\n    this.bufferLength = 0;\n    var numComps = context.numComps;\n    this.tmpCompsBuf = new Float32Array(numComps);\n    var csNumComps = context.colorSpace.numComps;\n    this.tmpCsCompsBuf = context.colorFn ? new Float32Array(csNumComps) : this.tmpCompsBuf;\n  }\n\n  MeshStreamReader.prototype = {\n    get hasData() {\n      if (this.stream.end) {\n        return this.stream.pos < this.stream.end;\n      }\n\n      if (this.bufferLength > 0) {\n        return true;\n      }\n\n      var nextByte = this.stream.getByte();\n\n      if (nextByte < 0) {\n        return false;\n      }\n\n      this.buffer = nextByte;\n      this.bufferLength = 8;\n      return true;\n    },\n\n    readBits: function MeshStreamReader_readBits(n) {\n      var buffer = this.buffer;\n      var bufferLength = this.bufferLength;\n\n      if (n === 32) {\n        if (bufferLength === 0) {\n          return (this.stream.getByte() << 24 | this.stream.getByte() << 16 | this.stream.getByte() << 8 | this.stream.getByte()) >>> 0;\n        }\n\n        buffer = buffer << 24 | this.stream.getByte() << 16 | this.stream.getByte() << 8 | this.stream.getByte();\n        var nextByte = this.stream.getByte();\n        this.buffer = nextByte & (1 << bufferLength) - 1;\n        return (buffer << 8 - bufferLength | (nextByte & 0xff) >> bufferLength) >>> 0;\n      }\n\n      if (n === 8 && bufferLength === 0) {\n        return this.stream.getByte();\n      }\n\n      while (bufferLength < n) {\n        buffer = buffer << 8 | this.stream.getByte();\n        bufferLength += 8;\n      }\n\n      bufferLength -= n;\n      this.bufferLength = bufferLength;\n      this.buffer = buffer & (1 << bufferLength) - 1;\n      return buffer >> bufferLength;\n    },\n    align: function MeshStreamReader_align() {\n      this.buffer = 0;\n      this.bufferLength = 0;\n    },\n    readFlag: function MeshStreamReader_readFlag() {\n      return this.readBits(this.context.bitsPerFlag);\n    },\n    readCoordinate: function MeshStreamReader_readCoordinate() {\n      var bitsPerCoordinate = this.context.bitsPerCoordinate;\n      var xi = this.readBits(bitsPerCoordinate);\n      var yi = this.readBits(bitsPerCoordinate);\n      var decode = this.context.decode;\n      var scale = bitsPerCoordinate < 32 ? 1 / ((1 << bitsPerCoordinate) - 1) : 2.3283064365386963e-10;\n      return [xi * scale * (decode[1] - decode[0]) + decode[0], yi * scale * (decode[3] - decode[2]) + decode[2]];\n    },\n    readComponents: function MeshStreamReader_readComponents() {\n      var numComps = this.context.numComps;\n      var bitsPerComponent = this.context.bitsPerComponent;\n      var scale = bitsPerComponent < 32 ? 1 / ((1 << bitsPerComponent) - 1) : 2.3283064365386963e-10;\n      var decode = this.context.decode;\n      var components = this.tmpCompsBuf;\n\n      for (var i = 0, j = 4; i < numComps; i++, j += 2) {\n        var ci = this.readBits(bitsPerComponent);\n        components[i] = ci * scale * (decode[j + 1] - decode[j]) + decode[j];\n      }\n\n      var color = this.tmpCsCompsBuf;\n\n      if (this.context.colorFn) {\n        this.context.colorFn(components, 0, color, 0);\n      }\n\n      return this.context.colorSpace.getRgb(color, 0);\n    }\n  };\n\n  function decodeType4Shading(mesh, reader) {\n    var coords = mesh.coords;\n    var colors = mesh.colors;\n    var operators = [];\n    var ps = [];\n    var verticesLeft = 0;\n\n    while (reader.hasData) {\n      var f = reader.readFlag();\n      var coord = reader.readCoordinate();\n      var color = reader.readComponents();\n\n      if (verticesLeft === 0) {\n        if (!(0 <= f && f <= 2)) {\n          throw new _util.FormatError("Unknown type4 flag");\n        }\n\n        switch (f) {\n          case 0:\n            verticesLeft = 3;\n            break;\n\n          case 1:\n            ps.push(ps[ps.length - 2], ps[ps.length - 1]);\n            verticesLeft = 1;\n            break;\n\n          case 2:\n            ps.push(ps[ps.length - 3], ps[ps.length - 1]);\n            verticesLeft = 1;\n            break;\n        }\n\n        operators.push(f);\n      }\n\n      ps.push(coords.length);\n      coords.push(coord);\n      colors.push(color);\n      verticesLeft--;\n      reader.align();\n    }\n\n    mesh.figures.push({\n      type: "triangles",\n      coords: new Int32Array(ps),\n      colors: new Int32Array(ps)\n    });\n  }\n\n  function decodeType5Shading(mesh, reader, verticesPerRow) {\n    var coords = mesh.coords;\n    var colors = mesh.colors;\n    var ps = [];\n\n    while (reader.hasData) {\n      var coord = reader.readCoordinate();\n      var color = reader.readComponents();\n      ps.push(coords.length);\n      coords.push(coord);\n      colors.push(color);\n    }\n\n    mesh.figures.push({\n      type: "lattice",\n      coords: new Int32Array(ps),\n      colors: new Int32Array(ps),\n      verticesPerRow\n    });\n  }\n\n  var MIN_SPLIT_PATCH_CHUNKS_AMOUNT = 3;\n  var MAX_SPLIT_PATCH_CHUNKS_AMOUNT = 20;\n  var TRIANGLE_DENSITY = 20;\n\n  var getB = function getBClosure() {\n    function buildB(count) {\n      var lut = [];\n\n      for (var i = 0; i <= count; i++) {\n        var t = i / count,\n            t_ = 1 - t;\n        lut.push(new Float32Array([t_ * t_ * t_, 3 * t * t_ * t_, 3 * t * t * t_, t * t * t]));\n      }\n\n      return lut;\n    }\n\n    var cache = [];\n    return function getB(count) {\n      if (!cache[count]) {\n        cache[count] = buildB(count);\n      }\n\n      return cache[count];\n    };\n  }();\n\n  function buildFigureFromPatch(mesh, index) {\n    var figure = mesh.figures[index];\n    (0, _util.assert)(figure.type === "patch", "Unexpected patch mesh figure");\n    var coords = mesh.coords,\n        colors = mesh.colors;\n    var pi = figure.coords;\n    var ci = figure.colors;\n    var figureMinX = Math.min(coords[pi[0]][0], coords[pi[3]][0], coords[pi[12]][0], coords[pi[15]][0]);\n    var figureMinY = Math.min(coords[pi[0]][1], coords[pi[3]][1], coords[pi[12]][1], coords[pi[15]][1]);\n    var figureMaxX = Math.max(coords[pi[0]][0], coords[pi[3]][0], coords[pi[12]][0], coords[pi[15]][0]);\n    var figureMaxY = Math.max(coords[pi[0]][1], coords[pi[3]][1], coords[pi[12]][1], coords[pi[15]][1]);\n    var splitXBy = Math.ceil((figureMaxX - figureMinX) * TRIANGLE_DENSITY / (mesh.bounds[2] - mesh.bounds[0]));\n    splitXBy = Math.max(MIN_SPLIT_PATCH_CHUNKS_AMOUNT, Math.min(MAX_SPLIT_PATCH_CHUNKS_AMOUNT, splitXBy));\n    var splitYBy = Math.ceil((figureMaxY - figureMinY) * TRIANGLE_DENSITY / (mesh.bounds[3] - mesh.bounds[1]));\n    splitYBy = Math.max(MIN_SPLIT_PATCH_CHUNKS_AMOUNT, Math.min(MAX_SPLIT_PATCH_CHUNKS_AMOUNT, splitYBy));\n    var verticesPerRow = splitXBy + 1;\n    var figureCoords = new Int32Array((splitYBy + 1) * verticesPerRow);\n    var figureColors = new Int32Array((splitYBy + 1) * verticesPerRow);\n    var k = 0;\n    var cl = new Uint8Array(3),\n        cr = new Uint8Array(3);\n    var c0 = colors[ci[0]],\n        c1 = colors[ci[1]],\n        c2 = colors[ci[2]],\n        c3 = colors[ci[3]];\n    var bRow = getB(splitYBy),\n        bCol = getB(splitXBy);\n\n    for (var row = 0; row <= splitYBy; row++) {\n      cl[0] = (c0[0] * (splitYBy - row) + c2[0] * row) / splitYBy | 0;\n      cl[1] = (c0[1] * (splitYBy - row) + c2[1] * row) / splitYBy | 0;\n      cl[2] = (c0[2] * (splitYBy - row) + c2[2] * row) / splitYBy | 0;\n      cr[0] = (c1[0] * (splitYBy - row) + c3[0] * row) / splitYBy | 0;\n      cr[1] = (c1[1] * (splitYBy - row) + c3[1] * row) / splitYBy | 0;\n      cr[2] = (c1[2] * (splitYBy - row) + c3[2] * row) / splitYBy | 0;\n\n      for (var col = 0; col <= splitXBy; col++, k++) {\n        if ((row === 0 || row === splitYBy) && (col === 0 || col === splitXBy)) {\n          continue;\n        }\n\n        var x = 0,\n            y = 0;\n        var q = 0;\n\n        for (var i = 0; i <= 3; i++) {\n          for (var j = 0; j <= 3; j++, q++) {\n            var m = bRow[row][i] * bCol[col][j];\n            x += coords[pi[q]][0] * m;\n            y += coords[pi[q]][1] * m;\n          }\n        }\n\n        figureCoords[k] = coords.length;\n        coords.push([x, y]);\n        figureColors[k] = colors.length;\n        var newColor = new Uint8Array(3);\n        newColor[0] = (cl[0] * (splitXBy - col) + cr[0] * col) / splitXBy | 0;\n        newColor[1] = (cl[1] * (splitXBy - col) + cr[1] * col) / splitXBy | 0;\n        newColor[2] = (cl[2] * (splitXBy - col) + cr[2] * col) / splitXBy | 0;\n        colors.push(newColor);\n      }\n    }\n\n    figureCoords[0] = pi[0];\n    figureColors[0] = ci[0];\n    figureCoords[splitXBy] = pi[3];\n    figureColors[splitXBy] = ci[1];\n    figureCoords[verticesPerRow * splitYBy] = pi[12];\n    figureColors[verticesPerRow * splitYBy] = ci[2];\n    figureCoords[verticesPerRow * splitYBy + splitXBy] = pi[15];\n    figureColors[verticesPerRow * splitYBy + splitXBy] = ci[3];\n    mesh.figures[index] = {\n      type: "lattice",\n      coords: figureCoords,\n      colors: figureColors,\n      verticesPerRow\n    };\n  }\n\n  function decodeType6Shading(mesh, reader) {\n    var coords = mesh.coords;\n    var colors = mesh.colors;\n    var ps = new Int32Array(16);\n    var cs = new Int32Array(4);\n\n    while (reader.hasData) {\n      var f = reader.readFlag();\n\n      if (!(0 <= f && f <= 3)) {\n        throw new _util.FormatError("Unknown type6 flag");\n      }\n\n      var i, ii;\n      var pi = coords.length;\n\n      for (i = 0, ii = f !== 0 ? 8 : 12; i < ii; i++) {\n        coords.push(reader.readCoordinate());\n      }\n\n      var ci = colors.length;\n\n      for (i = 0, ii = f !== 0 ? 2 : 4; i < ii; i++) {\n        colors.push(reader.readComponents());\n      }\n\n      var tmp1, tmp2, tmp3, tmp4;\n\n      switch (f) {\n        case 0:\n          ps[12] = pi + 3;\n          ps[13] = pi + 4;\n          ps[14] = pi + 5;\n          ps[15] = pi + 6;\n          ps[8] = pi + 2;\n          ps[11] = pi + 7;\n          ps[4] = pi + 1;\n          ps[7] = pi + 8;\n          ps[0] = pi;\n          ps[1] = pi + 11;\n          ps[2] = pi + 10;\n          ps[3] = pi + 9;\n          cs[2] = ci + 1;\n          cs[3] = ci + 2;\n          cs[0] = ci;\n          cs[1] = ci + 3;\n          break;\n\n        case 1:\n          tmp1 = ps[12];\n          tmp2 = ps[13];\n          tmp3 = ps[14];\n          tmp4 = ps[15];\n          ps[12] = tmp4;\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = tmp3;\n          ps[11] = pi + 3;\n          ps[4] = tmp2;\n          ps[7] = pi + 4;\n          ps[0] = tmp1;\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          tmp1 = cs[2];\n          tmp2 = cs[3];\n          cs[2] = tmp2;\n          cs[3] = ci;\n          cs[0] = tmp1;\n          cs[1] = ci + 1;\n          break;\n\n        case 2:\n          tmp1 = ps[15];\n          tmp2 = ps[11];\n          ps[12] = ps[3];\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = ps[7];\n          ps[11] = pi + 3;\n          ps[4] = tmp2;\n          ps[7] = pi + 4;\n          ps[0] = tmp1;\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          tmp1 = cs[3];\n          cs[2] = cs[1];\n          cs[3] = ci;\n          cs[0] = tmp1;\n          cs[1] = ci + 1;\n          break;\n\n        case 3:\n          ps[12] = ps[0];\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = ps[1];\n          ps[11] = pi + 3;\n          ps[4] = ps[2];\n          ps[7] = pi + 4;\n          ps[0] = ps[3];\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          cs[2] = cs[0];\n          cs[3] = ci;\n          cs[0] = cs[1];\n          cs[1] = ci + 1;\n          break;\n      }\n\n      ps[5] = coords.length;\n      coords.push([(-4 * coords[ps[0]][0] - coords[ps[15]][0] + 6 * (coords[ps[4]][0] + coords[ps[1]][0]) - 2 * (coords[ps[12]][0] + coords[ps[3]][0]) + 3 * (coords[ps[13]][0] + coords[ps[7]][0])) / 9, (-4 * coords[ps[0]][1] - coords[ps[15]][1] + 6 * (coords[ps[4]][1] + coords[ps[1]][1]) - 2 * (coords[ps[12]][1] + coords[ps[3]][1]) + 3 * (coords[ps[13]][1] + coords[ps[7]][1])) / 9]);\n      ps[6] = coords.length;\n      coords.push([(-4 * coords[ps[3]][0] - coords[ps[12]][0] + 6 * (coords[ps[2]][0] + coords[ps[7]][0]) - 2 * (coords[ps[0]][0] + coords[ps[15]][0]) + 3 * (coords[ps[4]][0] + coords[ps[14]][0])) / 9, (-4 * coords[ps[3]][1] - coords[ps[12]][1] + 6 * (coords[ps[2]][1] + coords[ps[7]][1]) - 2 * (coords[ps[0]][1] + coords[ps[15]][1]) + 3 * (coords[ps[4]][1] + coords[ps[14]][1])) / 9]);\n      ps[9] = coords.length;\n      coords.push([(-4 * coords[ps[12]][0] - coords[ps[3]][0] + 6 * (coords[ps[8]][0] + coords[ps[13]][0]) - 2 * (coords[ps[0]][0] + coords[ps[15]][0]) + 3 * (coords[ps[11]][0] + coords[ps[1]][0])) / 9, (-4 * coords[ps[12]][1] - coords[ps[3]][1] + 6 * (coords[ps[8]][1] + coords[ps[13]][1]) - 2 * (coords[ps[0]][1] + coords[ps[15]][1]) + 3 * (coords[ps[11]][1] + coords[ps[1]][1])) / 9]);\n      ps[10] = coords.length;\n      coords.push([(-4 * coords[ps[15]][0] - coords[ps[0]][0] + 6 * (coords[ps[11]][0] + coords[ps[14]][0]) - 2 * (coords[ps[12]][0] + coords[ps[3]][0]) + 3 * (coords[ps[2]][0] + coords[ps[8]][0])) / 9, (-4 * coords[ps[15]][1] - coords[ps[0]][1] + 6 * (coords[ps[11]][1] + coords[ps[14]][1]) - 2 * (coords[ps[12]][1] + coords[ps[3]][1]) + 3 * (coords[ps[2]][1] + coords[ps[8]][1])) / 9]);\n      mesh.figures.push({\n        type: "patch",\n        coords: new Int32Array(ps),\n        colors: new Int32Array(cs)\n      });\n    }\n  }\n\n  function decodeType7Shading(mesh, reader) {\n    var coords = mesh.coords;\n    var colors = mesh.colors;\n    var ps = new Int32Array(16);\n    var cs = new Int32Array(4);\n\n    while (reader.hasData) {\n      var f = reader.readFlag();\n\n      if (!(0 <= f && f <= 3)) {\n        throw new _util.FormatError("Unknown type7 flag");\n      }\n\n      var i, ii;\n      var pi = coords.length;\n\n      for (i = 0, ii = f !== 0 ? 12 : 16; i < ii; i++) {\n        coords.push(reader.readCoordinate());\n      }\n\n      var ci = colors.length;\n\n      for (i = 0, ii = f !== 0 ? 2 : 4; i < ii; i++) {\n        colors.push(reader.readComponents());\n      }\n\n      var tmp1, tmp2, tmp3, tmp4;\n\n      switch (f) {\n        case 0:\n          ps[12] = pi + 3;\n          ps[13] = pi + 4;\n          ps[14] = pi + 5;\n          ps[15] = pi + 6;\n          ps[8] = pi + 2;\n          ps[9] = pi + 13;\n          ps[10] = pi + 14;\n          ps[11] = pi + 7;\n          ps[4] = pi + 1;\n          ps[5] = pi + 12;\n          ps[6] = pi + 15;\n          ps[7] = pi + 8;\n          ps[0] = pi;\n          ps[1] = pi + 11;\n          ps[2] = pi + 10;\n          ps[3] = pi + 9;\n          cs[2] = ci + 1;\n          cs[3] = ci + 2;\n          cs[0] = ci;\n          cs[1] = ci + 3;\n          break;\n\n        case 1:\n          tmp1 = ps[12];\n          tmp2 = ps[13];\n          tmp3 = ps[14];\n          tmp4 = ps[15];\n          ps[12] = tmp4;\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = tmp3;\n          ps[9] = pi + 9;\n          ps[10] = pi + 10;\n          ps[11] = pi + 3;\n          ps[4] = tmp2;\n          ps[5] = pi + 8;\n          ps[6] = pi + 11;\n          ps[7] = pi + 4;\n          ps[0] = tmp1;\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          tmp1 = cs[2];\n          tmp2 = cs[3];\n          cs[2] = tmp2;\n          cs[3] = ci;\n          cs[0] = tmp1;\n          cs[1] = ci + 1;\n          break;\n\n        case 2:\n          tmp1 = ps[15];\n          tmp2 = ps[11];\n          ps[12] = ps[3];\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = ps[7];\n          ps[9] = pi + 9;\n          ps[10] = pi + 10;\n          ps[11] = pi + 3;\n          ps[4] = tmp2;\n          ps[5] = pi + 8;\n          ps[6] = pi + 11;\n          ps[7] = pi + 4;\n          ps[0] = tmp1;\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          tmp1 = cs[3];\n          cs[2] = cs[1];\n          cs[3] = ci;\n          cs[0] = tmp1;\n          cs[1] = ci + 1;\n          break;\n\n        case 3:\n          ps[12] = ps[0];\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = ps[1];\n          ps[9] = pi + 9;\n          ps[10] = pi + 10;\n          ps[11] = pi + 3;\n          ps[4] = ps[2];\n          ps[5] = pi + 8;\n          ps[6] = pi + 11;\n          ps[7] = pi + 4;\n          ps[0] = ps[3];\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          cs[2] = cs[0];\n          cs[3] = ci;\n          cs[0] = cs[1];\n          cs[1] = ci + 1;\n          break;\n      }\n\n      mesh.figures.push({\n        type: "patch",\n        coords: new Int32Array(ps),\n        colors: new Int32Array(cs)\n      });\n    }\n  }\n\n  function updateBounds(mesh) {\n    var minX = mesh.coords[0][0],\n        minY = mesh.coords[0][1],\n        maxX = minX,\n        maxY = minY;\n\n    for (var i = 1, ii = mesh.coords.length; i < ii; i++) {\n      var x = mesh.coords[i][0],\n          y = mesh.coords[i][1];\n      minX = minX > x ? x : minX;\n      minY = minY > y ? y : minY;\n      maxX = maxX < x ? x : maxX;\n      maxY = maxY < y ? y : maxY;\n    }\n\n    mesh.bounds = [minX, minY, maxX, maxY];\n  }\n\n  function packData(mesh) {\n    var i, ii, j, jj;\n    var coords = mesh.coords;\n    var coordsPacked = new Float32Array(coords.length * 2);\n\n    for (i = 0, j = 0, ii = coords.length; i < ii; i++) {\n      var xy = coords[i];\n      coordsPacked[j++] = xy[0];\n      coordsPacked[j++] = xy[1];\n    }\n\n    mesh.coords = coordsPacked;\n    var colors = mesh.colors;\n    var colorsPacked = new Uint8Array(colors.length * 3);\n\n    for (i = 0, j = 0, ii = colors.length; i < ii; i++) {\n      var c = colors[i];\n      colorsPacked[j++] = c[0];\n      colorsPacked[j++] = c[1];\n      colorsPacked[j++] = c[2];\n    }\n\n    mesh.colors = colorsPacked;\n    var figures = mesh.figures;\n\n    for (i = 0, ii = figures.length; i < ii; i++) {\n      var figure = figures[i],\n          ps = figure.coords,\n          cs = figure.colors;\n\n      for (j = 0, jj = ps.length; j < jj; j++) {\n        ps[j] *= 2;\n        cs[j] *= 3;\n      }\n    }\n  }\n\n  function Mesh(stream, matrix, xref, resources, pdfFunctionFactory, localColorSpaceCache) {\n    if (!(0, _primitives.isStream)(stream)) {\n      throw new _util.FormatError("Mesh data is not a stream");\n    }\n\n    var dict = stream.dict;\n    this.matrix = matrix;\n    this.shadingType = dict.get("ShadingType");\n    this.type = "Pattern";\n    const bbox = dict.getArray("BBox");\n\n    if (Array.isArray(bbox) && bbox.length === 4) {\n      this.bbox = _util.Util.normalizeRect(bbox);\n    } else {\n      this.bbox = null;\n    }\n\n    const cs = _colorspace.ColorSpace.parse({\n      cs: dict.getRaw("ColorSpace") || dict.getRaw("CS"),\n      xref,\n      resources,\n      pdfFunctionFactory,\n      localColorSpaceCache\n    });\n\n    this.cs = cs;\n    this.background = dict.has("Background") ? cs.getRgb(dict.get("Background"), 0) : null;\n    var fnObj = dict.getRaw("Function");\n    var fn = fnObj ? pdfFunctionFactory.createFromArray(fnObj) : null;\n    this.coords = [];\n    this.colors = [];\n    this.figures = [];\n    var decodeContext = {\n      bitsPerCoordinate: dict.get("BitsPerCoordinate"),\n      bitsPerComponent: dict.get("BitsPerComponent"),\n      bitsPerFlag: dict.get("BitsPerFlag"),\n      decode: dict.getArray("Decode"),\n      colorFn: fn,\n      colorSpace: cs,\n      numComps: fn ? 1 : cs.numComps\n    };\n    var reader = new MeshStreamReader(stream, decodeContext);\n    var patchMesh = false;\n\n    switch (this.shadingType) {\n      case ShadingType.FREE_FORM_MESH:\n        decodeType4Shading(this, reader);\n        break;\n\n      case ShadingType.LATTICE_FORM_MESH:\n        var verticesPerRow = dict.get("VerticesPerRow") | 0;\n\n        if (verticesPerRow < 2) {\n          throw new _util.FormatError("Invalid VerticesPerRow");\n        }\n\n        decodeType5Shading(this, reader, verticesPerRow);\n        break;\n\n      case ShadingType.COONS_PATCH_MESH:\n        decodeType6Shading(this, reader);\n        patchMesh = true;\n        break;\n\n      case ShadingType.TENSOR_PATCH_MESH:\n        decodeType7Shading(this, reader);\n        patchMesh = true;\n        break;\n\n      default:\n        (0, _util.unreachable)("Unsupported mesh type.");\n        break;\n    }\n\n    if (patchMesh) {\n      updateBounds(this);\n\n      for (var i = 0, ii = this.figures.length; i < ii; i++) {\n        buildFigureFromPatch(this, i);\n      }\n    }\n\n    updateBounds(this);\n    packData(this);\n  }\n\n  Mesh.prototype = {\n    getIR: function Mesh_getIR() {\n      return ["Mesh", this.shadingType, this.coords, this.colors, this.figures, this.bounds, this.matrix, this.bbox, this.background];\n    }\n  };\n  return Mesh;\n}();\n\nShadings.Dummy = function DummyClosure() {\n  function Dummy() {\n    this.type = "Pattern";\n  }\n\n  Dummy.prototype = {\n    getIR: function Dummy_getIR() {\n      return ["Dummy"];\n    }\n  };\n  return Dummy;\n}();\n\nfunction getTilingPatternIR(operatorList, dict, color) {\n  const matrix = dict.getArray("Matrix");\n\n  const bbox = _util.Util.normalizeRect(dict.getArray("BBox"));\n\n  const xstep = dict.get("XStep");\n  const ystep = dict.get("YStep");\n  const paintType = dict.get("PaintType");\n  const tilingType = dict.get("TilingType");\n\n  if (bbox[2] - bbox[0] === 0 || bbox[3] - bbox[1] === 0) {\n    throw new _util.FormatError(`Invalid getTilingPatternIR /BBox array: [${bbox}].`);\n  }\n\n  return ["TilingPattern", color, operatorList, matrix, bbox, xstep, ystep, paintType, tilingType];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/pattern.js\n')},"./node_modules/pdfjs-dist/lib/core/pdf_manager.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.NetworkPdfManager = exports.LocalPdfManager = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _chunked_stream = __webpack_require__(/*! ./chunked_stream.js */ "./node_modules/pdfjs-dist/lib/core/chunked_stream.js");\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nvar _document = __webpack_require__(/*! ./document.js */ "./node_modules/pdfjs-dist/lib/core/document.js");\n\nvar _stream = __webpack_require__(/*! ./stream.js */ "./node_modules/pdfjs-dist/lib/core/stream.js");\n\nclass BasePdfManager {\n  constructor() {\n    if (this.constructor === BasePdfManager) {\n      (0, _util.unreachable)("Cannot initialize BasePdfManager.");\n    }\n  }\n\n  get docId() {\n    return this._docId;\n  }\n\n  get password() {\n    return this._password;\n  }\n\n  get docBaseUrl() {\n    let docBaseUrl = null;\n\n    if (this._docBaseUrl) {\n      const absoluteUrl = (0, _util.createValidAbsoluteUrl)(this._docBaseUrl);\n\n      if (absoluteUrl) {\n        docBaseUrl = absoluteUrl.href;\n      } else {\n        (0, _util.warn)(`Invalid absolute docBaseUrl: "${this._docBaseUrl}".`);\n      }\n    }\n\n    return (0, _util.shadow)(this, "docBaseUrl", docBaseUrl);\n  }\n\n  onLoadedStream() {\n    (0, _util.unreachable)("Abstract method `onLoadedStream` called");\n  }\n\n  ensureDoc(prop, args) {\n    return this.ensure(this.pdfDocument, prop, args);\n  }\n\n  ensureXRef(prop, args) {\n    return this.ensure(this.pdfDocument.xref, prop, args);\n  }\n\n  ensureCatalog(prop, args) {\n    return this.ensure(this.pdfDocument.catalog, prop, args);\n  }\n\n  getPage(pageIndex) {\n    return this.pdfDocument.getPage(pageIndex);\n  }\n\n  fontFallback(id, handler) {\n    return this.pdfDocument.fontFallback(id, handler);\n  }\n\n  cleanup(manuallyTriggered = false) {\n    return this.pdfDocument.cleanup(manuallyTriggered);\n  }\n\n  async ensure(obj, prop, args) {\n    (0, _util.unreachable)("Abstract method `ensure` called");\n  }\n\n  requestRange(begin, end) {\n    (0, _util.unreachable)("Abstract method `requestRange` called");\n  }\n\n  requestLoadedStream() {\n    (0, _util.unreachable)("Abstract method `requestLoadedStream` called");\n  }\n\n  sendProgressiveData(chunk) {\n    (0, _util.unreachable)("Abstract method `sendProgressiveData` called");\n  }\n\n  updatePassword(password) {\n    this._password = password;\n  }\n\n  terminate(reason) {\n    (0, _util.unreachable)("Abstract method `terminate` called");\n  }\n\n}\n\nclass LocalPdfManager extends BasePdfManager {\n  constructor(docId, data, password, evaluatorOptions, docBaseUrl) {\n    super();\n    this._docId = docId;\n    this._password = password;\n    this._docBaseUrl = docBaseUrl;\n    this.evaluatorOptions = evaluatorOptions;\n    const stream = new _stream.Stream(data);\n    this.pdfDocument = new _document.PDFDocument(this, stream);\n    this._loadedStreamPromise = Promise.resolve(stream);\n  }\n\n  async ensure(obj, prop, args) {\n    const value = obj[prop];\n\n    if (typeof value === "function") {\n      return value.apply(obj, args);\n    }\n\n    return value;\n  }\n\n  requestRange(begin, end) {\n    return Promise.resolve();\n  }\n\n  requestLoadedStream() {}\n\n  onLoadedStream() {\n    return this._loadedStreamPromise;\n  }\n\n  terminate(reason) {}\n\n}\n\nexports.LocalPdfManager = LocalPdfManager;\n\nclass NetworkPdfManager extends BasePdfManager {\n  constructor(docId, pdfNetworkStream, args, evaluatorOptions, docBaseUrl) {\n    super();\n    this._docId = docId;\n    this._password = args.password;\n    this._docBaseUrl = docBaseUrl;\n    this.msgHandler = args.msgHandler;\n    this.evaluatorOptions = evaluatorOptions;\n    this.streamManager = new _chunked_stream.ChunkedStreamManager(pdfNetworkStream, {\n      msgHandler: args.msgHandler,\n      length: args.length,\n      disableAutoFetch: args.disableAutoFetch,\n      rangeChunkSize: args.rangeChunkSize\n    });\n    this.pdfDocument = new _document.PDFDocument(this, this.streamManager.getStream());\n  }\n\n  async ensure(obj, prop, args) {\n    try {\n      const value = obj[prop];\n\n      if (typeof value === "function") {\n        return value.apply(obj, args);\n      }\n\n      return value;\n    } catch (ex) {\n      if (!(ex instanceof _core_utils.MissingDataException)) {\n        throw ex;\n      }\n\n      await this.requestRange(ex.begin, ex.end);\n      return this.ensure(obj, prop, args);\n    }\n  }\n\n  requestRange(begin, end) {\n    return this.streamManager.requestRange(begin, end);\n  }\n\n  requestLoadedStream() {\n    this.streamManager.requestAllChunks();\n  }\n\n  sendProgressiveData(chunk) {\n    this.streamManager.onReceiveData({\n      chunk\n    });\n  }\n\n  onLoadedStream() {\n    return this.streamManager.onLoadedStream();\n  }\n\n  terminate(reason) {\n    this.streamManager.abort(reason);\n  }\n\n}\n\nexports.NetworkPdfManager = NetworkPdfManager;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/pdf_manager.js\n')},"./node_modules/pdfjs-dist/lib/core/primitives.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.clearPrimitiveCaches = clearPrimitiveCaches;\nexports.isCmd = isCmd;\nexports.isDict = isDict;\nexports.isEOF = isEOF;\nexports.isName = isName;\nexports.isRef = isRef;\nexports.isRefsEqual = isRefsEqual;\nexports.isStream = isStream;\nexports.RefSetCache = exports.RefSet = exports.Ref = exports.Name = exports.EOF = exports.Dict = exports.Cmd = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar EOF = {};\nexports.EOF = EOF;\n\nvar Name = function NameClosure() {\n  let nameCache = Object.create(null);\n\n  function Name(name) {\n    this.name = name;\n  }\n\n  Name.prototype = {};\n\n  Name.get = function Name_get(name) {\n    var nameValue = nameCache[name];\n    return nameValue ? nameValue : nameCache[name] = new Name(name);\n  };\n\n  Name._clearCache = function () {\n    nameCache = Object.create(null);\n  };\n\n  return Name;\n}();\n\nexports.Name = Name;\n\nvar Cmd = function CmdClosure() {\n  let cmdCache = Object.create(null);\n\n  function Cmd(cmd) {\n    this.cmd = cmd;\n  }\n\n  Cmd.prototype = {};\n\n  Cmd.get = function Cmd_get(cmd) {\n    var cmdValue = cmdCache[cmd];\n    return cmdValue ? cmdValue : cmdCache[cmd] = new Cmd(cmd);\n  };\n\n  Cmd._clearCache = function () {\n    cmdCache = Object.create(null);\n  };\n\n  return Cmd;\n}();\n\nexports.Cmd = Cmd;\n\nvar Dict = function DictClosure() {\n  var nonSerializable = function nonSerializableClosure() {\n    return nonSerializable;\n  };\n\n  function Dict(xref) {\n    this._map = Object.create(null);\n    this.xref = xref;\n    this.objId = null;\n    this.suppressEncryption = false;\n    this.__nonSerializable__ = nonSerializable;\n  }\n\n  Dict.prototype = {\n    assignXref: function Dict_assignXref(newXref) {\n      this.xref = newXref;\n    },\n\n    get size() {\n      return Object.keys(this._map).length;\n    },\n\n    get(key1, key2, key3) {\n      let value = this._map[key1];\n\n      if (value === undefined && key2 !== undefined) {\n        value = this._map[key2];\n\n        if (value === undefined && key3 !== undefined) {\n          value = this._map[key3];\n        }\n      }\n\n      if (value instanceof Ref && this.xref) {\n        return this.xref.fetch(value, this.suppressEncryption);\n      }\n\n      return value;\n    },\n\n    async getAsync(key1, key2, key3) {\n      let value = this._map[key1];\n\n      if (value === undefined && key2 !== undefined) {\n        value = this._map[key2];\n\n        if (value === undefined && key3 !== undefined) {\n          value = this._map[key3];\n        }\n      }\n\n      if (value instanceof Ref && this.xref) {\n        return this.xref.fetchAsync(value, this.suppressEncryption);\n      }\n\n      return value;\n    },\n\n    getArray(key1, key2, key3) {\n      let value = this.get(key1, key2, key3);\n\n      if (!Array.isArray(value) || !this.xref) {\n        return value;\n      }\n\n      value = value.slice();\n\n      for (let i = 0, ii = value.length; i < ii; i++) {\n        if (!(value[i] instanceof Ref)) {\n          continue;\n        }\n\n        value[i] = this.xref.fetch(value[i], this.suppressEncryption);\n      }\n\n      return value;\n    },\n\n    getRaw: function Dict_getRaw(key) {\n      return this._map[key];\n    },\n    getKeys: function Dict_getKeys() {\n      return Object.keys(this._map);\n    },\n    getRawValues: function Dict_getRawValues() {\n      return Object.values(this._map);\n    },\n    set: function Dict_set(key, value) {\n      this._map[key] = value;\n    },\n    has: function Dict_has(key) {\n      return this._map[key] !== undefined;\n    },\n    forEach: function Dict_forEach(callback) {\n      for (var key in this._map) {\n        callback(key, this.get(key));\n      }\n    }\n  };\n\n  Dict.empty = function () {\n    const emptyDict = new Dict(null);\n\n    emptyDict.set = (key, value) => {\n      (0, _util.unreachable)("Should not call `set` on the empty dictionary.");\n    };\n\n    return emptyDict;\n  }();\n\n  Dict.merge = function ({\n    xref,\n    dictArray,\n    mergeSubDicts = false\n  }) {\n    const mergedDict = new Dict(xref);\n\n    if (!mergeSubDicts) {\n      for (const dict of dictArray) {\n        if (!(dict instanceof Dict)) {\n          continue;\n        }\n\n        for (const [key, value] of Object.entries(dict._map)) {\n          if (mergedDict._map[key] === undefined) {\n            mergedDict._map[key] = value;\n          }\n        }\n      }\n\n      return mergedDict.size > 0 ? mergedDict : Dict.empty;\n    }\n\n    const properties = new Map();\n\n    for (const dict of dictArray) {\n      if (!(dict instanceof Dict)) {\n        continue;\n      }\n\n      for (const [key, value] of Object.entries(dict._map)) {\n        let property = properties.get(key);\n\n        if (property === undefined) {\n          property = [];\n          properties.set(key, property);\n        }\n\n        property.push(value);\n      }\n    }\n\n    for (const [name, values] of properties) {\n      if (values.length === 1 || !(values[0] instanceof Dict)) {\n        mergedDict._map[name] = values[0];\n        continue;\n      }\n\n      const subDict = new Dict(xref);\n\n      for (const dict of values) {\n        if (!(dict instanceof Dict)) {\n          continue;\n        }\n\n        for (const [key, value] of Object.entries(dict._map)) {\n          if (subDict._map[key] === undefined) {\n            subDict._map[key] = value;\n          }\n        }\n      }\n\n      if (subDict.size > 0) {\n        mergedDict._map[name] = subDict;\n      }\n    }\n\n    properties.clear();\n    return mergedDict.size > 0 ? mergedDict : Dict.empty;\n  };\n\n  return Dict;\n}();\n\nexports.Dict = Dict;\n\nvar Ref = function RefClosure() {\n  let refCache = Object.create(null);\n\n  function Ref(num, gen) {\n    this.num = num;\n    this.gen = gen;\n  }\n\n  Ref.prototype = {\n    toString: function Ref_toString() {\n      if (this.gen === 0) {\n        return `${this.num}R`;\n      }\n\n      return `${this.num}R${this.gen}`;\n    }\n  };\n\n  Ref.get = function (num, gen) {\n    const key = gen === 0 ? `${num}R` : `${num}R${gen}`;\n    const refValue = refCache[key];\n    return refValue ? refValue : refCache[key] = new Ref(num, gen);\n  };\n\n  Ref._clearCache = function () {\n    refCache = Object.create(null);\n  };\n\n  return Ref;\n}();\n\nexports.Ref = Ref;\n\nclass RefSet {\n  constructor(parent = null) {\n    this._set = new Set(parent && parent._set);\n  }\n\n  has(ref) {\n    return this._set.has(ref.toString());\n  }\n\n  put(ref) {\n    this._set.add(ref.toString());\n  }\n\n  remove(ref) {\n    this._set.delete(ref.toString());\n  }\n\n  forEach(callback) {\n    for (const ref of this._set.values()) {\n      callback(ref);\n    }\n  }\n\n  clear() {\n    this._set.clear();\n  }\n\n}\n\nexports.RefSet = RefSet;\n\nclass RefSetCache {\n  constructor() {\n    this._map = new Map();\n  }\n\n  get size() {\n    return this._map.size;\n  }\n\n  get(ref) {\n    return this._map.get(ref.toString());\n  }\n\n  has(ref) {\n    return this._map.has(ref.toString());\n  }\n\n  put(ref, obj) {\n    this._map.set(ref.toString(), obj);\n  }\n\n  putAlias(ref, aliasRef) {\n    this._map.set(ref.toString(), this.get(aliasRef));\n  }\n\n  forEach(callback) {\n    for (const value of this._map.values()) {\n      callback(value);\n    }\n  }\n\n  clear() {\n    this._map.clear();\n  }\n\n}\n\nexports.RefSetCache = RefSetCache;\n\nfunction isEOF(v) {\n  return v === EOF;\n}\n\nfunction isName(v, name) {\n  return v instanceof Name && (name === undefined || v.name === name);\n}\n\nfunction isCmd(v, cmd) {\n  return v instanceof Cmd && (cmd === undefined || v.cmd === cmd);\n}\n\nfunction isDict(v, type) {\n  return v instanceof Dict && (type === undefined || isName(v.get("Type"), type));\n}\n\nfunction isRef(v) {\n  return v instanceof Ref;\n}\n\nfunction isRefsEqual(v1, v2) {\n  return v1.num === v2.num && v1.gen === v2.gen;\n}\n\nfunction isStream(v) {\n  return typeof v === "object" && v !== null && v.getBytes !== undefined;\n}\n\nfunction clearPrimitiveCaches() {\n  Cmd._clearCache();\n\n  Name._clearCache();\n\n  Ref._clearCache();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGRmanMtZGlzdC9saWIvY29yZS9wcmltaXRpdmVzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vU2ltcGxlUGRmQW5hbHl6ZXIvLi9ub2RlX21vZHVsZXMvcGRmanMtZGlzdC9saWIvY29yZS9wcmltaXRpdmVzLmpzPzMxOTQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljc3RhcnQgVGhlIGZvbGxvd2luZyBpcyB0aGUgZW50aXJlIGxpY2Vuc2Ugbm90aWNlIGZvciB0aGVcbiAqIEphdmFzY3JpcHQgY29kZSBpbiB0aGlzIHBhZ2VcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMCBNb3ppbGxhIEZvdW5kYXRpb25cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQGxpY2VuZCBUaGUgYWJvdmUgaXMgdGhlIGVudGlyZSBsaWNlbnNlIG5vdGljZSBmb3IgdGhlXG4gKiBKYXZhc2NyaXB0IGNvZGUgaW4gdGhpcyBwYWdlXG4gKi9cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jbGVhclByaW1pdGl2ZUNhY2hlcyA9IGNsZWFyUHJpbWl0aXZlQ2FjaGVzO1xuZXhwb3J0cy5pc0NtZCA9IGlzQ21kO1xuZXhwb3J0cy5pc0RpY3QgPSBpc0RpY3Q7XG5leHBvcnRzLmlzRU9GID0gaXNFT0Y7XG5leHBvcnRzLmlzTmFtZSA9IGlzTmFtZTtcbmV4cG9ydHMuaXNSZWYgPSBpc1JlZjtcbmV4cG9ydHMuaXNSZWZzRXF1YWwgPSBpc1JlZnNFcXVhbDtcbmV4cG9ydHMuaXNTdHJlYW0gPSBpc1N0cmVhbTtcbmV4cG9ydHMuUmVmU2V0Q2FjaGUgPSBleHBvcnRzLlJlZlNldCA9IGV4cG9ydHMuUmVmID0gZXhwb3J0cy5OYW1lID0gZXhwb3J0cy5FT0YgPSBleHBvcnRzLkRpY3QgPSBleHBvcnRzLkNtZCA9IHZvaWQgMDtcblxudmFyIF91dGlsID0gcmVxdWlyZShcIi4uL3NoYXJlZC91dGlsLmpzXCIpO1xuXG52YXIgRU9GID0ge307XG5leHBvcnRzLkVPRiA9IEVPRjtcblxudmFyIE5hbWUgPSBmdW5jdGlvbiBOYW1lQ2xvc3VyZSgpIHtcbiAgbGV0IG5hbWVDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgZnVuY3Rpb24gTmFtZShuYW1lKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgfVxuXG4gIE5hbWUucHJvdG90eXBlID0ge307XG5cbiAgTmFtZS5nZXQgPSBmdW5jdGlvbiBOYW1lX2dldChuYW1lKSB7XG4gICAgdmFyIG5hbWVWYWx1ZSA9IG5hbWVDYWNoZVtuYW1lXTtcbiAgICByZXR1cm4gbmFtZVZhbHVlID8gbmFtZVZhbHVlIDogbmFtZUNhY2hlW25hbWVdID0gbmV3IE5hbWUobmFtZSk7XG4gIH07XG5cbiAgTmFtZS5fY2xlYXJDYWNoZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBuYW1lQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9O1xuXG4gIHJldHVybiBOYW1lO1xufSgpO1xuXG5leHBvcnRzLk5hbWUgPSBOYW1lO1xuXG52YXIgQ21kID0gZnVuY3Rpb24gQ21kQ2xvc3VyZSgpIHtcbiAgbGV0IGNtZENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmdW5jdGlvbiBDbWQoY21kKSB7XG4gICAgdGhpcy5jbWQgPSBjbWQ7XG4gIH1cblxuICBDbWQucHJvdG90eXBlID0ge307XG5cbiAgQ21kLmdldCA9IGZ1bmN0aW9uIENtZF9nZXQoY21kKSB7XG4gICAgdmFyIGNtZFZhbHVlID0gY21kQ2FjaGVbY21kXTtcbiAgICByZXR1cm4gY21kVmFsdWUgPyBjbWRWYWx1ZSA6IGNtZENhY2hlW2NtZF0gPSBuZXcgQ21kKGNtZCk7XG4gIH07XG5cbiAgQ21kLl9jbGVhckNhY2hlID0gZnVuY3Rpb24gKCkge1xuICAgIGNtZENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfTtcblxuICByZXR1cm4gQ21kO1xufSgpO1xuXG5leHBvcnRzLkNtZCA9IENtZDtcblxudmFyIERpY3QgPSBmdW5jdGlvbiBEaWN0Q2xvc3VyZSgpIHtcbiAgdmFyIG5vblNlcmlhbGl6YWJsZSA9IGZ1bmN0aW9uIG5vblNlcmlhbGl6YWJsZUNsb3N1cmUoKSB7XG4gICAgcmV0dXJuIG5vblNlcmlhbGl6YWJsZTtcbiAgfTtcblxuICBmdW5jdGlvbiBEaWN0KHhyZWYpIHtcbiAgICB0aGlzLl9tYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMueHJlZiA9IHhyZWY7XG4gICAgdGhpcy5vYmpJZCA9IG51bGw7XG4gICAgdGhpcy5zdXBwcmVzc0VuY3J5cHRpb24gPSBmYWxzZTtcbiAgICB0aGlzLl9fbm9uU2VyaWFsaXphYmxlX18gPSBub25TZXJpYWxpemFibGU7XG4gIH1cblxuICBEaWN0LnByb3RvdHlwZSA9IHtcbiAgICBhc3NpZ25YcmVmOiBmdW5jdGlvbiBEaWN0X2Fzc2lnblhyZWYobmV3WHJlZikge1xuICAgICAgdGhpcy54cmVmID0gbmV3WHJlZjtcbiAgICB9LFxuXG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5fbWFwKS5sZW5ndGg7XG4gICAgfSxcblxuICAgIGdldChrZXkxLCBrZXkyLCBrZXkzKSB7XG4gICAgICBsZXQgdmFsdWUgPSB0aGlzLl9tYXBba2V5MV07XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGtleTIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YWx1ZSA9IHRoaXMuX21hcFtrZXkyXTtcblxuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBrZXkzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMuX21hcFtrZXkzXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBSZWYgJiYgdGhpcy54cmVmKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnhyZWYuZmV0Y2godmFsdWUsIHRoaXMuc3VwcHJlc3NFbmNyeXB0aW9uKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG5cbiAgICBhc3luYyBnZXRBc3luYyhrZXkxLCBrZXkyLCBrZXkzKSB7XG4gICAgICBsZXQgdmFsdWUgPSB0aGlzLl9tYXBba2V5MV07XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGtleTIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YWx1ZSA9IHRoaXMuX21hcFtrZXkyXTtcblxuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBrZXkzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMuX21hcFtrZXkzXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBSZWYgJiYgdGhpcy54cmVmKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnhyZWYuZmV0Y2hBc3luYyh2YWx1ZSwgdGhpcy5zdXBwcmVzc0VuY3J5cHRpb24pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcblxuICAgIGdldEFycmF5KGtleTEsIGtleTIsIGtleTMpIHtcbiAgICAgIGxldCB2YWx1ZSA9IHRoaXMuZ2V0KGtleTEsIGtleTIsIGtleTMpO1xuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpIHx8ICF0aGlzLnhyZWYpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKCk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHZhbHVlLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgaWYgKCEodmFsdWVbaV0gaW5zdGFuY2VvZiBSZWYpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YWx1ZVtpXSA9IHRoaXMueHJlZi5mZXRjaCh2YWx1ZVtpXSwgdGhpcy5zdXBwcmVzc0VuY3J5cHRpb24pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcblxuICAgIGdldFJhdzogZnVuY3Rpb24gRGljdF9nZXRSYXcoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fbWFwW2tleV07XG4gICAgfSxcbiAgICBnZXRLZXlzOiBmdW5jdGlvbiBEaWN0X2dldEtleXMoKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5fbWFwKTtcbiAgICB9LFxuICAgIGdldFJhd1ZhbHVlczogZnVuY3Rpb24gRGljdF9nZXRSYXdWYWx1ZXMoKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLl9tYXApO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBEaWN0X3NldChrZXksIHZhbHVlKSB7XG4gICAgICB0aGlzLl9tYXBba2V5XSA9IHZhbHVlO1xuICAgIH0sXG4gICAgaGFzOiBmdW5jdGlvbiBEaWN0X2hhcyhrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tYXBba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIH0sXG4gICAgZm9yRWFjaDogZnVuY3Rpb24gRGljdF9mb3JFYWNoKGNhbGxiYWNrKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fbWFwKSB7XG4gICAgICAgIGNhbGxiYWNrKGtleSwgdGhpcy5nZXQoa2V5KSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIERpY3QuZW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZW1wdHlEaWN0ID0gbmV3IERpY3QobnVsbCk7XG5cbiAgICBlbXB0eURpY3Quc2V0ID0gKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICgwLCBfdXRpbC51bnJlYWNoYWJsZSkoXCJTaG91bGQgbm90IGNhbGwgYHNldGAgb24gdGhlIGVtcHR5IGRpY3Rpb25hcnkuXCIpO1xuICAgIH07XG5cbiAgICByZXR1cm4gZW1wdHlEaWN0O1xuICB9KCk7XG5cbiAgRGljdC5tZXJnZSA9IGZ1bmN0aW9uICh7XG4gICAgeHJlZixcbiAgICBkaWN0QXJyYXksXG4gICAgbWVyZ2VTdWJEaWN0cyA9IGZhbHNlXG4gIH0pIHtcbiAgICBjb25zdCBtZXJnZWREaWN0ID0gbmV3IERpY3QoeHJlZik7XG5cbiAgICBpZiAoIW1lcmdlU3ViRGljdHMpIHtcbiAgICAgIGZvciAoY29uc3QgZGljdCBvZiBkaWN0QXJyYXkpIHtcbiAgICAgICAgaWYgKCEoZGljdCBpbnN0YW5jZW9mIERpY3QpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhkaWN0Ll9tYXApKSB7XG4gICAgICAgICAgaWYgKG1lcmdlZERpY3QuX21hcFtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG1lcmdlZERpY3QuX21hcFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWREaWN0LnNpemUgPiAwID8gbWVyZ2VkRGljdCA6IERpY3QuZW1wdHk7XG4gICAgfVxuXG4gICAgY29uc3QgcHJvcGVydGllcyA9IG5ldyBNYXAoKTtcblxuICAgIGZvciAoY29uc3QgZGljdCBvZiBkaWN0QXJyYXkpIHtcbiAgICAgIGlmICghKGRpY3QgaW5zdGFuY2VvZiBEaWN0KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZGljdC5fbWFwKSkge1xuICAgICAgICBsZXQgcHJvcGVydHkgPSBwcm9wZXJ0aWVzLmdldChrZXkpO1xuXG4gICAgICAgIGlmIChwcm9wZXJ0eSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcHJvcGVydHkgPSBbXTtcbiAgICAgICAgICBwcm9wZXJ0aWVzLnNldChrZXksIHByb3BlcnR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3BlcnR5LnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoY29uc3QgW25hbWUsIHZhbHVlc10gb2YgcHJvcGVydGllcykge1xuICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDEgfHwgISh2YWx1ZXNbMF0gaW5zdGFuY2VvZiBEaWN0KSkge1xuICAgICAgICBtZXJnZWREaWN0Ll9tYXBbbmFtZV0gPSB2YWx1ZXNbMF07XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzdWJEaWN0ID0gbmV3IERpY3QoeHJlZik7XG5cbiAgICAgIGZvciAoY29uc3QgZGljdCBvZiB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKCEoZGljdCBpbnN0YW5jZW9mIERpY3QpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhkaWN0Ll9tYXApKSB7XG4gICAgICAgICAgaWYgKHN1YkRpY3QuX21hcFtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHN1YkRpY3QuX21hcFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdWJEaWN0LnNpemUgPiAwKSB7XG4gICAgICAgIG1lcmdlZERpY3QuX21hcFtuYW1lXSA9IHN1YkRpY3Q7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJvcGVydGllcy5jbGVhcigpO1xuICAgIHJldHVybiBtZXJnZWREaWN0LnNpemUgPiAwID8gbWVyZ2VkRGljdCA6IERpY3QuZW1wdHk7XG4gIH07XG5cbiAgcmV0dXJuIERpY3Q7XG59KCk7XG5cbmV4cG9ydHMuRGljdCA9IERpY3Q7XG5cbnZhciBSZWYgPSBmdW5jdGlvbiBSZWZDbG9zdXJlKCkge1xuICBsZXQgcmVmQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIGZ1bmN0aW9uIFJlZihudW0sIGdlbikge1xuICAgIHRoaXMubnVtID0gbnVtO1xuICAgIHRoaXMuZ2VuID0gZ2VuO1xuICB9XG5cbiAgUmVmLnByb3RvdHlwZSA9IHtcbiAgICB0b1N0cmluZzogZnVuY3Rpb24gUmVmX3RvU3RyaW5nKCkge1xuICAgICAgaWYgKHRoaXMuZ2VuID09PSAwKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLm51bX1SYDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGAke3RoaXMubnVtfVIke3RoaXMuZ2VufWA7XG4gICAgfVxuICB9O1xuXG4gIFJlZi5nZXQgPSBmdW5jdGlvbiAobnVtLCBnZW4pIHtcbiAgICBjb25zdCBrZXkgPSBnZW4gPT09IDAgPyBgJHtudW19UmAgOiBgJHtudW19UiR7Z2VufWA7XG4gICAgY29uc3QgcmVmVmFsdWUgPSByZWZDYWNoZVtrZXldO1xuICAgIHJldHVybiByZWZWYWx1ZSA/IHJlZlZhbHVlIDogcmVmQ2FjaGVba2V5XSA9IG5ldyBSZWYobnVtLCBnZW4pO1xuICB9O1xuXG4gIFJlZi5fY2xlYXJDYWNoZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZWZDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH07XG5cbiAgcmV0dXJuIFJlZjtcbn0oKTtcblxuZXhwb3J0cy5SZWYgPSBSZWY7XG5cbmNsYXNzIFJlZlNldCB7XG4gIGNvbnN0cnVjdG9yKHBhcmVudCA9IG51bGwpIHtcbiAgICB0aGlzLl9zZXQgPSBuZXcgU2V0KHBhcmVudCAmJiBwYXJlbnQuX3NldCk7XG4gIH1cblxuICBoYXMocmVmKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NldC5oYXMocmVmLnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgcHV0KHJlZikge1xuICAgIHRoaXMuX3NldC5hZGQocmVmLnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgcmVtb3ZlKHJlZikge1xuICAgIHRoaXMuX3NldC5kZWxldGUocmVmLnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgZm9yRWFjaChjYWxsYmFjaykge1xuICAgIGZvciAoY29uc3QgcmVmIG9mIHRoaXMuX3NldC52YWx1ZXMoKSkge1xuICAgICAgY2FsbGJhY2socmVmKTtcbiAgICB9XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICB0aGlzLl9zZXQuY2xlYXIoKTtcbiAgfVxuXG59XG5cbmV4cG9ydHMuUmVmU2V0ID0gUmVmU2V0O1xuXG5jbGFzcyBSZWZTZXRDYWNoZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX21hcCA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIGdldCBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLl9tYXAuc2l6ZTtcbiAgfVxuXG4gIGdldChyZWYpIHtcbiAgICByZXR1cm4gdGhpcy5fbWFwLmdldChyZWYudG9TdHJpbmcoKSk7XG4gIH1cblxuICBoYXMocmVmKSB7XG4gICAgcmV0dXJuIHRoaXMuX21hcC5oYXMocmVmLnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgcHV0KHJlZiwgb2JqKSB7XG4gICAgdGhpcy5fbWFwLnNldChyZWYudG9TdHJpbmcoKSwgb2JqKTtcbiAgfVxuXG4gIHB1dEFsaWFzKHJlZiwgYWxpYXNSZWYpIHtcbiAgICB0aGlzLl9tYXAuc2V0KHJlZi50b1N0cmluZygpLCB0aGlzLmdldChhbGlhc1JlZikpO1xuICB9XG5cbiAgZm9yRWFjaChjYWxsYmFjaykge1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdGhpcy5fbWFwLnZhbHVlcygpKSB7XG4gICAgICBjYWxsYmFjayh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5fbWFwLmNsZWFyKCk7XG4gIH1cblxufVxuXG5leHBvcnRzLlJlZlNldENhY2hlID0gUmVmU2V0Q2FjaGU7XG5cbmZ1bmN0aW9uIGlzRU9GKHYpIHtcbiAgcmV0dXJuIHYgPT09IEVPRjtcbn1cblxuZnVuY3Rpb24gaXNOYW1lKHYsIG5hbWUpIHtcbiAgcmV0dXJuIHYgaW5zdGFuY2VvZiBOYW1lICYmIChuYW1lID09PSB1bmRlZmluZWQgfHwgdi5uYW1lID09PSBuYW1lKTtcbn1cblxuZnVuY3Rpb24gaXNDbWQodiwgY21kKSB7XG4gIHJldHVybiB2IGluc3RhbmNlb2YgQ21kICYmIChjbWQgPT09IHVuZGVmaW5lZCB8fCB2LmNtZCA9PT0gY21kKTtcbn1cblxuZnVuY3Rpb24gaXNEaWN0KHYsIHR5cGUpIHtcbiAgcmV0dXJuIHYgaW5zdGFuY2VvZiBEaWN0ICYmICh0eXBlID09PSB1bmRlZmluZWQgfHwgaXNOYW1lKHYuZ2V0KFwiVHlwZVwiKSwgdHlwZSkpO1xufVxuXG5mdW5jdGlvbiBpc1JlZih2KSB7XG4gIHJldHVybiB2IGluc3RhbmNlb2YgUmVmO1xufVxuXG5mdW5jdGlvbiBpc1JlZnNFcXVhbCh2MSwgdjIpIHtcbiAgcmV0dXJuIHYxLm51bSA9PT0gdjIubnVtICYmIHYxLmdlbiA9PT0gdjIuZ2VuO1xufVxuXG5mdW5jdGlvbiBpc1N0cmVhbSh2KSB7XG4gIHJldHVybiB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9PSBudWxsICYmIHYuZ2V0Qnl0ZXMgIT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gY2xlYXJQcmltaXRpdmVDYWNoZXMoKSB7XG4gIENtZC5fY2xlYXJDYWNoZSgpO1xuXG4gIE5hbWUuX2NsZWFyQ2FjaGUoKTtcblxuICBSZWYuX2NsZWFyQ2FjaGUoKTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/primitives.js\n')},"./node_modules/pdfjs-dist/lib/core/ps_parser.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.PostScriptParser = exports.PostScriptLexer = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _primitives = __webpack_require__(/*! ./primitives.js */ "./node_modules/pdfjs-dist/lib/core/primitives.js");\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nclass PostScriptParser {\n  constructor(lexer) {\n    this.lexer = lexer;\n    this.operators = [];\n    this.token = null;\n    this.prev = null;\n  }\n\n  nextToken() {\n    this.prev = this.token;\n    this.token = this.lexer.getToken();\n  }\n\n  accept(type) {\n    if (this.token.type === type) {\n      this.nextToken();\n      return true;\n    }\n\n    return false;\n  }\n\n  expect(type) {\n    if (this.accept(type)) {\n      return true;\n    }\n\n    throw new _util.FormatError(`Unexpected symbol: found ${this.token.type} expected ${type}.`);\n  }\n\n  parse() {\n    this.nextToken();\n    this.expect(PostScriptTokenTypes.LBRACE);\n    this.parseBlock();\n    this.expect(PostScriptTokenTypes.RBRACE);\n    return this.operators;\n  }\n\n  parseBlock() {\n    while (true) {\n      if (this.accept(PostScriptTokenTypes.NUMBER)) {\n        this.operators.push(this.prev.value);\n      } else if (this.accept(PostScriptTokenTypes.OPERATOR)) {\n        this.operators.push(this.prev.value);\n      } else if (this.accept(PostScriptTokenTypes.LBRACE)) {\n        this.parseCondition();\n      } else {\n        return;\n      }\n    }\n  }\n\n  parseCondition() {\n    const conditionLocation = this.operators.length;\n    this.operators.push(null, null);\n    this.parseBlock();\n    this.expect(PostScriptTokenTypes.RBRACE);\n\n    if (this.accept(PostScriptTokenTypes.IF)) {\n      this.operators[conditionLocation] = this.operators.length;\n      this.operators[conditionLocation + 1] = "jz";\n    } else if (this.accept(PostScriptTokenTypes.LBRACE)) {\n      const jumpLocation = this.operators.length;\n      this.operators.push(null, null);\n      const endOfTrue = this.operators.length;\n      this.parseBlock();\n      this.expect(PostScriptTokenTypes.RBRACE);\n      this.expect(PostScriptTokenTypes.IFELSE);\n      this.operators[jumpLocation] = this.operators.length;\n      this.operators[jumpLocation + 1] = "j";\n      this.operators[conditionLocation] = endOfTrue;\n      this.operators[conditionLocation + 1] = "jz";\n    } else {\n      throw new _util.FormatError("PS Function: error parsing conditional.");\n    }\n  }\n\n}\n\nexports.PostScriptParser = PostScriptParser;\nconst PostScriptTokenTypes = {\n  LBRACE: 0,\n  RBRACE: 1,\n  NUMBER: 2,\n  OPERATOR: 3,\n  IF: 4,\n  IFELSE: 5\n};\n\nconst PostScriptToken = function PostScriptTokenClosure() {\n  const opCache = Object.create(null);\n\n  class PostScriptToken {\n    constructor(type, value) {\n      this.type = type;\n      this.value = value;\n    }\n\n    static getOperator(op) {\n      const opValue = opCache[op];\n\n      if (opValue) {\n        return opValue;\n      }\n\n      return opCache[op] = new PostScriptToken(PostScriptTokenTypes.OPERATOR, op);\n    }\n\n    static get LBRACE() {\n      return (0, _util.shadow)(this, "LBRACE", new PostScriptToken(PostScriptTokenTypes.LBRACE, "{"));\n    }\n\n    static get RBRACE() {\n      return (0, _util.shadow)(this, "RBRACE", new PostScriptToken(PostScriptTokenTypes.RBRACE, "}"));\n    }\n\n    static get IF() {\n      return (0, _util.shadow)(this, "IF", new PostScriptToken(PostScriptTokenTypes.IF, "IF"));\n    }\n\n    static get IFELSE() {\n      return (0, _util.shadow)(this, "IFELSE", new PostScriptToken(PostScriptTokenTypes.IFELSE, "IFELSE"));\n    }\n\n  }\n\n  return PostScriptToken;\n}();\n\nclass PostScriptLexer {\n  constructor(stream) {\n    this.stream = stream;\n    this.nextChar();\n    this.strBuf = [];\n  }\n\n  nextChar() {\n    return this.currentChar = this.stream.getByte();\n  }\n\n  getToken() {\n    let comment = false;\n    let ch = this.currentChar;\n\n    while (true) {\n      if (ch < 0) {\n        return _primitives.EOF;\n      }\n\n      if (comment) {\n        if (ch === 0x0a || ch === 0x0d) {\n          comment = false;\n        }\n      } else if (ch === 0x25) {\n        comment = true;\n      } else if (!(0, _core_utils.isWhiteSpace)(ch)) {\n        break;\n      }\n\n      ch = this.nextChar();\n    }\n\n    switch (ch | 0) {\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x2b:\n      case 0x2d:\n      case 0x2e:\n        return new PostScriptToken(PostScriptTokenTypes.NUMBER, this.getNumber());\n\n      case 0x7b:\n        this.nextChar();\n        return PostScriptToken.LBRACE;\n\n      case 0x7d:\n        this.nextChar();\n        return PostScriptToken.RBRACE;\n    }\n\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n    strBuf[0] = String.fromCharCode(ch);\n\n    while ((ch = this.nextChar()) >= 0 && (ch >= 0x41 && ch <= 0x5a || ch >= 0x61 && ch <= 0x7a)) {\n      strBuf.push(String.fromCharCode(ch));\n    }\n\n    const str = strBuf.join("");\n\n    switch (str.toLowerCase()) {\n      case "if":\n        return PostScriptToken.IF;\n\n      case "ifelse":\n        return PostScriptToken.IFELSE;\n\n      default:\n        return PostScriptToken.getOperator(str);\n    }\n  }\n\n  getNumber() {\n    let ch = this.currentChar;\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n    strBuf[0] = String.fromCharCode(ch);\n\n    while ((ch = this.nextChar()) >= 0) {\n      if (ch >= 0x30 && ch <= 0x39 || ch === 0x2d || ch === 0x2e) {\n        strBuf.push(String.fromCharCode(ch));\n      } else {\n        break;\n      }\n    }\n\n    const value = parseFloat(strBuf.join(""));\n\n    if (isNaN(value)) {\n      throw new _util.FormatError(`Invalid floating point number: ${value}`);\n    }\n\n    return value;\n  }\n\n}\n\nexports.PostScriptLexer = PostScriptLexer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/ps_parser.js\n')},"./node_modules/pdfjs-dist/lib/core/standard_fonts.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.getSymbolsFonts = exports.getSupplementalGlyphMapForCalibri = exports.getSupplementalGlyphMapForArialBlack = exports.getStdFontMap = exports.getSerifFonts = exports.getNonStdFontMap = exports.getGlyphMapForStandardFonts = void 0;\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nconst getStdFontMap = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t.ArialNarrow = "Helvetica";\n  t["ArialNarrow-Bold"] = "Helvetica-Bold";\n  t["ArialNarrow-BoldItalic"] = "Helvetica-BoldOblique";\n  t["ArialNarrow-Italic"] = "Helvetica-Oblique";\n  t.ArialBlack = "Helvetica";\n  t["ArialBlack-Bold"] = "Helvetica-Bold";\n  t["ArialBlack-BoldItalic"] = "Helvetica-BoldOblique";\n  t["ArialBlack-Italic"] = "Helvetica-Oblique";\n  t["Arial-Black"] = "Helvetica";\n  t["Arial-Black-Bold"] = "Helvetica-Bold";\n  t["Arial-Black-BoldItalic"] = "Helvetica-BoldOblique";\n  t["Arial-Black-Italic"] = "Helvetica-Oblique";\n  t.Arial = "Helvetica";\n  t["Arial-Bold"] = "Helvetica-Bold";\n  t["Arial-BoldItalic"] = "Helvetica-BoldOblique";\n  t["Arial-Italic"] = "Helvetica-Oblique";\n  t["Arial-BoldItalicMT"] = "Helvetica-BoldOblique";\n  t["Arial-BoldMT"] = "Helvetica-Bold";\n  t["Arial-ItalicMT"] = "Helvetica-Oblique";\n  t.ArialMT = "Helvetica";\n  t["Courier-Bold"] = "Courier-Bold";\n  t["Courier-BoldItalic"] = "Courier-BoldOblique";\n  t["Courier-Italic"] = "Courier-Oblique";\n  t.CourierNew = "Courier";\n  t["CourierNew-Bold"] = "Courier-Bold";\n  t["CourierNew-BoldItalic"] = "Courier-BoldOblique";\n  t["CourierNew-Italic"] = "Courier-Oblique";\n  t["CourierNewPS-BoldItalicMT"] = "Courier-BoldOblique";\n  t["CourierNewPS-BoldMT"] = "Courier-Bold";\n  t["CourierNewPS-ItalicMT"] = "Courier-Oblique";\n  t.CourierNewPSMT = "Courier";\n  t.Helvetica = "Helvetica";\n  t["Helvetica-Bold"] = "Helvetica-Bold";\n  t["Helvetica-BoldItalic"] = "Helvetica-BoldOblique";\n  t["Helvetica-BoldOblique"] = "Helvetica-BoldOblique";\n  t["Helvetica-Italic"] = "Helvetica-Oblique";\n  t["Helvetica-Oblique"] = "Helvetica-Oblique";\n  t["Symbol-Bold"] = "Symbol";\n  t["Symbol-BoldItalic"] = "Symbol";\n  t["Symbol-Italic"] = "Symbol";\n  t.TimesNewRoman = "Times-Roman";\n  t["TimesNewRoman-Bold"] = "Times-Bold";\n  t["TimesNewRoman-BoldItalic"] = "Times-BoldItalic";\n  t["TimesNewRoman-Italic"] = "Times-Italic";\n  t.TimesNewRomanPS = "Times-Roman";\n  t["TimesNewRomanPS-Bold"] = "Times-Bold";\n  t["TimesNewRomanPS-BoldItalic"] = "Times-BoldItalic";\n  t["TimesNewRomanPS-BoldItalicMT"] = "Times-BoldItalic";\n  t["TimesNewRomanPS-BoldMT"] = "Times-Bold";\n  t["TimesNewRomanPS-Italic"] = "Times-Italic";\n  t["TimesNewRomanPS-ItalicMT"] = "Times-Italic";\n  t.TimesNewRomanPSMT = "Times-Roman";\n  t["TimesNewRomanPSMT-Bold"] = "Times-Bold";\n  t["TimesNewRomanPSMT-BoldItalic"] = "Times-BoldItalic";\n  t["TimesNewRomanPSMT-Italic"] = "Times-Italic";\n});\nexports.getStdFontMap = getStdFontMap;\nconst getNonStdFontMap = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t.Calibri = "Helvetica";\n  t["Calibri-Bold"] = "Helvetica-Bold";\n  t["Calibri-BoldItalic"] = "Helvetica-BoldOblique";\n  t["Calibri-Italic"] = "Helvetica-Oblique";\n  t.CenturyGothic = "Helvetica";\n  t["CenturyGothic-Bold"] = "Helvetica-Bold";\n  t["CenturyGothic-BoldItalic"] = "Helvetica-BoldOblique";\n  t["CenturyGothic-Italic"] = "Helvetica-Oblique";\n  t.ComicSansMS = "Comic Sans MS";\n  t["ComicSansMS-Bold"] = "Comic Sans MS-Bold";\n  t["ComicSansMS-BoldItalic"] = "Comic Sans MS-BoldItalic";\n  t["ComicSansMS-Italic"] = "Comic Sans MS-Italic";\n  t.LucidaConsole = "Courier";\n  t["LucidaConsole-Bold"] = "Courier-Bold";\n  t["LucidaConsole-BoldItalic"] = "Courier-BoldOblique";\n  t["LucidaConsole-Italic"] = "Courier-Oblique";\n  t["LucidaSans-Demi"] = "Helvetica-Bold";\n  t["MS-Gothic"] = "MS Gothic";\n  t["MS-Gothic-Bold"] = "MS Gothic-Bold";\n  t["MS-Gothic-BoldItalic"] = "MS Gothic-BoldItalic";\n  t["MS-Gothic-Italic"] = "MS Gothic-Italic";\n  t["MS-Mincho"] = "MS Mincho";\n  t["MS-Mincho-Bold"] = "MS Mincho-Bold";\n  t["MS-Mincho-BoldItalic"] = "MS Mincho-BoldItalic";\n  t["MS-Mincho-Italic"] = "MS Mincho-Italic";\n  t["MS-PGothic"] = "MS PGothic";\n  t["MS-PGothic-Bold"] = "MS PGothic-Bold";\n  t["MS-PGothic-BoldItalic"] = "MS PGothic-BoldItalic";\n  t["MS-PGothic-Italic"] = "MS PGothic-Italic";\n  t["MS-PMincho"] = "MS PMincho";\n  t["MS-PMincho-Bold"] = "MS PMincho-Bold";\n  t["MS-PMincho-BoldItalic"] = "MS PMincho-BoldItalic";\n  t["MS-PMincho-Italic"] = "MS PMincho-Italic";\n  t.NuptialScript = "Times-Italic";\n  t.SegoeUISymbol = "Helvetica";\n  t.Wingdings = "ZapfDingbats";\n  t["Wingdings-Regular"] = "ZapfDingbats";\n});\nexports.getNonStdFontMap = getNonStdFontMap;\nconst getSerifFonts = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t["Adobe Jenson"] = true;\n  t["Adobe Text"] = true;\n  t.Albertus = true;\n  t.Aldus = true;\n  t.Alexandria = true;\n  t.Algerian = true;\n  t["American Typewriter"] = true;\n  t.Antiqua = true;\n  t.Apex = true;\n  t.Arno = true;\n  t.Aster = true;\n  t.Aurora = true;\n  t.Baskerville = true;\n  t.Bell = true;\n  t.Bembo = true;\n  t["Bembo Schoolbook"] = true;\n  t.Benguiat = true;\n  t["Berkeley Old Style"] = true;\n  t["Bernhard Modern"] = true;\n  t["Berthold City"] = true;\n  t.Bodoni = true;\n  t["Bauer Bodoni"] = true;\n  t["Book Antiqua"] = true;\n  t.Bookman = true;\n  t["Bordeaux Roman"] = true;\n  t["Californian FB"] = true;\n  t.Calisto = true;\n  t.Calvert = true;\n  t.Capitals = true;\n  t.Cambria = true;\n  t.Cartier = true;\n  t.Caslon = true;\n  t.Catull = true;\n  t.Centaur = true;\n  t["Century Old Style"] = true;\n  t["Century Schoolbook"] = true;\n  t.Chaparral = true;\n  t["Charis SIL"] = true;\n  t.Cheltenham = true;\n  t["Cholla Slab"] = true;\n  t.Clarendon = true;\n  t.Clearface = true;\n  t.Cochin = true;\n  t.Colonna = true;\n  t["Computer Modern"] = true;\n  t["Concrete Roman"] = true;\n  t.Constantia = true;\n  t["Cooper Black"] = true;\n  t.Corona = true;\n  t.Ecotype = true;\n  t.Egyptienne = true;\n  t.Elephant = true;\n  t.Excelsior = true;\n  t.Fairfield = true;\n  t["FF Scala"] = true;\n  t.Folkard = true;\n  t.Footlight = true;\n  t.FreeSerif = true;\n  t["Friz Quadrata"] = true;\n  t.Garamond = true;\n  t.Gentium = true;\n  t.Georgia = true;\n  t.Gloucester = true;\n  t["Goudy Old Style"] = true;\n  t["Goudy Schoolbook"] = true;\n  t["Goudy Pro Font"] = true;\n  t.Granjon = true;\n  t["Guardian Egyptian"] = true;\n  t.Heather = true;\n  t.Hercules = true;\n  t["High Tower Text"] = true;\n  t.Hiroshige = true;\n  t["Hoefler Text"] = true;\n  t["Humana Serif"] = true;\n  t.Imprint = true;\n  t["Ionic No. 5"] = true;\n  t.Janson = true;\n  t.Joanna = true;\n  t.Korinna = true;\n  t.Lexicon = true;\n  t["Liberation Serif"] = true;\n  t["Linux Libertine"] = true;\n  t.Literaturnaya = true;\n  t.Lucida = true;\n  t["Lucida Bright"] = true;\n  t.Melior = true;\n  t.Memphis = true;\n  t.Miller = true;\n  t.Minion = true;\n  t.Modern = true;\n  t["Mona Lisa"] = true;\n  t["Mrs Eaves"] = true;\n  t["MS Serif"] = true;\n  t["Museo Slab"] = true;\n  t["New York"] = true;\n  t["Nimbus Roman"] = true;\n  t["NPS Rawlinson Roadway"] = true;\n  t.NuptialScript = true;\n  t.Palatino = true;\n  t.Perpetua = true;\n  t.Plantin = true;\n  t["Plantin Schoolbook"] = true;\n  t.Playbill = true;\n  t["Poor Richard"] = true;\n  t["Rawlinson Roadway"] = true;\n  t.Renault = true;\n  t.Requiem = true;\n  t.Rockwell = true;\n  t.Roman = true;\n  t["Rotis Serif"] = true;\n  t.Sabon = true;\n  t.Scala = true;\n  t.Seagull = true;\n  t.Sistina = true;\n  t.Souvenir = true;\n  t.STIX = true;\n  t["Stone Informal"] = true;\n  t["Stone Serif"] = true;\n  t.Sylfaen = true;\n  t.Times = true;\n  t.Trajan = true;\n  t["Trinité"] = true;\n  t["Trump Mediaeval"] = true;\n  t.Utopia = true;\n  t["Vale Type"] = true;\n  t["Bitstream Vera"] = true;\n  t["Vera Serif"] = true;\n  t.Versailles = true;\n  t.Wanted = true;\n  t.Weiss = true;\n  t["Wide Latin"] = true;\n  t.Windsor = true;\n  t.XITS = true;\n});\nexports.getSerifFonts = getSerifFonts;\nconst getSymbolsFonts = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t.Dingbats = true;\n  t.Symbol = true;\n  t.ZapfDingbats = true;\n});\nexports.getSymbolsFonts = getSymbolsFonts;\nconst getGlyphMapForStandardFonts = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t[2] = 10;\n  t[3] = 32;\n  t[4] = 33;\n  t[5] = 34;\n  t[6] = 35;\n  t[7] = 36;\n  t[8] = 37;\n  t[9] = 38;\n  t[10] = 39;\n  t[11] = 40;\n  t[12] = 41;\n  t[13] = 42;\n  t[14] = 43;\n  t[15] = 44;\n  t[16] = 45;\n  t[17] = 46;\n  t[18] = 47;\n  t[19] = 48;\n  t[20] = 49;\n  t[21] = 50;\n  t[22] = 51;\n  t[23] = 52;\n  t[24] = 53;\n  t[25] = 54;\n  t[26] = 55;\n  t[27] = 56;\n  t[28] = 57;\n  t[29] = 58;\n  t[30] = 894;\n  t[31] = 60;\n  t[32] = 61;\n  t[33] = 62;\n  t[34] = 63;\n  t[35] = 64;\n  t[36] = 65;\n  t[37] = 66;\n  t[38] = 67;\n  t[39] = 68;\n  t[40] = 69;\n  t[41] = 70;\n  t[42] = 71;\n  t[43] = 72;\n  t[44] = 73;\n  t[45] = 74;\n  t[46] = 75;\n  t[47] = 76;\n  t[48] = 77;\n  t[49] = 78;\n  t[50] = 79;\n  t[51] = 80;\n  t[52] = 81;\n  t[53] = 82;\n  t[54] = 83;\n  t[55] = 84;\n  t[56] = 85;\n  t[57] = 86;\n  t[58] = 87;\n  t[59] = 88;\n  t[60] = 89;\n  t[61] = 90;\n  t[62] = 91;\n  t[63] = 92;\n  t[64] = 93;\n  t[65] = 94;\n  t[66] = 95;\n  t[67] = 96;\n  t[68] = 97;\n  t[69] = 98;\n  t[70] = 99;\n  t[71] = 100;\n  t[72] = 101;\n  t[73] = 102;\n  t[74] = 103;\n  t[75] = 104;\n  t[76] = 105;\n  t[77] = 106;\n  t[78] = 107;\n  t[79] = 108;\n  t[80] = 109;\n  t[81] = 110;\n  t[82] = 111;\n  t[83] = 112;\n  t[84] = 113;\n  t[85] = 114;\n  t[86] = 115;\n  t[87] = 116;\n  t[88] = 117;\n  t[89] = 118;\n  t[90] = 119;\n  t[91] = 120;\n  t[92] = 121;\n  t[93] = 122;\n  t[94] = 123;\n  t[95] = 124;\n  t[96] = 125;\n  t[97] = 126;\n  t[98] = 196;\n  t[99] = 197;\n  t[100] = 199;\n  t[101] = 201;\n  t[102] = 209;\n  t[103] = 214;\n  t[104] = 220;\n  t[105] = 225;\n  t[106] = 224;\n  t[107] = 226;\n  t[108] = 228;\n  t[109] = 227;\n  t[110] = 229;\n  t[111] = 231;\n  t[112] = 233;\n  t[113] = 232;\n  t[114] = 234;\n  t[115] = 235;\n  t[116] = 237;\n  t[117] = 236;\n  t[118] = 238;\n  t[119] = 239;\n  t[120] = 241;\n  t[121] = 243;\n  t[122] = 242;\n  t[123] = 244;\n  t[124] = 246;\n  t[125] = 245;\n  t[126] = 250;\n  t[127] = 249;\n  t[128] = 251;\n  t[129] = 252;\n  t[130] = 8224;\n  t[131] = 176;\n  t[132] = 162;\n  t[133] = 163;\n  t[134] = 167;\n  t[135] = 8226;\n  t[136] = 182;\n  t[137] = 223;\n  t[138] = 174;\n  t[139] = 169;\n  t[140] = 8482;\n  t[141] = 180;\n  t[142] = 168;\n  t[143] = 8800;\n  t[144] = 198;\n  t[145] = 216;\n  t[146] = 8734;\n  t[147] = 177;\n  t[148] = 8804;\n  t[149] = 8805;\n  t[150] = 165;\n  t[151] = 181;\n  t[152] = 8706;\n  t[153] = 8721;\n  t[154] = 8719;\n  t[156] = 8747;\n  t[157] = 170;\n  t[158] = 186;\n  t[159] = 8486;\n  t[160] = 230;\n  t[161] = 248;\n  t[162] = 191;\n  t[163] = 161;\n  t[164] = 172;\n  t[165] = 8730;\n  t[166] = 402;\n  t[167] = 8776;\n  t[168] = 8710;\n  t[169] = 171;\n  t[170] = 187;\n  t[171] = 8230;\n  t[210] = 218;\n  t[223] = 711;\n  t[224] = 321;\n  t[225] = 322;\n  t[227] = 353;\n  t[229] = 382;\n  t[234] = 253;\n  t[252] = 263;\n  t[253] = 268;\n  t[254] = 269;\n  t[258] = 258;\n  t[260] = 260;\n  t[261] = 261;\n  t[265] = 280;\n  t[266] = 281;\n  t[268] = 283;\n  t[269] = 313;\n  t[275] = 323;\n  t[276] = 324;\n  t[278] = 328;\n  t[284] = 345;\n  t[285] = 346;\n  t[286] = 347;\n  t[292] = 367;\n  t[295] = 377;\n  t[296] = 378;\n  t[298] = 380;\n  t[305] = 963;\n  t[306] = 964;\n  t[307] = 966;\n  t[308] = 8215;\n  t[309] = 8252;\n  t[310] = 8319;\n  t[311] = 8359;\n  t[312] = 8592;\n  t[313] = 8593;\n  t[337] = 9552;\n  t[493] = 1039;\n  t[494] = 1040;\n  t[705] = 1524;\n  t[706] = 8362;\n  t[710] = 64288;\n  t[711] = 64298;\n  t[759] = 1617;\n  t[761] = 1776;\n  t[763] = 1778;\n  t[775] = 1652;\n  t[777] = 1764;\n  t[778] = 1780;\n  t[779] = 1781;\n  t[780] = 1782;\n  t[782] = 771;\n  t[783] = 64726;\n  t[786] = 8363;\n  t[788] = 8532;\n  t[790] = 768;\n  t[791] = 769;\n  t[792] = 768;\n  t[795] = 803;\n  t[797] = 64336;\n  t[798] = 64337;\n  t[799] = 64342;\n  t[800] = 64343;\n  t[801] = 64344;\n  t[802] = 64345;\n  t[803] = 64362;\n  t[804] = 64363;\n  t[805] = 64364;\n  t[2424] = 7821;\n  t[2425] = 7822;\n  t[2426] = 7823;\n  t[2427] = 7824;\n  t[2428] = 7825;\n  t[2429] = 7826;\n  t[2430] = 7827;\n  t[2433] = 7682;\n  t[2678] = 8045;\n  t[2679] = 8046;\n  t[2830] = 1552;\n  t[2838] = 686;\n  t[2840] = 751;\n  t[2842] = 753;\n  t[2843] = 754;\n  t[2844] = 755;\n  t[2846] = 757;\n  t[2856] = 767;\n  t[2857] = 848;\n  t[2858] = 849;\n  t[2862] = 853;\n  t[2863] = 854;\n  t[2864] = 855;\n  t[2865] = 861;\n  t[2866] = 862;\n  t[2906] = 7460;\n  t[2908] = 7462;\n  t[2909] = 7463;\n  t[2910] = 7464;\n  t[2912] = 7466;\n  t[2913] = 7467;\n  t[2914] = 7468;\n  t[2916] = 7470;\n  t[2917] = 7471;\n  t[2918] = 7472;\n  t[2920] = 7474;\n  t[2921] = 7475;\n  t[2922] = 7476;\n  t[2924] = 7478;\n  t[2925] = 7479;\n  t[2926] = 7480;\n  t[2928] = 7482;\n  t[2929] = 7483;\n  t[2930] = 7484;\n  t[2932] = 7486;\n  t[2933] = 7487;\n  t[2934] = 7488;\n  t[2936] = 7490;\n  t[2937] = 7491;\n  t[2938] = 7492;\n  t[2940] = 7494;\n  t[2941] = 7495;\n  t[2942] = 7496;\n  t[2944] = 7498;\n  t[2946] = 7500;\n  t[2948] = 7502;\n  t[2950] = 7504;\n  t[2951] = 7505;\n  t[2952] = 7506;\n  t[2954] = 7508;\n  t[2955] = 7509;\n  t[2956] = 7510;\n  t[2958] = 7512;\n  t[2959] = 7513;\n  t[2960] = 7514;\n  t[2962] = 7516;\n  t[2963] = 7517;\n  t[2964] = 7518;\n  t[2966] = 7520;\n  t[2967] = 7521;\n  t[2968] = 7522;\n  t[2970] = 7524;\n  t[2971] = 7525;\n  t[2972] = 7526;\n  t[2974] = 7528;\n  t[2975] = 7529;\n  t[2976] = 7530;\n  t[2978] = 1537;\n  t[2979] = 1538;\n  t[2980] = 1539;\n  t[2982] = 1549;\n  t[2983] = 1551;\n  t[2984] = 1552;\n  t[2986] = 1554;\n  t[2987] = 1555;\n  t[2988] = 1556;\n  t[2990] = 1623;\n  t[2991] = 1624;\n  t[2995] = 1775;\n  t[2999] = 1791;\n  t[3002] = 64290;\n  t[3003] = 64291;\n  t[3004] = 64292;\n  t[3006] = 64294;\n  t[3007] = 64295;\n  t[3008] = 64296;\n  t[3011] = 1900;\n  t[3014] = 8223;\n  t[3015] = 8244;\n  t[3017] = 7532;\n  t[3018] = 7533;\n  t[3019] = 7534;\n  t[3075] = 7590;\n  t[3076] = 7591;\n  t[3079] = 7594;\n  t[3080] = 7595;\n  t[3083] = 7598;\n  t[3084] = 7599;\n  t[3087] = 7602;\n  t[3088] = 7603;\n  t[3091] = 7606;\n  t[3092] = 7607;\n  t[3095] = 7610;\n  t[3096] = 7611;\n  t[3099] = 7614;\n  t[3100] = 7615;\n  t[3103] = 7618;\n  t[3104] = 7619;\n  t[3107] = 8337;\n  t[3108] = 8338;\n  t[3116] = 1884;\n  t[3119] = 1885;\n  t[3120] = 1885;\n  t[3123] = 1886;\n  t[3124] = 1886;\n  t[3127] = 1887;\n  t[3128] = 1887;\n  t[3131] = 1888;\n  t[3132] = 1888;\n  t[3135] = 1889;\n  t[3136] = 1889;\n  t[3139] = 1890;\n  t[3140] = 1890;\n  t[3143] = 1891;\n  t[3144] = 1891;\n  t[3147] = 1892;\n  t[3148] = 1892;\n  t[3153] = 580;\n  t[3154] = 581;\n  t[3157] = 584;\n  t[3158] = 585;\n  t[3161] = 588;\n  t[3162] = 589;\n  t[3165] = 891;\n  t[3166] = 892;\n  t[3169] = 1274;\n  t[3170] = 1275;\n  t[3173] = 1278;\n  t[3174] = 1279;\n  t[3181] = 7622;\n  t[3182] = 7623;\n  t[3282] = 11799;\n  t[3316] = 578;\n  t[3379] = 42785;\n  t[3393] = 1159;\n  t[3416] = 8377;\n});\nexports.getGlyphMapForStandardFonts = getGlyphMapForStandardFonts;\nconst getSupplementalGlyphMapForArialBlack = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t[227] = 322;\n  t[264] = 261;\n  t[291] = 346;\n});\nexports.getSupplementalGlyphMapForArialBlack = getSupplementalGlyphMapForArialBlack;\nconst getSupplementalGlyphMapForCalibri = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t[1] = 32;\n  t[4] = 65;\n  t[17] = 66;\n  t[18] = 67;\n  t[24] = 68;\n  t[28] = 69;\n  t[38] = 70;\n  t[39] = 71;\n  t[44] = 72;\n  t[47] = 73;\n  t[58] = 74;\n  t[60] = 75;\n  t[62] = 76;\n  t[68] = 77;\n  t[69] = 78;\n  t[75] = 79;\n  t[87] = 80;\n  t[89] = 81;\n  t[90] = 82;\n  t[94] = 83;\n  t[100] = 84;\n  t[104] = 85;\n  t[115] = 86;\n  t[116] = 87;\n  t[121] = 88;\n  t[122] = 89;\n  t[127] = 90;\n  t[258] = 97;\n  t[268] = 261;\n  t[271] = 98;\n  t[272] = 99;\n  t[273] = 263;\n  t[282] = 100;\n  t[286] = 101;\n  t[295] = 281;\n  t[296] = 102;\n  t[336] = 103;\n  t[346] = 104;\n  t[349] = 105;\n  t[361] = 106;\n  t[364] = 107;\n  t[367] = 108;\n  t[371] = 322;\n  t[373] = 109;\n  t[374] = 110;\n  t[381] = 111;\n  t[383] = 243;\n  t[393] = 112;\n  t[395] = 113;\n  t[396] = 114;\n  t[400] = 115;\n  t[401] = 347;\n  t[410] = 116;\n  t[437] = 117;\n  t[448] = 118;\n  t[449] = 119;\n  t[454] = 120;\n  t[455] = 121;\n  t[460] = 122;\n  t[463] = 380;\n  t[853] = 44;\n  t[855] = 58;\n  t[856] = 46;\n  t[876] = 47;\n  t[878] = 45;\n  t[882] = 45;\n  t[894] = 40;\n  t[895] = 41;\n  t[896] = 91;\n  t[897] = 93;\n  t[923] = 64;\n  t[1004] = 48;\n  t[1005] = 49;\n  t[1006] = 50;\n  t[1007] = 51;\n  t[1008] = 52;\n  t[1009] = 53;\n  t[1010] = 54;\n  t[1011] = 55;\n  t[1012] = 56;\n  t[1013] = 57;\n  t[1081] = 37;\n  t[1085] = 43;\n  t[1086] = 45;\n});\nexports.getSupplementalGlyphMapForCalibri = getSupplementalGlyphMapForCalibri;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGRmanMtZGlzdC9saWIvY29yZS9zdGFuZGFyZF9mb250cy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1NpbXBsZVBkZkFuYWx5emVyLy4vbm9kZV9tb2R1bGVzL3BkZmpzLWRpc3QvbGliL2NvcmUvc3RhbmRhcmRfZm9udHMuanM/ZGUyOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNzdGFydCBUaGUgZm9sbG93aW5nIGlzIHRoZSBlbnRpcmUgbGljZW5zZSBub3RpY2UgZm9yIHRoZVxuICogSmF2YXNjcmlwdCBjb2RlIGluIHRoaXMgcGFnZVxuICpcbiAqIENvcHlyaWdodCAyMDIwIE1vemlsbGEgRm91bmRhdGlvblxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBAbGljZW5kIFRoZSBhYm92ZSBpcyB0aGUgZW50aXJlIGxpY2Vuc2Ugbm90aWNlIGZvciB0aGVcbiAqIEphdmFzY3JpcHQgY29kZSBpbiB0aGlzIHBhZ2VcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdldFN5bWJvbHNGb250cyA9IGV4cG9ydHMuZ2V0U3VwcGxlbWVudGFsR2x5cGhNYXBGb3JDYWxpYnJpID0gZXhwb3J0cy5nZXRTdXBwbGVtZW50YWxHbHlwaE1hcEZvckFyaWFsQmxhY2sgPSBleHBvcnRzLmdldFN0ZEZvbnRNYXAgPSBleHBvcnRzLmdldFNlcmlmRm9udHMgPSBleHBvcnRzLmdldE5vblN0ZEZvbnRNYXAgPSBleHBvcnRzLmdldEdseXBoTWFwRm9yU3RhbmRhcmRGb250cyA9IHZvaWQgMDtcblxudmFyIF9jb3JlX3V0aWxzID0gcmVxdWlyZShcIi4vY29yZV91dGlscy5qc1wiKTtcblxuY29uc3QgZ2V0U3RkRm9udE1hcCA9ICgwLCBfY29yZV91dGlscy5nZXRMb29rdXBUYWJsZUZhY3RvcnkpKGZ1bmN0aW9uICh0KSB7XG4gIHQuQXJpYWxOYXJyb3cgPSBcIkhlbHZldGljYVwiO1xuICB0W1wiQXJpYWxOYXJyb3ctQm9sZFwiXSA9IFwiSGVsdmV0aWNhLUJvbGRcIjtcbiAgdFtcIkFyaWFsTmFycm93LUJvbGRJdGFsaWNcIl0gPSBcIkhlbHZldGljYS1Cb2xkT2JsaXF1ZVwiO1xuICB0W1wiQXJpYWxOYXJyb3ctSXRhbGljXCJdID0gXCJIZWx2ZXRpY2EtT2JsaXF1ZVwiO1xuICB0LkFyaWFsQmxhY2sgPSBcIkhlbHZldGljYVwiO1xuICB0W1wiQXJpYWxCbGFjay1Cb2xkXCJdID0gXCJIZWx2ZXRpY2EtQm9sZFwiO1xuICB0W1wiQXJpYWxCbGFjay1Cb2xkSXRhbGljXCJdID0gXCJIZWx2ZXRpY2EtQm9sZE9ibGlxdWVcIjtcbiAgdFtcIkFyaWFsQmxhY2stSXRhbGljXCJdID0gXCJIZWx2ZXRpY2EtT2JsaXF1ZVwiO1xuICB0W1wiQXJpYWwtQmxhY2tcIl0gPSBcIkhlbHZldGljYVwiO1xuICB0W1wiQXJpYWwtQmxhY2stQm9sZFwiXSA9IFwiSGVsdmV0aWNhLUJvbGRcIjtcbiAgdFtcIkFyaWFsLUJsYWNrLUJvbGRJdGFsaWNcIl0gPSBcIkhlbHZldGljYS1Cb2xkT2JsaXF1ZVwiO1xuICB0W1wiQXJpYWwtQmxhY2stSXRhbGljXCJdID0gXCJIZWx2ZXRpY2EtT2JsaXF1ZVwiO1xuICB0LkFyaWFsID0gXCJIZWx2ZXRpY2FcIjtcbiAgdFtcIkFyaWFsLUJvbGRcIl0gPSBcIkhlbHZldGljYS1Cb2xkXCI7XG4gIHRbXCJBcmlhbC1Cb2xkSXRhbGljXCJdID0gXCJIZWx2ZXRpY2EtQm9sZE9ibGlxdWVcIjtcbiAgdFtcIkFyaWFsLUl0YWxpY1wiXSA9IFwiSGVsdmV0aWNhLU9ibGlxdWVcIjtcbiAgdFtcIkFyaWFsLUJvbGRJdGFsaWNNVFwiXSA9IFwiSGVsdmV0aWNhLUJvbGRPYmxpcXVlXCI7XG4gIHRbXCJBcmlhbC1Cb2xkTVRcIl0gPSBcIkhlbHZldGljYS1Cb2xkXCI7XG4gIHRbXCJBcmlhbC1JdGFsaWNNVFwiXSA9IFwiSGVsdmV0aWNhLU9ibGlxdWVcIjtcbiAgdC5BcmlhbE1UID0gXCJIZWx2ZXRpY2FcIjtcbiAgdFtcIkNvdXJpZXItQm9sZFwiXSA9IFwiQ291cmllci1Cb2xkXCI7XG4gIHRbXCJDb3VyaWVyLUJvbGRJdGFsaWNcIl0gPSBcIkNvdXJpZXItQm9sZE9ibGlxdWVcIjtcbiAgdFtcIkNvdXJpZXItSXRhbGljXCJdID0gXCJDb3VyaWVyLU9ibGlxdWVcIjtcbiAgdC5Db3VyaWVyTmV3ID0gXCJDb3VyaWVyXCI7XG4gIHRbXCJDb3VyaWVyTmV3LUJvbGRcIl0gPSBcIkNvdXJpZXItQm9sZFwiO1xuICB0W1wiQ291cmllck5ldy1Cb2xkSXRhbGljXCJdID0gXCJDb3VyaWVyLUJvbGRPYmxpcXVlXCI7XG4gIHRbXCJDb3VyaWVyTmV3LUl0YWxpY1wiXSA9IFwiQ291cmllci1PYmxpcXVlXCI7XG4gIHRbXCJDb3VyaWVyTmV3UFMtQm9sZEl0YWxpY01UXCJdID0gXCJDb3VyaWVyLUJvbGRPYmxpcXVlXCI7XG4gIHRbXCJDb3VyaWVyTmV3UFMtQm9sZE1UXCJdID0gXCJDb3VyaWVyLUJvbGRcIjtcbiAgdFtcIkNvdXJpZXJOZXdQUy1JdGFsaWNNVFwiXSA9IFwiQ291cmllci1PYmxpcXVlXCI7XG4gIHQuQ291cmllck5ld1BTTVQgPSBcIkNvdXJpZXJcIjtcbiAgdC5IZWx2ZXRpY2EgPSBcIkhlbHZldGljYVwiO1xuICB0W1wiSGVsdmV0aWNhLUJvbGRcIl0gPSBcIkhlbHZldGljYS1Cb2xkXCI7XG4gIHRbXCJIZWx2ZXRpY2EtQm9sZEl0YWxpY1wiXSA9IFwiSGVsdmV0aWNhLUJvbGRPYmxpcXVlXCI7XG4gIHRbXCJIZWx2ZXRpY2EtQm9sZE9ibGlxdWVcIl0gPSBcIkhlbHZldGljYS1Cb2xkT2JsaXF1ZVwiO1xuICB0W1wiSGVsdmV0aWNhLUl0YWxpY1wiXSA9IFwiSGVsdmV0aWNhLU9ibGlxdWVcIjtcbiAgdFtcIkhlbHZldGljYS1PYmxpcXVlXCJdID0gXCJIZWx2ZXRpY2EtT2JsaXF1ZVwiO1xuICB0W1wiU3ltYm9sLUJvbGRcIl0gPSBcIlN5bWJvbFwiO1xuICB0W1wiU3ltYm9sLUJvbGRJdGFsaWNcIl0gPSBcIlN5bWJvbFwiO1xuICB0W1wiU3ltYm9sLUl0YWxpY1wiXSA9IFwiU3ltYm9sXCI7XG4gIHQuVGltZXNOZXdSb21hbiA9IFwiVGltZXMtUm9tYW5cIjtcbiAgdFtcIlRpbWVzTmV3Um9tYW4tQm9sZFwiXSA9IFwiVGltZXMtQm9sZFwiO1xuICB0W1wiVGltZXNOZXdSb21hbi1Cb2xkSXRhbGljXCJdID0gXCJUaW1lcy1Cb2xkSXRhbGljXCI7XG4gIHRbXCJUaW1lc05ld1JvbWFuLUl0YWxpY1wiXSA9IFwiVGltZXMtSXRhbGljXCI7XG4gIHQuVGltZXNOZXdSb21hblBTID0gXCJUaW1lcy1Sb21hblwiO1xuICB0W1wiVGltZXNOZXdSb21hblBTLUJvbGRcIl0gPSBcIlRpbWVzLUJvbGRcIjtcbiAgdFtcIlRpbWVzTmV3Um9tYW5QUy1Cb2xkSXRhbGljXCJdID0gXCJUaW1lcy1Cb2xkSXRhbGljXCI7XG4gIHRbXCJUaW1lc05ld1JvbWFuUFMtQm9sZEl0YWxpY01UXCJdID0gXCJUaW1lcy1Cb2xkSXRhbGljXCI7XG4gIHRbXCJUaW1lc05ld1JvbWFuUFMtQm9sZE1UXCJdID0gXCJUaW1lcy1Cb2xkXCI7XG4gIHRbXCJUaW1lc05ld1JvbWFuUFMtSXRhbGljXCJdID0gXCJUaW1lcy1JdGFsaWNcIjtcbiAgdFtcIlRpbWVzTmV3Um9tYW5QUy1JdGFsaWNNVFwiXSA9IFwiVGltZXMtSXRhbGljXCI7XG4gIHQuVGltZXNOZXdSb21hblBTTVQgPSBcIlRpbWVzLVJvbWFuXCI7XG4gIHRbXCJUaW1lc05ld1JvbWFuUFNNVC1Cb2xkXCJdID0gXCJUaW1lcy1Cb2xkXCI7XG4gIHRbXCJUaW1lc05ld1JvbWFuUFNNVC1Cb2xkSXRhbGljXCJdID0gXCJUaW1lcy1Cb2xkSXRhbGljXCI7XG4gIHRbXCJUaW1lc05ld1JvbWFuUFNNVC1JdGFsaWNcIl0gPSBcIlRpbWVzLUl0YWxpY1wiO1xufSk7XG5leHBvcnRzLmdldFN0ZEZvbnRNYXAgPSBnZXRTdGRGb250TWFwO1xuY29uc3QgZ2V0Tm9uU3RkRm9udE1hcCA9ICgwLCBfY29yZV91dGlscy5nZXRMb29rdXBUYWJsZUZhY3RvcnkpKGZ1bmN0aW9uICh0KSB7XG4gIHQuQ2FsaWJyaSA9IFwiSGVsdmV0aWNhXCI7XG4gIHRbXCJDYWxpYnJpLUJvbGRcIl0gPSBcIkhlbHZldGljYS1Cb2xkXCI7XG4gIHRbXCJDYWxpYnJpLUJvbGRJdGFsaWNcIl0gPSBcIkhlbHZldGljYS1Cb2xkT2JsaXF1ZVwiO1xuICB0W1wiQ2FsaWJyaS1JdGFsaWNcIl0gPSBcIkhlbHZldGljYS1PYmxpcXVlXCI7XG4gIHQuQ2VudHVyeUdvdGhpYyA9IFwiSGVsdmV0aWNhXCI7XG4gIHRbXCJDZW50dXJ5R290aGljLUJvbGRcIl0gPSBcIkhlbHZldGljYS1Cb2xkXCI7XG4gIHRbXCJDZW50dXJ5R290aGljLUJvbGRJdGFsaWNcIl0gPSBcIkhlbHZldGljYS1Cb2xkT2JsaXF1ZVwiO1xuICB0W1wiQ2VudHVyeUdvdGhpYy1JdGFsaWNcIl0gPSBcIkhlbHZldGljYS1PYmxpcXVlXCI7XG4gIHQuQ29taWNTYW5zTVMgPSBcIkNvbWljIFNhbnMgTVNcIjtcbiAgdFtcIkNvbWljU2Fuc01TLUJvbGRcIl0gPSBcIkNvbWljIFNhbnMgTVMtQm9sZFwiO1xuICB0W1wiQ29taWNTYW5zTVMtQm9sZEl0YWxpY1wiXSA9IFwiQ29taWMgU2FucyBNUy1Cb2xkSXRhbGljXCI7XG4gIHRbXCJDb21pY1NhbnNNUy1JdGFsaWNcIl0gPSBcIkNvbWljIFNhbnMgTVMtSXRhbGljXCI7XG4gIHQuTHVjaWRhQ29uc29sZSA9IFwiQ291cmllclwiO1xuICB0W1wiTHVjaWRhQ29uc29sZS1Cb2xkXCJdID0gXCJDb3VyaWVyLUJvbGRcIjtcbiAgdFtcIkx1Y2lkYUNvbnNvbGUtQm9sZEl0YWxpY1wiXSA9IFwiQ291cmllci1Cb2xkT2JsaXF1ZVwiO1xuICB0W1wiTHVjaWRhQ29uc29sZS1JdGFsaWNcIl0gPSBcIkNvdXJpZXItT2JsaXF1ZVwiO1xuICB0W1wiTHVjaWRhU2Fucy1EZW1pXCJdID0gXCJIZWx2ZXRpY2EtQm9sZFwiO1xuICB0W1wiTVMtR290aGljXCJdID0gXCJNUyBHb3RoaWNcIjtcbiAgdFtcIk1TLUdvdGhpYy1Cb2xkXCJdID0gXCJNUyBHb3RoaWMtQm9sZFwiO1xuICB0W1wiTVMtR290aGljLUJvbGRJdGFsaWNcIl0gPSBcIk1TIEdvdGhpYy1Cb2xkSXRhbGljXCI7XG4gIHRbXCJNUy1Hb3RoaWMtSXRhbGljXCJdID0gXCJNUyBHb3RoaWMtSXRhbGljXCI7XG4gIHRbXCJNUy1NaW5jaG9cIl0gPSBcIk1TIE1pbmNob1wiO1xuICB0W1wiTVMtTWluY2hvLUJvbGRcIl0gPSBcIk1TIE1pbmNoby1Cb2xkXCI7XG4gIHRbXCJNUy1NaW5jaG8tQm9sZEl0YWxpY1wiXSA9IFwiTVMgTWluY2hvLUJvbGRJdGFsaWNcIjtcbiAgdFtcIk1TLU1pbmNoby1JdGFsaWNcIl0gPSBcIk1TIE1pbmNoby1JdGFsaWNcIjtcbiAgdFtcIk1TLVBHb3RoaWNcIl0gPSBcIk1TIFBHb3RoaWNcIjtcbiAgdFtcIk1TLVBHb3RoaWMtQm9sZFwiXSA9IFwiTVMgUEdvdGhpYy1Cb2xkXCI7XG4gIHRbXCJNUy1QR290aGljLUJvbGRJdGFsaWNcIl0gPSBcIk1TIFBHb3RoaWMtQm9sZEl0YWxpY1wiO1xuICB0W1wiTVMtUEdvdGhpYy1JdGFsaWNcIl0gPSBcIk1TIFBHb3RoaWMtSXRhbGljXCI7XG4gIHRbXCJNUy1QTWluY2hvXCJdID0gXCJNUyBQTWluY2hvXCI7XG4gIHRbXCJNUy1QTWluY2hvLUJvbGRcIl0gPSBcIk1TIFBNaW5jaG8tQm9sZFwiO1xuICB0W1wiTVMtUE1pbmNoby1Cb2xkSXRhbGljXCJdID0gXCJNUyBQTWluY2hvLUJvbGRJdGFsaWNcIjtcbiAgdFtcIk1TLVBNaW5jaG8tSXRhbGljXCJdID0gXCJNUyBQTWluY2hvLUl0YWxpY1wiO1xuICB0Lk51cHRpYWxTY3JpcHQgPSBcIlRpbWVzLUl0YWxpY1wiO1xuICB0LlNlZ29lVUlTeW1ib2wgPSBcIkhlbHZldGljYVwiO1xuICB0LldpbmdkaW5ncyA9IFwiWmFwZkRpbmdiYXRzXCI7XG4gIHRbXCJXaW5nZGluZ3MtUmVndWxhclwiXSA9IFwiWmFwZkRpbmdiYXRzXCI7XG59KTtcbmV4cG9ydHMuZ2V0Tm9uU3RkRm9udE1hcCA9IGdldE5vblN0ZEZvbnRNYXA7XG5jb25zdCBnZXRTZXJpZkZvbnRzID0gKDAsIF9jb3JlX3V0aWxzLmdldExvb2t1cFRhYmxlRmFjdG9yeSkoZnVuY3Rpb24gKHQpIHtcbiAgdFtcIkFkb2JlIEplbnNvblwiXSA9IHRydWU7XG4gIHRbXCJBZG9iZSBUZXh0XCJdID0gdHJ1ZTtcbiAgdC5BbGJlcnR1cyA9IHRydWU7XG4gIHQuQWxkdXMgPSB0cnVlO1xuICB0LkFsZXhhbmRyaWEgPSB0cnVlO1xuICB0LkFsZ2VyaWFuID0gdHJ1ZTtcbiAgdFtcIkFtZXJpY2FuIFR5cGV3cml0ZXJcIl0gPSB0cnVlO1xuICB0LkFudGlxdWEgPSB0cnVlO1xuICB0LkFwZXggPSB0cnVlO1xuICB0LkFybm8gPSB0cnVlO1xuICB0LkFzdGVyID0gdHJ1ZTtcbiAgdC5BdXJvcmEgPSB0cnVlO1xuICB0LkJhc2tlcnZpbGxlID0gdHJ1ZTtcbiAgdC5CZWxsID0gdHJ1ZTtcbiAgdC5CZW1ibyA9IHRydWU7XG4gIHRbXCJCZW1ibyBTY2hvb2xib29rXCJdID0gdHJ1ZTtcbiAgdC5CZW5ndWlhdCA9IHRydWU7XG4gIHRbXCJCZXJrZWxleSBPbGQgU3R5bGVcIl0gPSB0cnVlO1xuICB0W1wiQmVybmhhcmQgTW9kZXJuXCJdID0gdHJ1ZTtcbiAgdFtcIkJlcnRob2xkIENpdHlcIl0gPSB0cnVlO1xuICB0LkJvZG9uaSA9IHRydWU7XG4gIHRbXCJCYXVlciBCb2RvbmlcIl0gPSB0cnVlO1xuICB0W1wiQm9vayBBbnRpcXVhXCJdID0gdHJ1ZTtcbiAgdC5Cb29rbWFuID0gdHJ1ZTtcbiAgdFtcIkJvcmRlYXV4IFJvbWFuXCJdID0gdHJ1ZTtcbiAgdFtcIkNhbGlmb3JuaWFuIEZCXCJdID0gdHJ1ZTtcbiAgdC5DYWxpc3RvID0gdHJ1ZTtcbiAgdC5DYWx2ZXJ0ID0gdHJ1ZTtcbiAgdC5DYXBpdGFscyA9IHRydWU7XG4gIHQuQ2FtYnJpYSA9IHRydWU7XG4gIHQuQ2FydGllciA9IHRydWU7XG4gIHQuQ2FzbG9uID0gdHJ1ZTtcbiAgdC5DYXR1bGwgPSB0cnVlO1xuICB0LkNlbnRhdXIgPSB0cnVlO1xuICB0W1wiQ2VudHVyeSBPbGQgU3R5bGVcIl0gPSB0cnVlO1xuICB0W1wiQ2VudHVyeSBTY2hvb2xib29rXCJdID0gdHJ1ZTtcbiAgdC5DaGFwYXJyYWwgPSB0cnVlO1xuICB0W1wiQ2hhcmlzIFNJTFwiXSA9IHRydWU7XG4gIHQuQ2hlbHRlbmhhbSA9IHRydWU7XG4gIHRbXCJDaG9sbGEgU2xhYlwiXSA9IHRydWU7XG4gIHQuQ2xhcmVuZG9uID0gdHJ1ZTtcbiAgdC5DbGVhcmZhY2UgPSB0cnVlO1xuICB0LkNvY2hpbiA9IHRydWU7XG4gIHQuQ29sb25uYSA9IHRydWU7XG4gIHRbXCJDb21wdXRlciBNb2Rlcm5cIl0gPSB0cnVlO1xuICB0W1wiQ29uY3JldGUgUm9tYW5cIl0gPSB0cnVlO1xuICB0LkNvbnN0YW50aWEgPSB0cnVlO1xuICB0W1wiQ29vcGVyIEJsYWNrXCJdID0gdHJ1ZTtcbiAgdC5Db3JvbmEgPSB0cnVlO1xuICB0LkVjb3R5cGUgPSB0cnVlO1xuICB0LkVneXB0aWVubmUgPSB0cnVlO1xuICB0LkVsZXBoYW50ID0gdHJ1ZTtcbiAgdC5FeGNlbHNpb3IgPSB0cnVlO1xuICB0LkZhaXJmaWVsZCA9IHRydWU7XG4gIHRbXCJGRiBTY2FsYVwiXSA9IHRydWU7XG4gIHQuRm9sa2FyZCA9IHRydWU7XG4gIHQuRm9vdGxpZ2h0ID0gdHJ1ZTtcbiAgdC5GcmVlU2VyaWYgPSB0cnVlO1xuICB0W1wiRnJpeiBRdWFkcmF0YVwiXSA9IHRydWU7XG4gIHQuR2FyYW1vbmQgPSB0cnVlO1xuICB0LkdlbnRpdW0gPSB0cnVlO1xuICB0Lkdlb3JnaWEgPSB0cnVlO1xuICB0Lkdsb3VjZXN0ZXIgPSB0cnVlO1xuICB0W1wiR291ZHkgT2xkIFN0eWxlXCJdID0gdHJ1ZTtcbiAgdFtcIkdvdWR5IFNjaG9vbGJvb2tcIl0gPSB0cnVlO1xuICB0W1wiR291ZHkgUHJvIEZvbnRcIl0gPSB0cnVlO1xuICB0LkdyYW5qb24gPSB0cnVlO1xuICB0W1wiR3VhcmRpYW4gRWd5cHRpYW5cIl0gPSB0cnVlO1xuICB0LkhlYXRoZXIgPSB0cnVlO1xuICB0LkhlcmN1bGVzID0gdHJ1ZTtcbiAgdFtcIkhpZ2ggVG93ZXIgVGV4dFwiXSA9IHRydWU7XG4gIHQuSGlyb3NoaWdlID0gdHJ1ZTtcbiAgdFtcIkhvZWZsZXIgVGV4dFwiXSA9IHRydWU7XG4gIHRbXCJIdW1hbmEgU2VyaWZcIl0gPSB0cnVlO1xuICB0LkltcHJpbnQgPSB0cnVlO1xuICB0W1wiSW9uaWMgTm8uIDVcIl0gPSB0cnVlO1xuICB0LkphbnNvbiA9IHRydWU7XG4gIHQuSm9hbm5hID0gdHJ1ZTtcbiAgdC5Lb3Jpbm5hID0gdHJ1ZTtcbiAgdC5MZXhpY29uID0gdHJ1ZTtcbiAgdFtcIkxpYmVyYXRpb24gU2VyaWZcIl0gPSB0cnVlO1xuICB0W1wiTGludXggTGliZXJ0aW5lXCJdID0gdHJ1ZTtcbiAgdC5MaXRlcmF0dXJuYXlhID0gdHJ1ZTtcbiAgdC5MdWNpZGEgPSB0cnVlO1xuICB0W1wiTHVjaWRhIEJyaWdodFwiXSA9IHRydWU7XG4gIHQuTWVsaW9yID0gdHJ1ZTtcbiAgdC5NZW1waGlzID0gdHJ1ZTtcbiAgdC5NaWxsZXIgPSB0cnVlO1xuICB0Lk1pbmlvbiA9IHRydWU7XG4gIHQuTW9kZXJuID0gdHJ1ZTtcbiAgdFtcIk1vbmEgTGlzYVwiXSA9IHRydWU7XG4gIHRbXCJNcnMgRWF2ZXNcIl0gPSB0cnVlO1xuICB0W1wiTVMgU2VyaWZcIl0gPSB0cnVlO1xuICB0W1wiTXVzZW8gU2xhYlwiXSA9IHRydWU7XG4gIHRbXCJOZXcgWW9ya1wiXSA9IHRydWU7XG4gIHRbXCJOaW1idXMgUm9tYW5cIl0gPSB0cnVlO1xuICB0W1wiTlBTIFJhd2xpbnNvbiBSb2Fkd2F5XCJdID0gdHJ1ZTtcbiAgdC5OdXB0aWFsU2NyaXB0ID0gdHJ1ZTtcbiAgdC5QYWxhdGlubyA9IHRydWU7XG4gIHQuUGVycGV0dWEgPSB0cnVlO1xuICB0LlBsYW50aW4gPSB0cnVlO1xuICB0W1wiUGxhbnRpbiBTY2hvb2xib29rXCJdID0gdHJ1ZTtcbiAgdC5QbGF5YmlsbCA9IHRydWU7XG4gIHRbXCJQb29yIFJpY2hhcmRcIl0gPSB0cnVlO1xuICB0W1wiUmF3bGluc29uIFJvYWR3YXlcIl0gPSB0cnVlO1xuICB0LlJlbmF1bHQgPSB0cnVlO1xuICB0LlJlcXVpZW0gPSB0cnVlO1xuICB0LlJvY2t3ZWxsID0gdHJ1ZTtcbiAgdC5Sb21hbiA9IHRydWU7XG4gIHRbXCJSb3RpcyBTZXJpZlwiXSA9IHRydWU7XG4gIHQuU2Fib24gPSB0cnVlO1xuICB0LlNjYWxhID0gdHJ1ZTtcbiAgdC5TZWFndWxsID0gdHJ1ZTtcbiAgdC5TaXN0aW5hID0gdHJ1ZTtcbiAgdC5Tb3V2ZW5pciA9IHRydWU7XG4gIHQuU1RJWCA9IHRydWU7XG4gIHRbXCJTdG9uZSBJbmZvcm1hbFwiXSA9IHRydWU7XG4gIHRbXCJTdG9uZSBTZXJpZlwiXSA9IHRydWU7XG4gIHQuU3lsZmFlbiA9IHRydWU7XG4gIHQuVGltZXMgPSB0cnVlO1xuICB0LlRyYWphbiA9IHRydWU7XG4gIHRbXCJUcmluaXTDqVwiXSA9IHRydWU7XG4gIHRbXCJUcnVtcCBNZWRpYWV2YWxcIl0gPSB0cnVlO1xuICB0LlV0b3BpYSA9IHRydWU7XG4gIHRbXCJWYWxlIFR5cGVcIl0gPSB0cnVlO1xuICB0W1wiQml0c3RyZWFtIFZlcmFcIl0gPSB0cnVlO1xuICB0W1wiVmVyYSBTZXJpZlwiXSA9IHRydWU7XG4gIHQuVmVyc2FpbGxlcyA9IHRydWU7XG4gIHQuV2FudGVkID0gdHJ1ZTtcbiAgdC5XZWlzcyA9IHRydWU7XG4gIHRbXCJXaWRlIExhdGluXCJdID0gdHJ1ZTtcbiAgdC5XaW5kc29yID0gdHJ1ZTtcbiAgdC5YSVRTID0gdHJ1ZTtcbn0pO1xuZXhwb3J0cy5nZXRTZXJpZkZvbnRzID0gZ2V0U2VyaWZGb250cztcbmNvbnN0IGdldFN5bWJvbHNGb250cyA9ICgwLCBfY29yZV91dGlscy5nZXRMb29rdXBUYWJsZUZhY3RvcnkpKGZ1bmN0aW9uICh0KSB7XG4gIHQuRGluZ2JhdHMgPSB0cnVlO1xuICB0LlN5bWJvbCA9IHRydWU7XG4gIHQuWmFwZkRpbmdiYXRzID0gdHJ1ZTtcbn0pO1xuZXhwb3J0cy5nZXRTeW1ib2xzRm9udHMgPSBnZXRTeW1ib2xzRm9udHM7XG5jb25zdCBnZXRHbHlwaE1hcEZvclN0YW5kYXJkRm9udHMgPSAoMCwgX2NvcmVfdXRpbHMuZ2V0TG9va3VwVGFibGVGYWN0b3J5KShmdW5jdGlvbiAodCkge1xuICB0WzJdID0gMTA7XG4gIHRbM10gPSAzMjtcbiAgdFs0XSA9IDMzO1xuICB0WzVdID0gMzQ7XG4gIHRbNl0gPSAzNTtcbiAgdFs3XSA9IDM2O1xuICB0WzhdID0gMzc7XG4gIHRbOV0gPSAzODtcbiAgdFsxMF0gPSAzOTtcbiAgdFsxMV0gPSA0MDtcbiAgdFsxMl0gPSA0MTtcbiAgdFsxM10gPSA0MjtcbiAgdFsxNF0gPSA0MztcbiAgdFsxNV0gPSA0NDtcbiAgdFsxNl0gPSA0NTtcbiAgdFsxN10gPSA0NjtcbiAgdFsxOF0gPSA0NztcbiAgdFsxOV0gPSA0ODtcbiAgdFsyMF0gPSA0OTtcbiAgdFsyMV0gPSA1MDtcbiAgdFsyMl0gPSA1MTtcbiAgdFsyM10gPSA1MjtcbiAgdFsyNF0gPSA1MztcbiAgdFsyNV0gPSA1NDtcbiAgdFsyNl0gPSA1NTtcbiAgdFsyN10gPSA1NjtcbiAgdFsyOF0gPSA1NztcbiAgdFsyOV0gPSA1ODtcbiAgdFszMF0gPSA4OTQ7XG4gIHRbMzFdID0gNjA7XG4gIHRbMzJdID0gNjE7XG4gIHRbMzNdID0gNjI7XG4gIHRbMzRdID0gNjM7XG4gIHRbMzVdID0gNjQ7XG4gIHRbMzZdID0gNjU7XG4gIHRbMzddID0gNjY7XG4gIHRbMzhdID0gNjc7XG4gIHRbMzldID0gNjg7XG4gIHRbNDBdID0gNjk7XG4gIHRbNDFdID0gNzA7XG4gIHRbNDJdID0gNzE7XG4gIHRbNDNdID0gNzI7XG4gIHRbNDRdID0gNzM7XG4gIHRbNDVdID0gNzQ7XG4gIHRbNDZdID0gNzU7XG4gIHRbNDddID0gNzY7XG4gIHRbNDhdID0gNzc7XG4gIHRbNDldID0gNzg7XG4gIHRbNTBdID0gNzk7XG4gIHRbNTFdID0gODA7XG4gIHRbNTJdID0gODE7XG4gIHRbNTNdID0gODI7XG4gIHRbNTRdID0gODM7XG4gIHRbNTVdID0gODQ7XG4gIHRbNTZdID0gODU7XG4gIHRbNTddID0gODY7XG4gIHRbNThdID0gODc7XG4gIHRbNTldID0gODg7XG4gIHRbNjBdID0gODk7XG4gIHRbNjFdID0gOTA7XG4gIHRbNjJdID0gOTE7XG4gIHRbNjNdID0gOTI7XG4gIHRbNjRdID0gOTM7XG4gIHRbNjVdID0gOTQ7XG4gIHRbNjZdID0gOTU7XG4gIHRbNjddID0gOTY7XG4gIHRbNjhdID0gOTc7XG4gIHRbNjldID0gOTg7XG4gIHRbNzBdID0gOTk7XG4gIHRbNzFdID0gMTAwO1xuICB0WzcyXSA9IDEwMTtcbiAgdFs3M10gPSAxMDI7XG4gIHRbNzRdID0gMTAzO1xuICB0Wzc1XSA9IDEwNDtcbiAgdFs3Nl0gPSAxMDU7XG4gIHRbNzddID0gMTA2O1xuICB0Wzc4XSA9IDEwNztcbiAgdFs3OV0gPSAxMDg7XG4gIHRbODBdID0gMTA5O1xuICB0WzgxXSA9IDExMDtcbiAgdFs4Ml0gPSAxMTE7XG4gIHRbODNdID0gMTEyO1xuICB0Wzg0XSA9IDExMztcbiAgdFs4NV0gPSAxMTQ7XG4gIHRbODZdID0gMTE1O1xuICB0Wzg3XSA9IDExNjtcbiAgdFs4OF0gPSAxMTc7XG4gIHRbODldID0gMTE4O1xuICB0WzkwXSA9IDExOTtcbiAgdFs5MV0gPSAxMjA7XG4gIHRbOTJdID0gMTIxO1xuICB0WzkzXSA9IDEyMjtcbiAgdFs5NF0gPSAxMjM7XG4gIHRbOTVdID0gMTI0O1xuICB0Wzk2XSA9IDEyNTtcbiAgdFs5N10gPSAxMjY7XG4gIHRbOThdID0gMTk2O1xuICB0Wzk5XSA9IDE5NztcbiAgdFsxMDBdID0gMTk5O1xuICB0WzEwMV0gPSAyMDE7XG4gIHRbMTAyXSA9IDIwOTtcbiAgdFsxMDNdID0gMjE0O1xuICB0WzEwNF0gPSAyMjA7XG4gIHRbMTA1XSA9IDIyNTtcbiAgdFsxMDZdID0gMjI0O1xuICB0WzEwN10gPSAyMjY7XG4gIHRbMTA4XSA9IDIyODtcbiAgdFsxMDldID0gMjI3O1xuICB0WzExMF0gPSAyMjk7XG4gIHRbMTExXSA9IDIzMTtcbiAgdFsxMTJdID0gMjMzO1xuICB0WzExM10gPSAyMzI7XG4gIHRbMTE0XSA9IDIzNDtcbiAgdFsxMTVdID0gMjM1O1xuICB0WzExNl0gPSAyMzc7XG4gIHRbMTE3XSA9IDIzNjtcbiAgdFsxMThdID0gMjM4O1xuICB0WzExOV0gPSAyMzk7XG4gIHRbMTIwXSA9IDI0MTtcbiAgdFsxMjFdID0gMjQzO1xuICB0WzEyMl0gPSAyNDI7XG4gIHRbMTIzXSA9IDI0NDtcbiAgdFsxMjRdID0gMjQ2O1xuICB0WzEyNV0gPSAyNDU7XG4gIHRbMTI2XSA9IDI1MDtcbiAgdFsxMjddID0gMjQ5O1xuICB0WzEyOF0gPSAyNTE7XG4gIHRbMTI5XSA9IDI1MjtcbiAgdFsxMzBdID0gODIyNDtcbiAgdFsxMzFdID0gMTc2O1xuICB0WzEzMl0gPSAxNjI7XG4gIHRbMTMzXSA9IDE2MztcbiAgdFsxMzRdID0gMTY3O1xuICB0WzEzNV0gPSA4MjI2O1xuICB0WzEzNl0gPSAxODI7XG4gIHRbMTM3XSA9IDIyMztcbiAgdFsxMzhdID0gMTc0O1xuICB0WzEzOV0gPSAxNjk7XG4gIHRbMTQwXSA9IDg0ODI7XG4gIHRbMTQxXSA9IDE4MDtcbiAgdFsxNDJdID0gMTY4O1xuICB0WzE0M10gPSA4ODAwO1xuICB0WzE0NF0gPSAxOTg7XG4gIHRbMTQ1XSA9IDIxNjtcbiAgdFsxNDZdID0gODczNDtcbiAgdFsxNDddID0gMTc3O1xuICB0WzE0OF0gPSA4ODA0O1xuICB0WzE0OV0gPSA4ODA1O1xuICB0WzE1MF0gPSAxNjU7XG4gIHRbMTUxXSA9IDE4MTtcbiAgdFsxNTJdID0gODcwNjtcbiAgdFsxNTNdID0gODcyMTtcbiAgdFsxNTRdID0gODcxOTtcbiAgdFsxNTZdID0gODc0NztcbiAgdFsxNTddID0gMTcwO1xuICB0WzE1OF0gPSAxODY7XG4gIHRbMTU5XSA9IDg0ODY7XG4gIHRbMTYwXSA9IDIzMDtcbiAgdFsxNjFdID0gMjQ4O1xuICB0WzE2Ml0gPSAxOTE7XG4gIHRbMTYzXSA9IDE2MTtcbiAgdFsxNjRdID0gMTcyO1xuICB0WzE2NV0gPSA4NzMwO1xuICB0WzE2Nl0gPSA0MDI7XG4gIHRbMTY3XSA9IDg3NzY7XG4gIHRbMTY4XSA9IDg3MTA7XG4gIHRbMTY5XSA9IDE3MTtcbiAgdFsxNzBdID0gMTg3O1xuICB0WzE3MV0gPSA4MjMwO1xuICB0WzIxMF0gPSAyMTg7XG4gIHRbMjIzXSA9IDcxMTtcbiAgdFsyMjRdID0gMzIxO1xuICB0WzIyNV0gPSAzMjI7XG4gIHRbMjI3XSA9IDM1MztcbiAgdFsyMjldID0gMzgyO1xuICB0WzIzNF0gPSAyNTM7XG4gIHRbMjUyXSA9IDI2MztcbiAgdFsyNTNdID0gMjY4O1xuICB0WzI1NF0gPSAyNjk7XG4gIHRbMjU4XSA9IDI1ODtcbiAgdFsyNjBdID0gMjYwO1xuICB0WzI2MV0gPSAyNjE7XG4gIHRbMjY1XSA9IDI4MDtcbiAgdFsyNjZdID0gMjgxO1xuICB0WzI2OF0gPSAyODM7XG4gIHRbMjY5XSA9IDMxMztcbiAgdFsyNzVdID0gMzIzO1xuICB0WzI3Nl0gPSAzMjQ7XG4gIHRbMjc4XSA9IDMyODtcbiAgdFsyODRdID0gMzQ1O1xuICB0WzI4NV0gPSAzNDY7XG4gIHRbMjg2XSA9IDM0NztcbiAgdFsyOTJdID0gMzY3O1xuICB0WzI5NV0gPSAzNzc7XG4gIHRbMjk2XSA9IDM3ODtcbiAgdFsyOThdID0gMzgwO1xuICB0WzMwNV0gPSA5NjM7XG4gIHRbMzA2XSA9IDk2NDtcbiAgdFszMDddID0gOTY2O1xuICB0WzMwOF0gPSA4MjE1O1xuICB0WzMwOV0gPSA4MjUyO1xuICB0WzMxMF0gPSA4MzE5O1xuICB0WzMxMV0gPSA4MzU5O1xuICB0WzMxMl0gPSA4NTkyO1xuICB0WzMxM10gPSA4NTkzO1xuICB0WzMzN10gPSA5NTUyO1xuICB0WzQ5M10gPSAxMDM5O1xuICB0WzQ5NF0gPSAxMDQwO1xuICB0WzcwNV0gPSAxNTI0O1xuICB0WzcwNl0gPSA4MzYyO1xuICB0WzcxMF0gPSA2NDI4ODtcbiAgdFs3MTFdID0gNjQyOTg7XG4gIHRbNzU5XSA9IDE2MTc7XG4gIHRbNzYxXSA9IDE3NzY7XG4gIHRbNzYzXSA9IDE3Nzg7XG4gIHRbNzc1XSA9IDE2NTI7XG4gIHRbNzc3XSA9IDE3NjQ7XG4gIHRbNzc4XSA9IDE3ODA7XG4gIHRbNzc5XSA9IDE3ODE7XG4gIHRbNzgwXSA9IDE3ODI7XG4gIHRbNzgyXSA9IDc3MTtcbiAgdFs3ODNdID0gNjQ3MjY7XG4gIHRbNzg2XSA9IDgzNjM7XG4gIHRbNzg4XSA9IDg1MzI7XG4gIHRbNzkwXSA9IDc2ODtcbiAgdFs3OTFdID0gNzY5O1xuICB0Wzc5Ml0gPSA3Njg7XG4gIHRbNzk1XSA9IDgwMztcbiAgdFs3OTddID0gNjQzMzY7XG4gIHRbNzk4XSA9IDY0MzM3O1xuICB0Wzc5OV0gPSA2NDM0MjtcbiAgdFs4MDBdID0gNjQzNDM7XG4gIHRbODAxXSA9IDY0MzQ0O1xuICB0WzgwMl0gPSA2NDM0NTtcbiAgdFs4MDNdID0gNjQzNjI7XG4gIHRbODA0XSA9IDY0MzYzO1xuICB0WzgwNV0gPSA2NDM2NDtcbiAgdFsyNDI0XSA9IDc4MjE7XG4gIHRbMjQyNV0gPSA3ODIyO1xuICB0WzI0MjZdID0gNzgyMztcbiAgdFsyNDI3XSA9IDc4MjQ7XG4gIHRbMjQyOF0gPSA3ODI1O1xuICB0WzI0MjldID0gNzgyNjtcbiAgdFsyNDMwXSA9IDc4Mjc7XG4gIHRbMjQzM10gPSA3NjgyO1xuICB0WzI2NzhdID0gODA0NTtcbiAgdFsyNjc5XSA9IDgwNDY7XG4gIHRbMjgzMF0gPSAxNTUyO1xuICB0WzI4MzhdID0gNjg2O1xuICB0WzI4NDBdID0gNzUxO1xuICB0WzI4NDJdID0gNzUzO1xuICB0WzI4NDNdID0gNzU0O1xuICB0WzI4NDRdID0gNzU1O1xuICB0WzI4NDZdID0gNzU3O1xuICB0WzI4NTZdID0gNzY3O1xuICB0WzI4NTddID0gODQ4O1xuICB0WzI4NThdID0gODQ5O1xuICB0WzI4NjJdID0gODUzO1xuICB0WzI4NjNdID0gODU0O1xuICB0WzI4NjRdID0gODU1O1xuICB0WzI4NjVdID0gODYxO1xuICB0WzI4NjZdID0gODYyO1xuICB0WzI5MDZdID0gNzQ2MDtcbiAgdFsyOTA4XSA9IDc0NjI7XG4gIHRbMjkwOV0gPSA3NDYzO1xuICB0WzI5MTBdID0gNzQ2NDtcbiAgdFsyOTEyXSA9IDc0NjY7XG4gIHRbMjkxM10gPSA3NDY3O1xuICB0WzI5MTRdID0gNzQ2ODtcbiAgdFsyOTE2XSA9IDc0NzA7XG4gIHRbMjkxN10gPSA3NDcxO1xuICB0WzI5MThdID0gNzQ3MjtcbiAgdFsyOTIwXSA9IDc0NzQ7XG4gIHRbMjkyMV0gPSA3NDc1O1xuICB0WzI5MjJdID0gNzQ3NjtcbiAgdFsyOTI0XSA9IDc0Nzg7XG4gIHRbMjkyNV0gPSA3NDc5O1xuICB0WzI5MjZdID0gNzQ4MDtcbiAgdFsyOTI4XSA9IDc0ODI7XG4gIHRbMjkyOV0gPSA3NDgzO1xuICB0WzI5MzBdID0gNzQ4NDtcbiAgdFsyOTMyXSA9IDc0ODY7XG4gIHRbMjkzM10gPSA3NDg3O1xuICB0WzI5MzRdID0gNzQ4ODtcbiAgdFsyOTM2XSA9IDc0OTA7XG4gIHRbMjkzN10gPSA3NDkxO1xuICB0WzI5MzhdID0gNzQ5MjtcbiAgdFsyOTQwXSA9IDc0OTQ7XG4gIHRbMjk0MV0gPSA3NDk1O1xuICB0WzI5NDJdID0gNzQ5NjtcbiAgdFsyOTQ0XSA9IDc0OTg7XG4gIHRbMjk0Nl0gPSA3NTAwO1xuICB0WzI5NDhdID0gNzUwMjtcbiAgdFsyOTUwXSA9IDc1MDQ7XG4gIHRbMjk1MV0gPSA3NTA1O1xuICB0WzI5NTJdID0gNzUwNjtcbiAgdFsyOTU0XSA9IDc1MDg7XG4gIHRbMjk1NV0gPSA3NTA5O1xuICB0WzI5NTZdID0gNzUxMDtcbiAgdFsyOTU4XSA9IDc1MTI7XG4gIHRbMjk1OV0gPSA3NTEzO1xuICB0WzI5NjBdID0gNzUxNDtcbiAgdFsyOTYyXSA9IDc1MTY7XG4gIHRbMjk2M10gPSA3NTE3O1xuICB0WzI5NjRdID0gNzUxODtcbiAgdFsyOTY2XSA9IDc1MjA7XG4gIHRbMjk2N10gPSA3NTIxO1xuICB0WzI5NjhdID0gNzUyMjtcbiAgdFsyOTcwXSA9IDc1MjQ7XG4gIHRbMjk3MV0gPSA3NTI1O1xuICB0WzI5NzJdID0gNzUyNjtcbiAgdFsyOTc0XSA9IDc1Mjg7XG4gIHRbMjk3NV0gPSA3NTI5O1xuICB0WzI5NzZdID0gNzUzMDtcbiAgdFsyOTc4XSA9IDE1Mzc7XG4gIHRbMjk3OV0gPSAxNTM4O1xuICB0WzI5ODBdID0gMTUzOTtcbiAgdFsyOTgyXSA9IDE1NDk7XG4gIHRbMjk4M10gPSAxNTUxO1xuICB0WzI5ODRdID0gMTU1MjtcbiAgdFsyOTg2XSA9IDE1NTQ7XG4gIHRbMjk4N10gPSAxNTU1O1xuICB0WzI5ODhdID0gMTU1NjtcbiAgdFsyOTkwXSA9IDE2MjM7XG4gIHRbMjk5MV0gPSAxNjI0O1xuICB0WzI5OTVdID0gMTc3NTtcbiAgdFsyOTk5XSA9IDE3OTE7XG4gIHRbMzAwMl0gPSA2NDI5MDtcbiAgdFszMDAzXSA9IDY0MjkxO1xuICB0WzMwMDRdID0gNjQyOTI7XG4gIHRbMzAwNl0gPSA2NDI5NDtcbiAgdFszMDA3XSA9IDY0Mjk1O1xuICB0WzMwMDhdID0gNjQyOTY7XG4gIHRbMzAxMV0gPSAxOTAwO1xuICB0WzMwMTRdID0gODIyMztcbiAgdFszMDE1XSA9IDgyNDQ7XG4gIHRbMzAxN10gPSA3NTMyO1xuICB0WzMwMThdID0gNzUzMztcbiAgdFszMDE5XSA9IDc1MzQ7XG4gIHRbMzA3NV0gPSA3NTkwO1xuICB0WzMwNzZdID0gNzU5MTtcbiAgdFszMDc5XSA9IDc1OTQ7XG4gIHRbMzA4MF0gPSA3NTk1O1xuICB0WzMwODNdID0gNzU5ODtcbiAgdFszMDg0XSA9IDc1OTk7XG4gIHRbMzA4N10gPSA3NjAyO1xuICB0WzMwODhdID0gNzYwMztcbiAgdFszMDkxXSA9IDc2MDY7XG4gIHRbMzA5Ml0gPSA3NjA3O1xuICB0WzMwOTVdID0gNzYxMDtcbiAgdFszMDk2XSA9IDc2MTE7XG4gIHRbMzA5OV0gPSA3NjE0O1xuICB0WzMxMDBdID0gNzYxNTtcbiAgdFszMTAzXSA9IDc2MTg7XG4gIHRbMzEwNF0gPSA3NjE5O1xuICB0WzMxMDddID0gODMzNztcbiAgdFszMTA4XSA9IDgzMzg7XG4gIHRbMzExNl0gPSAxODg0O1xuICB0WzMxMTldID0gMTg4NTtcbiAgdFszMTIwXSA9IDE4ODU7XG4gIHRbMzEyM10gPSAxODg2O1xuICB0WzMxMjRdID0gMTg4NjtcbiAgdFszMTI3XSA9IDE4ODc7XG4gIHRbMzEyOF0gPSAxODg3O1xuICB0WzMxMzFdID0gMTg4ODtcbiAgdFszMTMyXSA9IDE4ODg7XG4gIHRbMzEzNV0gPSAxODg5O1xuICB0WzMxMzZdID0gMTg4OTtcbiAgdFszMTM5XSA9IDE4OTA7XG4gIHRbMzE0MF0gPSAxODkwO1xuICB0WzMxNDNdID0gMTg5MTtcbiAgdFszMTQ0XSA9IDE4OTE7XG4gIHRbMzE0N10gPSAxODkyO1xuICB0WzMxNDhdID0gMTg5MjtcbiAgdFszMTUzXSA9IDU4MDtcbiAgdFszMTU0XSA9IDU4MTtcbiAgdFszMTU3XSA9IDU4NDtcbiAgdFszMTU4XSA9IDU4NTtcbiAgdFszMTYxXSA9IDU4ODtcbiAgdFszMTYyXSA9IDU4OTtcbiAgdFszMTY1XSA9IDg5MTtcbiAgdFszMTY2XSA9IDg5MjtcbiAgdFszMTY5XSA9IDEyNzQ7XG4gIHRbMzE3MF0gPSAxMjc1O1xuICB0WzMxNzNdID0gMTI3ODtcbiAgdFszMTc0XSA9IDEyNzk7XG4gIHRbMzE4MV0gPSA3NjIyO1xuICB0WzMxODJdID0gNzYyMztcbiAgdFszMjgyXSA9IDExNzk5O1xuICB0WzMzMTZdID0gNTc4O1xuICB0WzMzNzldID0gNDI3ODU7XG4gIHRbMzM5M10gPSAxMTU5O1xuICB0WzM0MTZdID0gODM3Nztcbn0pO1xuZXhwb3J0cy5nZXRHbHlwaE1hcEZvclN0YW5kYXJkRm9udHMgPSBnZXRHbHlwaE1hcEZvclN0YW5kYXJkRm9udHM7XG5jb25zdCBnZXRTdXBwbGVtZW50YWxHbHlwaE1hcEZvckFyaWFsQmxhY2sgPSAoMCwgX2NvcmVfdXRpbHMuZ2V0TG9va3VwVGFibGVGYWN0b3J5KShmdW5jdGlvbiAodCkge1xuICB0WzIyN10gPSAzMjI7XG4gIHRbMjY0XSA9IDI2MTtcbiAgdFsyOTFdID0gMzQ2O1xufSk7XG5leHBvcnRzLmdldFN1cHBsZW1lbnRhbEdseXBoTWFwRm9yQXJpYWxCbGFjayA9IGdldFN1cHBsZW1lbnRhbEdseXBoTWFwRm9yQXJpYWxCbGFjaztcbmNvbnN0IGdldFN1cHBsZW1lbnRhbEdseXBoTWFwRm9yQ2FsaWJyaSA9ICgwLCBfY29yZV91dGlscy5nZXRMb29rdXBUYWJsZUZhY3RvcnkpKGZ1bmN0aW9uICh0KSB7XG4gIHRbMV0gPSAzMjtcbiAgdFs0XSA9IDY1O1xuICB0WzE3XSA9IDY2O1xuICB0WzE4XSA9IDY3O1xuICB0WzI0XSA9IDY4O1xuICB0WzI4XSA9IDY5O1xuICB0WzM4XSA9IDcwO1xuICB0WzM5XSA9IDcxO1xuICB0WzQ0XSA9IDcyO1xuICB0WzQ3XSA9IDczO1xuICB0WzU4XSA9IDc0O1xuICB0WzYwXSA9IDc1O1xuICB0WzYyXSA9IDc2O1xuICB0WzY4XSA9IDc3O1xuICB0WzY5XSA9IDc4O1xuICB0Wzc1XSA9IDc5O1xuICB0Wzg3XSA9IDgwO1xuICB0Wzg5XSA9IDgxO1xuICB0WzkwXSA9IDgyO1xuICB0Wzk0XSA9IDgzO1xuICB0WzEwMF0gPSA4NDtcbiAgdFsxMDRdID0gODU7XG4gIHRbMTE1XSA9IDg2O1xuICB0WzExNl0gPSA4NztcbiAgdFsxMjFdID0gODg7XG4gIHRbMTIyXSA9IDg5O1xuICB0WzEyN10gPSA5MDtcbiAgdFsyNThdID0gOTc7XG4gIHRbMjY4XSA9IDI2MTtcbiAgdFsyNzFdID0gOTg7XG4gIHRbMjcyXSA9IDk5O1xuICB0WzI3M10gPSAyNjM7XG4gIHRbMjgyXSA9IDEwMDtcbiAgdFsyODZdID0gMTAxO1xuICB0WzI5NV0gPSAyODE7XG4gIHRbMjk2XSA9IDEwMjtcbiAgdFszMzZdID0gMTAzO1xuICB0WzM0Nl0gPSAxMDQ7XG4gIHRbMzQ5XSA9IDEwNTtcbiAgdFszNjFdID0gMTA2O1xuICB0WzM2NF0gPSAxMDc7XG4gIHRbMzY3XSA9IDEwODtcbiAgdFszNzFdID0gMzIyO1xuICB0WzM3M10gPSAxMDk7XG4gIHRbMzc0XSA9IDExMDtcbiAgdFszODFdID0gMTExO1xuICB0WzM4M10gPSAyNDM7XG4gIHRbMzkzXSA9IDExMjtcbiAgdFszOTVdID0gMTEzO1xuICB0WzM5Nl0gPSAxMTQ7XG4gIHRbNDAwXSA9IDExNTtcbiAgdFs0MDFdID0gMzQ3O1xuICB0WzQxMF0gPSAxMTY7XG4gIHRbNDM3XSA9IDExNztcbiAgdFs0NDhdID0gMTE4O1xuICB0WzQ0OV0gPSAxMTk7XG4gIHRbNDU0XSA9IDEyMDtcbiAgdFs0NTVdID0gMTIxO1xuICB0WzQ2MF0gPSAxMjI7XG4gIHRbNDYzXSA9IDM4MDtcbiAgdFs4NTNdID0gNDQ7XG4gIHRbODU1XSA9IDU4O1xuICB0Wzg1Nl0gPSA0NjtcbiAgdFs4NzZdID0gNDc7XG4gIHRbODc4XSA9IDQ1O1xuICB0Wzg4Ml0gPSA0NTtcbiAgdFs4OTRdID0gNDA7XG4gIHRbODk1XSA9IDQxO1xuICB0Wzg5Nl0gPSA5MTtcbiAgdFs4OTddID0gOTM7XG4gIHRbOTIzXSA9IDY0O1xuICB0WzEwMDRdID0gNDg7XG4gIHRbMTAwNV0gPSA0OTtcbiAgdFsxMDA2XSA9IDUwO1xuICB0WzEwMDddID0gNTE7XG4gIHRbMTAwOF0gPSA1MjtcbiAgdFsxMDA5XSA9IDUzO1xuICB0WzEwMTBdID0gNTQ7XG4gIHRbMTAxMV0gPSA1NTtcbiAgdFsxMDEyXSA9IDU2O1xuICB0WzEwMTNdID0gNTc7XG4gIHRbMTA4MV0gPSAzNztcbiAgdFsxMDg1XSA9IDQzO1xuICB0WzEwODZdID0gNDU7XG59KTtcbmV4cG9ydHMuZ2V0U3VwcGxlbWVudGFsR2x5cGhNYXBGb3JDYWxpYnJpID0gZ2V0U3VwcGxlbWVudGFsR2x5cGhNYXBGb3JDYWxpYnJpOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/standard_fonts.js\n')},"./node_modules/pdfjs-dist/lib/core/stream.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.StringStream = exports.StreamsSequenceStream = exports.Stream = exports.RunLengthStream = exports.PredictorStream = exports.NullStream = exports.LZWStream = exports.FlateStream = exports.DecryptStream = exports.DecodeStream = exports.AsciiHexStream = exports.Ascii85Stream = void 0;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _primitives = __webpack_require__(/*! ./primitives.js */ "./node_modules/pdfjs-dist/lib/core/primitives.js");\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nvar Stream = function StreamClosure() {\n  function Stream(arrayBuffer, start, length, dict) {\n    this.bytes = arrayBuffer instanceof Uint8Array ? arrayBuffer : new Uint8Array(arrayBuffer);\n    this.start = start || 0;\n    this.pos = this.start;\n    this.end = start + length || this.bytes.length;\n    this.dict = dict;\n  }\n\n  Stream.prototype = {\n    get length() {\n      return this.end - this.start;\n    },\n\n    get isEmpty() {\n      return this.length === 0;\n    },\n\n    getByte: function Stream_getByte() {\n      if (this.pos >= this.end) {\n        return -1;\n      }\n\n      return this.bytes[this.pos++];\n    },\n    getUint16: function Stream_getUint16() {\n      var b0 = this.getByte();\n      var b1 = this.getByte();\n\n      if (b0 === -1 || b1 === -1) {\n        return -1;\n      }\n\n      return (b0 << 8) + b1;\n    },\n    getInt32: function Stream_getInt32() {\n      var b0 = this.getByte();\n      var b1 = this.getByte();\n      var b2 = this.getByte();\n      var b3 = this.getByte();\n      return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n    },\n\n    getBytes(length, forceClamped = false) {\n      var bytes = this.bytes;\n      var pos = this.pos;\n      var strEnd = this.end;\n\n      if (!length) {\n        const subarray = bytes.subarray(pos, strEnd);\n        return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n      }\n\n      var end = pos + length;\n\n      if (end > strEnd) {\n        end = strEnd;\n      }\n\n      this.pos = end;\n      const subarray = bytes.subarray(pos, end);\n      return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n    },\n\n    peekByte: function Stream_peekByte() {\n      var peekedByte = this.getByte();\n\n      if (peekedByte !== -1) {\n        this.pos--;\n      }\n\n      return peekedByte;\n    },\n\n    peekBytes(length, forceClamped = false) {\n      var bytes = this.getBytes(length, forceClamped);\n      this.pos -= bytes.length;\n      return bytes;\n    },\n\n    getByteRange(begin, end) {\n      if (begin < 0) {\n        begin = 0;\n      }\n\n      if (end > this.end) {\n        end = this.end;\n      }\n\n      return this.bytes.subarray(begin, end);\n    },\n\n    skip: function Stream_skip(n) {\n      if (!n) {\n        n = 1;\n      }\n\n      this.pos += n;\n    },\n    reset: function Stream_reset() {\n      this.pos = this.start;\n    },\n    moveStart: function Stream_moveStart() {\n      this.start = this.pos;\n    },\n    makeSubStream: function Stream_makeSubStream(start, length, dict) {\n      return new Stream(this.bytes.buffer, start, length, dict);\n    }\n  };\n  return Stream;\n}();\n\nexports.Stream = Stream;\n\nvar StringStream = function StringStreamClosure() {\n  function StringStream(str) {\n    const bytes = (0, _util.stringToBytes)(str);\n    Stream.call(this, bytes);\n  }\n\n  StringStream.prototype = Stream.prototype;\n  return StringStream;\n}();\n\nexports.StringStream = StringStream;\n\nvar DecodeStream = function DecodeStreamClosure() {\n  var emptyBuffer = new Uint8Array(0);\n\n  function DecodeStream(maybeMinBufferLength) {\n    this._rawMinBufferLength = maybeMinBufferLength || 0;\n    this.pos = 0;\n    this.bufferLength = 0;\n    this.eof = false;\n    this.buffer = emptyBuffer;\n    this.minBufferLength = 512;\n\n    if (maybeMinBufferLength) {\n      while (this.minBufferLength < maybeMinBufferLength) {\n        this.minBufferLength *= 2;\n      }\n    }\n  }\n\n  DecodeStream.prototype = {\n    get length() {\n      (0, _util.unreachable)("Should not access DecodeStream.length");\n    },\n\n    get isEmpty() {\n      while (!this.eof && this.bufferLength === 0) {\n        this.readBlock();\n      }\n\n      return this.bufferLength === 0;\n    },\n\n    ensureBuffer: function DecodeStream_ensureBuffer(requested) {\n      var buffer = this.buffer;\n\n      if (requested <= buffer.byteLength) {\n        return buffer;\n      }\n\n      var size = this.minBufferLength;\n\n      while (size < requested) {\n        size *= 2;\n      }\n\n      var buffer2 = new Uint8Array(size);\n      buffer2.set(buffer);\n      return this.buffer = buffer2;\n    },\n    getByte: function DecodeStream_getByte() {\n      var pos = this.pos;\n\n      while (this.bufferLength <= pos) {\n        if (this.eof) {\n          return -1;\n        }\n\n        this.readBlock();\n      }\n\n      return this.buffer[this.pos++];\n    },\n    getUint16: function DecodeStream_getUint16() {\n      var b0 = this.getByte();\n      var b1 = this.getByte();\n\n      if (b0 === -1 || b1 === -1) {\n        return -1;\n      }\n\n      return (b0 << 8) + b1;\n    },\n    getInt32: function DecodeStream_getInt32() {\n      var b0 = this.getByte();\n      var b1 = this.getByte();\n      var b2 = this.getByte();\n      var b3 = this.getByte();\n      return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n    },\n\n    getBytes(length, forceClamped = false) {\n      var end,\n          pos = this.pos;\n\n      if (length) {\n        this.ensureBuffer(pos + length);\n        end = pos + length;\n\n        while (!this.eof && this.bufferLength < end) {\n          this.readBlock();\n        }\n\n        var bufEnd = this.bufferLength;\n\n        if (end > bufEnd) {\n          end = bufEnd;\n        }\n      } else {\n        while (!this.eof) {\n          this.readBlock();\n        }\n\n        end = this.bufferLength;\n      }\n\n      this.pos = end;\n      const subarray = this.buffer.subarray(pos, end);\n      return forceClamped && !(subarray instanceof Uint8ClampedArray) ? new Uint8ClampedArray(subarray) : subarray;\n    },\n\n    peekByte: function DecodeStream_peekByte() {\n      var peekedByte = this.getByte();\n\n      if (peekedByte !== -1) {\n        this.pos--;\n      }\n\n      return peekedByte;\n    },\n\n    peekBytes(length, forceClamped = false) {\n      var bytes = this.getBytes(length, forceClamped);\n      this.pos -= bytes.length;\n      return bytes;\n    },\n\n    makeSubStream: function DecodeStream_makeSubStream(start, length, dict) {\n      var end = start + length;\n\n      while (this.bufferLength <= end && !this.eof) {\n        this.readBlock();\n      }\n\n      return new Stream(this.buffer, start, length, dict);\n    },\n\n    getByteRange(begin, end) {\n      (0, _util.unreachable)("Should not call DecodeStream.getByteRange");\n    },\n\n    skip: function DecodeStream_skip(n) {\n      if (!n) {\n        n = 1;\n      }\n\n      this.pos += n;\n    },\n    reset: function DecodeStream_reset() {\n      this.pos = 0;\n    },\n    getBaseStreams: function DecodeStream_getBaseStreams() {\n      if (this.str && this.str.getBaseStreams) {\n        return this.str.getBaseStreams();\n      }\n\n      return [];\n    }\n  };\n  return DecodeStream;\n}();\n\nexports.DecodeStream = DecodeStream;\n\nvar StreamsSequenceStream = function StreamsSequenceStreamClosure() {\n  function StreamsSequenceStream(streams) {\n    this.streams = streams;\n    let maybeLength = 0;\n\n    for (let i = 0, ii = streams.length; i < ii; i++) {\n      const stream = streams[i];\n\n      if (stream instanceof DecodeStream) {\n        maybeLength += stream._rawMinBufferLength;\n      } else {\n        maybeLength += stream.length;\n      }\n    }\n\n    DecodeStream.call(this, maybeLength);\n  }\n\n  StreamsSequenceStream.prototype = Object.create(DecodeStream.prototype);\n\n  StreamsSequenceStream.prototype.readBlock = function streamSequenceStreamReadBlock() {\n    var streams = this.streams;\n\n    if (streams.length === 0) {\n      this.eof = true;\n      return;\n    }\n\n    var stream = streams.shift();\n    var chunk = stream.getBytes();\n    var bufferLength = this.bufferLength;\n    var newLength = bufferLength + chunk.length;\n    var buffer = this.ensureBuffer(newLength);\n    buffer.set(chunk, bufferLength);\n    this.bufferLength = newLength;\n  };\n\n  StreamsSequenceStream.prototype.getBaseStreams = function StreamsSequenceStream_getBaseStreams() {\n    var baseStreams = [];\n\n    for (var i = 0, ii = this.streams.length; i < ii; i++) {\n      var stream = this.streams[i];\n\n      if (stream.getBaseStreams) {\n        baseStreams.push(...stream.getBaseStreams());\n      }\n    }\n\n    return baseStreams;\n  };\n\n  return StreamsSequenceStream;\n}();\n\nexports.StreamsSequenceStream = StreamsSequenceStream;\n\nvar FlateStream = function FlateStreamClosure() {\n  var codeLenCodeMap = new Int32Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n  var lengthDecode = new Int32Array([0x00003, 0x00004, 0x00005, 0x00006, 0x00007, 0x00008, 0x00009, 0x0000a, 0x1000b, 0x1000d, 0x1000f, 0x10011, 0x20013, 0x20017, 0x2001b, 0x2001f, 0x30023, 0x3002b, 0x30033, 0x3003b, 0x40043, 0x40053, 0x40063, 0x40073, 0x50083, 0x500a3, 0x500c3, 0x500e3, 0x00102, 0x00102, 0x00102]);\n  var distDecode = new Int32Array([0x00001, 0x00002, 0x00003, 0x00004, 0x10005, 0x10007, 0x20009, 0x2000d, 0x30011, 0x30019, 0x40021, 0x40031, 0x50041, 0x50061, 0x60081, 0x600c1, 0x70101, 0x70181, 0x80201, 0x80301, 0x90401, 0x90601, 0xa0801, 0xa0c01, 0xb1001, 0xb1801, 0xc2001, 0xc3001, 0xd4001, 0xd6001]);\n  var fixedLitCodeTab = [new Int32Array([0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c0, 0x70108, 0x80060, 0x80020, 0x900a0, 0x80000, 0x80080, 0x80040, 0x900e0, 0x70104, 0x80058, 0x80018, 0x90090, 0x70114, 0x80078, 0x80038, 0x900d0, 0x7010c, 0x80068, 0x80028, 0x900b0, 0x80008, 0x80088, 0x80048, 0x900f0, 0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c8, 0x7010a, 0x80064, 0x80024, 0x900a8, 0x80004, 0x80084, 0x80044, 0x900e8, 0x70106, 0x8005c, 0x8001c, 0x90098, 0x70116, 0x8007c, 0x8003c, 0x900d8, 0x7010e, 0x8006c, 0x8002c, 0x900b8, 0x8000c, 0x8008c, 0x8004c, 0x900f8, 0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c4, 0x70109, 0x80062, 0x80022, 0x900a4, 0x80002, 0x80082, 0x80042, 0x900e4, 0x70105, 0x8005a, 0x8001a, 0x90094, 0x70115, 0x8007a, 0x8003a, 0x900d4, 0x7010d, 0x8006a, 0x8002a, 0x900b4, 0x8000a, 0x8008a, 0x8004a, 0x900f4, 0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cc, 0x7010b, 0x80066, 0x80026, 0x900ac, 0x80006, 0x80086, 0x80046, 0x900ec, 0x70107, 0x8005e, 0x8001e, 0x9009c, 0x70117, 0x8007e, 0x8003e, 0x900dc, 0x7010f, 0x8006e, 0x8002e, 0x900bc, 0x8000e, 0x8008e, 0x8004e, 0x900fc, 0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c2, 0x70108, 0x80061, 0x80021, 0x900a2, 0x80001, 0x80081, 0x80041, 0x900e2, 0x70104, 0x80059, 0x80019, 0x90092, 0x70114, 0x80079, 0x80039, 0x900d2, 0x7010c, 0x80069, 0x80029, 0x900b2, 0x80009, 0x80089, 0x80049, 0x900f2, 0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900ca, 0x7010a, 0x80065, 0x80025, 0x900aa, 0x80005, 0x80085, 0x80045, 0x900ea, 0x70106, 0x8005d, 0x8001d, 0x9009a, 0x70116, 0x8007d, 0x8003d, 0x900da, 0x7010e, 0x8006d, 0x8002d, 0x900ba, 0x8000d, 0x8008d, 0x8004d, 0x900fa, 0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c6, 0x70109, 0x80063, 0x80023, 0x900a6, 0x80003, 0x80083, 0x80043, 0x900e6, 0x70105, 0x8005b, 0x8001b, 0x90096, 0x70115, 0x8007b, 0x8003b, 0x900d6, 0x7010d, 0x8006b, 0x8002b, 0x900b6, 0x8000b, 0x8008b, 0x8004b, 0x900f6, 0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900ce, 0x7010b, 0x80067, 0x80027, 0x900ae, 0x80007, 0x80087, 0x80047, 0x900ee, 0x70107, 0x8005f, 0x8001f, 0x9009e, 0x70117, 0x8007f, 0x8003f, 0x900de, 0x7010f, 0x8006f, 0x8002f, 0x900be, 0x8000f, 0x8008f, 0x8004f, 0x900fe, 0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c1, 0x70108, 0x80060, 0x80020, 0x900a1, 0x80000, 0x80080, 0x80040, 0x900e1, 0x70104, 0x80058, 0x80018, 0x90091, 0x70114, 0x80078, 0x80038, 0x900d1, 0x7010c, 0x80068, 0x80028, 0x900b1, 0x80008, 0x80088, 0x80048, 0x900f1, 0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c9, 0x7010a, 0x80064, 0x80024, 0x900a9, 0x80004, 0x80084, 0x80044, 0x900e9, 0x70106, 0x8005c, 0x8001c, 0x90099, 0x70116, 0x8007c, 0x8003c, 0x900d9, 0x7010e, 0x8006c, 0x8002c, 0x900b9, 0x8000c, 0x8008c, 0x8004c, 0x900f9, 0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c5, 0x70109, 0x80062, 0x80022, 0x900a5, 0x80002, 0x80082, 0x80042, 0x900e5, 0x70105, 0x8005a, 0x8001a, 0x90095, 0x70115, 0x8007a, 0x8003a, 0x900d5, 0x7010d, 0x8006a, 0x8002a, 0x900b5, 0x8000a, 0x8008a, 0x8004a, 0x900f5, 0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cd, 0x7010b, 0x80066, 0x80026, 0x900ad, 0x80006, 0x80086, 0x80046, 0x900ed, 0x70107, 0x8005e, 0x8001e, 0x9009d, 0x70117, 0x8007e, 0x8003e, 0x900dd, 0x7010f, 0x8006e, 0x8002e, 0x900bd, 0x8000e, 0x8008e, 0x8004e, 0x900fd, 0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c3, 0x70108, 0x80061, 0x80021, 0x900a3, 0x80001, 0x80081, 0x80041, 0x900e3, 0x70104, 0x80059, 0x80019, 0x90093, 0x70114, 0x80079, 0x80039, 0x900d3, 0x7010c, 0x80069, 0x80029, 0x900b3, 0x80009, 0x80089, 0x80049, 0x900f3, 0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900cb, 0x7010a, 0x80065, 0x80025, 0x900ab, 0x80005, 0x80085, 0x80045, 0x900eb, 0x70106, 0x8005d, 0x8001d, 0x9009b, 0x70116, 0x8007d, 0x8003d, 0x900db, 0x7010e, 0x8006d, 0x8002d, 0x900bb, 0x8000d, 0x8008d, 0x8004d, 0x900fb, 0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c7, 0x70109, 0x80063, 0x80023, 0x900a7, 0x80003, 0x80083, 0x80043, 0x900e7, 0x70105, 0x8005b, 0x8001b, 0x90097, 0x70115, 0x8007b, 0x8003b, 0x900d7, 0x7010d, 0x8006b, 0x8002b, 0x900b7, 0x8000b, 0x8008b, 0x8004b, 0x900f7, 0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900cf, 0x7010b, 0x80067, 0x80027, 0x900af, 0x80007, 0x80087, 0x80047, 0x900ef, 0x70107, 0x8005f, 0x8001f, 0x9009f, 0x70117, 0x8007f, 0x8003f, 0x900df, 0x7010f, 0x8006f, 0x8002f, 0x900bf, 0x8000f, 0x8008f, 0x8004f, 0x900ff]), 9];\n  var fixedDistCodeTab = [new Int32Array([0x50000, 0x50010, 0x50008, 0x50018, 0x50004, 0x50014, 0x5000c, 0x5001c, 0x50002, 0x50012, 0x5000a, 0x5001a, 0x50006, 0x50016, 0x5000e, 0x00000, 0x50001, 0x50011, 0x50009, 0x50019, 0x50005, 0x50015, 0x5000d, 0x5001d, 0x50003, 0x50013, 0x5000b, 0x5001b, 0x50007, 0x50017, 0x5000f, 0x00000]), 5];\n\n  function FlateStream(str, maybeLength) {\n    this.str = str;\n    this.dict = str.dict;\n    var cmf = str.getByte();\n    var flg = str.getByte();\n\n    if (cmf === -1 || flg === -1) {\n      throw new _util.FormatError(`Invalid header in flate stream: ${cmf}, ${flg}`);\n    }\n\n    if ((cmf & 0x0f) !== 0x08) {\n      throw new _util.FormatError(`Unknown compression method in flate stream: ${cmf}, ${flg}`);\n    }\n\n    if (((cmf << 8) + flg) % 31 !== 0) {\n      throw new _util.FormatError(`Bad FCHECK in flate stream: ${cmf}, ${flg}`);\n    }\n\n    if (flg & 0x20) {\n      throw new _util.FormatError(`FDICT bit set in flate stream: ${cmf}, ${flg}`);\n    }\n\n    this.codeSize = 0;\n    this.codeBuf = 0;\n    DecodeStream.call(this, maybeLength);\n  }\n\n  FlateStream.prototype = Object.create(DecodeStream.prototype);\n\n  FlateStream.prototype.getBits = function FlateStream_getBits(bits) {\n    var str = this.str;\n    var codeSize = this.codeSize;\n    var codeBuf = this.codeBuf;\n    var b;\n\n    while (codeSize < bits) {\n      if ((b = str.getByte()) === -1) {\n        throw new _util.FormatError("Bad encoding in flate stream");\n      }\n\n      codeBuf |= b << codeSize;\n      codeSize += 8;\n    }\n\n    b = codeBuf & (1 << bits) - 1;\n    this.codeBuf = codeBuf >> bits;\n    this.codeSize = codeSize -= bits;\n    return b;\n  };\n\n  FlateStream.prototype.getCode = function FlateStream_getCode(table) {\n    var str = this.str;\n    var codes = table[0];\n    var maxLen = table[1];\n    var codeSize = this.codeSize;\n    var codeBuf = this.codeBuf;\n    var b;\n\n    while (codeSize < maxLen) {\n      if ((b = str.getByte()) === -1) {\n        break;\n      }\n\n      codeBuf |= b << codeSize;\n      codeSize += 8;\n    }\n\n    var code = codes[codeBuf & (1 << maxLen) - 1];\n    var codeLen = code >> 16;\n    var codeVal = code & 0xffff;\n\n    if (codeLen < 1 || codeSize < codeLen) {\n      throw new _util.FormatError("Bad encoding in flate stream");\n    }\n\n    this.codeBuf = codeBuf >> codeLen;\n    this.codeSize = codeSize - codeLen;\n    return codeVal;\n  };\n\n  FlateStream.prototype.generateHuffmanTable = function flateStreamGenerateHuffmanTable(lengths) {\n    var n = lengths.length;\n    var maxLen = 0;\n    var i;\n\n    for (i = 0; i < n; ++i) {\n      if (lengths[i] > maxLen) {\n        maxLen = lengths[i];\n      }\n    }\n\n    var size = 1 << maxLen;\n    var codes = new Int32Array(size);\n\n    for (var len = 1, code = 0, skip = 2; len <= maxLen; ++len, code <<= 1, skip <<= 1) {\n      for (var val = 0; val < n; ++val) {\n        if (lengths[val] === len) {\n          var code2 = 0;\n          var t = code;\n\n          for (i = 0; i < len; ++i) {\n            code2 = code2 << 1 | t & 1;\n            t >>= 1;\n          }\n\n          for (i = code2; i < size; i += skip) {\n            codes[i] = len << 16 | val;\n          }\n\n          ++code;\n        }\n      }\n    }\n\n    return [codes, maxLen];\n  };\n\n  FlateStream.prototype.readBlock = function FlateStream_readBlock() {\n    var buffer, len;\n    var str = this.str;\n    var hdr = this.getBits(3);\n\n    if (hdr & 1) {\n      this.eof = true;\n    }\n\n    hdr >>= 1;\n\n    if (hdr === 0) {\n      var b;\n\n      if ((b = str.getByte()) === -1) {\n        throw new _util.FormatError("Bad block header in flate stream");\n      }\n\n      var blockLen = b;\n\n      if ((b = str.getByte()) === -1) {\n        throw new _util.FormatError("Bad block header in flate stream");\n      }\n\n      blockLen |= b << 8;\n\n      if ((b = str.getByte()) === -1) {\n        throw new _util.FormatError("Bad block header in flate stream");\n      }\n\n      var check = b;\n\n      if ((b = str.getByte()) === -1) {\n        throw new _util.FormatError("Bad block header in flate stream");\n      }\n\n      check |= b << 8;\n\n      if (check !== (~blockLen & 0xffff) && (blockLen !== 0 || check !== 0)) {\n        throw new _util.FormatError("Bad uncompressed block length in flate stream");\n      }\n\n      this.codeBuf = 0;\n      this.codeSize = 0;\n      const bufferLength = this.bufferLength,\n            end = bufferLength + blockLen;\n      buffer = this.ensureBuffer(end);\n      this.bufferLength = end;\n\n      if (blockLen === 0) {\n        if (str.peekByte() === -1) {\n          this.eof = true;\n        }\n      } else {\n        const block = str.getBytes(blockLen);\n        buffer.set(block, bufferLength);\n\n        if (block.length < blockLen) {\n          this.eof = true;\n        }\n      }\n\n      return;\n    }\n\n    var litCodeTable;\n    var distCodeTable;\n\n    if (hdr === 1) {\n      litCodeTable = fixedLitCodeTab;\n      distCodeTable = fixedDistCodeTab;\n    } else if (hdr === 2) {\n      var numLitCodes = this.getBits(5) + 257;\n      var numDistCodes = this.getBits(5) + 1;\n      var numCodeLenCodes = this.getBits(4) + 4;\n      var codeLenCodeLengths = new Uint8Array(codeLenCodeMap.length);\n      var i;\n\n      for (i = 0; i < numCodeLenCodes; ++i) {\n        codeLenCodeLengths[codeLenCodeMap[i]] = this.getBits(3);\n      }\n\n      var codeLenCodeTab = this.generateHuffmanTable(codeLenCodeLengths);\n      len = 0;\n      i = 0;\n      var codes = numLitCodes + numDistCodes;\n      var codeLengths = new Uint8Array(codes);\n      var bitsLength, bitsOffset, what;\n\n      while (i < codes) {\n        var code = this.getCode(codeLenCodeTab);\n\n        if (code === 16) {\n          bitsLength = 2;\n          bitsOffset = 3;\n          what = len;\n        } else if (code === 17) {\n          bitsLength = 3;\n          bitsOffset = 3;\n          what = len = 0;\n        } else if (code === 18) {\n          bitsLength = 7;\n          bitsOffset = 11;\n          what = len = 0;\n        } else {\n          codeLengths[i++] = len = code;\n          continue;\n        }\n\n        var repeatLength = this.getBits(bitsLength) + bitsOffset;\n\n        while (repeatLength-- > 0) {\n          codeLengths[i++] = what;\n        }\n      }\n\n      litCodeTable = this.generateHuffmanTable(codeLengths.subarray(0, numLitCodes));\n      distCodeTable = this.generateHuffmanTable(codeLengths.subarray(numLitCodes, codes));\n    } else {\n      throw new _util.FormatError("Unknown block type in flate stream");\n    }\n\n    buffer = this.buffer;\n    var limit = buffer ? buffer.length : 0;\n    var pos = this.bufferLength;\n\n    while (true) {\n      var code1 = this.getCode(litCodeTable);\n\n      if (code1 < 256) {\n        if (pos + 1 >= limit) {\n          buffer = this.ensureBuffer(pos + 1);\n          limit = buffer.length;\n        }\n\n        buffer[pos++] = code1;\n        continue;\n      }\n\n      if (code1 === 256) {\n        this.bufferLength = pos;\n        return;\n      }\n\n      code1 -= 257;\n      code1 = lengthDecode[code1];\n      var code2 = code1 >> 16;\n\n      if (code2 > 0) {\n        code2 = this.getBits(code2);\n      }\n\n      len = (code1 & 0xffff) + code2;\n      code1 = this.getCode(distCodeTable);\n      code1 = distDecode[code1];\n      code2 = code1 >> 16;\n\n      if (code2 > 0) {\n        code2 = this.getBits(code2);\n      }\n\n      var dist = (code1 & 0xffff) + code2;\n\n      if (pos + len >= limit) {\n        buffer = this.ensureBuffer(pos + len);\n        limit = buffer.length;\n      }\n\n      for (var k = 0; k < len; ++k, ++pos) {\n        buffer[pos] = buffer[pos - dist];\n      }\n    }\n  };\n\n  return FlateStream;\n}();\n\nexports.FlateStream = FlateStream;\n\nvar PredictorStream = function PredictorStreamClosure() {\n  function PredictorStream(str, maybeLength, params) {\n    if (!(0, _primitives.isDict)(params)) {\n      return str;\n    }\n\n    var predictor = this.predictor = params.get("Predictor") || 1;\n\n    if (predictor <= 1) {\n      return str;\n    }\n\n    if (predictor !== 2 && (predictor < 10 || predictor > 15)) {\n      throw new _util.FormatError(`Unsupported predictor: ${predictor}`);\n    }\n\n    if (predictor === 2) {\n      this.readBlock = this.readBlockTiff;\n    } else {\n      this.readBlock = this.readBlockPng;\n    }\n\n    this.str = str;\n    this.dict = str.dict;\n    var colors = this.colors = params.get("Colors") || 1;\n    var bits = this.bits = params.get("BitsPerComponent") || 8;\n    var columns = this.columns = params.get("Columns") || 1;\n    this.pixBytes = colors * bits + 7 >> 3;\n    this.rowBytes = columns * colors * bits + 7 >> 3;\n    DecodeStream.call(this, maybeLength);\n    return this;\n  }\n\n  PredictorStream.prototype = Object.create(DecodeStream.prototype);\n\n  PredictorStream.prototype.readBlockTiff = function predictorStreamReadBlockTiff() {\n    var rowBytes = this.rowBytes;\n    var bufferLength = this.bufferLength;\n    var buffer = this.ensureBuffer(bufferLength + rowBytes);\n    var bits = this.bits;\n    var colors = this.colors;\n    var rawBytes = this.str.getBytes(rowBytes);\n    this.eof = !rawBytes.length;\n\n    if (this.eof) {\n      return;\n    }\n\n    var inbuf = 0,\n        outbuf = 0;\n    var inbits = 0,\n        outbits = 0;\n    var pos = bufferLength;\n    var i;\n\n    if (bits === 1 && colors === 1) {\n      for (i = 0; i < rowBytes; ++i) {\n        var c = rawBytes[i] ^ inbuf;\n        c ^= c >> 1;\n        c ^= c >> 2;\n        c ^= c >> 4;\n        inbuf = (c & 1) << 7;\n        buffer[pos++] = c;\n      }\n    } else if (bits === 8) {\n      for (i = 0; i < colors; ++i) {\n        buffer[pos++] = rawBytes[i];\n      }\n\n      for (; i < rowBytes; ++i) {\n        buffer[pos] = buffer[pos - colors] + rawBytes[i];\n        pos++;\n      }\n    } else if (bits === 16) {\n      var bytesPerPixel = colors * 2;\n\n      for (i = 0; i < bytesPerPixel; ++i) {\n        buffer[pos++] = rawBytes[i];\n      }\n\n      for (; i < rowBytes; i += 2) {\n        var sum = ((rawBytes[i] & 0xff) << 8) + (rawBytes[i + 1] & 0xff) + ((buffer[pos - bytesPerPixel] & 0xff) << 8) + (buffer[pos - bytesPerPixel + 1] & 0xff);\n        buffer[pos++] = sum >> 8 & 0xff;\n        buffer[pos++] = sum & 0xff;\n      }\n    } else {\n      var compArray = new Uint8Array(colors + 1);\n      var bitMask = (1 << bits) - 1;\n      var j = 0,\n          k = bufferLength;\n      var columns = this.columns;\n\n      for (i = 0; i < columns; ++i) {\n        for (var kk = 0; kk < colors; ++kk) {\n          if (inbits < bits) {\n            inbuf = inbuf << 8 | rawBytes[j++] & 0xff;\n            inbits += 8;\n          }\n\n          compArray[kk] = compArray[kk] + (inbuf >> inbits - bits) & bitMask;\n          inbits -= bits;\n          outbuf = outbuf << bits | compArray[kk];\n          outbits += bits;\n\n          if (outbits >= 8) {\n            buffer[k++] = outbuf >> outbits - 8 & 0xff;\n            outbits -= 8;\n          }\n        }\n      }\n\n      if (outbits > 0) {\n        buffer[k++] = (outbuf << 8 - outbits) + (inbuf & (1 << 8 - outbits) - 1);\n      }\n    }\n\n    this.bufferLength += rowBytes;\n  };\n\n  PredictorStream.prototype.readBlockPng = function predictorStreamReadBlockPng() {\n    var rowBytes = this.rowBytes;\n    var pixBytes = this.pixBytes;\n    var predictor = this.str.getByte();\n    var rawBytes = this.str.getBytes(rowBytes);\n    this.eof = !rawBytes.length;\n\n    if (this.eof) {\n      return;\n    }\n\n    var bufferLength = this.bufferLength;\n    var buffer = this.ensureBuffer(bufferLength + rowBytes);\n    var prevRow = buffer.subarray(bufferLength - rowBytes, bufferLength);\n\n    if (prevRow.length === 0) {\n      prevRow = new Uint8Array(rowBytes);\n    }\n\n    var i,\n        j = bufferLength,\n        up,\n        c;\n\n    switch (predictor) {\n      case 0:\n        for (i = 0; i < rowBytes; ++i) {\n          buffer[j++] = rawBytes[i];\n        }\n\n        break;\n\n      case 1:\n        for (i = 0; i < pixBytes; ++i) {\n          buffer[j++] = rawBytes[i];\n        }\n\n        for (; i < rowBytes; ++i) {\n          buffer[j] = buffer[j - pixBytes] + rawBytes[i] & 0xff;\n          j++;\n        }\n\n        break;\n\n      case 2:\n        for (i = 0; i < rowBytes; ++i) {\n          buffer[j++] = prevRow[i] + rawBytes[i] & 0xff;\n        }\n\n        break;\n\n      case 3:\n        for (i = 0; i < pixBytes; ++i) {\n          buffer[j++] = (prevRow[i] >> 1) + rawBytes[i];\n        }\n\n        for (; i < rowBytes; ++i) {\n          buffer[j] = (prevRow[i] + buffer[j - pixBytes] >> 1) + rawBytes[i] & 0xff;\n          j++;\n        }\n\n        break;\n\n      case 4:\n        for (i = 0; i < pixBytes; ++i) {\n          up = prevRow[i];\n          c = rawBytes[i];\n          buffer[j++] = up + c;\n        }\n\n        for (; i < rowBytes; ++i) {\n          up = prevRow[i];\n          var upLeft = prevRow[i - pixBytes];\n          var left = buffer[j - pixBytes];\n          var p = left + up - upLeft;\n          var pa = p - left;\n\n          if (pa < 0) {\n            pa = -pa;\n          }\n\n          var pb = p - up;\n\n          if (pb < 0) {\n            pb = -pb;\n          }\n\n          var pc = p - upLeft;\n\n          if (pc < 0) {\n            pc = -pc;\n          }\n\n          c = rawBytes[i];\n\n          if (pa <= pb && pa <= pc) {\n            buffer[j++] = left + c;\n          } else if (pb <= pc) {\n            buffer[j++] = up + c;\n          } else {\n            buffer[j++] = upLeft + c;\n          }\n        }\n\n        break;\n\n      default:\n        throw new _util.FormatError(`Unsupported predictor: ${predictor}`);\n    }\n\n    this.bufferLength += rowBytes;\n  };\n\n  return PredictorStream;\n}();\n\nexports.PredictorStream = PredictorStream;\n\nvar DecryptStream = function DecryptStreamClosure() {\n  function DecryptStream(str, maybeLength, decrypt) {\n    this.str = str;\n    this.dict = str.dict;\n    this.decrypt = decrypt;\n    this.nextChunk = null;\n    this.initialized = false;\n    DecodeStream.call(this, maybeLength);\n  }\n\n  var chunkSize = 512;\n  DecryptStream.prototype = Object.create(DecodeStream.prototype);\n\n  DecryptStream.prototype.readBlock = function DecryptStream_readBlock() {\n    var chunk;\n\n    if (this.initialized) {\n      chunk = this.nextChunk;\n    } else {\n      chunk = this.str.getBytes(chunkSize);\n      this.initialized = true;\n    }\n\n    if (!chunk || chunk.length === 0) {\n      this.eof = true;\n      return;\n    }\n\n    this.nextChunk = this.str.getBytes(chunkSize);\n    var hasMoreData = this.nextChunk && this.nextChunk.length > 0;\n    var decrypt = this.decrypt;\n    chunk = decrypt(chunk, !hasMoreData);\n    var bufferLength = this.bufferLength;\n    var i,\n        n = chunk.length;\n    var buffer = this.ensureBuffer(bufferLength + n);\n\n    for (i = 0; i < n; i++) {\n      buffer[bufferLength++] = chunk[i];\n    }\n\n    this.bufferLength = bufferLength;\n  };\n\n  return DecryptStream;\n}();\n\nexports.DecryptStream = DecryptStream;\n\nvar Ascii85Stream = function Ascii85StreamClosure() {\n  function Ascii85Stream(str, maybeLength) {\n    this.str = str;\n    this.dict = str.dict;\n    this.input = new Uint8Array(5);\n\n    if (maybeLength) {\n      maybeLength = 0.8 * maybeLength;\n    }\n\n    DecodeStream.call(this, maybeLength);\n  }\n\n  Ascii85Stream.prototype = Object.create(DecodeStream.prototype);\n\n  Ascii85Stream.prototype.readBlock = function Ascii85Stream_readBlock() {\n    var TILDA_CHAR = 0x7e;\n    var Z_LOWER_CHAR = 0x7a;\n    var EOF = -1;\n    var str = this.str;\n    var c = str.getByte();\n\n    while ((0, _core_utils.isWhiteSpace)(c)) {\n      c = str.getByte();\n    }\n\n    if (c === EOF || c === TILDA_CHAR) {\n      this.eof = true;\n      return;\n    }\n\n    var bufferLength = this.bufferLength,\n        buffer;\n    var i;\n\n    if (c === Z_LOWER_CHAR) {\n      buffer = this.ensureBuffer(bufferLength + 4);\n\n      for (i = 0; i < 4; ++i) {\n        buffer[bufferLength + i] = 0;\n      }\n\n      this.bufferLength += 4;\n    } else {\n      var input = this.input;\n      input[0] = c;\n\n      for (i = 1; i < 5; ++i) {\n        c = str.getByte();\n\n        while ((0, _core_utils.isWhiteSpace)(c)) {\n          c = str.getByte();\n        }\n\n        input[i] = c;\n\n        if (c === EOF || c === TILDA_CHAR) {\n          break;\n        }\n      }\n\n      buffer = this.ensureBuffer(bufferLength + i - 1);\n      this.bufferLength += i - 1;\n\n      if (i < 5) {\n        for (; i < 5; ++i) {\n          input[i] = 0x21 + 84;\n        }\n\n        this.eof = true;\n      }\n\n      var t = 0;\n\n      for (i = 0; i < 5; ++i) {\n        t = t * 85 + (input[i] - 0x21);\n      }\n\n      for (i = 3; i >= 0; --i) {\n        buffer[bufferLength + i] = t & 0xff;\n        t >>= 8;\n      }\n    }\n  };\n\n  return Ascii85Stream;\n}();\n\nexports.Ascii85Stream = Ascii85Stream;\n\nvar AsciiHexStream = function AsciiHexStreamClosure() {\n  function AsciiHexStream(str, maybeLength) {\n    this.str = str;\n    this.dict = str.dict;\n    this.firstDigit = -1;\n\n    if (maybeLength) {\n      maybeLength = 0.5 * maybeLength;\n    }\n\n    DecodeStream.call(this, maybeLength);\n  }\n\n  AsciiHexStream.prototype = Object.create(DecodeStream.prototype);\n\n  AsciiHexStream.prototype.readBlock = function AsciiHexStream_readBlock() {\n    var UPSTREAM_BLOCK_SIZE = 8000;\n    var bytes = this.str.getBytes(UPSTREAM_BLOCK_SIZE);\n\n    if (!bytes.length) {\n      this.eof = true;\n      return;\n    }\n\n    var maxDecodeLength = bytes.length + 1 >> 1;\n    var buffer = this.ensureBuffer(this.bufferLength + maxDecodeLength);\n    var bufferLength = this.bufferLength;\n    var firstDigit = this.firstDigit;\n\n    for (var i = 0, ii = bytes.length; i < ii; i++) {\n      var ch = bytes[i],\n          digit;\n\n      if (ch >= 0x30 && ch <= 0x39) {\n        digit = ch & 0x0f;\n      } else if (ch >= 0x41 && ch <= 0x46 || ch >= 0x61 && ch <= 0x66) {\n        digit = (ch & 0x0f) + 9;\n      } else if (ch === 0x3e) {\n        this.eof = true;\n        break;\n      } else {\n        continue;\n      }\n\n      if (firstDigit < 0) {\n        firstDigit = digit;\n      } else {\n        buffer[bufferLength++] = firstDigit << 4 | digit;\n        firstDigit = -1;\n      }\n    }\n\n    if (firstDigit >= 0 && this.eof) {\n      buffer[bufferLength++] = firstDigit << 4;\n      firstDigit = -1;\n    }\n\n    this.firstDigit = firstDigit;\n    this.bufferLength = bufferLength;\n  };\n\n  return AsciiHexStream;\n}();\n\nexports.AsciiHexStream = AsciiHexStream;\n\nvar RunLengthStream = function RunLengthStreamClosure() {\n  function RunLengthStream(str, maybeLength) {\n    this.str = str;\n    this.dict = str.dict;\n    DecodeStream.call(this, maybeLength);\n  }\n\n  RunLengthStream.prototype = Object.create(DecodeStream.prototype);\n\n  RunLengthStream.prototype.readBlock = function RunLengthStream_readBlock() {\n    var repeatHeader = this.str.getBytes(2);\n\n    if (!repeatHeader || repeatHeader.length < 2 || repeatHeader[0] === 128) {\n      this.eof = true;\n      return;\n    }\n\n    var buffer;\n    var bufferLength = this.bufferLength;\n    var n = repeatHeader[0];\n\n    if (n < 128) {\n      buffer = this.ensureBuffer(bufferLength + n + 1);\n      buffer[bufferLength++] = repeatHeader[1];\n\n      if (n > 0) {\n        var source = this.str.getBytes(n);\n        buffer.set(source, bufferLength);\n        bufferLength += n;\n      }\n    } else {\n      n = 257 - n;\n      var b = repeatHeader[1];\n      buffer = this.ensureBuffer(bufferLength + n + 1);\n\n      for (var i = 0; i < n; i++) {\n        buffer[bufferLength++] = b;\n      }\n    }\n\n    this.bufferLength = bufferLength;\n  };\n\n  return RunLengthStream;\n}();\n\nexports.RunLengthStream = RunLengthStream;\n\nvar LZWStream = function LZWStreamClosure() {\n  function LZWStream(str, maybeLength, earlyChange) {\n    this.str = str;\n    this.dict = str.dict;\n    this.cachedData = 0;\n    this.bitsCached = 0;\n    var maxLzwDictionarySize = 4096;\n    var lzwState = {\n      earlyChange,\n      codeLength: 9,\n      nextCode: 258,\n      dictionaryValues: new Uint8Array(maxLzwDictionarySize),\n      dictionaryLengths: new Uint16Array(maxLzwDictionarySize),\n      dictionaryPrevCodes: new Uint16Array(maxLzwDictionarySize),\n      currentSequence: new Uint8Array(maxLzwDictionarySize),\n      currentSequenceLength: 0\n    };\n\n    for (var i = 0; i < 256; ++i) {\n      lzwState.dictionaryValues[i] = i;\n      lzwState.dictionaryLengths[i] = 1;\n    }\n\n    this.lzwState = lzwState;\n    DecodeStream.call(this, maybeLength);\n  }\n\n  LZWStream.prototype = Object.create(DecodeStream.prototype);\n\n  LZWStream.prototype.readBits = function LZWStream_readBits(n) {\n    var bitsCached = this.bitsCached;\n    var cachedData = this.cachedData;\n\n    while (bitsCached < n) {\n      var c = this.str.getByte();\n\n      if (c === -1) {\n        this.eof = true;\n        return null;\n      }\n\n      cachedData = cachedData << 8 | c;\n      bitsCached += 8;\n    }\n\n    this.bitsCached = bitsCached -= n;\n    this.cachedData = cachedData;\n    this.lastCode = null;\n    return cachedData >>> bitsCached & (1 << n) - 1;\n  };\n\n  LZWStream.prototype.readBlock = function LZWStream_readBlock() {\n    var blockSize = 512;\n    var estimatedDecodedSize = blockSize * 2,\n        decodedSizeDelta = blockSize;\n    var i, j, q;\n    var lzwState = this.lzwState;\n\n    if (!lzwState) {\n      return;\n    }\n\n    var earlyChange = lzwState.earlyChange;\n    var nextCode = lzwState.nextCode;\n    var dictionaryValues = lzwState.dictionaryValues;\n    var dictionaryLengths = lzwState.dictionaryLengths;\n    var dictionaryPrevCodes = lzwState.dictionaryPrevCodes;\n    var codeLength = lzwState.codeLength;\n    var prevCode = lzwState.prevCode;\n    var currentSequence = lzwState.currentSequence;\n    var currentSequenceLength = lzwState.currentSequenceLength;\n    var decodedLength = 0;\n    var currentBufferLength = this.bufferLength;\n    var buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n\n    for (i = 0; i < blockSize; i++) {\n      var code = this.readBits(codeLength);\n      var hasPrev = currentSequenceLength > 0;\n\n      if (code < 256) {\n        currentSequence[0] = code;\n        currentSequenceLength = 1;\n      } else if (code >= 258) {\n        if (code < nextCode) {\n          currentSequenceLength = dictionaryLengths[code];\n\n          for (j = currentSequenceLength - 1, q = code; j >= 0; j--) {\n            currentSequence[j] = dictionaryValues[q];\n            q = dictionaryPrevCodes[q];\n          }\n        } else {\n          currentSequence[currentSequenceLength++] = currentSequence[0];\n        }\n      } else if (code === 256) {\n        codeLength = 9;\n        nextCode = 258;\n        currentSequenceLength = 0;\n        continue;\n      } else {\n        this.eof = true;\n        delete this.lzwState;\n        break;\n      }\n\n      if (hasPrev) {\n        dictionaryPrevCodes[nextCode] = prevCode;\n        dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;\n        dictionaryValues[nextCode] = currentSequence[0];\n        nextCode++;\n        codeLength = nextCode + earlyChange & nextCode + earlyChange - 1 ? codeLength : Math.min(Math.log(nextCode + earlyChange) / 0.6931471805599453 + 1, 12) | 0;\n      }\n\n      prevCode = code;\n      decodedLength += currentSequenceLength;\n\n      if (estimatedDecodedSize < decodedLength) {\n        do {\n          estimatedDecodedSize += decodedSizeDelta;\n        } while (estimatedDecodedSize < decodedLength);\n\n        buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n      }\n\n      for (j = 0; j < currentSequenceLength; j++) {\n        buffer[currentBufferLength++] = currentSequence[j];\n      }\n    }\n\n    lzwState.nextCode = nextCode;\n    lzwState.codeLength = codeLength;\n    lzwState.prevCode = prevCode;\n    lzwState.currentSequenceLength = currentSequenceLength;\n    this.bufferLength = currentBufferLength;\n  };\n\n  return LZWStream;\n}();\n\nexports.LZWStream = LZWStream;\n\nvar NullStream = function NullStreamClosure() {\n  function NullStream() {\n    Stream.call(this, new Uint8Array(0));\n  }\n\n  NullStream.prototype = Stream.prototype;\n  return NullStream;\n}();\n\nexports.NullStream = NullStream;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/stream.js\n')},"./node_modules/pdfjs-dist/lib/core/type1_parser.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.Type1Parser = void 0;\n\nvar _encodings = __webpack_require__(/*! ./encodings.js */ "./node_modules/pdfjs-dist/lib/core/encodings.js");\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nvar _stream = __webpack_require__(/*! ./stream.js */ "./node_modules/pdfjs-dist/lib/core/stream.js");\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar HINTING_ENABLED = false;\n\nvar Type1CharString = function Type1CharStringClosure() {\n  var COMMAND_MAP = {\n    hstem: [1],\n    vstem: [3],\n    vmoveto: [4],\n    rlineto: [5],\n    hlineto: [6],\n    vlineto: [7],\n    rrcurveto: [8],\n    callsubr: [10],\n    flex: [12, 35],\n    drop: [12, 18],\n    endchar: [14],\n    rmoveto: [21],\n    hmoveto: [22],\n    vhcurveto: [30],\n    hvcurveto: [31]\n  };\n\n  function Type1CharString() {\n    this.width = 0;\n    this.lsb = 0;\n    this.flexing = false;\n    this.output = [];\n    this.stack = [];\n  }\n\n  Type1CharString.prototype = {\n    convert: function Type1CharString_convert(encoded, subrs, seacAnalysisEnabled) {\n      var count = encoded.length;\n      var error = false;\n      var wx, sbx, subrNumber;\n\n      for (var i = 0; i < count; i++) {\n        var value = encoded[i];\n\n        if (value < 32) {\n          if (value === 12) {\n            value = (value << 8) + encoded[++i];\n          }\n\n          switch (value) {\n            case 1:\n              if (!HINTING_ENABLED) {\n                this.stack = [];\n                break;\n              }\n\n              error = this.executeCommand(2, COMMAND_MAP.hstem);\n              break;\n\n            case 3:\n              if (!HINTING_ENABLED) {\n                this.stack = [];\n                break;\n              }\n\n              error = this.executeCommand(2, COMMAND_MAP.vstem);\n              break;\n\n            case 4:\n              if (this.flexing) {\n                if (this.stack.length < 1) {\n                  error = true;\n                  break;\n                }\n\n                var dy = this.stack.pop();\n                this.stack.push(0, dy);\n                break;\n              }\n\n              error = this.executeCommand(1, COMMAND_MAP.vmoveto);\n              break;\n\n            case 5:\n              error = this.executeCommand(2, COMMAND_MAP.rlineto);\n              break;\n\n            case 6:\n              error = this.executeCommand(1, COMMAND_MAP.hlineto);\n              break;\n\n            case 7:\n              error = this.executeCommand(1, COMMAND_MAP.vlineto);\n              break;\n\n            case 8:\n              error = this.executeCommand(6, COMMAND_MAP.rrcurveto);\n              break;\n\n            case 9:\n              this.stack = [];\n              break;\n\n            case 10:\n              if (this.stack.length < 1) {\n                error = true;\n                break;\n              }\n\n              subrNumber = this.stack.pop();\n\n              if (!subrs[subrNumber]) {\n                error = true;\n                break;\n              }\n\n              error = this.convert(subrs[subrNumber], subrs, seacAnalysisEnabled);\n              break;\n\n            case 11:\n              return error;\n\n            case 13:\n              if (this.stack.length < 2) {\n                error = true;\n                break;\n              }\n\n              wx = this.stack.pop();\n              sbx = this.stack.pop();\n              this.lsb = sbx;\n              this.width = wx;\n              this.stack.push(wx, sbx);\n              error = this.executeCommand(2, COMMAND_MAP.hmoveto);\n              break;\n\n            case 14:\n              this.output.push(COMMAND_MAP.endchar[0]);\n              break;\n\n            case 21:\n              if (this.flexing) {\n                break;\n              }\n\n              error = this.executeCommand(2, COMMAND_MAP.rmoveto);\n              break;\n\n            case 22:\n              if (this.flexing) {\n                this.stack.push(0);\n                break;\n              }\n\n              error = this.executeCommand(1, COMMAND_MAP.hmoveto);\n              break;\n\n            case 30:\n              error = this.executeCommand(4, COMMAND_MAP.vhcurveto);\n              break;\n\n            case 31:\n              error = this.executeCommand(4, COMMAND_MAP.hvcurveto);\n              break;\n\n            case (12 << 8) + 0:\n              this.stack = [];\n              break;\n\n            case (12 << 8) + 1:\n              if (!HINTING_ENABLED) {\n                this.stack = [];\n                break;\n              }\n\n              error = this.executeCommand(2, COMMAND_MAP.vstem);\n              break;\n\n            case (12 << 8) + 2:\n              if (!HINTING_ENABLED) {\n                this.stack = [];\n                break;\n              }\n\n              error = this.executeCommand(2, COMMAND_MAP.hstem);\n              break;\n\n            case (12 << 8) + 6:\n              if (seacAnalysisEnabled) {\n                const asb = this.stack[this.stack.length - 5];\n                this.seac = this.stack.splice(-4, 4);\n                this.seac[0] += this.lsb - asb;\n                error = this.executeCommand(0, COMMAND_MAP.endchar);\n              } else {\n                error = this.executeCommand(4, COMMAND_MAP.endchar);\n              }\n\n              break;\n\n            case (12 << 8) + 7:\n              if (this.stack.length < 4) {\n                error = true;\n                break;\n              }\n\n              this.stack.pop();\n              wx = this.stack.pop();\n              var sby = this.stack.pop();\n              sbx = this.stack.pop();\n              this.lsb = sbx;\n              this.width = wx;\n              this.stack.push(wx, sbx, sby);\n              error = this.executeCommand(3, COMMAND_MAP.rmoveto);\n              break;\n\n            case (12 << 8) + 12:\n              if (this.stack.length < 2) {\n                error = true;\n                break;\n              }\n\n              var num2 = this.stack.pop();\n              var num1 = this.stack.pop();\n              this.stack.push(num1 / num2);\n              break;\n\n            case (12 << 8) + 16:\n              if (this.stack.length < 2) {\n                error = true;\n                break;\n              }\n\n              subrNumber = this.stack.pop();\n              var numArgs = this.stack.pop();\n\n              if (subrNumber === 0 && numArgs === 3) {\n                var flexArgs = this.stack.splice(this.stack.length - 17, 17);\n                this.stack.push(flexArgs[2] + flexArgs[0], flexArgs[3] + flexArgs[1], flexArgs[4], flexArgs[5], flexArgs[6], flexArgs[7], flexArgs[8], flexArgs[9], flexArgs[10], flexArgs[11], flexArgs[12], flexArgs[13], flexArgs[14]);\n                error = this.executeCommand(13, COMMAND_MAP.flex, true);\n                this.flexing = false;\n                this.stack.push(flexArgs[15], flexArgs[16]);\n              } else if (subrNumber === 1 && numArgs === 0) {\n                this.flexing = true;\n              }\n\n              break;\n\n            case (12 << 8) + 17:\n              break;\n\n            case (12 << 8) + 33:\n              this.stack = [];\n              break;\n\n            default:\n              (0, _util.warn)(\'Unknown type 1 charstring command of "\' + value + \'"\');\n              break;\n          }\n\n          if (error) {\n            break;\n          }\n\n          continue;\n        } else if (value <= 246) {\n          value = value - 139;\n        } else if (value <= 250) {\n          value = (value - 247) * 256 + encoded[++i] + 108;\n        } else if (value <= 254) {\n          value = -((value - 251) * 256) - encoded[++i] - 108;\n        } else {\n          value = (encoded[++i] & 0xff) << 24 | (encoded[++i] & 0xff) << 16 | (encoded[++i] & 0xff) << 8 | (encoded[++i] & 0xff) << 0;\n        }\n\n        this.stack.push(value);\n      }\n\n      return error;\n    },\n\n    executeCommand(howManyArgs, command, keepStack) {\n      var stackLength = this.stack.length;\n\n      if (howManyArgs > stackLength) {\n        return true;\n      }\n\n      var start = stackLength - howManyArgs;\n\n      for (var i = start; i < stackLength; i++) {\n        var value = this.stack[i];\n\n        if (Number.isInteger(value)) {\n          this.output.push(28, value >> 8 & 0xff, value & 0xff);\n        } else {\n          value = 65536 * value | 0;\n          this.output.push(255, value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n        }\n      }\n\n      this.output.push.apply(this.output, command);\n\n      if (keepStack) {\n        this.stack.splice(start, howManyArgs);\n      } else {\n        this.stack.length = 0;\n      }\n\n      return false;\n    }\n\n  };\n  return Type1CharString;\n}();\n\nvar Type1Parser = function Type1ParserClosure() {\n  var EEXEC_ENCRYPT_KEY = 55665;\n  var CHAR_STRS_ENCRYPT_KEY = 4330;\n\n  function isHexDigit(code) {\n    return code >= 48 && code <= 57 || code >= 65 && code <= 70 || code >= 97 && code <= 102;\n  }\n\n  function decrypt(data, key, discardNumber) {\n    if (discardNumber >= data.length) {\n      return new Uint8Array(0);\n    }\n\n    var r = key | 0,\n        c1 = 52845,\n        c2 = 22719,\n        i,\n        j;\n\n    for (i = 0; i < discardNumber; i++) {\n      r = (data[i] + r) * c1 + c2 & (1 << 16) - 1;\n    }\n\n    var count = data.length - discardNumber;\n    var decrypted = new Uint8Array(count);\n\n    for (i = discardNumber, j = 0; j < count; i++, j++) {\n      var value = data[i];\n      decrypted[j] = value ^ r >> 8;\n      r = (value + r) * c1 + c2 & (1 << 16) - 1;\n    }\n\n    return decrypted;\n  }\n\n  function decryptAscii(data, key, discardNumber) {\n    var r = key | 0,\n        c1 = 52845,\n        c2 = 22719;\n    var count = data.length,\n        maybeLength = count >>> 1;\n    var decrypted = new Uint8Array(maybeLength);\n    var i, j;\n\n    for (i = 0, j = 0; i < count; i++) {\n      var digit1 = data[i];\n\n      if (!isHexDigit(digit1)) {\n        continue;\n      }\n\n      i++;\n      var digit2;\n\n      while (i < count && !isHexDigit(digit2 = data[i])) {\n        i++;\n      }\n\n      if (i < count) {\n        var value = parseInt(String.fromCharCode(digit1, digit2), 16);\n        decrypted[j++] = value ^ r >> 8;\n        r = (value + r) * c1 + c2 & (1 << 16) - 1;\n      }\n    }\n\n    return decrypted.slice(discardNumber, j);\n  }\n\n  function isSpecial(c) {\n    return c === 0x2f || c === 0x5b || c === 0x5d || c === 0x7b || c === 0x7d || c === 0x28 || c === 0x29;\n  }\n\n  function Type1Parser(stream, encrypted, seacAnalysisEnabled) {\n    if (encrypted) {\n      var data = stream.getBytes();\n      var isBinary = !((isHexDigit(data[0]) || (0, _core_utils.isWhiteSpace)(data[0])) && isHexDigit(data[1]) && isHexDigit(data[2]) && isHexDigit(data[3]) && isHexDigit(data[4]) && isHexDigit(data[5]) && isHexDigit(data[6]) && isHexDigit(data[7]));\n      stream = new _stream.Stream(isBinary ? decrypt(data, EEXEC_ENCRYPT_KEY, 4) : decryptAscii(data, EEXEC_ENCRYPT_KEY, 4));\n    }\n\n    this.seacAnalysisEnabled = !!seacAnalysisEnabled;\n    this.stream = stream;\n    this.nextChar();\n  }\n\n  Type1Parser.prototype = {\n    readNumberArray: function Type1Parser_readNumberArray() {\n      this.getToken();\n      var array = [];\n\n      while (true) {\n        var token = this.getToken();\n\n        if (token === null || token === "]" || token === "}") {\n          break;\n        }\n\n        array.push(parseFloat(token || 0));\n      }\n\n      return array;\n    },\n    readNumber: function Type1Parser_readNumber() {\n      var token = this.getToken();\n      return parseFloat(token || 0);\n    },\n    readInt: function Type1Parser_readInt() {\n      var token = this.getToken();\n      return parseInt(token || 0, 10) | 0;\n    },\n    readBoolean: function Type1Parser_readBoolean() {\n      var token = this.getToken();\n      return token === "true" ? 1 : 0;\n    },\n    nextChar: function Type1_nextChar() {\n      return this.currentChar = this.stream.getByte();\n    },\n    getToken: function Type1Parser_getToken() {\n      var comment = false;\n      var ch = this.currentChar;\n\n      while (true) {\n        if (ch === -1) {\n          return null;\n        }\n\n        if (comment) {\n          if (ch === 0x0a || ch === 0x0d) {\n            comment = false;\n          }\n        } else if (ch === 0x25) {\n          comment = true;\n        } else if (!(0, _core_utils.isWhiteSpace)(ch)) {\n          break;\n        }\n\n        ch = this.nextChar();\n      }\n\n      if (isSpecial(ch)) {\n        this.nextChar();\n        return String.fromCharCode(ch);\n      }\n\n      var token = "";\n\n      do {\n        token += String.fromCharCode(ch);\n        ch = this.nextChar();\n      } while (ch >= 0 && !(0, _core_utils.isWhiteSpace)(ch) && !isSpecial(ch));\n\n      return token;\n    },\n    readCharStrings: function Type1Parser_readCharStrings(bytes, lenIV) {\n      if (lenIV === -1) {\n        return bytes;\n      }\n\n      return decrypt(bytes, CHAR_STRS_ENCRYPT_KEY, lenIV);\n    },\n    extractFontProgram: function Type1Parser_extractFontProgram(properties) {\n      var stream = this.stream;\n      var subrs = [],\n          charstrings = [];\n      var privateData = Object.create(null);\n      privateData.lenIV = 4;\n      var program = {\n        subrs: [],\n        charstrings: [],\n        properties: {\n          privateData\n        }\n      };\n      var token, length, data, lenIV, encoded;\n\n      while ((token = this.getToken()) !== null) {\n        if (token !== "/") {\n          continue;\n        }\n\n        token = this.getToken();\n\n        switch (token) {\n          case "CharStrings":\n            this.getToken();\n            this.getToken();\n            this.getToken();\n            this.getToken();\n\n            while (true) {\n              token = this.getToken();\n\n              if (token === null || token === "end") {\n                break;\n              }\n\n              if (token !== "/") {\n                continue;\n              }\n\n              var glyph = this.getToken();\n              length = this.readInt();\n              this.getToken();\n              data = length > 0 ? stream.getBytes(length) : new Uint8Array(0);\n              lenIV = program.properties.privateData.lenIV;\n              encoded = this.readCharStrings(data, lenIV);\n              this.nextChar();\n              token = this.getToken();\n\n              if (token === "noaccess") {\n                this.getToken();\n              }\n\n              charstrings.push({\n                glyph,\n                encoded\n              });\n            }\n\n            break;\n\n          case "Subrs":\n            this.readInt();\n            this.getToken();\n\n            while (this.getToken() === "dup") {\n              const index = this.readInt();\n              length = this.readInt();\n              this.getToken();\n              data = length > 0 ? stream.getBytes(length) : new Uint8Array(0);\n              lenIV = program.properties.privateData.lenIV;\n              encoded = this.readCharStrings(data, lenIV);\n              this.nextChar();\n              token = this.getToken();\n\n              if (token === "noaccess") {\n                this.getToken();\n              }\n\n              subrs[index] = encoded;\n            }\n\n            break;\n\n          case "BlueValues":\n          case "OtherBlues":\n          case "FamilyBlues":\n          case "FamilyOtherBlues":\n            var blueArray = this.readNumberArray();\n\n            if (blueArray.length > 0 && blueArray.length % 2 === 0 && HINTING_ENABLED) {\n              program.properties.privateData[token] = blueArray;\n            }\n\n            break;\n\n          case "StemSnapH":\n          case "StemSnapV":\n            program.properties.privateData[token] = this.readNumberArray();\n            break;\n\n          case "StdHW":\n          case "StdVW":\n            program.properties.privateData[token] = this.readNumberArray()[0];\n            break;\n\n          case "BlueShift":\n          case "lenIV":\n          case "BlueFuzz":\n          case "BlueScale":\n          case "LanguageGroup":\n          case "ExpansionFactor":\n            program.properties.privateData[token] = this.readNumber();\n            break;\n\n          case "ForceBold":\n            program.properties.privateData[token] = this.readBoolean();\n            break;\n        }\n      }\n\n      for (var i = 0; i < charstrings.length; i++) {\n        glyph = charstrings[i].glyph;\n        encoded = charstrings[i].encoded;\n        var charString = new Type1CharString();\n        var error = charString.convert(encoded, subrs, this.seacAnalysisEnabled);\n        var output = charString.output;\n\n        if (error) {\n          output = [14];\n        }\n\n        const charStringObject = {\n          glyphName: glyph,\n          charstring: output,\n          width: charString.width,\n          lsb: charString.lsb,\n          seac: charString.seac\n        };\n\n        if (glyph === ".notdef") {\n          program.charstrings.unshift(charStringObject);\n        } else {\n          program.charstrings.push(charStringObject);\n        }\n\n        if (properties.builtInEncoding) {\n          const index = properties.builtInEncoding.indexOf(glyph);\n\n          if (index > -1 && properties.widths[index] === undefined && index >= properties.firstChar && index <= properties.lastChar) {\n            properties.widths[index] = charString.width;\n          }\n        }\n      }\n\n      return program;\n    },\n    extractFontHeader: function Type1Parser_extractFontHeader(properties) {\n      var token;\n\n      while ((token = this.getToken()) !== null) {\n        if (token !== "/") {\n          continue;\n        }\n\n        token = this.getToken();\n\n        switch (token) {\n          case "FontMatrix":\n            var matrix = this.readNumberArray();\n            properties.fontMatrix = matrix;\n            break;\n\n          case "Encoding":\n            var encodingArg = this.getToken();\n            var encoding;\n\n            if (!/^\\d+$/.test(encodingArg)) {\n              encoding = (0, _encodings.getEncoding)(encodingArg);\n            } else {\n              encoding = [];\n              var size = parseInt(encodingArg, 10) | 0;\n              this.getToken();\n\n              for (var j = 0; j < size; j++) {\n                token = this.getToken();\n\n                while (token !== "dup" && token !== "def") {\n                  token = this.getToken();\n\n                  if (token === null) {\n                    return;\n                  }\n                }\n\n                if (token === "def") {\n                  break;\n                }\n\n                var index = this.readInt();\n                this.getToken();\n                var glyph = this.getToken();\n                encoding[index] = glyph;\n                this.getToken();\n              }\n            }\n\n            properties.builtInEncoding = encoding;\n            break;\n\n          case "FontBBox":\n            var fontBBox = this.readNumberArray();\n            properties.ascent = Math.max(fontBBox[3], fontBBox[1]);\n            properties.descent = Math.min(fontBBox[1], fontBBox[3]);\n            properties.ascentScaled = true;\n            break;\n        }\n      }\n    }\n  };\n  return Type1Parser;\n}();\n\nexports.Type1Parser = Type1Parser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/type1_parser.js\n')},"./node_modules/pdfjs-dist/lib/core/unicode.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.getUnicodeForGlyph = getUnicodeForGlyph;\nexports.getUnicodeRangeFor = getUnicodeRangeFor;\nexports.mapSpecialUnicodeValues = mapSpecialUnicodeValues;\nexports.reverseIfRtl = reverseIfRtl;\nexports.getNormalizedUnicodes = void 0;\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nvar getSpecialPUASymbols = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t[63721] = 0x00a9;\n  t[63193] = 0x00a9;\n  t[63720] = 0x00ae;\n  t[63194] = 0x00ae;\n  t[63722] = 0x2122;\n  t[63195] = 0x2122;\n  t[63729] = 0x23a7;\n  t[63730] = 0x23a8;\n  t[63731] = 0x23a9;\n  t[63740] = 0x23ab;\n  t[63741] = 0x23ac;\n  t[63742] = 0x23ad;\n  t[63726] = 0x23a1;\n  t[63727] = 0x23a2;\n  t[63728] = 0x23a3;\n  t[63737] = 0x23a4;\n  t[63738] = 0x23a5;\n  t[63739] = 0x23a6;\n  t[63723] = 0x239b;\n  t[63724] = 0x239c;\n  t[63725] = 0x239d;\n  t[63734] = 0x239e;\n  t[63735] = 0x239f;\n  t[63736] = 0x23a0;\n});\n\nfunction mapSpecialUnicodeValues(code) {\n  if (code >= 0xfff0 && code <= 0xffff) {\n    return 0;\n  } else if (code >= 0xf600 && code <= 0xf8ff) {\n    return getSpecialPUASymbols()[code] || code;\n  } else if (code === 0x00ad) {\n    return 0x002d;\n  }\n\n  return code;\n}\n\nfunction getUnicodeForGlyph(name, glyphsUnicodeMap) {\n  var unicode = glyphsUnicodeMap[name];\n\n  if (unicode !== undefined) {\n    return unicode;\n  }\n\n  if (!name) {\n    return -1;\n  }\n\n  if (name[0] === "u") {\n    var nameLen = name.length,\n        hexStr;\n\n    if (nameLen === 7 && name[1] === "n" && name[2] === "i") {\n      hexStr = name.substring(3);\n    } else if (nameLen >= 5 && nameLen <= 7) {\n      hexStr = name.substring(1);\n    } else {\n      return -1;\n    }\n\n    if (hexStr === hexStr.toUpperCase()) {\n      unicode = parseInt(hexStr, 16);\n\n      if (unicode >= 0) {\n        return unicode;\n      }\n    }\n  }\n\n  return -1;\n}\n\nvar UnicodeRanges = [{\n  begin: 0x0000,\n  end: 0x007f\n}, {\n  begin: 0x0080,\n  end: 0x00ff\n}, {\n  begin: 0x0100,\n  end: 0x017f\n}, {\n  begin: 0x0180,\n  end: 0x024f\n}, {\n  begin: 0x0250,\n  end: 0x02af\n}, {\n  begin: 0x02b0,\n  end: 0x02ff\n}, {\n  begin: 0x0300,\n  end: 0x036f\n}, {\n  begin: 0x0370,\n  end: 0x03ff\n}, {\n  begin: 0x2c80,\n  end: 0x2cff\n}, {\n  begin: 0x0400,\n  end: 0x04ff\n}, {\n  begin: 0x0530,\n  end: 0x058f\n}, {\n  begin: 0x0590,\n  end: 0x05ff\n}, {\n  begin: 0xa500,\n  end: 0xa63f\n}, {\n  begin: 0x0600,\n  end: 0x06ff\n}, {\n  begin: 0x07c0,\n  end: 0x07ff\n}, {\n  begin: 0x0900,\n  end: 0x097f\n}, {\n  begin: 0x0980,\n  end: 0x09ff\n}, {\n  begin: 0x0a00,\n  end: 0x0a7f\n}, {\n  begin: 0x0a80,\n  end: 0x0aff\n}, {\n  begin: 0x0b00,\n  end: 0x0b7f\n}, {\n  begin: 0x0b80,\n  end: 0x0bff\n}, {\n  begin: 0x0c00,\n  end: 0x0c7f\n}, {\n  begin: 0x0c80,\n  end: 0x0cff\n}, {\n  begin: 0x0d00,\n  end: 0x0d7f\n}, {\n  begin: 0x0e00,\n  end: 0x0e7f\n}, {\n  begin: 0x0e80,\n  end: 0x0eff\n}, {\n  begin: 0x10a0,\n  end: 0x10ff\n}, {\n  begin: 0x1b00,\n  end: 0x1b7f\n}, {\n  begin: 0x1100,\n  end: 0x11ff\n}, {\n  begin: 0x1e00,\n  end: 0x1eff\n}, {\n  begin: 0x1f00,\n  end: 0x1fff\n}, {\n  begin: 0x2000,\n  end: 0x206f\n}, {\n  begin: 0x2070,\n  end: 0x209f\n}, {\n  begin: 0x20a0,\n  end: 0x20cf\n}, {\n  begin: 0x20d0,\n  end: 0x20ff\n}, {\n  begin: 0x2100,\n  end: 0x214f\n}, {\n  begin: 0x2150,\n  end: 0x218f\n}, {\n  begin: 0x2190,\n  end: 0x21ff\n}, {\n  begin: 0x2200,\n  end: 0x22ff\n}, {\n  begin: 0x2300,\n  end: 0x23ff\n}, {\n  begin: 0x2400,\n  end: 0x243f\n}, {\n  begin: 0x2440,\n  end: 0x245f\n}, {\n  begin: 0x2460,\n  end: 0x24ff\n}, {\n  begin: 0x2500,\n  end: 0x257f\n}, {\n  begin: 0x2580,\n  end: 0x259f\n}, {\n  begin: 0x25a0,\n  end: 0x25ff\n}, {\n  begin: 0x2600,\n  end: 0x26ff\n}, {\n  begin: 0x2700,\n  end: 0x27bf\n}, {\n  begin: 0x3000,\n  end: 0x303f\n}, {\n  begin: 0x3040,\n  end: 0x309f\n}, {\n  begin: 0x30a0,\n  end: 0x30ff\n}, {\n  begin: 0x3100,\n  end: 0x312f\n}, {\n  begin: 0x3130,\n  end: 0x318f\n}, {\n  begin: 0xa840,\n  end: 0xa87f\n}, {\n  begin: 0x3200,\n  end: 0x32ff\n}, {\n  begin: 0x3300,\n  end: 0x33ff\n}, {\n  begin: 0xac00,\n  end: 0xd7af\n}, {\n  begin: 0xd800,\n  end: 0xdfff\n}, {\n  begin: 0x10900,\n  end: 0x1091f\n}, {\n  begin: 0x4e00,\n  end: 0x9fff\n}, {\n  begin: 0xe000,\n  end: 0xf8ff\n}, {\n  begin: 0x31c0,\n  end: 0x31ef\n}, {\n  begin: 0xfb00,\n  end: 0xfb4f\n}, {\n  begin: 0xfb50,\n  end: 0xfdff\n}, {\n  begin: 0xfe20,\n  end: 0xfe2f\n}, {\n  begin: 0xfe10,\n  end: 0xfe1f\n}, {\n  begin: 0xfe50,\n  end: 0xfe6f\n}, {\n  begin: 0xfe70,\n  end: 0xfeff\n}, {\n  begin: 0xff00,\n  end: 0xffef\n}, {\n  begin: 0xfff0,\n  end: 0xffff\n}, {\n  begin: 0x0f00,\n  end: 0x0fff\n}, {\n  begin: 0x0700,\n  end: 0x074f\n}, {\n  begin: 0x0780,\n  end: 0x07bf\n}, {\n  begin: 0x0d80,\n  end: 0x0dff\n}, {\n  begin: 0x1000,\n  end: 0x109f\n}, {\n  begin: 0x1200,\n  end: 0x137f\n}, {\n  begin: 0x13a0,\n  end: 0x13ff\n}, {\n  begin: 0x1400,\n  end: 0x167f\n}, {\n  begin: 0x1680,\n  end: 0x169f\n}, {\n  begin: 0x16a0,\n  end: 0x16ff\n}, {\n  begin: 0x1780,\n  end: 0x17ff\n}, {\n  begin: 0x1800,\n  end: 0x18af\n}, {\n  begin: 0x2800,\n  end: 0x28ff\n}, {\n  begin: 0xa000,\n  end: 0xa48f\n}, {\n  begin: 0x1700,\n  end: 0x171f\n}, {\n  begin: 0x10300,\n  end: 0x1032f\n}, {\n  begin: 0x10330,\n  end: 0x1034f\n}, {\n  begin: 0x10400,\n  end: 0x1044f\n}, {\n  begin: 0x1d000,\n  end: 0x1d0ff\n}, {\n  begin: 0x1d400,\n  end: 0x1d7ff\n}, {\n  begin: 0xff000,\n  end: 0xffffd\n}, {\n  begin: 0xfe00,\n  end: 0xfe0f\n}, {\n  begin: 0xe0000,\n  end: 0xe007f\n}, {\n  begin: 0x1900,\n  end: 0x194f\n}, {\n  begin: 0x1950,\n  end: 0x197f\n}, {\n  begin: 0x1980,\n  end: 0x19df\n}, {\n  begin: 0x1a00,\n  end: 0x1a1f\n}, {\n  begin: 0x2c00,\n  end: 0x2c5f\n}, {\n  begin: 0x2d30,\n  end: 0x2d7f\n}, {\n  begin: 0x4dc0,\n  end: 0x4dff\n}, {\n  begin: 0xa800,\n  end: 0xa82f\n}, {\n  begin: 0x10000,\n  end: 0x1007f\n}, {\n  begin: 0x10140,\n  end: 0x1018f\n}, {\n  begin: 0x10380,\n  end: 0x1039f\n}, {\n  begin: 0x103a0,\n  end: 0x103df\n}, {\n  begin: 0x10450,\n  end: 0x1047f\n}, {\n  begin: 0x10480,\n  end: 0x104af\n}, {\n  begin: 0x10800,\n  end: 0x1083f\n}, {\n  begin: 0x10a00,\n  end: 0x10a5f\n}, {\n  begin: 0x1d300,\n  end: 0x1d35f\n}, {\n  begin: 0x12000,\n  end: 0x123ff\n}, {\n  begin: 0x1d360,\n  end: 0x1d37f\n}, {\n  begin: 0x1b80,\n  end: 0x1bbf\n}, {\n  begin: 0x1c00,\n  end: 0x1c4f\n}, {\n  begin: 0x1c50,\n  end: 0x1c7f\n}, {\n  begin: 0xa880,\n  end: 0xa8df\n}, {\n  begin: 0xa900,\n  end: 0xa92f\n}, {\n  begin: 0xa930,\n  end: 0xa95f\n}, {\n  begin: 0xaa00,\n  end: 0xaa5f\n}, {\n  begin: 0x10190,\n  end: 0x101cf\n}, {\n  begin: 0x101d0,\n  end: 0x101ff\n}, {\n  begin: 0x102a0,\n  end: 0x102df\n}, {\n  begin: 0x1f030,\n  end: 0x1f09f\n}];\n\nfunction getUnicodeRangeFor(value) {\n  for (var i = 0, ii = UnicodeRanges.length; i < ii; i++) {\n    var range = UnicodeRanges[i];\n\n    if (value >= range.begin && value < range.end) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction isRTLRangeFor(value) {\n  var range = UnicodeRanges[13];\n\n  if (value >= range.begin && value < range.end) {\n    return true;\n  }\n\n  range = UnicodeRanges[11];\n\n  if (value >= range.begin && value < range.end) {\n    return true;\n  }\n\n  return false;\n}\n\nvar getNormalizedUnicodes = (0, _core_utils.getArrayLookupTableFactory)(function () {\n  return ["\\u00A8", "\\u0020\\u0308", "\\u00AF", "\\u0020\\u0304", "\\u00B4", "\\u0020\\u0301", "\\u00B5", "\\u03BC", "\\u00B8", "\\u0020\\u0327", "\\u0132", "\\u0049\\u004A", "\\u0133", "\\u0069\\u006A", "\\u013F", "\\u004C\\u00B7", "\\u0140", "\\u006C\\u00B7", "\\u0149", "\\u02BC\\u006E", "\\u017F", "\\u0073", "\\u01C4", "\\u0044\\u017D", "\\u01C5", "\\u0044\\u017E", "\\u01C6", "\\u0064\\u017E", "\\u01C7", "\\u004C\\u004A", "\\u01C8", "\\u004C\\u006A", "\\u01C9", "\\u006C\\u006A", "\\u01CA", "\\u004E\\u004A", "\\u01CB", "\\u004E\\u006A", "\\u01CC", "\\u006E\\u006A", "\\u01F1", "\\u0044\\u005A", "\\u01F2", "\\u0044\\u007A", "\\u01F3", "\\u0064\\u007A", "\\u02D8", "\\u0020\\u0306", "\\u02D9", "\\u0020\\u0307", "\\u02DA", "\\u0020\\u030A", "\\u02DB", "\\u0020\\u0328", "\\u02DC", "\\u0020\\u0303", "\\u02DD", "\\u0020\\u030B", "\\u037A", "\\u0020\\u0345", "\\u0384", "\\u0020\\u0301", "\\u03D0", "\\u03B2", "\\u03D1", "\\u03B8", "\\u03D2", "\\u03A5", "\\u03D5", "\\u03C6", "\\u03D6", "\\u03C0", "\\u03F0", "\\u03BA", "\\u03F1", "\\u03C1", "\\u03F2", "\\u03C2", "\\u03F4", "\\u0398", "\\u03F5", "\\u03B5", "\\u03F9", "\\u03A3", "\\u0587", "\\u0565\\u0582", "\\u0675", "\\u0627\\u0674", "\\u0676", "\\u0648\\u0674", "\\u0677", "\\u06C7\\u0674", "\\u0678", "\\u064A\\u0674", "\\u0E33", "\\u0E4D\\u0E32", "\\u0EB3", "\\u0ECD\\u0EB2", "\\u0EDC", "\\u0EAB\\u0E99", "\\u0EDD", "\\u0EAB\\u0EA1", "\\u0F77", "\\u0FB2\\u0F81", "\\u0F79", "\\u0FB3\\u0F81", "\\u1E9A", "\\u0061\\u02BE", "\\u1FBD", "\\u0020\\u0313", "\\u1FBF", "\\u0020\\u0313", "\\u1FC0", "\\u0020\\u0342", "\\u1FFE", "\\u0020\\u0314", "\\u2002", "\\u0020", "\\u2003", "\\u0020", "\\u2004", "\\u0020", "\\u2005", "\\u0020", "\\u2006", "\\u0020", "\\u2008", "\\u0020", "\\u2009", "\\u0020", "\\u200A", "\\u0020", "\\u2017", "\\u0020\\u0333", "\\u2024", "\\u002E", "\\u2025", "\\u002E\\u002E", "\\u2026", "\\u002E\\u002E\\u002E", "\\u2033", "\\u2032\\u2032", "\\u2034", "\\u2032\\u2032\\u2032", "\\u2036", "\\u2035\\u2035", "\\u2037", "\\u2035\\u2035\\u2035", "\\u203C", "\\u0021\\u0021", "\\u203E", "\\u0020\\u0305", "\\u2047", "\\u003F\\u003F", "\\u2048", "\\u003F\\u0021", "\\u2049", "\\u0021\\u003F", "\\u2057", "\\u2032\\u2032\\u2032\\u2032", "\\u205F", "\\u0020", "\\u20A8", "\\u0052\\u0073", "\\u2100", "\\u0061\\u002F\\u0063", "\\u2101", "\\u0061\\u002F\\u0073", "\\u2103", "\\u00B0\\u0043", "\\u2105", "\\u0063\\u002F\\u006F", "\\u2106", "\\u0063\\u002F\\u0075", "\\u2107", "\\u0190", "\\u2109", "\\u00B0\\u0046", "\\u2116", "\\u004E\\u006F", "\\u2121", "\\u0054\\u0045\\u004C", "\\u2135", "\\u05D0", "\\u2136", "\\u05D1", "\\u2137", "\\u05D2", "\\u2138", "\\u05D3", "\\u213B", "\\u0046\\u0041\\u0058", "\\u2160", "\\u0049", "\\u2161", "\\u0049\\u0049", "\\u2162", "\\u0049\\u0049\\u0049", "\\u2163", "\\u0049\\u0056", "\\u2164", "\\u0056", "\\u2165", "\\u0056\\u0049", "\\u2166", "\\u0056\\u0049\\u0049", "\\u2167", "\\u0056\\u0049\\u0049\\u0049", "\\u2168", "\\u0049\\u0058", "\\u2169", "\\u0058", "\\u216A", "\\u0058\\u0049", "\\u216B", "\\u0058\\u0049\\u0049", "\\u216C", "\\u004C", "\\u216D", "\\u0043", "\\u216E", "\\u0044", "\\u216F", "\\u004D", "\\u2170", "\\u0069", "\\u2171", "\\u0069\\u0069", "\\u2172", "\\u0069\\u0069\\u0069", "\\u2173", "\\u0069\\u0076", "\\u2174", "\\u0076", "\\u2175", "\\u0076\\u0069", "\\u2176", "\\u0076\\u0069\\u0069", "\\u2177", "\\u0076\\u0069\\u0069\\u0069", "\\u2178", "\\u0069\\u0078", "\\u2179", "\\u0078", "\\u217A", "\\u0078\\u0069", "\\u217B", "\\u0078\\u0069\\u0069", "\\u217C", "\\u006C", "\\u217D", "\\u0063", "\\u217E", "\\u0064", "\\u217F", "\\u006D", "\\u222C", "\\u222B\\u222B", "\\u222D", "\\u222B\\u222B\\u222B", "\\u222F", "\\u222E\\u222E", "\\u2230", "\\u222E\\u222E\\u222E", "\\u2474", "\\u0028\\u0031\\u0029", "\\u2475", "\\u0028\\u0032\\u0029", "\\u2476", "\\u0028\\u0033\\u0029", "\\u2477", "\\u0028\\u0034\\u0029", "\\u2478", "\\u0028\\u0035\\u0029", "\\u2479", "\\u0028\\u0036\\u0029", "\\u247A", "\\u0028\\u0037\\u0029", "\\u247B", "\\u0028\\u0038\\u0029", "\\u247C", "\\u0028\\u0039\\u0029", "\\u247D", "\\u0028\\u0031\\u0030\\u0029", "\\u247E", "\\u0028\\u0031\\u0031\\u0029", "\\u247F", "\\u0028\\u0031\\u0032\\u0029", "\\u2480", "\\u0028\\u0031\\u0033\\u0029", "\\u2481", "\\u0028\\u0031\\u0034\\u0029", "\\u2482", "\\u0028\\u0031\\u0035\\u0029", "\\u2483", "\\u0028\\u0031\\u0036\\u0029", "\\u2484", "\\u0028\\u0031\\u0037\\u0029", "\\u2485", "\\u0028\\u0031\\u0038\\u0029", "\\u2486", "\\u0028\\u0031\\u0039\\u0029", "\\u2487", "\\u0028\\u0032\\u0030\\u0029", "\\u2488", "\\u0031\\u002E", "\\u2489", "\\u0032\\u002E", "\\u248A", "\\u0033\\u002E", "\\u248B", "\\u0034\\u002E", "\\u248C", "\\u0035\\u002E", "\\u248D", "\\u0036\\u002E", "\\u248E", "\\u0037\\u002E", "\\u248F", "\\u0038\\u002E", "\\u2490", "\\u0039\\u002E", "\\u2491", "\\u0031\\u0030\\u002E", "\\u2492", "\\u0031\\u0031\\u002E", "\\u2493", "\\u0031\\u0032\\u002E", "\\u2494", "\\u0031\\u0033\\u002E", "\\u2495", "\\u0031\\u0034\\u002E", "\\u2496", "\\u0031\\u0035\\u002E", "\\u2497", "\\u0031\\u0036\\u002E", "\\u2498", "\\u0031\\u0037\\u002E", "\\u2499", "\\u0031\\u0038\\u002E", "\\u249A", "\\u0031\\u0039\\u002E", "\\u249B", "\\u0032\\u0030\\u002E", "\\u249C", "\\u0028\\u0061\\u0029", "\\u249D", "\\u0028\\u0062\\u0029", "\\u249E", "\\u0028\\u0063\\u0029", "\\u249F", "\\u0028\\u0064\\u0029", "\\u24A0", "\\u0028\\u0065\\u0029", "\\u24A1", "\\u0028\\u0066\\u0029", "\\u24A2", "\\u0028\\u0067\\u0029", "\\u24A3", "\\u0028\\u0068\\u0029", "\\u24A4", "\\u0028\\u0069\\u0029", "\\u24A5", "\\u0028\\u006A\\u0029", "\\u24A6", "\\u0028\\u006B\\u0029", "\\u24A7", "\\u0028\\u006C\\u0029", "\\u24A8", "\\u0028\\u006D\\u0029", "\\u24A9", "\\u0028\\u006E\\u0029", "\\u24AA", "\\u0028\\u006F\\u0029", "\\u24AB", "\\u0028\\u0070\\u0029", "\\u24AC", "\\u0028\\u0071\\u0029", "\\u24AD", "\\u0028\\u0072\\u0029", "\\u24AE", "\\u0028\\u0073\\u0029", "\\u24AF", "\\u0028\\u0074\\u0029", "\\u24B0", "\\u0028\\u0075\\u0029", "\\u24B1", "\\u0028\\u0076\\u0029", "\\u24B2", "\\u0028\\u0077\\u0029", "\\u24B3", "\\u0028\\u0078\\u0029", "\\u24B4", "\\u0028\\u0079\\u0029", "\\u24B5", "\\u0028\\u007A\\u0029", "\\u2A0C", "\\u222B\\u222B\\u222B\\u222B", "\\u2A74", "\\u003A\\u003A\\u003D", "\\u2A75", "\\u003D\\u003D", "\\u2A76", "\\u003D\\u003D\\u003D", "\\u2E9F", "\\u6BCD", "\\u2EF3", "\\u9F9F", "\\u2F00", "\\u4E00", "\\u2F01", "\\u4E28", "\\u2F02", "\\u4E36", "\\u2F03", "\\u4E3F", "\\u2F04", "\\u4E59", "\\u2F05", "\\u4E85", "\\u2F06", "\\u4E8C", "\\u2F07", "\\u4EA0", "\\u2F08", "\\u4EBA", "\\u2F09", "\\u513F", "\\u2F0A", "\\u5165", "\\u2F0B", "\\u516B", "\\u2F0C", "\\u5182", "\\u2F0D", "\\u5196", "\\u2F0E", "\\u51AB", "\\u2F0F", "\\u51E0", "\\u2F10", "\\u51F5", "\\u2F11", "\\u5200", "\\u2F12", "\\u529B", "\\u2F13", "\\u52F9", "\\u2F14", "\\u5315", "\\u2F15", "\\u531A", "\\u2F16", "\\u5338", "\\u2F17", "\\u5341", "\\u2F18", "\\u535C", "\\u2F19", "\\u5369", "\\u2F1A", "\\u5382", "\\u2F1B", "\\u53B6", "\\u2F1C", "\\u53C8", "\\u2F1D", "\\u53E3", "\\u2F1E", "\\u56D7", "\\u2F1F", "\\u571F", "\\u2F20", "\\u58EB", "\\u2F21", "\\u5902", "\\u2F22", "\\u590A", "\\u2F23", "\\u5915", "\\u2F24", "\\u5927", "\\u2F25", "\\u5973", "\\u2F26", "\\u5B50", "\\u2F27", "\\u5B80", "\\u2F28", "\\u5BF8", "\\u2F29", "\\u5C0F", "\\u2F2A", "\\u5C22", "\\u2F2B", "\\u5C38", "\\u2F2C", "\\u5C6E", "\\u2F2D", "\\u5C71", "\\u2F2E", "\\u5DDB", "\\u2F2F", "\\u5DE5", "\\u2F30", "\\u5DF1", "\\u2F31", "\\u5DFE", "\\u2F32", "\\u5E72", "\\u2F33", "\\u5E7A", "\\u2F34", "\\u5E7F", "\\u2F35", "\\u5EF4", "\\u2F36", "\\u5EFE", "\\u2F37", "\\u5F0B", "\\u2F38", "\\u5F13", "\\u2F39", "\\u5F50", "\\u2F3A", "\\u5F61", "\\u2F3B", "\\u5F73", "\\u2F3C", "\\u5FC3", "\\u2F3D", "\\u6208", "\\u2F3E", "\\u6236", "\\u2F3F", "\\u624B", "\\u2F40", "\\u652F", "\\u2F41", "\\u6534", "\\u2F42", "\\u6587", "\\u2F43", "\\u6597", "\\u2F44", "\\u65A4", "\\u2F45", "\\u65B9", "\\u2F46", "\\u65E0", "\\u2F47", "\\u65E5", "\\u2F48", "\\u66F0", "\\u2F49", "\\u6708", "\\u2F4A", "\\u6728", "\\u2F4B", "\\u6B20", "\\u2F4C", "\\u6B62", "\\u2F4D", "\\u6B79", "\\u2F4E", "\\u6BB3", "\\u2F4F", "\\u6BCB", "\\u2F50", "\\u6BD4", "\\u2F51", "\\u6BDB", "\\u2F52", "\\u6C0F", "\\u2F53", "\\u6C14", "\\u2F54", "\\u6C34", "\\u2F55", "\\u706B", "\\u2F56", "\\u722A", "\\u2F57", "\\u7236", "\\u2F58", "\\u723B", "\\u2F59", "\\u723F", "\\u2F5A", "\\u7247", "\\u2F5B", "\\u7259", "\\u2F5C", "\\u725B", "\\u2F5D", "\\u72AC", "\\u2F5E", "\\u7384", "\\u2F5F", "\\u7389", "\\u2F60", "\\u74DC", "\\u2F61", "\\u74E6", "\\u2F62", "\\u7518", "\\u2F63", "\\u751F", "\\u2F64", "\\u7528", "\\u2F65", "\\u7530", "\\u2F66", "\\u758B", "\\u2F67", "\\u7592", "\\u2F68", "\\u7676", "\\u2F69", "\\u767D", "\\u2F6A", "\\u76AE", "\\u2F6B", "\\u76BF", "\\u2F6C", "\\u76EE", "\\u2F6D", "\\u77DB", "\\u2F6E", "\\u77E2", "\\u2F6F", "\\u77F3", "\\u2F70", "\\u793A", "\\u2F71", "\\u79B8", "\\u2F72", "\\u79BE", "\\u2F73", "\\u7A74", "\\u2F74", "\\u7ACB", "\\u2F75", "\\u7AF9", "\\u2F76", "\\u7C73", "\\u2F77", "\\u7CF8", "\\u2F78", "\\u7F36", "\\u2F79", "\\u7F51", "\\u2F7A", "\\u7F8A", "\\u2F7B", "\\u7FBD", "\\u2F7C", "\\u8001", "\\u2F7D", "\\u800C", "\\u2F7E", "\\u8012", "\\u2F7F", "\\u8033", "\\u2F80", "\\u807F", "\\u2F81", "\\u8089", "\\u2F82", "\\u81E3", "\\u2F83", "\\u81EA", "\\u2F84", "\\u81F3", "\\u2F85", "\\u81FC", "\\u2F86", "\\u820C", "\\u2F87", "\\u821B", "\\u2F88", "\\u821F", "\\u2F89", "\\u826E", "\\u2F8A", "\\u8272", "\\u2F8B", "\\u8278", "\\u2F8C", "\\u864D", "\\u2F8D", "\\u866B", "\\u2F8E", "\\u8840", "\\u2F8F", "\\u884C", "\\u2F90", "\\u8863", "\\u2F91", "\\u897E", "\\u2F92", "\\u898B", "\\u2F93", "\\u89D2", "\\u2F94", "\\u8A00", "\\u2F95", "\\u8C37", "\\u2F96", "\\u8C46", "\\u2F97", "\\u8C55", "\\u2F98", "\\u8C78", "\\u2F99", "\\u8C9D", "\\u2F9A", "\\u8D64", "\\u2F9B", "\\u8D70", "\\u2F9C", "\\u8DB3", "\\u2F9D", "\\u8EAB", "\\u2F9E", "\\u8ECA", "\\u2F9F", "\\u8F9B", "\\u2FA0", "\\u8FB0", "\\u2FA1", "\\u8FB5", "\\u2FA2", "\\u9091", "\\u2FA3", "\\u9149", "\\u2FA4", "\\u91C6", "\\u2FA5", "\\u91CC", "\\u2FA6", "\\u91D1", "\\u2FA7", "\\u9577", "\\u2FA8", "\\u9580", "\\u2FA9", "\\u961C", "\\u2FAA", "\\u96B6", "\\u2FAB", "\\u96B9", "\\u2FAC", "\\u96E8", "\\u2FAD", "\\u9751", "\\u2FAE", "\\u975E", "\\u2FAF", "\\u9762", "\\u2FB0", "\\u9769", "\\u2FB1", "\\u97CB", "\\u2FB2", "\\u97ED", "\\u2FB3", "\\u97F3", "\\u2FB4", "\\u9801", "\\u2FB5", "\\u98A8", "\\u2FB6", "\\u98DB", "\\u2FB7", "\\u98DF", "\\u2FB8", "\\u9996", "\\u2FB9", "\\u9999", "\\u2FBA", "\\u99AC", "\\u2FBB", "\\u9AA8", "\\u2FBC", "\\u9AD8", "\\u2FBD", "\\u9ADF", "\\u2FBE", "\\u9B25", "\\u2FBF", "\\u9B2F", "\\u2FC0", "\\u9B32", "\\u2FC1", "\\u9B3C", "\\u2FC2", "\\u9B5A", "\\u2FC3", "\\u9CE5", "\\u2FC4", "\\u9E75", "\\u2FC5", "\\u9E7F", "\\u2FC6", "\\u9EA5", "\\u2FC7", "\\u9EBB", "\\u2FC8", "\\u9EC3", "\\u2FC9", "\\u9ECD", "\\u2FCA", "\\u9ED1", "\\u2FCB", "\\u9EF9", "\\u2FCC", "\\u9EFD", "\\u2FCD", "\\u9F0E", "\\u2FCE", "\\u9F13", "\\u2FCF", "\\u9F20", "\\u2FD0", "\\u9F3B", "\\u2FD1", "\\u9F4A", "\\u2FD2", "\\u9F52", "\\u2FD3", "\\u9F8D", "\\u2FD4", "\\u9F9C", "\\u2FD5", "\\u9FA0", "\\u3036", "\\u3012", "\\u3038", "\\u5341", "\\u3039", "\\u5344", "\\u303A", "\\u5345", "\\u309B", "\\u0020\\u3099", "\\u309C", "\\u0020\\u309A", "\\u3131", "\\u1100", "\\u3132", "\\u1101", "\\u3133", "\\u11AA", "\\u3134", "\\u1102", "\\u3135", "\\u11AC", "\\u3136", "\\u11AD", "\\u3137", "\\u1103", "\\u3138", "\\u1104", "\\u3139", "\\u1105", "\\u313A", "\\u11B0", "\\u313B", "\\u11B1", "\\u313C", "\\u11B2", "\\u313D", "\\u11B3", "\\u313E", "\\u11B4", "\\u313F", "\\u11B5", "\\u3140", "\\u111A", "\\u3141", "\\u1106", "\\u3142", "\\u1107", "\\u3143", "\\u1108", "\\u3144", "\\u1121", "\\u3145", "\\u1109", "\\u3146", "\\u110A", "\\u3147", "\\u110B", "\\u3148", "\\u110C", "\\u3149", "\\u110D", "\\u314A", "\\u110E", "\\u314B", "\\u110F", "\\u314C", "\\u1110", "\\u314D", "\\u1111", "\\u314E", "\\u1112", "\\u314F", "\\u1161", "\\u3150", "\\u1162", "\\u3151", "\\u1163", "\\u3152", "\\u1164", "\\u3153", "\\u1165", "\\u3154", "\\u1166", "\\u3155", "\\u1167", "\\u3156", "\\u1168", "\\u3157", "\\u1169", "\\u3158", "\\u116A", "\\u3159", "\\u116B", "\\u315A", "\\u116C", "\\u315B", "\\u116D", "\\u315C", "\\u116E", "\\u315D", "\\u116F", "\\u315E", "\\u1170", "\\u315F", "\\u1171", "\\u3160", "\\u1172", "\\u3161", "\\u1173", "\\u3162", "\\u1174", "\\u3163", "\\u1175", "\\u3164", "\\u1160", "\\u3165", "\\u1114", "\\u3166", "\\u1115", "\\u3167", "\\u11C7", "\\u3168", "\\u11C8", "\\u3169", "\\u11CC", "\\u316A", "\\u11CE", "\\u316B", "\\u11D3", "\\u316C", "\\u11D7", "\\u316D", "\\u11D9", "\\u316E", "\\u111C", "\\u316F", "\\u11DD", "\\u3170", "\\u11DF", "\\u3171", "\\u111D", "\\u3172", "\\u111E", "\\u3173", "\\u1120", "\\u3174", "\\u1122", "\\u3175", "\\u1123", "\\u3176", "\\u1127", "\\u3177", "\\u1129", "\\u3178", "\\u112B", "\\u3179", "\\u112C", "\\u317A", "\\u112D", "\\u317B", "\\u112E", "\\u317C", "\\u112F", "\\u317D", "\\u1132", "\\u317E", "\\u1136", "\\u317F", "\\u1140", "\\u3180", "\\u1147", "\\u3181", "\\u114C", "\\u3182", "\\u11F1", "\\u3183", "\\u11F2", "\\u3184", "\\u1157", "\\u3185", "\\u1158", "\\u3186", "\\u1159", "\\u3187", "\\u1184", "\\u3188", "\\u1185", "\\u3189", "\\u1188", "\\u318A", "\\u1191", "\\u318B", "\\u1192", "\\u318C", "\\u1194", "\\u318D", "\\u119E", "\\u318E", "\\u11A1", "\\u3200", "\\u0028\\u1100\\u0029", "\\u3201", "\\u0028\\u1102\\u0029", "\\u3202", "\\u0028\\u1103\\u0029", "\\u3203", "\\u0028\\u1105\\u0029", "\\u3204", "\\u0028\\u1106\\u0029", "\\u3205", "\\u0028\\u1107\\u0029", "\\u3206", "\\u0028\\u1109\\u0029", "\\u3207", "\\u0028\\u110B\\u0029", "\\u3208", "\\u0028\\u110C\\u0029", "\\u3209", "\\u0028\\u110E\\u0029", "\\u320A", "\\u0028\\u110F\\u0029", "\\u320B", "\\u0028\\u1110\\u0029", "\\u320C", "\\u0028\\u1111\\u0029", "\\u320D", "\\u0028\\u1112\\u0029", "\\u320E", "\\u0028\\u1100\\u1161\\u0029", "\\u320F", "\\u0028\\u1102\\u1161\\u0029", "\\u3210", "\\u0028\\u1103\\u1161\\u0029", "\\u3211", "\\u0028\\u1105\\u1161\\u0029", "\\u3212", "\\u0028\\u1106\\u1161\\u0029", "\\u3213", "\\u0028\\u1107\\u1161\\u0029", "\\u3214", "\\u0028\\u1109\\u1161\\u0029", "\\u3215", "\\u0028\\u110B\\u1161\\u0029", "\\u3216", "\\u0028\\u110C\\u1161\\u0029", "\\u3217", "\\u0028\\u110E\\u1161\\u0029", "\\u3218", "\\u0028\\u110F\\u1161\\u0029", "\\u3219", "\\u0028\\u1110\\u1161\\u0029", "\\u321A", "\\u0028\\u1111\\u1161\\u0029", "\\u321B", "\\u0028\\u1112\\u1161\\u0029", "\\u321C", "\\u0028\\u110C\\u116E\\u0029", "\\u321D", "\\u0028\\u110B\\u1169\\u110C\\u1165\\u11AB\\u0029", "\\u321E", "\\u0028\\u110B\\u1169\\u1112\\u116E\\u0029", "\\u3220", "\\u0028\\u4E00\\u0029", "\\u3221", "\\u0028\\u4E8C\\u0029", "\\u3222", "\\u0028\\u4E09\\u0029", "\\u3223", "\\u0028\\u56DB\\u0029", "\\u3224", "\\u0028\\u4E94\\u0029", "\\u3225", "\\u0028\\u516D\\u0029", "\\u3226", "\\u0028\\u4E03\\u0029", "\\u3227", "\\u0028\\u516B\\u0029", "\\u3228", "\\u0028\\u4E5D\\u0029", "\\u3229", "\\u0028\\u5341\\u0029", "\\u322A", "\\u0028\\u6708\\u0029", "\\u322B", "\\u0028\\u706B\\u0029", "\\u322C", "\\u0028\\u6C34\\u0029", "\\u322D", "\\u0028\\u6728\\u0029", "\\u322E", "\\u0028\\u91D1\\u0029", "\\u322F", "\\u0028\\u571F\\u0029", "\\u3230", "\\u0028\\u65E5\\u0029", "\\u3231", "\\u0028\\u682A\\u0029", "\\u3232", "\\u0028\\u6709\\u0029", "\\u3233", "\\u0028\\u793E\\u0029", "\\u3234", "\\u0028\\u540D\\u0029", "\\u3235", "\\u0028\\u7279\\u0029", "\\u3236", "\\u0028\\u8CA1\\u0029", "\\u3237", "\\u0028\\u795D\\u0029", "\\u3238", "\\u0028\\u52B4\\u0029", "\\u3239", "\\u0028\\u4EE3\\u0029", "\\u323A", "\\u0028\\u547C\\u0029", "\\u323B", "\\u0028\\u5B66\\u0029", "\\u323C", "\\u0028\\u76E3\\u0029", "\\u323D", "\\u0028\\u4F01\\u0029", "\\u323E", "\\u0028\\u8CC7\\u0029", "\\u323F", "\\u0028\\u5354\\u0029", "\\u3240", "\\u0028\\u796D\\u0029", "\\u3241", "\\u0028\\u4F11\\u0029", "\\u3242", "\\u0028\\u81EA\\u0029", "\\u3243", "\\u0028\\u81F3\\u0029", "\\u32C0", "\\u0031\\u6708", "\\u32C1", "\\u0032\\u6708", "\\u32C2", "\\u0033\\u6708", "\\u32C3", "\\u0034\\u6708", "\\u32C4", "\\u0035\\u6708", "\\u32C5", "\\u0036\\u6708", "\\u32C6", "\\u0037\\u6708", "\\u32C7", "\\u0038\\u6708", "\\u32C8", "\\u0039\\u6708", "\\u32C9", "\\u0031\\u0030\\u6708", "\\u32CA", "\\u0031\\u0031\\u6708", "\\u32CB", "\\u0031\\u0032\\u6708", "\\u3358", "\\u0030\\u70B9", "\\u3359", "\\u0031\\u70B9", "\\u335A", "\\u0032\\u70B9", "\\u335B", "\\u0033\\u70B9", "\\u335C", "\\u0034\\u70B9", "\\u335D", "\\u0035\\u70B9", "\\u335E", "\\u0036\\u70B9", "\\u335F", "\\u0037\\u70B9", "\\u3360", "\\u0038\\u70B9", "\\u3361", "\\u0039\\u70B9", "\\u3362", "\\u0031\\u0030\\u70B9", "\\u3363", "\\u0031\\u0031\\u70B9", "\\u3364", "\\u0031\\u0032\\u70B9", "\\u3365", "\\u0031\\u0033\\u70B9", "\\u3366", "\\u0031\\u0034\\u70B9", "\\u3367", "\\u0031\\u0035\\u70B9", "\\u3368", "\\u0031\\u0036\\u70B9", "\\u3369", "\\u0031\\u0037\\u70B9", "\\u336A", "\\u0031\\u0038\\u70B9", "\\u336B", "\\u0031\\u0039\\u70B9", "\\u336C", "\\u0032\\u0030\\u70B9", "\\u336D", "\\u0032\\u0031\\u70B9", "\\u336E", "\\u0032\\u0032\\u70B9", "\\u336F", "\\u0032\\u0033\\u70B9", "\\u3370", "\\u0032\\u0034\\u70B9", "\\u33E0", "\\u0031\\u65E5", "\\u33E1", "\\u0032\\u65E5", "\\u33E2", "\\u0033\\u65E5", "\\u33E3", "\\u0034\\u65E5", "\\u33E4", "\\u0035\\u65E5", "\\u33E5", "\\u0036\\u65E5", "\\u33E6", "\\u0037\\u65E5", "\\u33E7", "\\u0038\\u65E5", "\\u33E8", "\\u0039\\u65E5", "\\u33E9", "\\u0031\\u0030\\u65E5", "\\u33EA", "\\u0031\\u0031\\u65E5", "\\u33EB", "\\u0031\\u0032\\u65E5", "\\u33EC", "\\u0031\\u0033\\u65E5", "\\u33ED", "\\u0031\\u0034\\u65E5", "\\u33EE", "\\u0031\\u0035\\u65E5", "\\u33EF", "\\u0031\\u0036\\u65E5", "\\u33F0", "\\u0031\\u0037\\u65E5", "\\u33F1", "\\u0031\\u0038\\u65E5", "\\u33F2", "\\u0031\\u0039\\u65E5", "\\u33F3", "\\u0032\\u0030\\u65E5", "\\u33F4", "\\u0032\\u0031\\u65E5", "\\u33F5", "\\u0032\\u0032\\u65E5", "\\u33F6", "\\u0032\\u0033\\u65E5", "\\u33F7", "\\u0032\\u0034\\u65E5", "\\u33F8", "\\u0032\\u0035\\u65E5", "\\u33F9", "\\u0032\\u0036\\u65E5", "\\u33FA", "\\u0032\\u0037\\u65E5", "\\u33FB", "\\u0032\\u0038\\u65E5", "\\u33FC", "\\u0032\\u0039\\u65E5", "\\u33FD", "\\u0033\\u0030\\u65E5", "\\u33FE", "\\u0033\\u0031\\u65E5", "\\uFB00", "\\u0066\\u0066", "\\uFB01", "\\u0066\\u0069", "\\uFB02", "\\u0066\\u006C", "\\uFB03", "\\u0066\\u0066\\u0069", "\\uFB04", "\\u0066\\u0066\\u006C", "\\uFB05", "\\u017F\\u0074", "\\uFB06", "\\u0073\\u0074", "\\uFB13", "\\u0574\\u0576", "\\uFB14", "\\u0574\\u0565", "\\uFB15", "\\u0574\\u056B", "\\uFB16", "\\u057E\\u0576", "\\uFB17", "\\u0574\\u056D", "\\uFB4F", "\\u05D0\\u05DC", "\\uFB50", "\\u0671", "\\uFB51", "\\u0671", "\\uFB52", "\\u067B", "\\uFB53", "\\u067B", "\\uFB54", "\\u067B", "\\uFB55", "\\u067B", "\\uFB56", "\\u067E", "\\uFB57", "\\u067E", "\\uFB58", "\\u067E", "\\uFB59", "\\u067E", "\\uFB5A", "\\u0680", "\\uFB5B", "\\u0680", "\\uFB5C", "\\u0680", "\\uFB5D", "\\u0680", "\\uFB5E", "\\u067A", "\\uFB5F", "\\u067A", "\\uFB60", "\\u067A", "\\uFB61", "\\u067A", "\\uFB62", "\\u067F", "\\uFB63", "\\u067F", "\\uFB64", "\\u067F", "\\uFB65", "\\u067F", "\\uFB66", "\\u0679", "\\uFB67", "\\u0679", "\\uFB68", "\\u0679", "\\uFB69", "\\u0679", "\\uFB6A", "\\u06A4", "\\uFB6B", "\\u06A4", "\\uFB6C", "\\u06A4", "\\uFB6D", "\\u06A4", "\\uFB6E", "\\u06A6", "\\uFB6F", "\\u06A6", "\\uFB70", "\\u06A6", "\\uFB71", "\\u06A6", "\\uFB72", "\\u0684", "\\uFB73", "\\u0684", "\\uFB74", "\\u0684", "\\uFB75", "\\u0684", "\\uFB76", "\\u0683", "\\uFB77", "\\u0683", "\\uFB78", "\\u0683", "\\uFB79", "\\u0683", "\\uFB7A", "\\u0686", "\\uFB7B", "\\u0686", "\\uFB7C", "\\u0686", "\\uFB7D", "\\u0686", "\\uFB7E", "\\u0687", "\\uFB7F", "\\u0687", "\\uFB80", "\\u0687", "\\uFB81", "\\u0687", "\\uFB82", "\\u068D", "\\uFB83", "\\u068D", "\\uFB84", "\\u068C", "\\uFB85", "\\u068C", "\\uFB86", "\\u068E", "\\uFB87", "\\u068E", "\\uFB88", "\\u0688", "\\uFB89", "\\u0688", "\\uFB8A", "\\u0698", "\\uFB8B", "\\u0698", "\\uFB8C", "\\u0691", "\\uFB8D", "\\u0691", "\\uFB8E", "\\u06A9", "\\uFB8F", "\\u06A9", "\\uFB90", "\\u06A9", "\\uFB91", "\\u06A9", "\\uFB92", "\\u06AF", "\\uFB93", "\\u06AF", "\\uFB94", "\\u06AF", "\\uFB95", "\\u06AF", "\\uFB96", "\\u06B3", "\\uFB97", "\\u06B3", "\\uFB98", "\\u06B3", "\\uFB99", "\\u06B3", "\\uFB9A", "\\u06B1", "\\uFB9B", "\\u06B1", "\\uFB9C", "\\u06B1", "\\uFB9D", "\\u06B1", "\\uFB9E", "\\u06BA", "\\uFB9F", "\\u06BA", "\\uFBA0", "\\u06BB", "\\uFBA1", "\\u06BB", "\\uFBA2", "\\u06BB", "\\uFBA3", "\\u06BB", "\\uFBA4", "\\u06C0", "\\uFBA5", "\\u06C0", "\\uFBA6", "\\u06C1", "\\uFBA7", "\\u06C1", "\\uFBA8", "\\u06C1", "\\uFBA9", "\\u06C1", "\\uFBAA", "\\u06BE", "\\uFBAB", "\\u06BE", "\\uFBAC", "\\u06BE", "\\uFBAD", "\\u06BE", "\\uFBAE", "\\u06D2", "\\uFBAF", "\\u06D2", "\\uFBB0", "\\u06D3", "\\uFBB1", "\\u06D3", "\\uFBD3", "\\u06AD", "\\uFBD4", "\\u06AD", "\\uFBD5", "\\u06AD", "\\uFBD6", "\\u06AD", "\\uFBD7", "\\u06C7", "\\uFBD8", "\\u06C7", "\\uFBD9", "\\u06C6", "\\uFBDA", "\\u06C6", "\\uFBDB", "\\u06C8", "\\uFBDC", "\\u06C8", "\\uFBDD", "\\u0677", "\\uFBDE", "\\u06CB", "\\uFBDF", "\\u06CB", "\\uFBE0", "\\u06C5", "\\uFBE1", "\\u06C5", "\\uFBE2", "\\u06C9", "\\uFBE3", "\\u06C9", "\\uFBE4", "\\u06D0", "\\uFBE5", "\\u06D0", "\\uFBE6", "\\u06D0", "\\uFBE7", "\\u06D0", "\\uFBE8", "\\u0649", "\\uFBE9", "\\u0649", "\\uFBEA", "\\u0626\\u0627", "\\uFBEB", "\\u0626\\u0627", "\\uFBEC", "\\u0626\\u06D5", "\\uFBED", "\\u0626\\u06D5", "\\uFBEE", "\\u0626\\u0648", "\\uFBEF", "\\u0626\\u0648", "\\uFBF0", "\\u0626\\u06C7", "\\uFBF1", "\\u0626\\u06C7", "\\uFBF2", "\\u0626\\u06C6", "\\uFBF3", "\\u0626\\u06C6", "\\uFBF4", "\\u0626\\u06C8", "\\uFBF5", "\\u0626\\u06C8", "\\uFBF6", "\\u0626\\u06D0", "\\uFBF7", "\\u0626\\u06D0", "\\uFBF8", "\\u0626\\u06D0", "\\uFBF9", "\\u0626\\u0649", "\\uFBFA", "\\u0626\\u0649", "\\uFBFB", "\\u0626\\u0649", "\\uFBFC", "\\u06CC", "\\uFBFD", "\\u06CC", "\\uFBFE", "\\u06CC", "\\uFBFF", "\\u06CC", "\\uFC00", "\\u0626\\u062C", "\\uFC01", "\\u0626\\u062D", "\\uFC02", "\\u0626\\u0645", "\\uFC03", "\\u0626\\u0649", "\\uFC04", "\\u0626\\u064A", "\\uFC05", "\\u0628\\u062C", "\\uFC06", "\\u0628\\u062D", "\\uFC07", "\\u0628\\u062E", "\\uFC08", "\\u0628\\u0645", "\\uFC09", "\\u0628\\u0649", "\\uFC0A", "\\u0628\\u064A", "\\uFC0B", "\\u062A\\u062C", "\\uFC0C", "\\u062A\\u062D", "\\uFC0D", "\\u062A\\u062E", "\\uFC0E", "\\u062A\\u0645", "\\uFC0F", "\\u062A\\u0649", "\\uFC10", "\\u062A\\u064A", "\\uFC11", "\\u062B\\u062C", "\\uFC12", "\\u062B\\u0645", "\\uFC13", "\\u062B\\u0649", "\\uFC14", "\\u062B\\u064A", "\\uFC15", "\\u062C\\u062D", "\\uFC16", "\\u062C\\u0645", "\\uFC17", "\\u062D\\u062C", "\\uFC18", "\\u062D\\u0645", "\\uFC19", "\\u062E\\u062C", "\\uFC1A", "\\u062E\\u062D", "\\uFC1B", "\\u062E\\u0645", "\\uFC1C", "\\u0633\\u062C", "\\uFC1D", "\\u0633\\u062D", "\\uFC1E", "\\u0633\\u062E", "\\uFC1F", "\\u0633\\u0645", "\\uFC20", "\\u0635\\u062D", "\\uFC21", "\\u0635\\u0645", "\\uFC22", "\\u0636\\u062C", "\\uFC23", "\\u0636\\u062D", "\\uFC24", "\\u0636\\u062E", "\\uFC25", "\\u0636\\u0645", "\\uFC26", "\\u0637\\u062D", "\\uFC27", "\\u0637\\u0645", "\\uFC28", "\\u0638\\u0645", "\\uFC29", "\\u0639\\u062C", "\\uFC2A", "\\u0639\\u0645", "\\uFC2B", "\\u063A\\u062C", "\\uFC2C", "\\u063A\\u0645", "\\uFC2D", "\\u0641\\u062C", "\\uFC2E", "\\u0641\\u062D", "\\uFC2F", "\\u0641\\u062E", "\\uFC30", "\\u0641\\u0645", "\\uFC31", "\\u0641\\u0649", "\\uFC32", "\\u0641\\u064A", "\\uFC33", "\\u0642\\u062D", "\\uFC34", "\\u0642\\u0645", "\\uFC35", "\\u0642\\u0649", "\\uFC36", "\\u0642\\u064A", "\\uFC37", "\\u0643\\u0627", "\\uFC38", "\\u0643\\u062C", "\\uFC39", "\\u0643\\u062D", "\\uFC3A", "\\u0643\\u062E", "\\uFC3B", "\\u0643\\u0644", "\\uFC3C", "\\u0643\\u0645", "\\uFC3D", "\\u0643\\u0649", "\\uFC3E", "\\u0643\\u064A", "\\uFC3F", "\\u0644\\u062C", "\\uFC40", "\\u0644\\u062D", "\\uFC41", "\\u0644\\u062E", "\\uFC42", "\\u0644\\u0645", "\\uFC43", "\\u0644\\u0649", "\\uFC44", "\\u0644\\u064A", "\\uFC45", "\\u0645\\u062C", "\\uFC46", "\\u0645\\u062D", "\\uFC47", "\\u0645\\u062E", "\\uFC48", "\\u0645\\u0645", "\\uFC49", "\\u0645\\u0649", "\\uFC4A", "\\u0645\\u064A", "\\uFC4B", "\\u0646\\u062C", "\\uFC4C", "\\u0646\\u062D", "\\uFC4D", "\\u0646\\u062E", "\\uFC4E", "\\u0646\\u0645", "\\uFC4F", "\\u0646\\u0649", "\\uFC50", "\\u0646\\u064A", "\\uFC51", "\\u0647\\u062C", "\\uFC52", "\\u0647\\u0645", "\\uFC53", "\\u0647\\u0649", "\\uFC54", "\\u0647\\u064A", "\\uFC55", "\\u064A\\u062C", "\\uFC56", "\\u064A\\u062D", "\\uFC57", "\\u064A\\u062E", "\\uFC58", "\\u064A\\u0645", "\\uFC59", "\\u064A\\u0649", "\\uFC5A", "\\u064A\\u064A", "\\uFC5B", "\\u0630\\u0670", "\\uFC5C", "\\u0631\\u0670", "\\uFC5D", "\\u0649\\u0670", "\\uFC5E", "\\u0020\\u064C\\u0651", "\\uFC5F", "\\u0020\\u064D\\u0651", "\\uFC60", "\\u0020\\u064E\\u0651", "\\uFC61", "\\u0020\\u064F\\u0651", "\\uFC62", "\\u0020\\u0650\\u0651", "\\uFC63", "\\u0020\\u0651\\u0670", "\\uFC64", "\\u0626\\u0631", "\\uFC65", "\\u0626\\u0632", "\\uFC66", "\\u0626\\u0645", "\\uFC67", "\\u0626\\u0646", "\\uFC68", "\\u0626\\u0649", "\\uFC69", "\\u0626\\u064A", "\\uFC6A", "\\u0628\\u0631", "\\uFC6B", "\\u0628\\u0632", "\\uFC6C", "\\u0628\\u0645", "\\uFC6D", "\\u0628\\u0646", "\\uFC6E", "\\u0628\\u0649", "\\uFC6F", "\\u0628\\u064A", "\\uFC70", "\\u062A\\u0631", "\\uFC71", "\\u062A\\u0632", "\\uFC72", "\\u062A\\u0645", "\\uFC73", "\\u062A\\u0646", "\\uFC74", "\\u062A\\u0649", "\\uFC75", "\\u062A\\u064A", "\\uFC76", "\\u062B\\u0631", "\\uFC77", "\\u062B\\u0632", "\\uFC78", "\\u062B\\u0645", "\\uFC79", "\\u062B\\u0646", "\\uFC7A", "\\u062B\\u0649", "\\uFC7B", "\\u062B\\u064A", "\\uFC7C", "\\u0641\\u0649", "\\uFC7D", "\\u0641\\u064A", "\\uFC7E", "\\u0642\\u0649", "\\uFC7F", "\\u0642\\u064A", "\\uFC80", "\\u0643\\u0627", "\\uFC81", "\\u0643\\u0644", "\\uFC82", "\\u0643\\u0645", "\\uFC83", "\\u0643\\u0649", "\\uFC84", "\\u0643\\u064A", "\\uFC85", "\\u0644\\u0645", "\\uFC86", "\\u0644\\u0649", "\\uFC87", "\\u0644\\u064A", "\\uFC88", "\\u0645\\u0627", "\\uFC89", "\\u0645\\u0645", "\\uFC8A", "\\u0646\\u0631", "\\uFC8B", "\\u0646\\u0632", "\\uFC8C", "\\u0646\\u0645", "\\uFC8D", "\\u0646\\u0646", "\\uFC8E", "\\u0646\\u0649", "\\uFC8F", "\\u0646\\u064A", "\\uFC90", "\\u0649\\u0670", "\\uFC91", "\\u064A\\u0631", "\\uFC92", "\\u064A\\u0632", "\\uFC93", "\\u064A\\u0645", "\\uFC94", "\\u064A\\u0646", "\\uFC95", "\\u064A\\u0649", "\\uFC96", "\\u064A\\u064A", "\\uFC97", "\\u0626\\u062C", "\\uFC98", "\\u0626\\u062D", "\\uFC99", "\\u0626\\u062E", "\\uFC9A", "\\u0626\\u0645", "\\uFC9B", "\\u0626\\u0647", "\\uFC9C", "\\u0628\\u062C", "\\uFC9D", "\\u0628\\u062D", "\\uFC9E", "\\u0628\\u062E", "\\uFC9F", "\\u0628\\u0645", "\\uFCA0", "\\u0628\\u0647", "\\uFCA1", "\\u062A\\u062C", "\\uFCA2", "\\u062A\\u062D", "\\uFCA3", "\\u062A\\u062E", "\\uFCA4", "\\u062A\\u0645", "\\uFCA5", "\\u062A\\u0647", "\\uFCA6", "\\u062B\\u0645", "\\uFCA7", "\\u062C\\u062D", "\\uFCA8", "\\u062C\\u0645", "\\uFCA9", "\\u062D\\u062C", "\\uFCAA", "\\u062D\\u0645", "\\uFCAB", "\\u062E\\u062C", "\\uFCAC", "\\u062E\\u0645", "\\uFCAD", "\\u0633\\u062C", "\\uFCAE", "\\u0633\\u062D", "\\uFCAF", "\\u0633\\u062E", "\\uFCB0", "\\u0633\\u0645", "\\uFCB1", "\\u0635\\u062D", "\\uFCB2", "\\u0635\\u062E", "\\uFCB3", "\\u0635\\u0645", "\\uFCB4", "\\u0636\\u062C", "\\uFCB5", "\\u0636\\u062D", "\\uFCB6", "\\u0636\\u062E", "\\uFCB7", "\\u0636\\u0645", "\\uFCB8", "\\u0637\\u062D", "\\uFCB9", "\\u0638\\u0645", "\\uFCBA", "\\u0639\\u062C", "\\uFCBB", "\\u0639\\u0645", "\\uFCBC", "\\u063A\\u062C", "\\uFCBD", "\\u063A\\u0645", "\\uFCBE", "\\u0641\\u062C", "\\uFCBF", "\\u0641\\u062D", "\\uFCC0", "\\u0641\\u062E", "\\uFCC1", "\\u0641\\u0645", "\\uFCC2", "\\u0642\\u062D", "\\uFCC3", "\\u0642\\u0645", "\\uFCC4", "\\u0643\\u062C", "\\uFCC5", "\\u0643\\u062D", "\\uFCC6", "\\u0643\\u062E", "\\uFCC7", "\\u0643\\u0644", "\\uFCC8", "\\u0643\\u0645", "\\uFCC9", "\\u0644\\u062C", "\\uFCCA", "\\u0644\\u062D", "\\uFCCB", "\\u0644\\u062E", "\\uFCCC", "\\u0644\\u0645", "\\uFCCD", "\\u0644\\u0647", "\\uFCCE", "\\u0645\\u062C", "\\uFCCF", "\\u0645\\u062D", "\\uFCD0", "\\u0645\\u062E", "\\uFCD1", "\\u0645\\u0645", "\\uFCD2", "\\u0646\\u062C", "\\uFCD3", "\\u0646\\u062D", "\\uFCD4", "\\u0646\\u062E", "\\uFCD5", "\\u0646\\u0645", "\\uFCD6", "\\u0646\\u0647", "\\uFCD7", "\\u0647\\u062C", "\\uFCD8", "\\u0647\\u0645", "\\uFCD9", "\\u0647\\u0670", "\\uFCDA", "\\u064A\\u062C", "\\uFCDB", "\\u064A\\u062D", "\\uFCDC", "\\u064A\\u062E", "\\uFCDD", "\\u064A\\u0645", "\\uFCDE", "\\u064A\\u0647", "\\uFCDF", "\\u0626\\u0645", "\\uFCE0", "\\u0626\\u0647", "\\uFCE1", "\\u0628\\u0645", "\\uFCE2", "\\u0628\\u0647", "\\uFCE3", "\\u062A\\u0645", "\\uFCE4", "\\u062A\\u0647", "\\uFCE5", "\\u062B\\u0645", "\\uFCE6", "\\u062B\\u0647", "\\uFCE7", "\\u0633\\u0645", "\\uFCE8", "\\u0633\\u0647", "\\uFCE9", "\\u0634\\u0645", "\\uFCEA", "\\u0634\\u0647", "\\uFCEB", "\\u0643\\u0644", "\\uFCEC", "\\u0643\\u0645", "\\uFCED", "\\u0644\\u0645", "\\uFCEE", "\\u0646\\u0645", "\\uFCEF", "\\u0646\\u0647", "\\uFCF0", "\\u064A\\u0645", "\\uFCF1", "\\u064A\\u0647", "\\uFCF2", "\\u0640\\u064E\\u0651", "\\uFCF3", "\\u0640\\u064F\\u0651", "\\uFCF4", "\\u0640\\u0650\\u0651", "\\uFCF5", "\\u0637\\u0649", "\\uFCF6", "\\u0637\\u064A", "\\uFCF7", "\\u0639\\u0649", "\\uFCF8", "\\u0639\\u064A", "\\uFCF9", "\\u063A\\u0649", "\\uFCFA", "\\u063A\\u064A", "\\uFCFB", "\\u0633\\u0649", "\\uFCFC", "\\u0633\\u064A", "\\uFCFD", "\\u0634\\u0649", "\\uFCFE", "\\u0634\\u064A", "\\uFCFF", "\\u062D\\u0649", "\\uFD00", "\\u062D\\u064A", "\\uFD01", "\\u062C\\u0649", "\\uFD02", "\\u062C\\u064A", "\\uFD03", "\\u062E\\u0649", "\\uFD04", "\\u062E\\u064A", "\\uFD05", "\\u0635\\u0649", "\\uFD06", "\\u0635\\u064A", "\\uFD07", "\\u0636\\u0649", "\\uFD08", "\\u0636\\u064A", "\\uFD09", "\\u0634\\u062C", "\\uFD0A", "\\u0634\\u062D", "\\uFD0B", "\\u0634\\u062E", "\\uFD0C", "\\u0634\\u0645", "\\uFD0D", "\\u0634\\u0631", "\\uFD0E", "\\u0633\\u0631", "\\uFD0F", "\\u0635\\u0631", "\\uFD10", "\\u0636\\u0631", "\\uFD11", "\\u0637\\u0649", "\\uFD12", "\\u0637\\u064A", "\\uFD13", "\\u0639\\u0649", "\\uFD14", "\\u0639\\u064A", "\\uFD15", "\\u063A\\u0649", "\\uFD16", "\\u063A\\u064A", "\\uFD17", "\\u0633\\u0649", "\\uFD18", "\\u0633\\u064A", "\\uFD19", "\\u0634\\u0649", "\\uFD1A", "\\u0634\\u064A", "\\uFD1B", "\\u062D\\u0649", "\\uFD1C", "\\u062D\\u064A", "\\uFD1D", "\\u062C\\u0649", "\\uFD1E", "\\u062C\\u064A", "\\uFD1F", "\\u062E\\u0649", "\\uFD20", "\\u062E\\u064A", "\\uFD21", "\\u0635\\u0649", "\\uFD22", "\\u0635\\u064A", "\\uFD23", "\\u0636\\u0649", "\\uFD24", "\\u0636\\u064A", "\\uFD25", "\\u0634\\u062C", "\\uFD26", "\\u0634\\u062D", "\\uFD27", "\\u0634\\u062E", "\\uFD28", "\\u0634\\u0645", "\\uFD29", "\\u0634\\u0631", "\\uFD2A", "\\u0633\\u0631", "\\uFD2B", "\\u0635\\u0631", "\\uFD2C", "\\u0636\\u0631", "\\uFD2D", "\\u0634\\u062C", "\\uFD2E", "\\u0634\\u062D", "\\uFD2F", "\\u0634\\u062E", "\\uFD30", "\\u0634\\u0645", "\\uFD31", "\\u0633\\u0647", "\\uFD32", "\\u0634\\u0647", "\\uFD33", "\\u0637\\u0645", "\\uFD34", "\\u0633\\u062C", "\\uFD35", "\\u0633\\u062D", "\\uFD36", "\\u0633\\u062E", "\\uFD37", "\\u0634\\u062C", "\\uFD38", "\\u0634\\u062D", "\\uFD39", "\\u0634\\u062E", "\\uFD3A", "\\u0637\\u0645", "\\uFD3B", "\\u0638\\u0645", "\\uFD3C", "\\u0627\\u064B", "\\uFD3D", "\\u0627\\u064B", "\\uFD50", "\\u062A\\u062C\\u0645", "\\uFD51", "\\u062A\\u062D\\u062C", "\\uFD52", "\\u062A\\u062D\\u062C", "\\uFD53", "\\u062A\\u062D\\u0645", "\\uFD54", "\\u062A\\u062E\\u0645", "\\uFD55", "\\u062A\\u0645\\u062C", "\\uFD56", "\\u062A\\u0645\\u062D", "\\uFD57", "\\u062A\\u0645\\u062E", "\\uFD58", "\\u062C\\u0645\\u062D", "\\uFD59", "\\u062C\\u0645\\u062D", "\\uFD5A", "\\u062D\\u0645\\u064A", "\\uFD5B", "\\u062D\\u0645\\u0649", "\\uFD5C", "\\u0633\\u062D\\u062C", "\\uFD5D", "\\u0633\\u062C\\u062D", "\\uFD5E", "\\u0633\\u062C\\u0649", "\\uFD5F", "\\u0633\\u0645\\u062D", "\\uFD60", "\\u0633\\u0645\\u062D", "\\uFD61", "\\u0633\\u0645\\u062C", "\\uFD62", "\\u0633\\u0645\\u0645", "\\uFD63", "\\u0633\\u0645\\u0645", "\\uFD64", "\\u0635\\u062D\\u062D", "\\uFD65", "\\u0635\\u062D\\u062D", "\\uFD66", "\\u0635\\u0645\\u0645", "\\uFD67", "\\u0634\\u062D\\u0645", "\\uFD68", "\\u0634\\u062D\\u0645", "\\uFD69", "\\u0634\\u062C\\u064A", "\\uFD6A", "\\u0634\\u0645\\u062E", "\\uFD6B", "\\u0634\\u0645\\u062E", "\\uFD6C", "\\u0634\\u0645\\u0645", "\\uFD6D", "\\u0634\\u0645\\u0645", "\\uFD6E", "\\u0636\\u062D\\u0649", "\\uFD6F", "\\u0636\\u062E\\u0645", "\\uFD70", "\\u0636\\u062E\\u0645", "\\uFD71", "\\u0637\\u0645\\u062D", "\\uFD72", "\\u0637\\u0645\\u062D", "\\uFD73", "\\u0637\\u0645\\u0645", "\\uFD74", "\\u0637\\u0645\\u064A", "\\uFD75", "\\u0639\\u062C\\u0645", "\\uFD76", "\\u0639\\u0645\\u0645", "\\uFD77", "\\u0639\\u0645\\u0645", "\\uFD78", "\\u0639\\u0645\\u0649", "\\uFD79", "\\u063A\\u0645\\u0645", "\\uFD7A", "\\u063A\\u0645\\u064A", "\\uFD7B", "\\u063A\\u0645\\u0649", "\\uFD7C", "\\u0641\\u062E\\u0645", "\\uFD7D", "\\u0641\\u062E\\u0645", "\\uFD7E", "\\u0642\\u0645\\u062D", "\\uFD7F", "\\u0642\\u0645\\u0645", "\\uFD80", "\\u0644\\u062D\\u0645", "\\uFD81", "\\u0644\\u062D\\u064A", "\\uFD82", "\\u0644\\u062D\\u0649", "\\uFD83", "\\u0644\\u062C\\u062C", "\\uFD84", "\\u0644\\u062C\\u062C", "\\uFD85", "\\u0644\\u062E\\u0645", "\\uFD86", "\\u0644\\u062E\\u0645", "\\uFD87", "\\u0644\\u0645\\u062D", "\\uFD88", "\\u0644\\u0645\\u062D", "\\uFD89", "\\u0645\\u062D\\u062C", "\\uFD8A", "\\u0645\\u062D\\u0645", "\\uFD8B", "\\u0645\\u062D\\u064A", "\\uFD8C", "\\u0645\\u062C\\u062D", "\\uFD8D", "\\u0645\\u062C\\u0645", "\\uFD8E", "\\u0645\\u062E\\u062C", "\\uFD8F", "\\u0645\\u062E\\u0645", "\\uFD92", "\\u0645\\u062C\\u062E", "\\uFD93", "\\u0647\\u0645\\u062C", "\\uFD94", "\\u0647\\u0645\\u0645", "\\uFD95", "\\u0646\\u062D\\u0645", "\\uFD96", "\\u0646\\u062D\\u0649", "\\uFD97", "\\u0646\\u062C\\u0645", "\\uFD98", "\\u0646\\u062C\\u0645", "\\uFD99", "\\u0646\\u062C\\u0649", "\\uFD9A", "\\u0646\\u0645\\u064A", "\\uFD9B", "\\u0646\\u0645\\u0649", "\\uFD9C", "\\u064A\\u0645\\u0645", "\\uFD9D", "\\u064A\\u0645\\u0645", "\\uFD9E", "\\u0628\\u062E\\u064A", "\\uFD9F", "\\u062A\\u062C\\u064A", "\\uFDA0", "\\u062A\\u062C\\u0649", "\\uFDA1", "\\u062A\\u062E\\u064A", "\\uFDA2", "\\u062A\\u062E\\u0649", "\\uFDA3", "\\u062A\\u0645\\u064A", "\\uFDA4", "\\u062A\\u0645\\u0649", "\\uFDA5", "\\u062C\\u0645\\u064A", "\\uFDA6", "\\u062C\\u062D\\u0649", "\\uFDA7", "\\u062C\\u0645\\u0649", "\\uFDA8", "\\u0633\\u062E\\u0649", "\\uFDA9", "\\u0635\\u062D\\u064A", "\\uFDAA", "\\u0634\\u062D\\u064A", "\\uFDAB", "\\u0636\\u062D\\u064A", "\\uFDAC", "\\u0644\\u062C\\u064A", "\\uFDAD", "\\u0644\\u0645\\u064A", "\\uFDAE", "\\u064A\\u062D\\u064A", "\\uFDAF", "\\u064A\\u062C\\u064A", "\\uFDB0", "\\u064A\\u0645\\u064A", "\\uFDB1", "\\u0645\\u0645\\u064A", "\\uFDB2", "\\u0642\\u0645\\u064A", "\\uFDB3", "\\u0646\\u062D\\u064A", "\\uFDB4", "\\u0642\\u0645\\u062D", "\\uFDB5", "\\u0644\\u062D\\u0645", "\\uFDB6", "\\u0639\\u0645\\u064A", "\\uFDB7", "\\u0643\\u0645\\u064A", "\\uFDB8", "\\u0646\\u062C\\u062D", "\\uFDB9", "\\u0645\\u062E\\u064A", "\\uFDBA", "\\u0644\\u062C\\u0645", "\\uFDBB", "\\u0643\\u0645\\u0645", "\\uFDBC", "\\u0644\\u062C\\u0645", "\\uFDBD", "\\u0646\\u062C\\u062D", "\\uFDBE", "\\u062C\\u062D\\u064A", "\\uFDBF", "\\u062D\\u062C\\u064A", "\\uFDC0", "\\u0645\\u062C\\u064A", "\\uFDC1", "\\u0641\\u0645\\u064A", "\\uFDC2", "\\u0628\\u062D\\u064A", "\\uFDC3", "\\u0643\\u0645\\u0645", "\\uFDC4", "\\u0639\\u062C\\u0645", "\\uFDC5", "\\u0635\\u0645\\u0645", "\\uFDC6", "\\u0633\\u062E\\u064A", "\\uFDC7", "\\u0646\\u062C\\u064A", "\\uFE49", "\\u203E", "\\uFE4A", "\\u203E", "\\uFE4B", "\\u203E", "\\uFE4C", "\\u203E", "\\uFE4D", "\\u005F", "\\uFE4E", "\\u005F", "\\uFE4F", "\\u005F", "\\uFE80", "\\u0621", "\\uFE81", "\\u0622", "\\uFE82", "\\u0622", "\\uFE83", "\\u0623", "\\uFE84", "\\u0623", "\\uFE85", "\\u0624", "\\uFE86", "\\u0624", "\\uFE87", "\\u0625", "\\uFE88", "\\u0625", "\\uFE89", "\\u0626", "\\uFE8A", "\\u0626", "\\uFE8B", "\\u0626", "\\uFE8C", "\\u0626", "\\uFE8D", "\\u0627", "\\uFE8E", "\\u0627", "\\uFE8F", "\\u0628", "\\uFE90", "\\u0628", "\\uFE91", "\\u0628", "\\uFE92", "\\u0628", "\\uFE93", "\\u0629", "\\uFE94", "\\u0629", "\\uFE95", "\\u062A", "\\uFE96", "\\u062A", "\\uFE97", "\\u062A", "\\uFE98", "\\u062A", "\\uFE99", "\\u062B", "\\uFE9A", "\\u062B", "\\uFE9B", "\\u062B", "\\uFE9C", "\\u062B", "\\uFE9D", "\\u062C", "\\uFE9E", "\\u062C", "\\uFE9F", "\\u062C", "\\uFEA0", "\\u062C", "\\uFEA1", "\\u062D", "\\uFEA2", "\\u062D", "\\uFEA3", "\\u062D", "\\uFEA4", "\\u062D", "\\uFEA5", "\\u062E", "\\uFEA6", "\\u062E", "\\uFEA7", "\\u062E", "\\uFEA8", "\\u062E", "\\uFEA9", "\\u062F", "\\uFEAA", "\\u062F", "\\uFEAB", "\\u0630", "\\uFEAC", "\\u0630", "\\uFEAD", "\\u0631", "\\uFEAE", "\\u0631", "\\uFEAF", "\\u0632", "\\uFEB0", "\\u0632", "\\uFEB1", "\\u0633", "\\uFEB2", "\\u0633", "\\uFEB3", "\\u0633", "\\uFEB4", "\\u0633", "\\uFEB5", "\\u0634", "\\uFEB6", "\\u0634", "\\uFEB7", "\\u0634", "\\uFEB8", "\\u0634", "\\uFEB9", "\\u0635", "\\uFEBA", "\\u0635", "\\uFEBB", "\\u0635", "\\uFEBC", "\\u0635", "\\uFEBD", "\\u0636", "\\uFEBE", "\\u0636", "\\uFEBF", "\\u0636", "\\uFEC0", "\\u0636", "\\uFEC1", "\\u0637", "\\uFEC2", "\\u0637", "\\uFEC3", "\\u0637", "\\uFEC4", "\\u0637", "\\uFEC5", "\\u0638", "\\uFEC6", "\\u0638", "\\uFEC7", "\\u0638", "\\uFEC8", "\\u0638", "\\uFEC9", "\\u0639", "\\uFECA", "\\u0639", "\\uFECB", "\\u0639", "\\uFECC", "\\u0639", "\\uFECD", "\\u063A", "\\uFECE", "\\u063A", "\\uFECF", "\\u063A", "\\uFED0", "\\u063A", "\\uFED1", "\\u0641", "\\uFED2", "\\u0641", "\\uFED3", "\\u0641", "\\uFED4", "\\u0641", "\\uFED5", "\\u0642", "\\uFED6", "\\u0642", "\\uFED7", "\\u0642", "\\uFED8", "\\u0642", "\\uFED9", "\\u0643", "\\uFEDA", "\\u0643", "\\uFEDB", "\\u0643", "\\uFEDC", "\\u0643", "\\uFEDD", "\\u0644", "\\uFEDE", "\\u0644", "\\uFEDF", "\\u0644", "\\uFEE0", "\\u0644", "\\uFEE1", "\\u0645", "\\uFEE2", "\\u0645", "\\uFEE3", "\\u0645", "\\uFEE4", "\\u0645", "\\uFEE5", "\\u0646", "\\uFEE6", "\\u0646", "\\uFEE7", "\\u0646", "\\uFEE8", "\\u0646", "\\uFEE9", "\\u0647", "\\uFEEA", "\\u0647", "\\uFEEB", "\\u0647", "\\uFEEC", "\\u0647", "\\uFEED", "\\u0648", "\\uFEEE", "\\u0648", "\\uFEEF", "\\u0649", "\\uFEF0", "\\u0649", "\\uFEF1", "\\u064A", "\\uFEF2", "\\u064A", "\\uFEF3", "\\u064A", "\\uFEF4", "\\u064A", "\\uFEF5", "\\u0644\\u0622", "\\uFEF6", "\\u0644\\u0622", "\\uFEF7", "\\u0644\\u0623", "\\uFEF8", "\\u0644\\u0623", "\\uFEF9", "\\u0644\\u0625", "\\uFEFA", "\\u0644\\u0625", "\\uFEFB", "\\u0644\\u0627", "\\uFEFC", "\\u0644\\u0627"];\n});\nexports.getNormalizedUnicodes = getNormalizedUnicodes;\n\nfunction reverseIfRtl(chars) {\n  var charsLength = chars.length;\n\n  if (charsLength <= 1 || !isRTLRangeFor(chars.charCodeAt(0))) {\n    return chars;\n  }\n\n  var s = "";\n\n  for (var ii = charsLength - 1; ii >= 0; ii--) {\n    s += chars[ii];\n  }\n\n  return s;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/unicode.js\n')},"./node_modules/pdfjs-dist/lib/core/writer.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.incrementalUpdate = incrementalUpdate;\nexports.writeDict = writeDict;\n\nvar _util = __webpack_require__(/*! ../shared/util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nvar _primitives = __webpack_require__(/*! ./primitives.js */ "./node_modules/pdfjs-dist/lib/core/primitives.js");\n\nvar _core_utils = __webpack_require__(/*! ./core_utils.js */ "./node_modules/pdfjs-dist/lib/core/core_utils.js");\n\nvar _xml_parser = __webpack_require__(/*! ../shared/xml_parser.js */ "./node_modules/pdfjs-dist/lib/shared/xml_parser.js");\n\nvar _crypto = __webpack_require__(/*! ./crypto.js */ "./node_modules/pdfjs-dist/lib/core/crypto.js");\n\nfunction writeDict(dict, buffer, transform) {\n  buffer.push("<<");\n\n  for (const key of dict.getKeys()) {\n    buffer.push(` /${(0, _core_utils.escapePDFName)(key)} `);\n    writeValue(dict.getRaw(key), buffer, transform);\n  }\n\n  buffer.push(">>");\n}\n\nfunction writeStream(stream, buffer, transform) {\n  writeDict(stream.dict, buffer, transform);\n  buffer.push(" stream\\n");\n  let string = (0, _util.bytesToString)(stream.getBytes());\n\n  if (transform !== null) {\n    string = transform.encryptString(string);\n  }\n\n  buffer.push(string);\n  buffer.push("\\nendstream\\n");\n}\n\nfunction writeArray(array, buffer, transform) {\n  buffer.push("[");\n  let first = true;\n\n  for (const val of array) {\n    if (!first) {\n      buffer.push(" ");\n    } else {\n      first = false;\n    }\n\n    writeValue(val, buffer, transform);\n  }\n\n  buffer.push("]");\n}\n\nfunction numberToString(value) {\n  if (Number.isInteger(value)) {\n    return value.toString();\n  }\n\n  const roundedValue = Math.round(value * 100);\n\n  if (roundedValue % 100 === 0) {\n    return (roundedValue / 100).toString();\n  }\n\n  if (roundedValue % 10 === 0) {\n    return value.toFixed(1);\n  }\n\n  return value.toFixed(2);\n}\n\nfunction writeValue(value, buffer, transform) {\n  if ((0, _primitives.isName)(value)) {\n    buffer.push(`/${(0, _core_utils.escapePDFName)(value.name)}`);\n  } else if ((0, _primitives.isRef)(value)) {\n    buffer.push(`${value.num} ${value.gen} R`);\n  } else if (Array.isArray(value)) {\n    writeArray(value, buffer, transform);\n  } else if (typeof value === "string") {\n    if (transform !== null) {\n      value = transform.encryptString(value);\n    }\n\n    buffer.push(`(${(0, _util.escapeString)(value)})`);\n  } else if (typeof value === "number") {\n    buffer.push(numberToString(value));\n  } else if ((0, _primitives.isDict)(value)) {\n    writeDict(value, buffer, transform);\n  } else if ((0, _primitives.isStream)(value)) {\n    writeStream(value, buffer, transform);\n  }\n}\n\nfunction writeInt(number, size, offset, buffer) {\n  for (let i = size + offset - 1; i > offset - 1; i--) {\n    buffer[i] = number & 0xff;\n    number >>= 8;\n  }\n\n  return offset + size;\n}\n\nfunction writeString(string, offset, buffer) {\n  for (let i = 0, len = string.length; i < len; i++) {\n    buffer[offset + i] = string.charCodeAt(i) & 0xff;\n  }\n}\n\nfunction computeMD5(filesize, xrefInfo) {\n  const time = Math.floor(Date.now() / 1000);\n  const filename = xrefInfo.filename || "";\n  const md5Buffer = [time.toString(), filename, filesize.toString()];\n  let md5BufferLen = md5Buffer.reduce((a, str) => a + str.length, 0);\n\n  for (const value of Object.values(xrefInfo.info)) {\n    md5Buffer.push(value);\n    md5BufferLen += value.length;\n  }\n\n  const array = new Uint8Array(md5BufferLen);\n  let offset = 0;\n\n  for (const str of md5Buffer) {\n    writeString(str, offset, array);\n    offset += str.length;\n  }\n\n  return (0, _util.bytesToString)((0, _crypto.calculateMD5)(array));\n}\n\nfunction updateXFA(datasetsRef, newRefs, xref) {\n  if (datasetsRef === null || xref === null) {\n    return;\n  }\n\n  const datasets = xref.fetchIfRef(datasetsRef);\n  const str = (0, _util.bytesToString)(datasets.getBytes());\n  const xml = new _xml_parser.SimpleXMLParser({\n    hasAttributes: true\n  }).parseFromString(str);\n\n  for (const {\n    xfa\n  } of newRefs) {\n    if (!xfa) {\n      continue;\n    }\n\n    const {\n      path,\n      value\n    } = xfa;\n\n    if (!path) {\n      continue;\n    }\n\n    const node = xml.documentElement.searchNode((0, _core_utils.parseXFAPath)(path), 0);\n\n    if (node) {\n      node.childNodes = [new _xml_parser.SimpleDOMNode("#text", value)];\n    } else {\n      (0, _util.warn)(`Node not found for path: ${path}`);\n    }\n  }\n\n  const buffer = [];\n  xml.documentElement.dump(buffer);\n  let updatedXml = buffer.join("");\n  const encrypt = xref.encrypt;\n\n  if (encrypt) {\n    const transform = encrypt.createCipherTransform(datasetsRef.num, datasetsRef.gen);\n    updatedXml = transform.encryptString(updatedXml);\n  }\n\n  const data = `${datasetsRef.num} ${datasetsRef.gen} obj\\n` + `<< /Type /EmbeddedFile /Length ${updatedXml.length}>>\\nstream\\n` + updatedXml + "\\nendstream\\nendobj\\n";\n  newRefs.push({\n    ref: datasetsRef,\n    data\n  });\n}\n\nfunction incrementalUpdate({\n  originalData,\n  xrefInfo,\n  newRefs,\n  xref = null,\n  datasetsRef = null\n}) {\n  updateXFA(datasetsRef, newRefs, xref);\n  const newXref = new _primitives.Dict(null);\n  const refForXrefTable = xrefInfo.newRef;\n  let buffer, baseOffset;\n  const lastByte = originalData[originalData.length - 1];\n\n  if (lastByte === 0x0a || lastByte === 0x0d) {\n    buffer = [];\n    baseOffset = originalData.length;\n  } else {\n    buffer = ["\\n"];\n    baseOffset = originalData.length + 1;\n  }\n\n  newXref.set("Size", refForXrefTable.num + 1);\n  newXref.set("Prev", xrefInfo.startXRef);\n  newXref.set("Type", _primitives.Name.get("XRef"));\n\n  if (xrefInfo.rootRef !== null) {\n    newXref.set("Root", xrefInfo.rootRef);\n  }\n\n  if (xrefInfo.infoRef !== null) {\n    newXref.set("Info", xrefInfo.infoRef);\n  }\n\n  if (xrefInfo.encrypt !== null) {\n    newXref.set("Encrypt", xrefInfo.encrypt);\n  }\n\n  newRefs.push({\n    ref: refForXrefTable,\n    data: ""\n  });\n  newRefs = newRefs.sort((a, b) => {\n    return a.ref.num - b.ref.num;\n  });\n  const xrefTableData = [[0, 1, 0xffff]];\n  const indexes = [0, 1];\n  let maxOffset = 0;\n\n  for (const {\n    ref,\n    data\n  } of newRefs) {\n    maxOffset = Math.max(maxOffset, baseOffset);\n    xrefTableData.push([1, baseOffset, Math.min(ref.gen, 0xffff)]);\n    baseOffset += data.length;\n    indexes.push(ref.num);\n    indexes.push(1);\n    buffer.push(data);\n  }\n\n  newXref.set("Index", indexes);\n\n  if (xrefInfo.fileIds.length !== 0) {\n    const md5 = computeMD5(baseOffset, xrefInfo);\n    newXref.set("ID", [xrefInfo.fileIds[0], md5]);\n  }\n\n  const offsetSize = Math.ceil(Math.log2(maxOffset) / 8);\n  const sizes = [1, offsetSize, 2];\n  const structSize = sizes[0] + sizes[1] + sizes[2];\n  const tableLength = structSize * xrefTableData.length;\n  newXref.set("W", sizes);\n  newXref.set("Length", tableLength);\n  buffer.push(`${refForXrefTable.num} ${refForXrefTable.gen} obj\\n`);\n  writeDict(newXref, buffer, null);\n  buffer.push(" stream\\n");\n  const bufferLen = buffer.reduce((a, str) => a + str.length, 0);\n  const footer = `\\nendstream\\nendobj\\nstartxref\\n${baseOffset}\\n%%EOF\\n`;\n  const array = new Uint8Array(originalData.length + bufferLen + tableLength + footer.length);\n  array.set(originalData);\n  let offset = originalData.length;\n\n  for (const str of buffer) {\n    writeString(str, offset, array);\n    offset += str.length;\n  }\n\n  for (const [type, objOffset, gen] of xrefTableData) {\n    offset = writeInt(type, sizes[0], offset, array);\n    offset = writeInt(objOffset, sizes[1], offset, array);\n    offset = writeInt(gen, sizes[2], offset, array);\n  }\n\n  writeString(footer, offset, array);\n  return array;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/core/writer.js\n')},"./node_modules/pdfjs-dist/lib/shared/compatibility.js":function(__unused_webpack_module,__unused_webpack_exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nvar _is_node = __webpack_require__(/*! ./is_node.js */ "./node_modules/pdfjs-dist/lib/shared/is_node.js");\n\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGRmanMtZGlzdC9saWIvc2hhcmVkL2NvbXBhdGliaWxpdHkuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TaW1wbGVQZGZBbmFseXplci8uL25vZGVfbW9kdWxlcy9wZGZqcy1kaXN0L2xpYi9zaGFyZWQvY29tcGF0aWJpbGl0eS5qcz8xOGFmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY3N0YXJ0IFRoZSBmb2xsb3dpbmcgaXMgdGhlIGVudGlyZSBsaWNlbnNlIG5vdGljZSBmb3IgdGhlXG4gKiBKYXZhc2NyaXB0IGNvZGUgaW4gdGhpcyBwYWdlXG4gKlxuICogQ29weXJpZ2h0IDIwMjAgTW96aWxsYSBGb3VuZGF0aW9uXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqIEBsaWNlbmQgVGhlIGFib3ZlIGlzIHRoZSBlbnRpcmUgbGljZW5zZSBub3RpY2UgZm9yIHRoZVxuICogSmF2YXNjcmlwdCBjb2RlIGluIHRoaXMgcGFnZVxuICovXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9pc19ub2RlID0gcmVxdWlyZShcIi4vaXNfbm9kZS5qc1wiKTtcblxuOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/shared/compatibility.js\n')},"./node_modules/pdfjs-dist/lib/shared/is_node.js":function(__unused_webpack_module,exports){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.isNodeJS = void 0;\nconst isNodeJS = typeof process === "object" && process + "" === "[object process]" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== "browser");\nexports.isNodeJS = isNodeJS;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGRmanMtZGlzdC9saWIvc2hhcmVkL2lzX25vZGUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TaW1wbGVQZGZBbmFseXplci8uL25vZGVfbW9kdWxlcy9wZGZqcy1kaXN0L2xpYi9zaGFyZWQvaXNfbm9kZS5qcz8zNDYyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY3N0YXJ0IFRoZSBmb2xsb3dpbmcgaXMgdGhlIGVudGlyZSBsaWNlbnNlIG5vdGljZSBmb3IgdGhlXG4gKiBKYXZhc2NyaXB0IGNvZGUgaW4gdGhpcyBwYWdlXG4gKlxuICogQ29weXJpZ2h0IDIwMjAgTW96aWxsYSBGb3VuZGF0aW9uXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqIEBsaWNlbmQgVGhlIGFib3ZlIGlzIHRoZSBlbnRpcmUgbGljZW5zZSBub3RpY2UgZm9yIHRoZVxuICogSmF2YXNjcmlwdCBjb2RlIGluIHRoaXMgcGFnZVxuICovXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaXNOb2RlSlMgPSB2b2lkIDA7XG5jb25zdCBpc05vZGVKUyA9IHR5cGVvZiBwcm9jZXNzID09PSBcIm9iamVjdFwiICYmIHByb2Nlc3MgKyBcIlwiID09PSBcIltvYmplY3QgcHJvY2Vzc11cIiAmJiAhcHJvY2Vzcy52ZXJzaW9ucy5udyAmJiAhKHByb2Nlc3MudmVyc2lvbnMuZWxlY3Ryb24gJiYgcHJvY2Vzcy50eXBlICYmIHByb2Nlc3MudHlwZSAhPT0gXCJicm93c2VyXCIpO1xuZXhwb3J0cy5pc05vZGVKUyA9IGlzTm9kZUpTOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/shared/is_node.js\n')},"./node_modules/pdfjs-dist/lib/shared/util.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.arrayByteLength = arrayByteLength;\nexports.arraysToBytes = arraysToBytes;\nexports.assert = assert;\nexports.bytesToString = bytesToString;\nexports.createPromiseCapability = createPromiseCapability;\nexports.createValidAbsoluteUrl = createValidAbsoluteUrl;\nexports.encodeToXmlString = encodeToXmlString;\nexports.escapeString = escapeString;\nexports.getModificationDate = getModificationDate;\nexports.getVerbosityLevel = getVerbosityLevel;\nexports.info = info;\nexports.isArrayBuffer = isArrayBuffer;\nexports.isArrayEqual = isArrayEqual;\nexports.isAscii = isAscii;\nexports.isBool = isBool;\nexports.isNum = isNum;\nexports.isSameOrigin = isSameOrigin;\nexports.isString = isString;\nexports.objectFromEntries = objectFromEntries;\nexports.objectSize = objectSize;\nexports.removeNullCharacters = removeNullCharacters;\nexports.setVerbosityLevel = setVerbosityLevel;\nexports.shadow = shadow;\nexports.string32 = string32;\nexports.stringToBytes = stringToBytes;\nexports.stringToPDFString = stringToPDFString;\nexports.stringToUTF16BEString = stringToUTF16BEString;\nexports.stringToUTF8String = stringToUTF8String;\nexports.unreachable = unreachable;\nexports.utf8StringToString = utf8StringToString;\nexports.warn = warn;\nexports.VerbosityLevel = exports.Util = exports.UNSUPPORTED_FEATURES = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.TextRenderingMode = exports.StreamType = exports.PermissionFlag = exports.PasswordResponses = exports.PasswordException = exports.PageActionEventType = exports.OPS = exports.MissingPDFException = exports.IsLittleEndianCached = exports.IsEvalSupportedCached = exports.InvalidPDFException = exports.ImageKind = exports.IDENTITY_MATRIX = exports.FormatError = exports.FontType = exports.FONT_IDENTITY_MATRIX = exports.DocumentActionEventType = exports.createObjectURL = exports.CMapCompressionType = exports.BaseException = exports.AnnotationType = exports.AnnotationStateModelType = exports.AnnotationReviewState = exports.AnnotationReplyType = exports.AnnotationMarkedState = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationBorderStyleType = exports.AnnotationActionEventType = exports.AbortException = void 0;\n\n__webpack_require__(/*! ./compatibility.js */ "./node_modules/pdfjs-dist/lib/shared/compatibility.js");\n\nconst IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\nexports.IDENTITY_MATRIX = IDENTITY_MATRIX;\nconst FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\nexports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;\nconst PermissionFlag = {\n  PRINT: 0x04,\n  MODIFY_CONTENTS: 0x08,\n  COPY: 0x10,\n  MODIFY_ANNOTATIONS: 0x20,\n  FILL_INTERACTIVE_FORMS: 0x100,\n  COPY_FOR_ACCESSIBILITY: 0x200,\n  ASSEMBLE: 0x400,\n  PRINT_HIGH_QUALITY: 0x800\n};\nexports.PermissionFlag = PermissionFlag;\nconst TextRenderingMode = {\n  FILL: 0,\n  STROKE: 1,\n  FILL_STROKE: 2,\n  INVISIBLE: 3,\n  FILL_ADD_TO_PATH: 4,\n  STROKE_ADD_TO_PATH: 5,\n  FILL_STROKE_ADD_TO_PATH: 6,\n  ADD_TO_PATH: 7,\n  FILL_STROKE_MASK: 3,\n  ADD_TO_PATH_FLAG: 4\n};\nexports.TextRenderingMode = TextRenderingMode;\nconst ImageKind = {\n  GRAYSCALE_1BPP: 1,\n  RGB_24BPP: 2,\n  RGBA_32BPP: 3\n};\nexports.ImageKind = ImageKind;\nconst AnnotationType = {\n  TEXT: 1,\n  LINK: 2,\n  FREETEXT: 3,\n  LINE: 4,\n  SQUARE: 5,\n  CIRCLE: 6,\n  POLYGON: 7,\n  POLYLINE: 8,\n  HIGHLIGHT: 9,\n  UNDERLINE: 10,\n  SQUIGGLY: 11,\n  STRIKEOUT: 12,\n  STAMP: 13,\n  CARET: 14,\n  INK: 15,\n  POPUP: 16,\n  FILEATTACHMENT: 17,\n  SOUND: 18,\n  MOVIE: 19,\n  WIDGET: 20,\n  SCREEN: 21,\n  PRINTERMARK: 22,\n  TRAPNET: 23,\n  WATERMARK: 24,\n  THREED: 25,\n  REDACT: 26\n};\nexports.AnnotationType = AnnotationType;\nconst AnnotationStateModelType = {\n  MARKED: "Marked",\n  REVIEW: "Review"\n};\nexports.AnnotationStateModelType = AnnotationStateModelType;\nconst AnnotationMarkedState = {\n  MARKED: "Marked",\n  UNMARKED: "Unmarked"\n};\nexports.AnnotationMarkedState = AnnotationMarkedState;\nconst AnnotationReviewState = {\n  ACCEPTED: "Accepted",\n  REJECTED: "Rejected",\n  CANCELLED: "Cancelled",\n  COMPLETED: "Completed",\n  NONE: "None"\n};\nexports.AnnotationReviewState = AnnotationReviewState;\nconst AnnotationReplyType = {\n  GROUP: "Group",\n  REPLY: "R"\n};\nexports.AnnotationReplyType = AnnotationReplyType;\nconst AnnotationFlag = {\n  INVISIBLE: 0x01,\n  HIDDEN: 0x02,\n  PRINT: 0x04,\n  NOZOOM: 0x08,\n  NOROTATE: 0x10,\n  NOVIEW: 0x20,\n  READONLY: 0x40,\n  LOCKED: 0x80,\n  TOGGLENOVIEW: 0x100,\n  LOCKEDCONTENTS: 0x200\n};\nexports.AnnotationFlag = AnnotationFlag;\nconst AnnotationFieldFlag = {\n  READONLY: 0x0000001,\n  REQUIRED: 0x0000002,\n  NOEXPORT: 0x0000004,\n  MULTILINE: 0x0001000,\n  PASSWORD: 0x0002000,\n  NOTOGGLETOOFF: 0x0004000,\n  RADIO: 0x0008000,\n  PUSHBUTTON: 0x0010000,\n  COMBO: 0x0020000,\n  EDIT: 0x0040000,\n  SORT: 0x0080000,\n  FILESELECT: 0x0100000,\n  MULTISELECT: 0x0200000,\n  DONOTSPELLCHECK: 0x0400000,\n  DONOTSCROLL: 0x0800000,\n  COMB: 0x1000000,\n  RICHTEXT: 0x2000000,\n  RADIOSINUNISON: 0x2000000,\n  COMMITONSELCHANGE: 0x4000000\n};\nexports.AnnotationFieldFlag = AnnotationFieldFlag;\nconst AnnotationBorderStyleType = {\n  SOLID: 1,\n  DASHED: 2,\n  BEVELED: 3,\n  INSET: 4,\n  UNDERLINE: 5\n};\nexports.AnnotationBorderStyleType = AnnotationBorderStyleType;\nconst AnnotationActionEventType = {\n  E: "Mouse Enter",\n  X: "Mouse Exit",\n  D: "Mouse Down",\n  U: "Mouse Up",\n  Fo: "Focus",\n  Bl: "Blur",\n  PO: "PageOpen",\n  PC: "PageClose",\n  PV: "PageVisible",\n  PI: "PageInvisible",\n  K: "Keystroke",\n  F: "Format",\n  V: "Validate",\n  C: "Calculate"\n};\nexports.AnnotationActionEventType = AnnotationActionEventType;\nconst DocumentActionEventType = {\n  WC: "WillClose",\n  WS: "WillSave",\n  DS: "DidSave",\n  WP: "WillPrint",\n  DP: "DidPrint"\n};\nexports.DocumentActionEventType = DocumentActionEventType;\nconst PageActionEventType = {\n  O: "PageOpen",\n  C: "PageClose"\n};\nexports.PageActionEventType = PageActionEventType;\nconst StreamType = {\n  UNKNOWN: "UNKNOWN",\n  FLATE: "FLATE",\n  LZW: "LZW",\n  DCT: "DCT",\n  JPX: "JPX",\n  JBIG: "JBIG",\n  A85: "A85",\n  AHX: "AHX",\n  CCF: "CCF",\n  RLX: "RLX"\n};\nexports.StreamType = StreamType;\nconst FontType = {\n  UNKNOWN: "UNKNOWN",\n  TYPE1: "TYPE1",\n  TYPE1C: "TYPE1C",\n  CIDFONTTYPE0: "CIDFONTTYPE0",\n  CIDFONTTYPE0C: "CIDFONTTYPE0C",\n  TRUETYPE: "TRUETYPE",\n  CIDFONTTYPE2: "CIDFONTTYPE2",\n  TYPE3: "TYPE3",\n  OPENTYPE: "OPENTYPE",\n  TYPE0: "TYPE0",\n  MMTYPE1: "MMTYPE1"\n};\nexports.FontType = FontType;\nconst VerbosityLevel = {\n  ERRORS: 0,\n  WARNINGS: 1,\n  INFOS: 5\n};\nexports.VerbosityLevel = VerbosityLevel;\nconst CMapCompressionType = {\n  NONE: 0,\n  BINARY: 1,\n  STREAM: 2\n};\nexports.CMapCompressionType = CMapCompressionType;\nconst OPS = {\n  dependency: 1,\n  setLineWidth: 2,\n  setLineCap: 3,\n  setLineJoin: 4,\n  setMiterLimit: 5,\n  setDash: 6,\n  setRenderingIntent: 7,\n  setFlatness: 8,\n  setGState: 9,\n  save: 10,\n  restore: 11,\n  transform: 12,\n  moveTo: 13,\n  lineTo: 14,\n  curveTo: 15,\n  curveTo2: 16,\n  curveTo3: 17,\n  closePath: 18,\n  rectangle: 19,\n  stroke: 20,\n  closeStroke: 21,\n  fill: 22,\n  eoFill: 23,\n  fillStroke: 24,\n  eoFillStroke: 25,\n  closeFillStroke: 26,\n  closeEOFillStroke: 27,\n  endPath: 28,\n  clip: 29,\n  eoClip: 30,\n  beginText: 31,\n  endText: 32,\n  setCharSpacing: 33,\n  setWordSpacing: 34,\n  setHScale: 35,\n  setLeading: 36,\n  setFont: 37,\n  setTextRenderingMode: 38,\n  setTextRise: 39,\n  moveText: 40,\n  setLeadingMoveText: 41,\n  setTextMatrix: 42,\n  nextLine: 43,\n  showText: 44,\n  showSpacedText: 45,\n  nextLineShowText: 46,\n  nextLineSetSpacingShowText: 47,\n  setCharWidth: 48,\n  setCharWidthAndBounds: 49,\n  setStrokeColorSpace: 50,\n  setFillColorSpace: 51,\n  setStrokeColor: 52,\n  setStrokeColorN: 53,\n  setFillColor: 54,\n  setFillColorN: 55,\n  setStrokeGray: 56,\n  setFillGray: 57,\n  setStrokeRGBColor: 58,\n  setFillRGBColor: 59,\n  setStrokeCMYKColor: 60,\n  setFillCMYKColor: 61,\n  shadingFill: 62,\n  beginInlineImage: 63,\n  beginImageData: 64,\n  endInlineImage: 65,\n  paintXObject: 66,\n  markPoint: 67,\n  markPointProps: 68,\n  beginMarkedContent: 69,\n  beginMarkedContentProps: 70,\n  endMarkedContent: 71,\n  beginCompat: 72,\n  endCompat: 73,\n  paintFormXObjectBegin: 74,\n  paintFormXObjectEnd: 75,\n  beginGroup: 76,\n  endGroup: 77,\n  beginAnnotations: 78,\n  endAnnotations: 79,\n  beginAnnotation: 80,\n  endAnnotation: 81,\n  paintJpegXObject: 82,\n  paintImageMaskXObject: 83,\n  paintImageMaskXObjectGroup: 84,\n  paintImageXObject: 85,\n  paintInlineImageXObject: 86,\n  paintInlineImageXObjectGroup: 87,\n  paintImageXObjectRepeat: 88,\n  paintImageMaskXObjectRepeat: 89,\n  paintSolidColorImageMask: 90,\n  constructPath: 91\n};\nexports.OPS = OPS;\nconst UNSUPPORTED_FEATURES = {\n  unknown: "unknown",\n  forms: "forms",\n  javaScript: "javaScript",\n  smask: "smask",\n  shadingPattern: "shadingPattern",\n  font: "font",\n  errorTilingPattern: "errorTilingPattern",\n  errorExtGState: "errorExtGState",\n  errorXObject: "errorXObject",\n  errorFontLoadType3: "errorFontLoadType3",\n  errorFontState: "errorFontState",\n  errorFontMissing: "errorFontMissing",\n  errorFontTranslate: "errorFontTranslate",\n  errorColorSpace: "errorColorSpace",\n  errorOperatorList: "errorOperatorList",\n  errorFontToUnicode: "errorFontToUnicode",\n  errorFontLoadNative: "errorFontLoadNative",\n  errorFontGetPath: "errorFontGetPath",\n  errorMarkedContent: "errorMarkedContent"\n};\nexports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;\nconst PasswordResponses = {\n  NEED_PASSWORD: 1,\n  INCORRECT_PASSWORD: 2\n};\nexports.PasswordResponses = PasswordResponses;\nlet verbosity = VerbosityLevel.WARNINGS;\n\nfunction setVerbosityLevel(level) {\n  if (Number.isInteger(level)) {\n    verbosity = level;\n  }\n}\n\nfunction getVerbosityLevel() {\n  return verbosity;\n}\n\nfunction info(msg) {\n  if (verbosity >= VerbosityLevel.INFOS) {\n    console.log(`Info: ${msg}`);\n  }\n}\n\nfunction warn(msg) {\n  if (verbosity >= VerbosityLevel.WARNINGS) {\n    console.log(`Warning: ${msg}`);\n  }\n}\n\nfunction unreachable(msg) {\n  throw new Error(msg);\n}\n\nfunction assert(cond, msg) {\n  if (!cond) {\n    unreachable(msg);\n  }\n}\n\nfunction isSameOrigin(baseUrl, otherUrl) {\n  let base;\n\n  try {\n    base = new URL(baseUrl);\n\n    if (!base.origin || base.origin === "null") {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n\n  const other = new URL(otherUrl, base);\n  return base.origin === other.origin;\n}\n\nfunction _isValidProtocol(url) {\n  if (!url) {\n    return false;\n  }\n\n  switch (url.protocol) {\n    case "http:":\n    case "https:":\n    case "ftp:":\n    case "mailto:":\n    case "tel:":\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nfunction createValidAbsoluteUrl(url, baseUrl) {\n  if (!url) {\n    return null;\n  }\n\n  try {\n    const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n\n    if (_isValidProtocol(absoluteUrl)) {\n      return absoluteUrl;\n    }\n  } catch (ex) {}\n\n  return null;\n}\n\nfunction shadow(obj, prop, value) {\n  Object.defineProperty(obj, prop, {\n    value,\n    enumerable: true,\n    configurable: true,\n    writable: false\n  });\n  return value;\n}\n\nconst BaseException = function BaseExceptionClosure() {\n  function BaseException(message) {\n    if (this.constructor === BaseException) {\n      unreachable("Cannot initialize BaseException.");\n    }\n\n    this.message = message;\n    this.name = this.constructor.name;\n  }\n\n  BaseException.prototype = new Error();\n  BaseException.constructor = BaseException;\n  return BaseException;\n}();\n\nexports.BaseException = BaseException;\n\nclass PasswordException extends BaseException {\n  constructor(msg, code) {\n    super(msg);\n    this.code = code;\n  }\n\n}\n\nexports.PasswordException = PasswordException;\n\nclass UnknownErrorException extends BaseException {\n  constructor(msg, details) {\n    super(msg);\n    this.details = details;\n  }\n\n}\n\nexports.UnknownErrorException = UnknownErrorException;\n\nclass InvalidPDFException extends BaseException {}\n\nexports.InvalidPDFException = InvalidPDFException;\n\nclass MissingPDFException extends BaseException {}\n\nexports.MissingPDFException = MissingPDFException;\n\nclass UnexpectedResponseException extends BaseException {\n  constructor(msg, status) {\n    super(msg);\n    this.status = status;\n  }\n\n}\n\nexports.UnexpectedResponseException = UnexpectedResponseException;\n\nclass FormatError extends BaseException {}\n\nexports.FormatError = FormatError;\n\nclass AbortException extends BaseException {}\n\nexports.AbortException = AbortException;\nconst NullCharactersRegExp = /\\x00/g;\n\nfunction removeNullCharacters(str) {\n  if (typeof str !== "string") {\n    warn("The argument for removeNullCharacters must be a string.");\n    return str;\n  }\n\n  return str.replace(NullCharactersRegExp, "");\n}\n\nfunction bytesToString(bytes) {\n  assert(bytes !== null && typeof bytes === "object" && bytes.length !== undefined, "Invalid argument for bytesToString");\n  const length = bytes.length;\n  const MAX_ARGUMENT_COUNT = 8192;\n\n  if (length < MAX_ARGUMENT_COUNT) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n\n  const strBuf = [];\n\n  for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n    const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n    const chunk = bytes.subarray(i, chunkEnd);\n    strBuf.push(String.fromCharCode.apply(null, chunk));\n  }\n\n  return strBuf.join("");\n}\n\nfunction stringToBytes(str) {\n  assert(typeof str === "string", "Invalid argument for stringToBytes");\n  const length = str.length;\n  const bytes = new Uint8Array(length);\n\n  for (let i = 0; i < length; ++i) {\n    bytes[i] = str.charCodeAt(i) & 0xff;\n  }\n\n  return bytes;\n}\n\nfunction arrayByteLength(arr) {\n  if (arr.length !== undefined) {\n    return arr.length;\n  }\n\n  assert(arr.byteLength !== undefined, "arrayByteLength - invalid argument.");\n  return arr.byteLength;\n}\n\nfunction arraysToBytes(arr) {\n  const length = arr.length;\n\n  if (length === 1 && arr[0] instanceof Uint8Array) {\n    return arr[0];\n  }\n\n  let resultLength = 0;\n\n  for (let i = 0; i < length; i++) {\n    resultLength += arrayByteLength(arr[i]);\n  }\n\n  let pos = 0;\n  const data = new Uint8Array(resultLength);\n\n  for (let i = 0; i < length; i++) {\n    let item = arr[i];\n\n    if (!(item instanceof Uint8Array)) {\n      if (typeof item === "string") {\n        item = stringToBytes(item);\n      } else {\n        item = new Uint8Array(item);\n      }\n    }\n\n    const itemLength = item.byteLength;\n    data.set(item, pos);\n    pos += itemLength;\n  }\n\n  return data;\n}\n\nfunction string32(value) {\n  return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n}\n\nfunction objectSize(obj) {\n  return Object.keys(obj).length;\n}\n\nfunction objectFromEntries(iterable) {\n  return Object.assign(Object.create(null), Object.fromEntries(iterable));\n}\n\nfunction isLittleEndian() {\n  const buffer8 = new Uint8Array(4);\n  buffer8[0] = 1;\n  const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n  return view32[0] === 1;\n}\n\nconst IsLittleEndianCached = {\n  get value() {\n    return shadow(this, "value", isLittleEndian());\n  }\n\n};\nexports.IsLittleEndianCached = IsLittleEndianCached;\n\nfunction isEvalSupported() {\n  try {\n    new Function("");\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nconst IsEvalSupportedCached = {\n  get value() {\n    return shadow(this, "value", isEvalSupported());\n  }\n\n};\nexports.IsEvalSupportedCached = IsEvalSupportedCached;\nconst hexNumbers = [...Array(256).keys()].map(n => n.toString(16).padStart(2, "0"));\n\nclass Util {\n  static makeHexColor(r, g, b) {\n    return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n  }\n\n  static transform(m1, m2) {\n    return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];\n  }\n\n  static applyTransform(p, m) {\n    const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n    const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n    return [xt, yt];\n  }\n\n  static applyInverseTransform(p, m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n    const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n    return [xt, yt];\n  }\n\n  static getAxialAlignedBoundingBox(r, m) {\n    const p1 = Util.applyTransform(r, m);\n    const p2 = Util.applyTransform(r.slice(2, 4), m);\n    const p3 = Util.applyTransform([r[0], r[3]], m);\n    const p4 = Util.applyTransform([r[2], r[1]], m);\n    return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];\n  }\n\n  static inverseTransform(m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\n  }\n\n  static apply3dTransform(m, v) {\n    return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];\n  }\n\n  static singularValueDecompose2dScale(m) {\n    const transpose = [m[0], m[2], m[1], m[3]];\n    const a = m[0] * transpose[0] + m[1] * transpose[2];\n    const b = m[0] * transpose[1] + m[1] * transpose[3];\n    const c = m[2] * transpose[0] + m[3] * transpose[2];\n    const d = m[2] * transpose[1] + m[3] * transpose[3];\n    const first = (a + d) / 2;\n    const second = Math.sqrt((a + d) * (a + d) - 4 * (a * d - c * b)) / 2;\n    const sx = first + second || 1;\n    const sy = first - second || 1;\n    return [Math.sqrt(sx), Math.sqrt(sy)];\n  }\n\n  static normalizeRect(rect) {\n    const r = rect.slice(0);\n\n    if (rect[0] > rect[2]) {\n      r[0] = rect[2];\n      r[2] = rect[0];\n    }\n\n    if (rect[1] > rect[3]) {\n      r[1] = rect[3];\n      r[3] = rect[1];\n    }\n\n    return r;\n  }\n\n  static intersect(rect1, rect2) {\n    function compare(a, b) {\n      return a - b;\n    }\n\n    const orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);\n    const orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);\n    const result = [];\n    rect1 = Util.normalizeRect(rect1);\n    rect2 = Util.normalizeRect(rect2);\n\n    if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {\n      result[0] = orderedX[1];\n      result[2] = orderedX[2];\n    } else {\n      return null;\n    }\n\n    if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {\n      result[1] = orderedY[1];\n      result[3] = orderedY[2];\n    } else {\n      return null;\n    }\n\n    return result;\n  }\n\n}\n\nexports.Util = Util;\nconst PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2D8, 0x2C7, 0x2C6, 0x2D9, 0x2DD, 0x2DB, 0x2DA, 0x2DC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203A, 0x2212, 0x2030, 0x201E, 0x201C, 0x201D, 0x2018, 0x2019, 0x201A, 0x2122, 0xFB01, 0xFB02, 0x141, 0x152, 0x160, 0x178, 0x17D, 0x131, 0x142, 0x153, 0x161, 0x17E, 0, 0x20AC];\n\nfunction stringToPDFString(str) {\n  const length = str.length,\n        strBuf = [];\n\n  if (str[0] === "\\xFE" && str[1] === "\\xFF") {\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));\n    }\n  } else if (str[0] === "\\xFF" && str[1] === "\\xFE") {\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(String.fromCharCode(str.charCodeAt(i + 1) << 8 | str.charCodeAt(i)));\n    }\n  } else {\n    for (let i = 0; i < length; ++i) {\n      const code = PDFStringTranslateTable[str.charCodeAt(i)];\n      strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n    }\n  }\n\n  return strBuf.join("");\n}\n\nfunction escapeString(str) {\n  return str.replace(/([()\\\\\\n\\r])/g, match => {\n    if (match === "\\n") {\n      return "\\\\n";\n    } else if (match === "\\r") {\n      return "\\\\r";\n    }\n\n    return `\\\\${match}`;\n  });\n}\n\nfunction isAscii(str) {\n  return /^[\\x00-\\x7F]*$/.test(str);\n}\n\nfunction stringToUTF16BEString(str) {\n  const buf = ["\\xFE\\xFF"];\n\n  for (let i = 0, ii = str.length; i < ii; i++) {\n    const char = str.charCodeAt(i);\n    buf.push(String.fromCharCode(char >> 8 & 0xff));\n    buf.push(String.fromCharCode(char & 0xff));\n  }\n\n  return buf.join("");\n}\n\nfunction stringToUTF8String(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction utf8StringToString(str) {\n  return unescape(encodeURIComponent(str));\n}\n\nfunction isBool(v) {\n  return typeof v === "boolean";\n}\n\nfunction isNum(v) {\n  return typeof v === "number";\n}\n\nfunction isString(v) {\n  return typeof v === "string";\n}\n\nfunction isArrayBuffer(v) {\n  return typeof v === "object" && v !== null && v.byteLength !== undefined;\n}\n\nfunction isArrayEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  return arr1.every(function (element, index) {\n    return element === arr2[index];\n  });\n}\n\nfunction getModificationDate(date = new Date()) {\n  const buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, "0"), date.getUTCDate().toString().padStart(2, "0"), date.getUTCHours().toString().padStart(2, "0"), date.getUTCMinutes().toString().padStart(2, "0"), date.getUTCSeconds().toString().padStart(2, "0")];\n  return buffer.join("");\n}\n\nfunction createPromiseCapability() {\n  const capability = Object.create(null);\n  let isSettled = false;\n  Object.defineProperty(capability, "settled", {\n    get() {\n      return isSettled;\n    }\n\n  });\n  capability.promise = new Promise(function (resolve, reject) {\n    capability.resolve = function (data) {\n      isSettled = true;\n      resolve(data);\n    };\n\n    capability.reject = function (reason) {\n      isSettled = true;\n      reject(reason);\n    };\n  });\n  return capability;\n}\n\nconst createObjectURL = function createObjectURLClosure() {\n  const digits = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";\n  return function createObjectURL(data, contentType, forceDataSchema = false) {\n    if (!forceDataSchema && URL.createObjectURL) {\n      const blob = new Blob([data], {\n        type: contentType\n      });\n      return URL.createObjectURL(blob);\n    }\n\n    let buffer = `data:${contentType};base64,`;\n\n    for (let i = 0, ii = data.length; i < ii; i += 3) {\n      const b1 = data[i] & 0xff;\n      const b2 = data[i + 1] & 0xff;\n      const b3 = data[i + 2] & 0xff;\n      const d1 = b1 >> 2,\n            d2 = (b1 & 3) << 4 | b2 >> 4;\n      const d3 = i + 1 < ii ? (b2 & 0xf) << 2 | b3 >> 6 : 64;\n      const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n      buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n    }\n\n    return buffer;\n  };\n}();\n\nexports.createObjectURL = createObjectURL;\nconst XMLEntities = {\n  0x3c: "&lt;",\n  0x3e: "&gt;",\n  0x26: "&amp;",\n  0x22: "&quot;",\n  0x27: "&apos;"\n};\n\nfunction encodeToXmlString(str) {\n  const buffer = [];\n  let start = 0;\n\n  for (let i = 0, ii = str.length; i < ii; i++) {\n    const char = str.codePointAt(i);\n\n    if (0x20 <= char && char <= 0x7e) {\n      const entity = XMLEntities[char];\n\n      if (entity) {\n        if (start < i) {\n          buffer.push(str.substring(start, i));\n        }\n\n        buffer.push(entity);\n        start = i + 1;\n      }\n    } else {\n      if (start < i) {\n        buffer.push(str.substring(start, i));\n      }\n\n      buffer.push(`&#x${char.toString(16).toUpperCase()};`);\n\n      if (char > 0xd7ff && (char < 0xe000 || char > 0xfffd)) {\n        i++;\n      }\n\n      start = i + 1;\n    }\n  }\n\n  if (buffer.length === 0) {\n    return str;\n  }\n\n  if (start < str.length) {\n    buffer.push(str.substring(start, str.length));\n  }\n\n  return buffer.join("");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/shared/util.js\n')},"./node_modules/pdfjs-dist/lib/shared/xml_parser.js":function(__unused_webpack_module,exports,__webpack_require__){eval('/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.SimpleXMLParser = exports.SimpleDOMNode = void 0;\n\nvar _util = __webpack_require__(/*! ./util.js */ "./node_modules/pdfjs-dist/lib/shared/util.js");\n\nconst XMLParserErrorCode = {\n  NoError: 0,\n  EndOfDocument: -1,\n  UnterminatedCdat: -2,\n  UnterminatedXmlDeclaration: -3,\n  UnterminatedDoctypeDeclaration: -4,\n  UnterminatedComment: -5,\n  MalformedElement: -6,\n  OutOfMemory: -7,\n  UnterminatedAttributeValue: -8,\n  UnterminatedElement: -9,\n  ElementNeverBegun: -10\n};\n\nfunction isWhitespace(s, index) {\n  const ch = s[index];\n  return ch === " " || ch === "\\n" || ch === "\\r" || ch === "\\t";\n}\n\nfunction isWhitespaceString(s) {\n  for (let i = 0, ii = s.length; i < ii; i++) {\n    if (!isWhitespace(s, i)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nclass XMLParserBase {\n  _resolveEntities(s) {\n    return s.replace(/&([^;]+);/g, (all, entity) => {\n      if (entity.substring(0, 2) === "#x") {\n        return String.fromCodePoint(parseInt(entity.substring(2), 16));\n      } else if (entity.substring(0, 1) === "#") {\n        return String.fromCodePoint(parseInt(entity.substring(1), 10));\n      }\n\n      switch (entity) {\n        case "lt":\n          return "<";\n\n        case "gt":\n          return ">";\n\n        case "amp":\n          return "&";\n\n        case "quot":\n          return \'"\';\n      }\n\n      return this.onResolveEntity(entity);\n    });\n  }\n\n  _parseContent(s, start) {\n    const attributes = [];\n    let pos = start;\n\n    function skipWs() {\n      while (pos < s.length && isWhitespace(s, pos)) {\n        ++pos;\n      }\n    }\n\n    while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== ">" && s[pos] !== "/") {\n      ++pos;\n    }\n\n    const name = s.substring(start, pos);\n    skipWs();\n\n    while (pos < s.length && s[pos] !== ">" && s[pos] !== "/" && s[pos] !== "?") {\n      skipWs();\n      let attrName = "",\n          attrValue = "";\n\n      while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== "=") {\n        attrName += s[pos];\n        ++pos;\n      }\n\n      skipWs();\n\n      if (s[pos] !== "=") {\n        return null;\n      }\n\n      ++pos;\n      skipWs();\n      const attrEndChar = s[pos];\n\n      if (attrEndChar !== \'"\' && attrEndChar !== "\'") {\n        return null;\n      }\n\n      const attrEndIndex = s.indexOf(attrEndChar, ++pos);\n\n      if (attrEndIndex < 0) {\n        return null;\n      }\n\n      attrValue = s.substring(pos, attrEndIndex);\n      attributes.push({\n        name: attrName,\n        value: this._resolveEntities(attrValue)\n      });\n      pos = attrEndIndex + 1;\n      skipWs();\n    }\n\n    return {\n      name,\n      attributes,\n      parsed: pos - start\n    };\n  }\n\n  _parseProcessingInstruction(s, start) {\n    let pos = start;\n\n    function skipWs() {\n      while (pos < s.length && isWhitespace(s, pos)) {\n        ++pos;\n      }\n    }\n\n    while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== ">" && s[pos] !== "/") {\n      ++pos;\n    }\n\n    const name = s.substring(start, pos);\n    skipWs();\n    const attrStart = pos;\n\n    while (pos < s.length && (s[pos] !== "?" || s[pos + 1] !== ">")) {\n      ++pos;\n    }\n\n    const value = s.substring(attrStart, pos);\n    return {\n      name,\n      value,\n      parsed: pos - start\n    };\n  }\n\n  parseXml(s) {\n    let i = 0;\n\n    while (i < s.length) {\n      const ch = s[i];\n      let j = i;\n\n      if (ch === "<") {\n        ++j;\n        const ch2 = s[j];\n        let q;\n\n        switch (ch2) {\n          case "/":\n            ++j;\n            q = s.indexOf(">", j);\n\n            if (q < 0) {\n              this.onError(XMLParserErrorCode.UnterminatedElement);\n              return;\n            }\n\n            this.onEndElement(s.substring(j, q));\n            j = q + 1;\n            break;\n\n          case "?":\n            ++j;\n\n            const pi = this._parseProcessingInstruction(s, j);\n\n            if (s.substring(j + pi.parsed, j + pi.parsed + 2) !== "?>") {\n              this.onError(XMLParserErrorCode.UnterminatedXmlDeclaration);\n              return;\n            }\n\n            this.onPi(pi.name, pi.value);\n            j += pi.parsed + 2;\n            break;\n\n          case "!":\n            if (s.substring(j + 1, j + 3) === "--") {\n              q = s.indexOf("--\x3e", j + 3);\n\n              if (q < 0) {\n                this.onError(XMLParserErrorCode.UnterminatedComment);\n                return;\n              }\n\n              this.onComment(s.substring(j + 3, q));\n              j = q + 3;\n            } else if (s.substring(j + 1, j + 8) === "[CDATA[") {\n              q = s.indexOf("]]>", j + 8);\n\n              if (q < 0) {\n                this.onError(XMLParserErrorCode.UnterminatedCdat);\n                return;\n              }\n\n              this.onCdata(s.substring(j + 8, q));\n              j = q + 3;\n            } else if (s.substring(j + 1, j + 8) === "DOCTYPE") {\n              const q2 = s.indexOf("[", j + 8);\n              let complexDoctype = false;\n              q = s.indexOf(">", j + 8);\n\n              if (q < 0) {\n                this.onError(XMLParserErrorCode.UnterminatedDoctypeDeclaration);\n                return;\n              }\n\n              if (q2 > 0 && q > q2) {\n                q = s.indexOf("]>", j + 8);\n\n                if (q < 0) {\n                  this.onError(XMLParserErrorCode.UnterminatedDoctypeDeclaration);\n                  return;\n                }\n\n                complexDoctype = true;\n              }\n\n              const doctypeContent = s.substring(j + 8, q + (complexDoctype ? 1 : 0));\n              this.onDoctype(doctypeContent);\n              j = q + (complexDoctype ? 2 : 1);\n            } else {\n              this.onError(XMLParserErrorCode.MalformedElement);\n              return;\n            }\n\n            break;\n\n          default:\n            const content = this._parseContent(s, j);\n\n            if (content === null) {\n              this.onError(XMLParserErrorCode.MalformedElement);\n              return;\n            }\n\n            let isClosed = false;\n\n            if (s.substring(j + content.parsed, j + content.parsed + 2) === "/>") {\n              isClosed = true;\n            } else if (s.substring(j + content.parsed, j + content.parsed + 1) !== ">") {\n              this.onError(XMLParserErrorCode.UnterminatedElement);\n              return;\n            }\n\n            this.onBeginElement(content.name, content.attributes, isClosed);\n            j += content.parsed + (isClosed ? 2 : 1);\n            break;\n        }\n      } else {\n        while (j < s.length && s[j] !== "<") {\n          j++;\n        }\n\n        const text = s.substring(i, j);\n        this.onText(this._resolveEntities(text));\n      }\n\n      i = j;\n    }\n  }\n\n  onResolveEntity(name) {\n    return `&${name};`;\n  }\n\n  onPi(name, value) {}\n\n  onComment(text) {}\n\n  onCdata(text) {}\n\n  onDoctype(doctypeContent) {}\n\n  onText(text) {}\n\n  onBeginElement(name, attributes, isEmpty) {}\n\n  onEndElement(name) {}\n\n  onError(code) {}\n\n}\n\nclass SimpleDOMNode {\n  constructor(nodeName, nodeValue) {\n    this.nodeName = nodeName;\n    this.nodeValue = nodeValue;\n    Object.defineProperty(this, "parentNode", {\n      value: null,\n      writable: true\n    });\n  }\n\n  get firstChild() {\n    return this.childNodes && this.childNodes[0];\n  }\n\n  get nextSibling() {\n    const childNodes = this.parentNode.childNodes;\n\n    if (!childNodes) {\n      return undefined;\n    }\n\n    const index = childNodes.indexOf(this);\n\n    if (index === -1) {\n      return undefined;\n    }\n\n    return childNodes[index + 1];\n  }\n\n  get textContent() {\n    if (!this.childNodes) {\n      return this.nodeValue || "";\n    }\n\n    return this.childNodes.map(function (child) {\n      return child.textContent;\n    }).join("");\n  }\n\n  hasChildNodes() {\n    return this.childNodes && this.childNodes.length > 0;\n  }\n\n  searchNode(paths, pos) {\n    if (pos >= paths.length) {\n      return this;\n    }\n\n    const component = paths[pos];\n    const stack = [];\n    let node = this;\n\n    while (true) {\n      if (component.name === node.nodeName) {\n        if (component.pos === 0) {\n          const res = node.searchNode(paths, pos + 1);\n\n          if (res !== null) {\n            return res;\n          }\n        } else if (stack.length === 0) {\n          return null;\n        } else {\n          const [parent] = stack.pop();\n          let siblingPos = 0;\n\n          for (const child of parent.childNodes) {\n            if (component.name === child.nodeName) {\n              if (siblingPos === component.pos) {\n                return child.searchNode(paths, pos + 1);\n              }\n\n              siblingPos++;\n            }\n          }\n\n          return node.searchNode(paths, pos + 1);\n        }\n      }\n\n      if (node.childNodes && node.childNodes.length !== 0) {\n        stack.push([node, 0]);\n        node = node.childNodes[0];\n      } else if (stack.length === 0) {\n        return null;\n      } else {\n        while (stack.length !== 0) {\n          const [parent, currentPos] = stack.pop();\n          const newPos = currentPos + 1;\n\n          if (newPos < parent.childNodes.length) {\n            stack.push([parent, newPos]);\n            node = parent.childNodes[newPos];\n            break;\n          }\n        }\n\n        if (stack.length === 0) {\n          return null;\n        }\n      }\n    }\n  }\n\n  dump(buffer) {\n    if (this.nodeName === "#text") {\n      buffer.push((0, _util.encodeToXmlString)(this.nodeValue));\n      return;\n    }\n\n    buffer.push(`<${this.nodeName}`);\n\n    if (this.attributes) {\n      for (const attribute of this.attributes) {\n        buffer.push(` ${attribute.name}="${(0, _util.encodeToXmlString)(attribute.value)}"`);\n      }\n    }\n\n    if (this.hasChildNodes()) {\n      buffer.push(">");\n\n      for (const child of this.childNodes) {\n        child.dump(buffer);\n      }\n\n      buffer.push(`</${this.nodeName}>`);\n    } else if (this.nodeValue) {\n      buffer.push(`>${(0, _util.encodeToXmlString)(this.nodeValue)}</${this.nodeName}>`);\n    } else {\n      buffer.push("/>");\n    }\n  }\n\n}\n\nexports.SimpleDOMNode = SimpleDOMNode;\n\nclass SimpleXMLParser extends XMLParserBase {\n  constructor({\n    hasAttributes = false,\n    lowerCaseName = false\n  }) {\n    super();\n    this._currentFragment = null;\n    this._stack = null;\n    this._errorCode = XMLParserErrorCode.NoError;\n    this._hasAttributes = hasAttributes;\n    this._lowerCaseName = lowerCaseName;\n  }\n\n  parseFromString(data) {\n    this._currentFragment = [];\n    this._stack = [];\n    this._errorCode = XMLParserErrorCode.NoError;\n    this.parseXml(data);\n\n    if (this._errorCode !== XMLParserErrorCode.NoError) {\n      return undefined;\n    }\n\n    const [documentElement] = this._currentFragment;\n\n    if (!documentElement) {\n      return undefined;\n    }\n\n    return {\n      documentElement\n    };\n  }\n\n  onResolveEntity(name) {\n    switch (name) {\n      case "apos":\n        return "\'";\n    }\n\n    return super.onResolveEntity(name);\n  }\n\n  onText(text) {\n    if (isWhitespaceString(text)) {\n      return;\n    }\n\n    const node = new SimpleDOMNode("#text", text);\n\n    this._currentFragment.push(node);\n  }\n\n  onCdata(text) {\n    const node = new SimpleDOMNode("#text", text);\n\n    this._currentFragment.push(node);\n  }\n\n  onBeginElement(name, attributes, isEmpty) {\n    if (this._lowerCaseName) {\n      name = name.toLowerCase();\n    }\n\n    const node = new SimpleDOMNode(name);\n    node.childNodes = [];\n\n    if (this._hasAttributes) {\n      node.attributes = attributes;\n    }\n\n    this._currentFragment.push(node);\n\n    if (isEmpty) {\n      return;\n    }\n\n    this._stack.push(this._currentFragment);\n\n    this._currentFragment = node.childNodes;\n  }\n\n  onEndElement(name) {\n    this._currentFragment = this._stack.pop() || [];\n    const lastElement = this._currentFragment[this._currentFragment.length - 1];\n\n    if (!lastElement) {\n      return;\n    }\n\n    for (let i = 0, ii = lastElement.childNodes.length; i < ii; i++) {\n      lastElement.childNodes[i].parentNode = lastElement;\n    }\n  }\n\n  onError(code) {\n    this._errorCode = code;\n  }\n\n}\n\nexports.SimpleXMLParser = SimpleXMLParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pdfjs-dist/lib/shared/xml_parser.js\n')},"./src/main.scss":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_main_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js!./main.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/main.scss");\n\n            \n\nvar options = {};\n\noptions.insert = "head";\noptions.singleton = false;\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_main_scss__WEBPACK_IMPORTED_MODULE_1__.default, options);\n\n\n\n/* harmony default export */ __webpack_exports__["default"] = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_main_scss__WEBPACK_IMPORTED_MODULE_1__.default.locals || {});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWFpbi5zY3NzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vU2ltcGxlUGRmQW5hbHl6ZXIvLi9zcmMvbWFpbi5zY3NzPzRlNTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFwaSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWFpbi5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307Il0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main.scss\n')},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":function(module,__unused_webpack_exports,__webpack_require__){eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : 0;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && typeof btoa !== 'undefined') {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\n")},"./src/main.ts":function(__unused_webpack_module,exports,__webpack_require__){eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.a = exports.ValueType = exports.root = void 0;\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\n/* eslint-disable no-case-declarations */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n__webpack_require__(/*! ./main.scss */ "./src/main.scss");\nvar pdf_manager_1 = __webpack_require__(/*! pdfjs-dist/lib/core/pdf_manager */ "./node_modules/pdfjs-dist/lib/core/pdf_manager.js");\nvar primitives_1 = __webpack_require__(/*! pdfjs-dist/lib/core/primitives */ "./node_modules/pdfjs-dist/lib/core/primitives.js");\nvar Node = /** @class */ (function () {\n    function Node(name, value, depth) {\n        this.depth = depth;\n        this.type = getPdfValueType(value);\n        if (this.type === ValueType.REF) {\n            this.value = Node.xref.fetch(value);\n        }\n        else {\n            this.value = value;\n        }\n        this.type = getPdfValueType(this.value);\n        this.name = name;\n        this.hasChild = [\n            ValueType.DICT,\n            ValueType.STREAM,\n            ValueType.ARRAY,\n        ].includes(this.type);\n        console.log(this);\n    }\n    Node.registerXref = function (xref) {\n        Node.xref = xref;\n    };\n    Node.prototype.getChildren = function () {\n        var _this = this;\n        var children = [];\n        switch (this.type) {\n            case ValueType.DICT:\n            case ValueType.REF:\n                Object.entries(this.value._map).forEach(function (_a) {\n                    var key = _a[0], value = _a[1];\n                    return children.push(new Node(key, value, _this.depth + 1));\n                });\n                break;\n            case ValueType.ARRAY:\n                this.value.forEach(function (value, index) {\n                    children.push(new Node(index.toString(), value, _this.depth + 1));\n                });\n                break;\n        }\n        return children;\n    };\n    return Node;\n}());\nexports.root = document.getElementById(\'root\');\nvar ValueType;\n(function (ValueType) {\n    ValueType["DICT"] = "dict";\n    ValueType["STREAM"] = "stream";\n    ValueType["ARRAY"] = "array";\n    ValueType["REF"] = "ref";\n    ValueType["NAME"] = "name";\n    ValueType["NUM"] = "num";\n    ValueType["BOOL"] = "bool";\n    ValueType["STRING"] = "string";\n})(ValueType = exports.ValueType || (exports.ValueType = {}));\nfunction getPdfValueType(value) {\n    if (primitives_1.isDict(value)) {\n        return ValueType.DICT;\n    }\n    else if (primitives_1.isStream(value)) {\n        return ValueType.STREAM;\n    }\n    else if (Array.isArray(value)) {\n        return ValueType.ARRAY;\n    }\n    else if (primitives_1.isRef(value)) {\n        return ValueType.REF;\n    }\n    else if (primitives_1.isName(value)) {\n        return ValueType.NAME;\n    }\n    else if (typeof value === \'boolean\') {\n        return ValueType.BOOL;\n    }\n    else if (typeof value === \'string\') {\n        return ValueType.STRING;\n    }\n    else if (typeof value === \'number\') {\n        return ValueType.NUM;\n    }\n    else {\n        console.log(value);\n        throw new Error(\'Unresolvable value type!\');\n    }\n}\nfunction parseArrayBuffer(data) {\n    var pdfManager = new pdf_manager_1.LocalPdfManager(null, data).pdfDocument;\n    pdfManager.parseStartXRef();\n    pdfManager.parse();\n    var tree = pdfManager.xref.trailer;\n    return tree;\n}\nfunction isPdf(file) {\n    var splitted = file.name.split(\'.\');\n    return ((splitted[splitted.length - 1] || \'\').toLowerCase() === \'pdf\' &&\n        file.type === \'application/pdf\');\n}\nfunction fileToArrayBuffer(file) {\n    return new Promise(function (resolve) {\n        var reader = new FileReader();\n        reader.onload = function (e) {\n            var _a;\n            var buffer = (_a = e.target) === null || _a === void 0 ? void 0 : _a.result;\n            var uint8Array = new Uint8Array(buffer);\n            resolve(uint8Array);\n        };\n        reader.readAsArrayBuffer(file);\n    });\n}\nfunction getVisualName(node) {\n    return node.name + ", (" + node.type + "), " + node.value;\n}\nfunction createDom(parent, node) {\n    var $ul = document.createElement(\'ul\');\n    $ul.classList.add(node.depth % 2 ? \'even\' : \'odd\');\n    node.getChildren().forEach(function (node) {\n        var $li = document.createElement(\'li\');\n        $li.textContent = getVisualName(node);\n        $ul.append($li);\n        $li.addEventListener(\'click\', function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            if ($li.children.length) {\n                $li.innerHTML = getVisualName(node);\n            }\n            else {\n                createDom($li, node);\n            }\n        });\n    });\n    parent.append($ul);\n}\nexports.root.addEventListener(\'dragenter\', function (e) {\n    e.preventDefault();\n});\nexports.root.addEventListener(\'dragover\', function (e) {\n    e.preventDefault();\n});\nexports.root.addEventListener(\'drop\', function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.dataTransfer && isPdf(e.dataTransfer.files[0])) {\n        exports.root.innerHTML = \'\';\n        var file = e.dataTransfer.files[0];\n        fileToArrayBuffer(file)\n            .then(function (buffer) {\n            var dict = parseArrayBuffer(buffer);\n            Node.registerXref(dict.xref);\n            var node = new Node(\'root\', dict, -1);\n            createDom(exports.root, node);\n        })\n            .catch(function (e) {\n            console.error(e);\n        });\n    }\n});\nexports.a = 3;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main.ts\n')}},__webpack_module_cache__={};function __webpack_require__(I){var g=__webpack_module_cache__[I];if(void 0!==g)return g.exports;var C=__webpack_module_cache__[I]={id:I,exports:{}};return __webpack_modules__[I](C,C.exports,__webpack_require__),C.exports}__webpack_require__.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return __webpack_require__.d(g,{a:g}),g},__webpack_require__.d=function(I,g){for(var C in g)__webpack_require__.o(g,C)&&!__webpack_require__.o(I,C)&&Object.defineProperty(I,C,{enumerable:!0,get:g[C]})},__webpack_require__.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},__webpack_require__.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./src/main.ts");return __webpack_exports__}()}));